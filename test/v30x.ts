import assert from 'assert'
import { Callback, Components, Contact, Discriminator, Encoding, Example, ExternalDocumentation,
         Header, Info, License, Link, MediaType, OAuthFlow, OAuthFlows, OpenAPI, Operation,
         Parameter, Paths, PathItem, Reference, RequestBody, Response, Responses,
         Schema, SecurityRequirement, SecurityScheme, Server, ServerVariable, SpecificationExtensions,
         Tag, XML } from '../types/3.0.x'

describe('Callback', () => {
    it('should match schema1', () => {
        // Setup
        const schema: Callback = {
            "{$request.query.queryUrl}": {
              "post": {
                "requestBody": {
                  "description": "Callback payload",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/SomePayload"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "callback successfully processed"
                  }
                }
              }
            }
          }
        // Exercise and evaluate
        assert.ok(typeof schema === 'object')
    })
    it('should match schema2', () => {
        // Setup
        const schema: Callback =  {
            "http://notificationServer.com?transactionId={$request.body#/id}&email={$request.body#/email}": {
              "post": {
                "requestBody": {
                  "description": "Callback payload",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/SomePayload"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "callback successfully processed"
                  }
                }
              }
            }
          }
        // Exercise and evaluate
        assert.ok(typeof schema === 'object')
    })
})

describe('Components', () => {
    it('should match schema1', () => {
        // Setup
        const schema: Components = {
            "schemas": {
              "GeneralError": {
                "type": "object",
                "properties": {
                  "code": {
                    "type": "integer",
                    "format": "int32"
                  },
                  "message": {
                    "type": "string"
                  }
                }
              },
              "Category": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "integer",
                    "format": "int64"
                  },
                  "name": {
                    "type": "string"
                  }
                }
              },
              "Tag": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "integer",
                    "format": "int64"
                  },
                  "name": {
                    "type": "string"
                  }
                }
              }
            },
            "parameters": {
              "skipParam": {
                "name": "skip",
                "in": "query",
                "description": "number of items to skip",
                "required": true,
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              },
              "limitParam": {
                "name": "limit",
                "in": "query",
                "description": "max records to return",
                "required": true,
                "schema" : {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "responses": {
              "NotFound": {
                "description": "Entity not found."
              },
              "IllegalInput": {
                "description": "Illegal input for operation."
              },
              "GeneralError": {
                "description": "General Error",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/GeneralError"
                    }
                  }
                }
              }
            },
            "securitySchemes": {
              "api_key": {
                "type": "apiKey",
                "name": "api_key",
                "in": "header"
              },
              "petstore_auth": {
                "type": "oauth2",
                "flows": {
                  "implicit": {
                    "authorizationUrl": "https://example.org/api/oauth/dialog",
                    "scopes": {
                      "write:pets": "modify pets in your account",
                      "read:pets": "read your pets"
                    }
                  }
                }
              }
            }
          }
        // Exercise and evaluate
        assert.ok(typeof schema === 'object')
    })
})

describe('Contact', () => {
    it('should match schema1', () => {
        // Setup
        const schema: Contact = {
            "name": "API Support",
            "url": "https://www.example.com/support",
            "email": "support@example.com"
          }
        // Exercise and evaluate
        assert.ok(typeof schema === 'object')
    })
})

describe('Discriminator', () => {
    it('should match schema1', () => {
        // Setup
        const schema: Discriminator = {
            "propertyName": "petType",
            "mapping": {
              "dog": "#/components/schemas/Dog",
              "monster": "https://gigantic-server.com/schemas/Monster/schema.json"
            }
          }
        // Exercise and evaluate
        assert.ok(typeof schema === 'object')
    })
    it('should match schema2', () => {
        // Setup
        const schema: Discriminator = {
            "propertyName": "petType"
          }
        // Exercise and evaluate
        assert.ok(typeof schema === 'object')
    })
    it('should match schema3', () => {
        // Setup
        const schema: Discriminator = {
            "propertyName": "petType"
          }
        // Exercise and evaluate
        assert.ok(typeof schema === 'object')
    })
})

describe('Encoding', () => {
    it('should match schema1', () => {
        // Setup
        const schema: Encoding = {
            "contentType": "image/png, image/jpeg",
            "headers": {
              "X-Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "schema": {
                  "type": "integer"
                }
              }
            }
          }
        // Exercise and evaluate
        assert.ok(typeof schema === 'object')
    })
})

describe('Example', () => {
    it('should match schema1', () => {
        // Setup
        const schema: Example = {
            "summary": "This is an example in XML",
            "externalValue": "https://example.org/examples/address-example.xml"
          }
        // Exercise and evaluate
        assert.ok(typeof schema === 'object')
    })
    it('should match schema2', () => {
        // Setup
        const schema: Example = {
            "$ref": "#/components/examples/confirmation-success"
          }
        // Exercise and evaluate
        assert.ok(typeof schema === 'object')
    })
})

describe('ExternalDocumentation', () => {
    it('should match schema1', () => {
        // Setup
        const schema: ExternalDocumentation = {
            "description": "Find more info here",
            "url": "https://example.com"
          }
        // Exercise and evaluate
        assert.ok(typeof schema === 'object')
    })
})

describe('Header', () => {
    it('should match schema1', () => {
        // Setup
        const schema: Header = {
            "description": "The number of allowed requests in the current period",
            "schema": {
              "type": "integer"
            }
          }
        // Exercise and evaluate
        assert.ok(typeof schema === 'object')
    })
})

describe('Info', () => {
    it('should match schema1', () => {
        // Setup
        const schema: Info = {
          "title": "Sample Pet Store App",
          "description": "This is a sample server for a pet store.",
          "termsOfService": "http://example.com/terms/",
          "contact": {
            "name": "API Support",
            "url": "http://www.example.com/support",
            "email": "support@example.com"
          },
          "license": {
            "name": "Apache 2.0",
            "url": "https://www.apache.org/licenses/LICENSE-2.0.html"
          },
          "version": "1.0.1"
        }
        // Exercise and evaluate
        assert.ok(typeof schema === 'object')
    })
})

describe('License', () => {
    it('should match schema1', () => {
        // Setup
        const schema: License = {
          "name": "Apache 2.0",
          "url": "https://www.apache.org/licenses/LICENSE-2.0.html"
        }
        // Exercise and evaluate
        assert.ok(typeof schema === 'object')
    })
})

describe('Link', () => {
    it('should match schema1', () => {
        // Setup
        const schema: Link = {
            "operationId": "getUserAddress",
            "parameters": {
              "userId": "$request.path.id"
            }
          }
        // Exercise and evaluate
        assert.ok(typeof schema === 'object')
    })
})

describe('MediaType', () => {
    it('should match schema1', () => {
        // Setup
        const schema: MediaType = {
            "schema": {
                 "$ref": "#/components/schemas/Pet"
            },
            "examples": {
              "cat" : {
                "summary": "An example of a cat",
                "value": 
                  {
                    "name": "Fluffy",
                    "petType": "Cat",
                    "color": "White",
                    "gender": "male",
                    "breed": "Persian"
                  }
              },
              "dog": {
                "summary": "An example of a dog with a cat's name",
                "value" :  { 
                  "name": "Puma",
                  "petType": "Dog",
                  "color": "Black",
                  "gender": "Female",
                  "breed": "Mixed"
                }
              },
              "frog": {
                  "$ref": "#/components/examples/frog-example"
                }
              } 
        }
        // Exercise and evaluate
        assert.ok(typeof schema === 'object')
    })
})

describe('OAuthFlow', () => {
    it('should match schema1', () => {
        // Setup
        const schema: OAuthFlow = {
            "authorizationUrl": "https://example.com/api/oauth/dialog",
            "scopes": {
              "write:pets": "modify pets in your account",
              "read:pets": "read your pets"
            }
        }
        // Exercise and evaluate
        assert.ok(typeof schema === 'object')
    })
    it('should match schema2', () => {
        // Setup
        const schema: OAuthFlow = {
            "authorizationUrl": "https://example.com/api/oauth/dialog",
            "tokenUrl": "https://example.com/api/oauth/token",
            "scopes": {
              "write:pets": "modify pets in your account",
              "read:pets": "read your pets"
            }
          }
        // Exercise and evaluate
        assert.ok(typeof schema === 'object')
    })
})

describe('OAuthFlows', () => {
    it('should match schema1', () => {
        // Setup
        const schema: OAuthFlows = {}
        // Exercise and evaluate
        assert.ok(typeof schema === 'object')
    })
})

describe('Operation', () => {
    it('should match schema1', () => {
        // Setup
        const schema: Operation = {
            "tags": [
              "pet"
            ],
            "summary": "Updates a pet in the store with form data",
            "operationId": "updatePetWithForm",
            "parameters": [
              {
                "name": "petId",
                "in": "path",
                "description": "ID of pet that needs to be updated",
                "required": true,
                "schema": {
                  "type": "string"
                }
              }
            ],
            "requestBody": {
              "content": {
                "application/x-www-form-urlencoded": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "name": { 
                        "description": "Updated name of the pet",
                        "type": "string"
                      },
                      "status": {
                        "description": "Updated status of the pet",
                        "type": "string"
                      }
                    },
                    "required": ["status"] 
                  }
                }
              }
            },
            "responses": {
              "200": {
                "description": "Pet updated.",
                "content": {
                  "application/json": {},
                  "application/xml": {}
                }
              },
              "405": {
                "description": "Method Not Allowed",
                "content": {
                  "application/json": {},
                  "application/xml": {}
                }
              }
            },
            "security": [
              {
                "petstore_auth": [
                  "write:pets",
                  "read:pets"
                ]
              }
            ]
          }
        // Exercise and evaluate
        assert.ok(typeof schema === 'object')
    })
})

describe('Parameter', () => {
    it('should match schema1', () => {
        // Setup
        const schema: Parameter = {
            "name": "token",
            "in": "header",
            "description": "token to be passed as a header",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            },
            "style": "simple"
          }
        // Exercise and evaluate
        assert.ok(typeof schema === 'object')
    })
    it('should match schema2', () => {
        // Setup
        const schema: Parameter = {
            "name": "username",
            "in": "path",
            "description": "username to fetch",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        // Exercise and evaluate
        assert.ok(typeof schema === 'object')
    })
    it('should match schema3', () => {
        // Setup
        const schema: Parameter = {
            "name": "id",
            "in": "query",
            "description": "ID of the object to fetch",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          }
        // Exercise and evaluate
        assert.ok(typeof schema === 'object')
    })
    it('should match schema4', () => {
        // Setup
        const schema: Parameter = {
            "in": "query",
            "name": "freeForm",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "integer"
              },
            },
            "style": "form"
          }
        // Exercise and evaluate
        assert.ok(typeof schema === 'object')
    })
    it('should match schema5', () => {
        // Setup
        const schema: Parameter = {
            "in": "query",
            "name": "coordinates",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "lat",
                    "long"
                  ],
                  "properties": {
                    "lat": {
                      "type": "number"
                    },
                    "long": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          }
        // Exercise and evaluate
        assert.ok(typeof schema === 'object')
    })
})

describe('Paths', () => {
    it('should match schema1', () => {
        // Setup
        const schema: Paths = {
            "/pets": {
              "get": {
                "description": "Returns all pets from the system that the user has access to",
                "responses": {
                  "200": {          
                    "description": "A list of pets.",
                    "content": {
                      "application/json": {
                        "schema": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/pet"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        // Exercise and evaluate
        assert.ok(typeof schema === 'object')
    })
})

describe('PathItem', () => {
    it('should match schema1', () => {
        // Setup
        const schema: PathItem = {
            "get": {
              "description": "Returns pets based on ID",
              "summary": "Find pets by ID",
              "operationId": "getPetsById",
              "responses": {
                "200": {
                  "description": "pet response",
                  "content": {
                    "*/*": {
                      "schema": {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/Pet"
                        }
                      }
                    }
                  }
                },
                "default": {
                  "description": "error payload",
                  "content": {
                    "text/html": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorModel"
                      }
                    }
                  }
                }
              }
            },
            "parameters": [
              {
                "name": "id",
                "in": "path",
                "description": "ID of pet to use",
                "required": true,
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "style": "simple"
              }
            ]
          }
        // Exercise and evaluate
        assert.ok(typeof schema === 'object')
    })
})

describe('Reference', () => {
    it('should match schema1', () => {
        // Setup
        const schema: Reference = {
            "$ref": "#/components/schemas/Pet"
        }
        // Exercise and evaluate
        assert.ok(typeof schema === 'object')
    })
    it('should match schema2', () => {
        // Setup
        const schema: Reference = {
            "$ref": "Pet.json"
          }
        // Exercise and evaluate
        assert.ok(typeof schema === 'object')
    })
})

describe('RequestBody', () => {
    it('should match schema1', () => {
        // Setup
        const schema: RequestBody = {
            "description": "user to add to the system",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                },
                "examples": {
                    "user" : {
                      "summary": "User Example", 
                      "externalValue": "http://foo.bar/examples/user-example.json"
                    } 
                  }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                },
                "examples": {
                    "user" : {
                      "summary": "User example in XML",
                      "externalValue": "http://foo.bar/examples/user-example.xml"
                    }
                  }
              },
              "text/plain": {
                "examples": {
                  "user" : {
                      "summary": "User example in Plain text",
                      "externalValue": "http://foo.bar/examples/user-example.txt" 
                  }
                } 
              },
              "*/*": {
                "examples": {
                  "user" : {
                      "summary": "User example in other format",
                      "externalValue": "http://foo.bar/examples/user-example.whatever"
                  }
                }
              }
            }
          }
        // Exercise and evaluate
        assert.ok(typeof schema === 'object')
    })
    it('should match schema2', () => {
        // Setup
        const schema: RequestBody = {
            "description": "user to add to the system",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        // Exercise and evaluate
        assert.ok(typeof schema === 'object')
    })
})

describe('Response', () => {
    it('should match schema1', () => {
        // Setup
        const schema: Response = {
            "description": "A complex object array response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/VeryComplexType"
                  }
                }
              }
            }
          }
        // Exercise and evaluate
        assert.ok(typeof schema === 'object')
    })
    it('should match schema2', () => {
        // Setup
        const schema: Response = {
            "description": "A simple string response",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          
          }
        // Exercise and evaluate
        assert.ok(typeof schema === 'object')
    })
    it('should match schema3', () => {
        // Setup
        const schema: Response = {
            "description": "A simple string response",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "example": "whoa!"
                }
              }
            },
            "headers": {
              "X-Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "schema": {
                  "type": "integer"
                }
              },
              "X-Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "schema": {
                  "type": "integer"
                }
              },
              "X-Rate-Limit-Reset": {
                "description": "The number of seconds left in the current period",
                "schema": {
                  "type": "integer"
                }
              }
            }
          }
        // Exercise and evaluate
        assert.ok(typeof schema === 'object')
    })
    it('should match schema4', () => {
        // Setup
        const schema: Response = {
            "description": "object created"
          }
        // Exercise and evaluate
        assert.ok(typeof schema === 'object')
    })
})

describe('Responses', () => {
    it('should match schema1', () => {
        // Setup
        const schema: Responses = {
            "200": {
              "description": "a pet to be returned",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Pet"
                  }
                }
              }
            },
            "default": {
              "description": "Unexpected error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorModel"
                  }
                }
              }
            }
          }
        // Exercise and evaluate
        assert.ok(typeof schema === 'object')
    })
})

describe('Schema', () => {
    it('should match schema1', () => {
        // Setup
        const schema: Schema = {
            "type": "string",
            "format": "email"
          }
        // Exercise and evaluate
        assert.ok(typeof schema === 'object')
    })
    it('should match schema2', () => {
        // Setup
        const schema: Schema = {
            type: "object",
            "required": [
              "name"
            ],
            "properties": {
              "name": {
                "type": "string"
              },
              "address": {
                "$ref": "#/components/schemas/Address"
              },
              "age": {
                "type": "integer",
                "format": "int32",
                "minimum": 0
              }
            }
          }
        // Exercise and evaluate
        assert.ok(typeof schema === 'object')
    })
    it('should match schema2', () => {
        // Setup
        const schema: Schema = {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        // Exercise and evaluate
        assert.ok(typeof schema === 'object')
    })
    it('should match schema3', () => {
        // Setup
        const schema: Schema = {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ComplexModel"
            }
          }
        // Exercise and evaluate
        assert.ok(typeof schema === 'object')
    })
    it('should match schema4', () => {
        // Setup
        const schema: Schema = {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "format": "int64"
              },
              "name": {
                "type": "string"
              }
            },
            "required": [
              "name"
            ],
            "example": {
              "name": "Puma",
              "id": 1
            }
          }
        // Exercise and evaluate
        assert.ok(typeof schema === 'object')
    })
    it('should match schema5', () => {
        // Setup
        const schema: Schema = {
            "type": "object",
            "required": [
              "message",
              "code"
            ],
            "properties": {
              "message": {
                "type": "string"
              },
              "code": {
                "type": "integer",
                "minimum": 100,
                "maximum": 600
              }
            }
          }
        // Exercise and evaluate
        assert.ok(typeof schema === 'object')
    })
    it('should match schema6', () => {
        // Setup
        const schema: Schema = {
            "allOf": [
              {
                "$ref": "#/components/schemas/ErrorModel"
              },
              {
                "type": "object",
                "required": [
                  "rootCause"
                ],
                "properties": {
                  "rootCause": {
                    "type": "string"
                  }
                }
              }
            ]
          }
        // Exercise and evaluate
        assert.ok(typeof schema === 'object')
    })
    it('should match schema7', () => {
        // Setup
        const schema: Schema = {
            "type": "object",
            "discriminator": {
              "propertyName": "petType"
            },
            "properties": {
              "name": {
                "type": "string"
              },
              "petType": {
                "type": "string"
              }
            },
            "required": [
              "name",
              "petType"
            ]
          }
        // Exercise and evaluate
        assert.ok(typeof schema === 'object')
    })
    it('should match schema8', () => {
        // Setup
        const schema: Schema = {
            "description": "A representation of a cat. Note that `Cat` will be used as the discriminator value.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Pet"
              },
              {
                "type": "object",
                "properties": {
                  "huntingSkill": {
                    "type": "string",
                    "description": "The measured skill for hunting",
                    "default": "lazy",
                    "enum": [
                      "clueless",
                      "lazy",
                      "adventurous",
                      "aggressive"
                    ]
                  }
                },
                "required": [
                  "huntingSkill"
                ]
              }
            ]
          }
        // Exercise and evaluate
        assert.ok(typeof schema === 'object')
    })
    it('should match schema9', () => {
        // Setup
        const schema: Schema = {
            "description": "A representation of a dog. Note that `Dog` will be used as the discriminator value.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Pet"
              },
              {
                "type": "object",
                "properties": {
                  "packSize": {
                    "type": "integer",
                    "format": "int32",
                    "description": "the size of the pack the dog is from",
                    "default": 0,
                    "minimum": 0
                  }
                },
                "required": [
                  "packSize"
                ]
              }
            ]
          }
        // Exercise and evaluate
        assert.ok(typeof schema === 'object')
    })
})

describe('SecurityRequirement', () => {
    it('should match schema1', () => {
        // Setup
        const schema: SecurityRequirement = {
            "api_key": []
          }
        // Exercise and evaluate
        assert.ok(typeof schema === 'object')
    })
})

describe('SecurityScheme', () => {
    it('should match schema1', () => {
        // Setup
        const schema: SecurityScheme = {
            "type": "http",
            "scheme": "basic"
          }
        // Exercise and evaluate
        assert.ok(typeof schema === 'object')
    })
    it('should match schema2', () => {
        // Setup
        const schema: SecurityScheme = {
            "type": "apiKey",
            "name": "api_key",
            "in": "header"
          }
        // Exercise and evaluate
        assert.ok(typeof schema === 'object')
    })
    it('should match schema3', () => {
        // Setup
        const schema: SecurityScheme = {
            "type": "http",
            "scheme": "bearer",
            "bearerFormat": "JWT",
          }
        // Exercise and evaluate
        assert.ok(typeof schema === 'object')
    })
    it('should match schema4', () => {
        // Setup
        const schema: SecurityScheme = {
            "type": "oauth2",
            "flows": {
              "implicit": {
                "authorizationUrl": "https://example.com/api/oauth/dialog",
                "scopes": {
                  "write:pets": "modify pets in your account",
                  "read:pets": "read your pets"
                }
              }
            }
          }
        // Exercise and evaluate
        assert.ok(typeof schema === 'object')
    })
})

describe('Server', () => {
    it('should match schema1', () => {
        // Setup
        const schema: Server = {
            "url": "https://development.gigantic-server.com/v1",
            "description": "Development server"
          }
        // Exercise and evaluate
        assert.ok(typeof schema === 'object')
    })
    it('should match schema2', () => {
        // Setup
        const schema: Server = {
            "url": "https://{username}.gigantic-server.com:{port}/{basePath}",
            "description": "The production API server",
            "variables": {
              "username": {
                "default": "demo",
                "description": "this value is assigned by the service provider, in this example `gigantic-server.com`"
              },
              "port": {
                "enum": [
                  "8443",
                  "443"
                ],
                "default": "8443"
              },
              "basePath": {
                "default": "v2"
              }
            }
          }
        // Exercise and evaluate
        assert.ok(typeof schema === 'object')
    })
})

describe('ServerVariable', () => {
    it('should match schema1', () => {
        // Setup
        const schema: ServerVariable = {
            enum: ['a', 'b', 'c'],
            default: 'b',
            description: 'a'
        }
        // Exercise and evaluate
        assert.ok(typeof schema === 'object')
    })
})

describe('SpecificationExtensions', () => {
    it('should match schema1', () => {
        // Setup
        const schema: SpecificationExtensions = {
            ffg: 45,
            fh: true
        }
        // Exercise and evaluate
        assert.ok(typeof schema === 'object')
    })
})

describe('Tag', () => {
    it('should match schema1', () => {
        // Setup
        const schema: Tag = {
            "name": "pet",
            "description": "Pets operations"
        }
        // Exercise and evaluate
        assert.ok(typeof schema === 'object')
    })
})

describe('XML', () => {
    it('should match schema1', () => {
        // Setup
        const schema: XML = {
            "name": "animal"
          }
        // Exercise and evaluate
        assert.ok(typeof schema === 'object')
    })
    it('should match schema2', () => {
        // Setup
        const schema: XML = {
            "attribute": true
          }
        // Exercise and evaluate
        assert.ok(typeof schema === 'object')
    })
    it('should match schema3', () => {
        // Setup
        const schema: XML = {
            "namespace": "https://example.com/schema/sample",
            "prefix": "sample"
          }
        // Exercise and evaluate
        assert.ok(typeof schema === 'object')
    })
    it('should match schema4', () => {
        // Setup
        const schema: XML = {
            "wrapped": true
          }
        // Exercise and evaluate
        assert.ok(typeof schema === 'object')
    })
    it('should match schema5', () => {
        // Setup
        const schema: XML = {
            "name": "aliens",
            "wrapped": true
          }
        // Exercise and evaluate
        assert.ok(typeof schema === 'object')
    })
})

describe('OpenAPI', () => {
    it('should match schema1', () => {
        // Setup
        const schema: OpenAPI = {
          "openapi": "3.0.0",
          "info": {
            "version": "2017-05-31",
            "x-release": "v4",
            "title": "AWS Migration Hub",
            "description": "<p>The AWS Migration Hub API methods help to obtain server and application migration status and integrate your resource-specific migration tool by providing a programmatic interface to Migration Hub.</p> <p>Remember that you must set your AWS Migration Hub home region before you call any of these APIs, or a <code>HomeRegionNotSetException</code> error will be returned. Also, you must make the API calls while in your home region.</p>",
            "x-logo": {
              "url": "https://api.apis.guru/v2/cache/logo/https_twitter.com_awscloud_profile_image.png",
              "backgroundColor": "#FFFFFF"
            },
            "termsOfService": "https://aws.amazon.com/service-terms/",
            "contact": {
              "name": "Mike Ralphson",
              "email": "mike.ralphson@gmail.com",
              "url": "https://github.com/mermade/aws2openapi",
              "x-twitter": "PermittedSoc"
            },
            "license": {
              "name": "Apache 2.0 License",
              "url": "http://www.apache.org/licenses/"
            },
            "x-providerName": "amazonaws.com",
            "x-serviceName": "AWSMigrationHub",
            "x-origin": [
              {
                "contentType": "application/json",
                "url": "https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/AWSMigrationHub-2017-05-31.normal.json",
                "converter": {
                  "url": "https://github.com/mermade/aws2openapi",
                  "version": "1.0.0"
                },
                "x-apisguru-driver": "external"
              }
            ],
            "x-apiClientRegistration": {
              "url": "https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct"
            },
            "x-apisguru-categories": [
              "cloud"
            ],
            "x-preferred": true
          },
          "externalDocs": {
            "description": "Amazon Web Services documentation",
            "url": "https://docs.aws.amazon.com/mgh/"
          },
          "servers": [
            {
              "url": "http://mgh.{region}.amazonaws.com",
              "variables": {
                "region": {
                  "description": "The AWS region",
                  "enum": [
                    "us-east-1",
                    "us-east-2",
                    "us-west-1",
                    "us-west-2",
                    "us-gov-west-1",
                    "us-gov-east-1",
                    "ca-central-1",
                    "eu-north-1",
                    "eu-west-1",
                    "eu-west-2",
                    "eu-west-3",
                    "eu-central-1",
                    "eu-south-1",
                    "af-south-1",
                    "ap-northeast-1",
                    "ap-northeast-2",
                    "ap-northeast-3",
                    "ap-southeast-1",
                    "ap-southeast-2",
                    "ap-east-1",
                    "ap-south-1",
                    "sa-east-1",
                    "me-south-1"
                  ],
                  "default": "us-east-1"
                }
              },
              "description": "The AWS Migration Hub multi-region endpoint"
            },
            {
              "url": "https://mgh.{region}.amazonaws.com",
              "variables": {
                "region": {
                  "description": "The AWS region",
                  "enum": [
                    "us-east-1",
                    "us-east-2",
                    "us-west-1",
                    "us-west-2",
                    "us-gov-west-1",
                    "us-gov-east-1",
                    "ca-central-1",
                    "eu-north-1",
                    "eu-west-1",
                    "eu-west-2",
                    "eu-west-3",
                    "eu-central-1",
                    "eu-south-1",
                    "af-south-1",
                    "ap-northeast-1",
                    "ap-northeast-2",
                    "ap-northeast-3",
                    "ap-southeast-1",
                    "ap-southeast-2",
                    "ap-east-1",
                    "ap-south-1",
                    "sa-east-1",
                    "me-south-1"
                  ],
                  "default": "us-east-1"
                }
              },
              "description": "The AWS Migration Hub multi-region endpoint"
            },
            {
              "url": "http://mgh.{region}.amazonaws.com.cn",
              "variables": {
                "region": {
                  "description": "The AWS region",
                  "enum": [
                    "cn-north-1",
                    "cn-northwest-1"
                  ],
                  "default": "cn-north-1"
                }
              },
              "description": "The AWS Migration Hub endpoint for China (Beijing) and China (Ningxia)"
            },
            {
              "url": "https://mgh.{region}.amazonaws.com.cn",
              "variables": {
                "region": {
                  "description": "The AWS region",
                  "enum": [
                    "cn-north-1",
                    "cn-northwest-1"
                  ],
                  "default": "cn-north-1"
                }
              },
              "description": "The AWS Migration Hub endpoint for China (Beijing) and China (Ningxia)"
            }
          ],
          "x-hasEquivalentPaths": true,
          "paths": {
            "/#X-Amz-Target=AWSMigrationHub.AssociateCreatedArtifact": {
              "post": {
                "operationId": "AssociateCreatedArtifact",
                "description": "<p>Associates a created artifact of an AWS cloud resource, the target receiving the migration, with the migration task performed by a migration tool. This API has the following traits:</p> <ul> <li> <p>Migration tools can call the <code>AssociateCreatedArtifact</code> operation to indicate which AWS artifact is associated with a migration task.</p> </li> <li> <p>The created artifact name must be provided in ARN (Amazon Resource Name) format which will contain information about type and region; for example: <code>arn:aws:ec2:us-east-1:488216288981:image/ami-6d0ba87b</code>.</p> </li> <li> <p>Examples of the AWS resource behind the created artifact are, AMI's, EC2 instance, or DMS endpoint, etc.</p> </li> </ul>",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/AssociateCreatedArtifactResult"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "AccessDeniedException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/AccessDeniedException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "ThrottlingException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ThrottlingException"
                        }
                      }
                    }
                  },
                  "482": {
                    "description": "InternalServerError",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InternalServerError"
                        }
                      }
                    }
                  },
                  "483": {
                    "description": "ServiceUnavailableException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ServiceUnavailableException"
                        }
                      }
                    }
                  },
                  "484": {
                    "description": "DryRunOperation",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/DryRunOperation"
                        }
                      }
                    }
                  },
                  "485": {
                    "description": "UnauthorizedOperation",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/UnauthorizedOperation"
                        }
                      }
                    }
                  },
                  "486": {
                    "description": "InvalidInputException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InvalidInputException"
                        }
                      }
                    }
                  },
                  "487": {
                    "description": "ResourceNotFoundException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ResourceNotFoundException"
                        }
                      }
                    }
                  },
                  "488": {
                    "description": "HomeRegionNotSetException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/HomeRegionNotSetException"
                        }
                      }
                    }
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/AssociateCreatedArtifactRequest"
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "X-Amz-Target",
                    "in": "header",
                    "required": true,
                    "schema": {
                      "type": "string",
                      "enum": [
                        "AWSMigrationHub.AssociateCreatedArtifact"
                      ]
                    }
                  }
                ]
              },
              "parameters": [
                {
                  "$ref": "#/components/parameters/X-Amz-Content-Sha256"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Date"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Algorithm"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Credential"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Security-Token"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Signature"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-SignedHeaders"
                }
              ]
            },
            "/#X-Amz-Target=AWSMigrationHub.AssociateDiscoveredResource": {
              "post": {
                "operationId": "AssociateDiscoveredResource",
                "description": "Associates a discovered resource ID from Application Discovery Service with a migration task.",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/AssociateDiscoveredResourceResult"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "AccessDeniedException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/AccessDeniedException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "ThrottlingException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ThrottlingException"
                        }
                      }
                    }
                  },
                  "482": {
                    "description": "InternalServerError",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InternalServerError"
                        }
                      }
                    }
                  },
                  "483": {
                    "description": "ServiceUnavailableException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ServiceUnavailableException"
                        }
                      }
                    }
                  },
                  "484": {
                    "description": "DryRunOperation",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/DryRunOperation"
                        }
                      }
                    }
                  },
                  "485": {
                    "description": "UnauthorizedOperation",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/UnauthorizedOperation"
                        }
                      }
                    }
                  },
                  "486": {
                    "description": "InvalidInputException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InvalidInputException"
                        }
                      }
                    }
                  },
                  "487": {
                    "description": "PolicyErrorException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/PolicyErrorException"
                        }
                      }
                    }
                  },
                  "488": {
                    "description": "ResourceNotFoundException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ResourceNotFoundException"
                        }
                      }
                    }
                  },
                  "489": {
                    "description": "HomeRegionNotSetException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/HomeRegionNotSetException"
                        }
                      }
                    }
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/AssociateDiscoveredResourceRequest"
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "X-Amz-Target",
                    "in": "header",
                    "required": true,
                    "schema": {
                      "type": "string",
                      "enum": [
                        "AWSMigrationHub.AssociateDiscoveredResource"
                      ]
                    }
                  }
                ]
              },
              "parameters": [
                {
                  "$ref": "#/components/parameters/X-Amz-Content-Sha256"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Date"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Algorithm"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Credential"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Security-Token"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Signature"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-SignedHeaders"
                }
              ]
            },
            "/#X-Amz-Target=AWSMigrationHub.CreateProgressUpdateStream": {
              "post": {
                "operationId": "CreateProgressUpdateStream",
                "description": "Creates a progress update stream which is an AWS resource used for access control as well as a namespace for migration task names that is implicitly linked to your AWS account. It must uniquely identify the migration tool as it is used for all updates made by the tool; however, it does not need to be unique for each AWS account because it is scoped to the AWS account.",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/CreateProgressUpdateStreamResult"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "AccessDeniedException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/AccessDeniedException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "ThrottlingException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ThrottlingException"
                        }
                      }
                    }
                  },
                  "482": {
                    "description": "InternalServerError",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InternalServerError"
                        }
                      }
                    }
                  },
                  "483": {
                    "description": "ServiceUnavailableException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ServiceUnavailableException"
                        }
                      }
                    }
                  },
                  "484": {
                    "description": "DryRunOperation",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/DryRunOperation"
                        }
                      }
                    }
                  },
                  "485": {
                    "description": "UnauthorizedOperation",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/UnauthorizedOperation"
                        }
                      }
                    }
                  },
                  "486": {
                    "description": "InvalidInputException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InvalidInputException"
                        }
                      }
                    }
                  },
                  "487": {
                    "description": "HomeRegionNotSetException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/HomeRegionNotSetException"
                        }
                      }
                    }
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CreateProgressUpdateStreamRequest"
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "X-Amz-Target",
                    "in": "header",
                    "required": true,
                    "schema": {
                      "type": "string",
                      "enum": [
                        "AWSMigrationHub.CreateProgressUpdateStream"
                      ]
                    }
                  }
                ]
              },
              "parameters": [
                {
                  "$ref": "#/components/parameters/X-Amz-Content-Sha256"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Date"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Algorithm"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Credential"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Security-Token"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Signature"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-SignedHeaders"
                }
              ]
            },
            "/#X-Amz-Target=AWSMigrationHub.DeleteProgressUpdateStream": {
              "post": {
                "operationId": "DeleteProgressUpdateStream",
                "description": "<p>Deletes a progress update stream, including all of its tasks, which was previously created as an AWS resource used for access control. This API has the following traits:</p> <ul> <li> <p>The only parameter needed for <code>DeleteProgressUpdateStream</code> is the stream name (same as a <code>CreateProgressUpdateStream</code> call).</p> </li> <li> <p>The call will return, and a background process will asynchronously delete the stream and all of its resources (tasks, associated resources, resource attributes, created artifacts).</p> </li> <li> <p>If the stream takes time to be deleted, it might still show up on a <code>ListProgressUpdateStreams</code> call.</p> </li> <li> <p> <code>CreateProgressUpdateStream</code>, <code>ImportMigrationTask</code>, <code>NotifyMigrationTaskState</code>, and all Associate[*] APIs related to the tasks belonging to the stream will throw \"InvalidInputException\" if the stream of the same name is in the process of being deleted.</p> </li> <li> <p>Once the stream and all of its resources are deleted, <code>CreateProgressUpdateStream</code> for a stream of the same name will succeed, and that stream will be an entirely new logical resource (without any resources associated with the old stream).</p> </li> </ul>",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/DeleteProgressUpdateStreamResult"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "AccessDeniedException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/AccessDeniedException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "ThrottlingException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ThrottlingException"
                        }
                      }
                    }
                  },
                  "482": {
                    "description": "InternalServerError",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InternalServerError"
                        }
                      }
                    }
                  },
                  "483": {
                    "description": "ServiceUnavailableException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ServiceUnavailableException"
                        }
                      }
                    }
                  },
                  "484": {
                    "description": "DryRunOperation",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/DryRunOperation"
                        }
                      }
                    }
                  },
                  "485": {
                    "description": "UnauthorizedOperation",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/UnauthorizedOperation"
                        }
                      }
                    }
                  },
                  "486": {
                    "description": "InvalidInputException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InvalidInputException"
                        }
                      }
                    }
                  },
                  "487": {
                    "description": "ResourceNotFoundException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ResourceNotFoundException"
                        }
                      }
                    }
                  },
                  "488": {
                    "description": "HomeRegionNotSetException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/HomeRegionNotSetException"
                        }
                      }
                    }
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/DeleteProgressUpdateStreamRequest"
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "X-Amz-Target",
                    "in": "header",
                    "required": true,
                    "schema": {
                      "type": "string",
                      "enum": [
                        "AWSMigrationHub.DeleteProgressUpdateStream"
                      ]
                    }
                  }
                ]
              },
              "parameters": [
                {
                  "$ref": "#/components/parameters/X-Amz-Content-Sha256"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Date"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Algorithm"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Credential"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Security-Token"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Signature"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-SignedHeaders"
                }
              ]
            },
            "/#X-Amz-Target=AWSMigrationHub.DescribeApplicationState": {
              "post": {
                "operationId": "DescribeApplicationState",
                "description": "Gets the migration status of an application.",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/DescribeApplicationStateResult"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "AccessDeniedException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/AccessDeniedException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "ThrottlingException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ThrottlingException"
                        }
                      }
                    }
                  },
                  "482": {
                    "description": "InternalServerError",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InternalServerError"
                        }
                      }
                    }
                  },
                  "483": {
                    "description": "ServiceUnavailableException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ServiceUnavailableException"
                        }
                      }
                    }
                  },
                  "484": {
                    "description": "InvalidInputException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InvalidInputException"
                        }
                      }
                    }
                  },
                  "485": {
                    "description": "PolicyErrorException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/PolicyErrorException"
                        }
                      }
                    }
                  },
                  "486": {
                    "description": "ResourceNotFoundException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ResourceNotFoundException"
                        }
                      }
                    }
                  },
                  "487": {
                    "description": "HomeRegionNotSetException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/HomeRegionNotSetException"
                        }
                      }
                    }
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/DescribeApplicationStateRequest"
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "X-Amz-Target",
                    "in": "header",
                    "required": true,
                    "schema": {
                      "type": "string",
                      "enum": [
                        "AWSMigrationHub.DescribeApplicationState"
                      ]
                    }
                  }
                ]
              },
              "parameters": [
                {
                  "$ref": "#/components/parameters/X-Amz-Content-Sha256"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Date"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Algorithm"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Credential"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Security-Token"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Signature"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-SignedHeaders"
                }
              ]
            },
            "/#X-Amz-Target=AWSMigrationHub.DescribeMigrationTask": {
              "post": {
                "operationId": "DescribeMigrationTask",
                "description": "Retrieves a list of all attributes associated with a specific migration task.",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/DescribeMigrationTaskResult"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "AccessDeniedException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/AccessDeniedException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "ThrottlingException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ThrottlingException"
                        }
                      }
                    }
                  },
                  "482": {
                    "description": "InternalServerError",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InternalServerError"
                        }
                      }
                    }
                  },
                  "483": {
                    "description": "ServiceUnavailableException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ServiceUnavailableException"
                        }
                      }
                    }
                  },
                  "484": {
                    "description": "InvalidInputException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InvalidInputException"
                        }
                      }
                    }
                  },
                  "485": {
                    "description": "ResourceNotFoundException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ResourceNotFoundException"
                        }
                      }
                    }
                  },
                  "486": {
                    "description": "HomeRegionNotSetException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/HomeRegionNotSetException"
                        }
                      }
                    }
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/DescribeMigrationTaskRequest"
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "X-Amz-Target",
                    "in": "header",
                    "required": true,
                    "schema": {
                      "type": "string",
                      "enum": [
                        "AWSMigrationHub.DescribeMigrationTask"
                      ]
                    }
                  }
                ]
              },
              "parameters": [
                {
                  "$ref": "#/components/parameters/X-Amz-Content-Sha256"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Date"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Algorithm"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Credential"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Security-Token"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Signature"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-SignedHeaders"
                }
              ]
            },
            "/#X-Amz-Target=AWSMigrationHub.DisassociateCreatedArtifact": {
              "post": {
                "operationId": "DisassociateCreatedArtifact",
                "description": "<p>Disassociates a created artifact of an AWS resource with a migration task performed by a migration tool that was previously associated. This API has the following traits:</p> <ul> <li> <p>A migration user can call the <code>DisassociateCreatedArtifacts</code> operation to disassociate a created AWS Artifact from a migration task.</p> </li> <li> <p>The created artifact name must be provided in ARN (Amazon Resource Name) format which will contain information about type and region; for example: <code>arn:aws:ec2:us-east-1:488216288981:image/ami-6d0ba87b</code>.</p> </li> <li> <p>Examples of the AWS resource behind the created artifact are, AMI's, EC2 instance, or RDS instance, etc.</p> </li> </ul>",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/DisassociateCreatedArtifactResult"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "AccessDeniedException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/AccessDeniedException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "ThrottlingException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ThrottlingException"
                        }
                      }
                    }
                  },
                  "482": {
                    "description": "InternalServerError",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InternalServerError"
                        }
                      }
                    }
                  },
                  "483": {
                    "description": "ServiceUnavailableException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ServiceUnavailableException"
                        }
                      }
                    }
                  },
                  "484": {
                    "description": "DryRunOperation",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/DryRunOperation"
                        }
                      }
                    }
                  },
                  "485": {
                    "description": "UnauthorizedOperation",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/UnauthorizedOperation"
                        }
                      }
                    }
                  },
                  "486": {
                    "description": "InvalidInputException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InvalidInputException"
                        }
                      }
                    }
                  },
                  "487": {
                    "description": "ResourceNotFoundException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ResourceNotFoundException"
                        }
                      }
                    }
                  },
                  "488": {
                    "description": "HomeRegionNotSetException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/HomeRegionNotSetException"
                        }
                      }
                    }
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/DisassociateCreatedArtifactRequest"
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "X-Amz-Target",
                    "in": "header",
                    "required": true,
                    "schema": {
                      "type": "string",
                      "enum": [
                        "AWSMigrationHub.DisassociateCreatedArtifact"
                      ]
                    }
                  }
                ]
              },
              "parameters": [
                {
                  "$ref": "#/components/parameters/X-Amz-Content-Sha256"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Date"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Algorithm"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Credential"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Security-Token"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Signature"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-SignedHeaders"
                }
              ]
            },
            "/#X-Amz-Target=AWSMigrationHub.DisassociateDiscoveredResource": {
              "post": {
                "operationId": "DisassociateDiscoveredResource",
                "description": "Disassociate an Application Discovery Service discovered resource from a migration task.",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/DisassociateDiscoveredResourceResult"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "AccessDeniedException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/AccessDeniedException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "ThrottlingException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ThrottlingException"
                        }
                      }
                    }
                  },
                  "482": {
                    "description": "InternalServerError",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InternalServerError"
                        }
                      }
                    }
                  },
                  "483": {
                    "description": "ServiceUnavailableException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ServiceUnavailableException"
                        }
                      }
                    }
                  },
                  "484": {
                    "description": "DryRunOperation",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/DryRunOperation"
                        }
                      }
                    }
                  },
                  "485": {
                    "description": "UnauthorizedOperation",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/UnauthorizedOperation"
                        }
                      }
                    }
                  },
                  "486": {
                    "description": "InvalidInputException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InvalidInputException"
                        }
                      }
                    }
                  },
                  "487": {
                    "description": "ResourceNotFoundException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ResourceNotFoundException"
                        }
                      }
                    }
                  },
                  "488": {
                    "description": "HomeRegionNotSetException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/HomeRegionNotSetException"
                        }
                      }
                    }
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/DisassociateDiscoveredResourceRequest"
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "X-Amz-Target",
                    "in": "header",
                    "required": true,
                    "schema": {
                      "type": "string",
                      "enum": [
                        "AWSMigrationHub.DisassociateDiscoveredResource"
                      ]
                    }
                  }
                ]
              },
              "parameters": [
                {
                  "$ref": "#/components/parameters/X-Amz-Content-Sha256"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Date"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Algorithm"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Credential"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Security-Token"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Signature"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-SignedHeaders"
                }
              ]
            },
            "/#X-Amz-Target=AWSMigrationHub.ImportMigrationTask": {
              "post": {
                "operationId": "ImportMigrationTask",
                "description": "<p>Registers a new migration task which represents a server, database, etc., being migrated to AWS by a migration tool.</p> <p>This API is a prerequisite to calling the <code>NotifyMigrationTaskState</code> API as the migration tool must first register the migration task with Migration Hub.</p>",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ImportMigrationTaskResult"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "AccessDeniedException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/AccessDeniedException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "ThrottlingException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ThrottlingException"
                        }
                      }
                    }
                  },
                  "482": {
                    "description": "InternalServerError",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InternalServerError"
                        }
                      }
                    }
                  },
                  "483": {
                    "description": "ServiceUnavailableException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ServiceUnavailableException"
                        }
                      }
                    }
                  },
                  "484": {
                    "description": "DryRunOperation",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/DryRunOperation"
                        }
                      }
                    }
                  },
                  "485": {
                    "description": "UnauthorizedOperation",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/UnauthorizedOperation"
                        }
                      }
                    }
                  },
                  "486": {
                    "description": "InvalidInputException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InvalidInputException"
                        }
                      }
                    }
                  },
                  "487": {
                    "description": "ResourceNotFoundException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ResourceNotFoundException"
                        }
                      }
                    }
                  },
                  "488": {
                    "description": "HomeRegionNotSetException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/HomeRegionNotSetException"
                        }
                      }
                    }
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ImportMigrationTaskRequest"
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "X-Amz-Target",
                    "in": "header",
                    "required": true,
                    "schema": {
                      "type": "string",
                      "enum": [
                        "AWSMigrationHub.ImportMigrationTask"
                      ]
                    }
                  }
                ]
              },
              "parameters": [
                {
                  "$ref": "#/components/parameters/X-Amz-Content-Sha256"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Date"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Algorithm"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Credential"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Security-Token"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Signature"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-SignedHeaders"
                }
              ]
            },
            "/#X-Amz-Target=AWSMigrationHub.ListApplicationStates": {
              "post": {
                "operationId": "ListApplicationStates",
                "description": "Lists all the migration statuses for your applications. If you use the optional <code>ApplicationIds</code> parameter, only the migration statuses for those applications will be returned.",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ListApplicationStatesResult"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "AccessDeniedException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/AccessDeniedException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "ThrottlingException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ThrottlingException"
                        }
                      }
                    }
                  },
                  "482": {
                    "description": "InternalServerError",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InternalServerError"
                        }
                      }
                    }
                  },
                  "483": {
                    "description": "ServiceUnavailableException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ServiceUnavailableException"
                        }
                      }
                    }
                  },
                  "484": {
                    "description": "InvalidInputException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InvalidInputException"
                        }
                      }
                    }
                  },
                  "485": {
                    "description": "HomeRegionNotSetException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/HomeRegionNotSetException"
                        }
                      }
                    }
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ListApplicationStatesRequest"
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "MaxResults",
                    "in": "query",
                    "schema": {
                      "type": "string"
                    },
                    "description": "Pagination limit",
                    "required": false
                  },
                  {
                    "name": "NextToken",
                    "in": "query",
                    "schema": {
                      "type": "string"
                    },
                    "description": "Pagination token",
                    "required": false
                  },
                  {
                    "name": "X-Amz-Target",
                    "in": "header",
                    "required": true,
                    "schema": {
                      "type": "string",
                      "enum": [
                        "AWSMigrationHub.ListApplicationStates"
                      ]
                    }
                  }
                ]
              },
              "parameters": [
                {
                  "$ref": "#/components/parameters/X-Amz-Content-Sha256"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Date"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Algorithm"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Credential"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Security-Token"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Signature"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-SignedHeaders"
                }
              ]
            },
            "/#X-Amz-Target=AWSMigrationHub.ListCreatedArtifacts": {
              "post": {
                "operationId": "ListCreatedArtifacts",
                "description": "<p>Lists the created artifacts attached to a given migration task in an update stream. This API has the following traits:</p> <ul> <li> <p>Gets the list of the created artifacts while migration is taking place.</p> </li> <li> <p>Shows the artifacts created by the migration tool that was associated by the <code>AssociateCreatedArtifact</code> API. </p> </li> <li> <p>Lists created artifacts in a paginated interface. </p> </li> </ul>",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ListCreatedArtifactsResult"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "AccessDeniedException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/AccessDeniedException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "ThrottlingException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ThrottlingException"
                        }
                      }
                    }
                  },
                  "482": {
                    "description": "InternalServerError",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InternalServerError"
                        }
                      }
                    }
                  },
                  "483": {
                    "description": "ServiceUnavailableException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ServiceUnavailableException"
                        }
                      }
                    }
                  },
                  "484": {
                    "description": "InvalidInputException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InvalidInputException"
                        }
                      }
                    }
                  },
                  "485": {
                    "description": "ResourceNotFoundException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ResourceNotFoundException"
                        }
                      }
                    }
                  },
                  "486": {
                    "description": "HomeRegionNotSetException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/HomeRegionNotSetException"
                        }
                      }
                    }
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ListCreatedArtifactsRequest"
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "MaxResults",
                    "in": "query",
                    "schema": {
                      "type": "string"
                    },
                    "description": "Pagination limit",
                    "required": false
                  },
                  {
                    "name": "NextToken",
                    "in": "query",
                    "schema": {
                      "type": "string"
                    },
                    "description": "Pagination token",
                    "required": false
                  },
                  {
                    "name": "X-Amz-Target",
                    "in": "header",
                    "required": true,
                    "schema": {
                      "type": "string",
                      "enum": [
                        "AWSMigrationHub.ListCreatedArtifacts"
                      ]
                    }
                  }
                ]
              },
              "parameters": [
                {
                  "$ref": "#/components/parameters/X-Amz-Content-Sha256"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Date"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Algorithm"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Credential"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Security-Token"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Signature"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-SignedHeaders"
                }
              ]
            },
            "/#X-Amz-Target=AWSMigrationHub.ListDiscoveredResources": {
              "post": {
                "operationId": "ListDiscoveredResources",
                "description": "Lists discovered resources associated with the given <code>MigrationTask</code>.",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ListDiscoveredResourcesResult"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "AccessDeniedException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/AccessDeniedException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "ThrottlingException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ThrottlingException"
                        }
                      }
                    }
                  },
                  "482": {
                    "description": "InternalServerError",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InternalServerError"
                        }
                      }
                    }
                  },
                  "483": {
                    "description": "ServiceUnavailableException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ServiceUnavailableException"
                        }
                      }
                    }
                  },
                  "484": {
                    "description": "InvalidInputException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InvalidInputException"
                        }
                      }
                    }
                  },
                  "485": {
                    "description": "ResourceNotFoundException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ResourceNotFoundException"
                        }
                      }
                    }
                  },
                  "486": {
                    "description": "HomeRegionNotSetException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/HomeRegionNotSetException"
                        }
                      }
                    }
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ListDiscoveredResourcesRequest"
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "MaxResults",
                    "in": "query",
                    "schema": {
                      "type": "string"
                    },
                    "description": "Pagination limit",
                    "required": false
                  },
                  {
                    "name": "NextToken",
                    "in": "query",
                    "schema": {
                      "type": "string"
                    },
                    "description": "Pagination token",
                    "required": false
                  },
                  {
                    "name": "X-Amz-Target",
                    "in": "header",
                    "required": true,
                    "schema": {
                      "type": "string",
                      "enum": [
                        "AWSMigrationHub.ListDiscoveredResources"
                      ]
                    }
                  }
                ]
              },
              "parameters": [
                {
                  "$ref": "#/components/parameters/X-Amz-Content-Sha256"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Date"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Algorithm"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Credential"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Security-Token"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Signature"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-SignedHeaders"
                }
              ]
            },
            "/#X-Amz-Target=AWSMigrationHub.ListMigrationTasks": {
              "post": {
                "operationId": "ListMigrationTasks",
                "description": "<p>Lists all, or filtered by resource name, migration tasks associated with the user account making this call. This API has the following traits:</p> <ul> <li> <p>Can show a summary list of the most recent migration tasks.</p> </li> <li> <p>Can show a summary list of migration tasks associated with a given discovered resource.</p> </li> <li> <p>Lists migration tasks in a paginated interface.</p> </li> </ul>",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ListMigrationTasksResult"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "AccessDeniedException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/AccessDeniedException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "ThrottlingException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ThrottlingException"
                        }
                      }
                    }
                  },
                  "482": {
                    "description": "InternalServerError",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InternalServerError"
                        }
                      }
                    }
                  },
                  "483": {
                    "description": "ServiceUnavailableException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ServiceUnavailableException"
                        }
                      }
                    }
                  },
                  "484": {
                    "description": "InvalidInputException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InvalidInputException"
                        }
                      }
                    }
                  },
                  "485": {
                    "description": "PolicyErrorException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/PolicyErrorException"
                        }
                      }
                    }
                  },
                  "486": {
                    "description": "ResourceNotFoundException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ResourceNotFoundException"
                        }
                      }
                    }
                  },
                  "487": {
                    "description": "HomeRegionNotSetException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/HomeRegionNotSetException"
                        }
                      }
                    }
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ListMigrationTasksRequest"
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "MaxResults",
                    "in": "query",
                    "schema": {
                      "type": "string"
                    },
                    "description": "Pagination limit",
                    "required": false
                  },
                  {
                    "name": "NextToken",
                    "in": "query",
                    "schema": {
                      "type": "string"
                    },
                    "description": "Pagination token",
                    "required": false
                  },
                  {
                    "name": "X-Amz-Target",
                    "in": "header",
                    "required": true,
                    "schema": {
                      "type": "string",
                      "enum": [
                        "AWSMigrationHub.ListMigrationTasks"
                      ]
                    }
                  }
                ]
              },
              "parameters": [
                {
                  "$ref": "#/components/parameters/X-Amz-Content-Sha256"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Date"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Algorithm"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Credential"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Security-Token"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Signature"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-SignedHeaders"
                }
              ]
            },
            "/#X-Amz-Target=AWSMigrationHub.ListProgressUpdateStreams": {
              "post": {
                "operationId": "ListProgressUpdateStreams",
                "description": "Lists progress update streams associated with the user account making this call.",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ListProgressUpdateStreamsResult"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "AccessDeniedException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/AccessDeniedException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "ThrottlingException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ThrottlingException"
                        }
                      }
                    }
                  },
                  "482": {
                    "description": "InternalServerError",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InternalServerError"
                        }
                      }
                    }
                  },
                  "483": {
                    "description": "ServiceUnavailableException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ServiceUnavailableException"
                        }
                      }
                    }
                  },
                  "484": {
                    "description": "InvalidInputException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InvalidInputException"
                        }
                      }
                    }
                  },
                  "485": {
                    "description": "HomeRegionNotSetException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/HomeRegionNotSetException"
                        }
                      }
                    }
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ListProgressUpdateStreamsRequest"
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "MaxResults",
                    "in": "query",
                    "schema": {
                      "type": "string"
                    },
                    "description": "Pagination limit",
                    "required": false
                  },
                  {
                    "name": "NextToken",
                    "in": "query",
                    "schema": {
                      "type": "string"
                    },
                    "description": "Pagination token",
                    "required": false
                  },
                  {
                    "name": "X-Amz-Target",
                    "in": "header",
                    "required": true,
                    "schema": {
                      "type": "string",
                      "enum": [
                        "AWSMigrationHub.ListProgressUpdateStreams"
                      ]
                    }
                  }
                ]
              },
              "parameters": [
                {
                  "$ref": "#/components/parameters/X-Amz-Content-Sha256"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Date"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Algorithm"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Credential"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Security-Token"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Signature"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-SignedHeaders"
                }
              ]
            },
            "/#X-Amz-Target=AWSMigrationHub.NotifyApplicationState": {
              "post": {
                "operationId": "NotifyApplicationState",
                "description": "Sets the migration state of an application. For a given application identified by the value passed to <code>ApplicationId</code>, its status is set or updated by passing one of three values to <code>Status</code>: <code>NOT_STARTED | IN_PROGRESS | COMPLETED</code>.",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/NotifyApplicationStateResult"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "AccessDeniedException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/AccessDeniedException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "ThrottlingException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ThrottlingException"
                        }
                      }
                    }
                  },
                  "482": {
                    "description": "InternalServerError",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InternalServerError"
                        }
                      }
                    }
                  },
                  "483": {
                    "description": "ServiceUnavailableException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ServiceUnavailableException"
                        }
                      }
                    }
                  },
                  "484": {
                    "description": "DryRunOperation",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/DryRunOperation"
                        }
                      }
                    }
                  },
                  "485": {
                    "description": "UnauthorizedOperation",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/UnauthorizedOperation"
                        }
                      }
                    }
                  },
                  "486": {
                    "description": "InvalidInputException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InvalidInputException"
                        }
                      }
                    }
                  },
                  "487": {
                    "description": "PolicyErrorException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/PolicyErrorException"
                        }
                      }
                    }
                  },
                  "488": {
                    "description": "ResourceNotFoundException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ResourceNotFoundException"
                        }
                      }
                    }
                  },
                  "489": {
                    "description": "HomeRegionNotSetException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/HomeRegionNotSetException"
                        }
                      }
                    }
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/NotifyApplicationStateRequest"
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "X-Amz-Target",
                    "in": "header",
                    "required": true,
                    "schema": {
                      "type": "string",
                      "enum": [
                        "AWSMigrationHub.NotifyApplicationState"
                      ]
                    }
                  }
                ]
              },
              "parameters": [
                {
                  "$ref": "#/components/parameters/X-Amz-Content-Sha256"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Date"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Algorithm"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Credential"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Security-Token"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Signature"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-SignedHeaders"
                }
              ]
            },
            "/#X-Amz-Target=AWSMigrationHub.NotifyMigrationTaskState": {
              "post": {
                "operationId": "NotifyMigrationTaskState",
                "description": "<p>Notifies Migration Hub of the current status, progress, or other detail regarding a migration task. This API has the following traits:</p> <ul> <li> <p>Migration tools will call the <code>NotifyMigrationTaskState</code> API to share the latest progress and status.</p> </li> <li> <p> <code>MigrationTaskName</code> is used for addressing updates to the correct target.</p> </li> <li> <p> <code>ProgressUpdateStream</code> is used for access control and to provide a namespace for each migration tool.</p> </li> </ul>",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/NotifyMigrationTaskStateResult"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "AccessDeniedException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/AccessDeniedException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "ThrottlingException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ThrottlingException"
                        }
                      }
                    }
                  },
                  "482": {
                    "description": "InternalServerError",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InternalServerError"
                        }
                      }
                    }
                  },
                  "483": {
                    "description": "ServiceUnavailableException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ServiceUnavailableException"
                        }
                      }
                    }
                  },
                  "484": {
                    "description": "DryRunOperation",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/DryRunOperation"
                        }
                      }
                    }
                  },
                  "485": {
                    "description": "UnauthorizedOperation",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/UnauthorizedOperation"
                        }
                      }
                    }
                  },
                  "486": {
                    "description": "InvalidInputException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InvalidInputException"
                        }
                      }
                    }
                  },
                  "487": {
                    "description": "ResourceNotFoundException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ResourceNotFoundException"
                        }
                      }
                    }
                  },
                  "488": {
                    "description": "HomeRegionNotSetException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/HomeRegionNotSetException"
                        }
                      }
                    }
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/NotifyMigrationTaskStateRequest"
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "X-Amz-Target",
                    "in": "header",
                    "required": true,
                    "schema": {
                      "type": "string",
                      "enum": [
                        "AWSMigrationHub.NotifyMigrationTaskState"
                      ]
                    }
                  }
                ]
              },
              "parameters": [
                {
                  "$ref": "#/components/parameters/X-Amz-Content-Sha256"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Date"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Algorithm"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Credential"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Security-Token"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Signature"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-SignedHeaders"
                }
              ]
            },
            "/#X-Amz-Target=AWSMigrationHub.PutResourceAttributes": {
              "post": {
                "operationId": "PutResourceAttributes",
                "description": "<p>Provides identifying details of the resource being migrated so that it can be associated in the Application Discovery Service repository. This association occurs asynchronously after <code>PutResourceAttributes</code> returns.</p> <important> <ul> <li> <p>Keep in mind that subsequent calls to PutResourceAttributes will override previously stored attributes. For example, if it is first called with a MAC address, but later, it is desired to <i>add</i> an IP address, it will then be required to call it with <i>both</i> the IP and MAC addresses to prevent overriding the MAC address.</p> </li> <li> <p>Note the instructions regarding the special use case of the <a href=\"https://docs.aws.amazon.com/migrationhub/latest/ug/API_PutResourceAttributes.html#migrationhub-PutResourceAttributes-request-ResourceAttributeList\"> <code>ResourceAttributeList</code> </a> parameter when specifying any \"VM\" related value.</p> </li> </ul> </important> <note> <p>Because this is an asynchronous call, it will always return 200, whether an association occurs or not. To confirm if an association was found based on the provided details, call <code>ListDiscoveredResources</code>.</p> </note>",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/PutResourceAttributesResult"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "AccessDeniedException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/AccessDeniedException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "ThrottlingException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ThrottlingException"
                        }
                      }
                    }
                  },
                  "482": {
                    "description": "InternalServerError",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InternalServerError"
                        }
                      }
                    }
                  },
                  "483": {
                    "description": "ServiceUnavailableException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ServiceUnavailableException"
                        }
                      }
                    }
                  },
                  "484": {
                    "description": "DryRunOperation",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/DryRunOperation"
                        }
                      }
                    }
                  },
                  "485": {
                    "description": "UnauthorizedOperation",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/UnauthorizedOperation"
                        }
                      }
                    }
                  },
                  "486": {
                    "description": "InvalidInputException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InvalidInputException"
                        }
                      }
                    }
                  },
                  "487": {
                    "description": "ResourceNotFoundException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ResourceNotFoundException"
                        }
                      }
                    }
                  },
                  "488": {
                    "description": "HomeRegionNotSetException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/HomeRegionNotSetException"
                        }
                      }
                    }
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/PutResourceAttributesRequest"
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "X-Amz-Target",
                    "in": "header",
                    "required": true,
                    "schema": {
                      "type": "string",
                      "enum": [
                        "AWSMigrationHub.PutResourceAttributes"
                      ]
                    }
                  }
                ]
              },
              "parameters": [
                {
                  "$ref": "#/components/parameters/X-Amz-Content-Sha256"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Date"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Algorithm"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Credential"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Security-Token"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Signature"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-SignedHeaders"
                }
              ]
            }
          },
          "components": {
            "parameters": {
              "X-Amz-Content-Sha256": {
                "name": "X-Amz-Content-Sha256",
                "in": "header",
                "schema": {
                  "type": "string"
                },
                "required": false
              },
              "X-Amz-Date": {
                "name": "X-Amz-Date",
                "in": "header",
                "schema": {
                  "type": "string"
                },
                "required": false
              },
              "X-Amz-Algorithm": {
                "name": "X-Amz-Algorithm",
                "in": "header",
                "schema": {
                  "type": "string"
                },
                "required": false
              },
              "X-Amz-Credential": {
                "name": "X-Amz-Credential",
                "in": "header",
                "schema": {
                  "type": "string"
                },
                "required": false
              },
              "X-Amz-Security-Token": {
                "name": "X-Amz-Security-Token",
                "in": "header",
                "schema": {
                  "type": "string"
                },
                "required": false
              },
              "X-Amz-Signature": {
                "name": "X-Amz-Signature",
                "in": "header",
                "schema": {
                  "type": "string"
                },
                "required": false
              },
              "X-Amz-SignedHeaders": {
                "name": "X-Amz-SignedHeaders",
                "in": "header",
                "schema": {
                  "type": "string"
                },
                "required": false
              }
            },
            "securitySchemes": {
              "hmac": {
                "type": "apiKey",
                "name": "Authorization",
                "in": "header",
                "description": "Amazon Signature authorization v4",
                "x-amazon-apigateway-authtype": "awsSigv4"
              }
            },
            "schemas": {
              "AssociateCreatedArtifactResult": {
                "type": "object",
                "properties": {}
              },
              "AssociateCreatedArtifactRequest": {
                "type": "object",
                "required": [
                  "ProgressUpdateStream",
                  "MigrationTaskName",
                  "CreatedArtifact"
                ],
                "title": "AssociateCreatedArtifactRequest",
                "properties": {
                  "ProgressUpdateStream": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ProgressUpdateStream"
                      },
                      {
                        "description": "The name of the ProgressUpdateStream. "
                      }
                    ]
                  },
                  "MigrationTaskName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/MigrationTaskName"
                      },
                      {
                        "description": "Unique identifier that references the migration task. <i>Do not store personal data in this field.</i> "
                      }
                    ]
                  },
                  "CreatedArtifact": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/CreatedArtifact"
                      },
                      {
                        "description": "An ARN of the AWS resource related to the migration (e.g., AMI, EC2 instance, RDS instance, etc.) "
                      }
                    ]
                  },
                  "DryRun": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/DryRun"
                      },
                      {
                        "description": "Optional boolean flag to indicate whether any effect should take place. Used to test if the caller has permission to make the call."
                      }
                    ]
                  }
                }
              },
              "AccessDeniedException": {},
              "ThrottlingException": {},
              "InternalServerError": {},
              "ServiceUnavailableException": {},
              "DryRunOperation": {},
              "UnauthorizedOperation": {},
              "InvalidInputException": {},
              "ResourceNotFoundException": {},
              "HomeRegionNotSetException": {},
              "AssociateDiscoveredResourceResult": {
                "type": "object",
                "properties": {}
              },
              "AssociateDiscoveredResourceRequest": {
                "type": "object",
                "required": [
                  "ProgressUpdateStream",
                  "MigrationTaskName",
                  "DiscoveredResource"
                ],
                "title": "AssociateDiscoveredResourceRequest",
                "properties": {
                  "ProgressUpdateStream": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ProgressUpdateStream"
                      },
                      {
                        "description": "The name of the ProgressUpdateStream."
                      }
                    ]
                  },
                  "MigrationTaskName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/MigrationTaskName"
                      },
                      {
                        "description": "The identifier given to the MigrationTask. <i>Do not store personal data in this field.</i> "
                      }
                    ]
                  },
                  "DiscoveredResource": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/DiscoveredResource"
                      },
                      {
                        "description": "Object representing a Resource."
                      }
                    ]
                  },
                  "DryRun": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/DryRun"
                      },
                      {
                        "description": "Optional boolean flag to indicate whether any effect should take place. Used to test if the caller has permission to make the call."
                      }
                    ]
                  }
                }
              },
              "PolicyErrorException": {},
              "CreateProgressUpdateStreamResult": {
                "type": "object",
                "properties": {}
              },
              "CreateProgressUpdateStreamRequest": {
                "type": "object",
                "required": [
                  "ProgressUpdateStreamName"
                ],
                "title": "CreateProgressUpdateStreamRequest",
                "properties": {
                  "ProgressUpdateStreamName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ProgressUpdateStream"
                      },
                      {
                        "description": "The name of the ProgressUpdateStream. <i>Do not store personal data in this field.</i> "
                      }
                    ]
                  },
                  "DryRun": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/DryRun"
                      },
                      {
                        "description": "Optional boolean flag to indicate whether any effect should take place. Used to test if the caller has permission to make the call."
                      }
                    ]
                  }
                }
              },
              "DeleteProgressUpdateStreamResult": {
                "type": "object",
                "properties": {}
              },
              "DeleteProgressUpdateStreamRequest": {
                "type": "object",
                "required": [
                  "ProgressUpdateStreamName"
                ],
                "title": "DeleteProgressUpdateStreamRequest",
                "properties": {
                  "ProgressUpdateStreamName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ProgressUpdateStream"
                      },
                      {
                        "description": "The name of the ProgressUpdateStream. <i>Do not store personal data in this field.</i> "
                      }
                    ]
                  },
                  "DryRun": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/DryRun"
                      },
                      {
                        "description": "Optional boolean flag to indicate whether any effect should take place. Used to test if the caller has permission to make the call."
                      }
                    ]
                  }
                }
              },
              "DescribeApplicationStateResult": {
                "type": "object",
                "properties": {
                  "ApplicationStatus": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ApplicationStatus"
                      },
                      {
                        "description": "Status of the application - Not Started, In-Progress, Complete."
                      }
                    ]
                  },
                  "LastUpdatedTime": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/UpdateDateTime"
                      },
                      {
                        "description": "The timestamp when the application status was last updated."
                      }
                    ]
                  }
                }
              },
              "DescribeApplicationStateRequest": {
                "type": "object",
                "required": [
                  "ApplicationId"
                ],
                "title": "DescribeApplicationStateRequest",
                "properties": {
                  "ApplicationId": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ApplicationId"
                      },
                      {
                        "description": "The configurationId in Application Discovery Service that uniquely identifies the grouped application."
                      }
                    ]
                  }
                }
              },
              "DescribeMigrationTaskResult": {
                "type": "object",
                "properties": {
                  "MigrationTask": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/MigrationTask"
                      },
                      {
                        "description": "Object encapsulating information about the migration task."
                      }
                    ]
                  }
                }
              },
              "DescribeMigrationTaskRequest": {
                "type": "object",
                "required": [
                  "ProgressUpdateStream",
                  "MigrationTaskName"
                ],
                "title": "DescribeMigrationTaskRequest",
                "properties": {
                  "ProgressUpdateStream": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ProgressUpdateStream"
                      },
                      {
                        "description": "The name of the ProgressUpdateStream. "
                      }
                    ]
                  },
                  "MigrationTaskName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/MigrationTaskName"
                      },
                      {
                        "description": "The identifier given to the MigrationTask. <i>Do not store personal data in this field.</i> "
                      }
                    ]
                  }
                }
              },
              "DisassociateCreatedArtifactResult": {
                "type": "object",
                "properties": {}
              },
              "DisassociateCreatedArtifactRequest": {
                "type": "object",
                "required": [
                  "ProgressUpdateStream",
                  "MigrationTaskName",
                  "CreatedArtifactName"
                ],
                "title": "DisassociateCreatedArtifactRequest",
                "properties": {
                  "ProgressUpdateStream": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ProgressUpdateStream"
                      },
                      {
                        "description": "The name of the ProgressUpdateStream. "
                      }
                    ]
                  },
                  "MigrationTaskName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/MigrationTaskName"
                      },
                      {
                        "description": "Unique identifier that references the migration task to be disassociated with the artifact. <i>Do not store personal data in this field.</i> "
                      }
                    ]
                  },
                  "CreatedArtifactName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/CreatedArtifactName"
                      },
                      {
                        "description": "An ARN of the AWS resource related to the migration (e.g., AMI, EC2 instance, RDS instance, etc.)"
                      }
                    ]
                  },
                  "DryRun": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/DryRun"
                      },
                      {
                        "description": "Optional boolean flag to indicate whether any effect should take place. Used to test if the caller has permission to make the call."
                      }
                    ]
                  }
                }
              },
              "DisassociateDiscoveredResourceResult": {
                "type": "object",
                "properties": {}
              },
              "DisassociateDiscoveredResourceRequest": {
                "type": "object",
                "required": [
                  "ProgressUpdateStream",
                  "MigrationTaskName",
                  "ConfigurationId"
                ],
                "title": "DisassociateDiscoveredResourceRequest",
                "properties": {
                  "ProgressUpdateStream": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ProgressUpdateStream"
                      },
                      {
                        "description": "The name of the ProgressUpdateStream."
                      }
                    ]
                  },
                  "MigrationTaskName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/MigrationTaskName"
                      },
                      {
                        "description": "The identifier given to the MigrationTask. <i>Do not store personal data in this field.</i> "
                      }
                    ]
                  },
                  "ConfigurationId": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ConfigurationId"
                      },
                      {
                        "description": "ConfigurationId of the Application Discovery Service resource to be disassociated."
                      }
                    ]
                  },
                  "DryRun": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/DryRun"
                      },
                      {
                        "description": "Optional boolean flag to indicate whether any effect should take place. Used to test if the caller has permission to make the call."
                      }
                    ]
                  }
                }
              },
              "ImportMigrationTaskResult": {
                "type": "object",
                "properties": {}
              },
              "ImportMigrationTaskRequest": {
                "type": "object",
                "required": [
                  "ProgressUpdateStream",
                  "MigrationTaskName"
                ],
                "title": "ImportMigrationTaskRequest",
                "properties": {
                  "ProgressUpdateStream": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ProgressUpdateStream"
                      },
                      {
                        "description": "The name of the ProgressUpdateStream. &gt;"
                      }
                    ]
                  },
                  "MigrationTaskName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/MigrationTaskName"
                      },
                      {
                        "description": "Unique identifier that references the migration task. <i>Do not store personal data in this field.</i> "
                      }
                    ]
                  },
                  "DryRun": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/DryRun"
                      },
                      {
                        "description": "Optional boolean flag to indicate whether any effect should take place. Used to test if the caller has permission to make the call."
                      }
                    ]
                  }
                }
              },
              "ListApplicationStatesResult": {
                "type": "object",
                "properties": {
                  "ApplicationStateList": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ApplicationStateList"
                      },
                      {
                        "description": "A list of Applications that exist in Application Discovery Service."
                      }
                    ]
                  },
                  "NextToken": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Token"
                      },
                      {
                        "description": "If a <code>NextToken</code> was returned by a previous call, there are more results available. To retrieve the next page of results, make the call again using the returned token in <code>NextToken</code>."
                      }
                    ]
                  }
                }
              },
              "ListApplicationStatesRequest": {
                "type": "object",
                "title": "ListApplicationStatesRequest",
                "properties": {
                  "ApplicationIds": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ApplicationIds"
                      },
                      {
                        "description": "The configurationIds from the Application Discovery Service that uniquely identifies your applications."
                      }
                    ]
                  },
                  "NextToken": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Token"
                      },
                      {
                        "description": "If a <code>NextToken</code> was returned by a previous call, there are more results available. To retrieve the next page of results, make the call again using the returned token in <code>NextToken</code>."
                      }
                    ]
                  },
                  "MaxResults": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/MaxResults"
                      },
                      {
                        "description": "Maximum number of results to be returned per page."
                      }
                    ]
                  }
                }
              },
              "ListCreatedArtifactsResult": {
                "type": "object",
                "properties": {
                  "NextToken": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Token"
                      },
                      {
                        "description": "If there are more created artifacts than the max result, return the next token to be passed to the next call as a bookmark of where to start from."
                      }
                    ]
                  },
                  "CreatedArtifactList": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/CreatedArtifactList"
                      },
                      {
                        "description": "List of created artifacts up to the maximum number of results specified in the request."
                      }
                    ]
                  }
                }
              },
              "ListCreatedArtifactsRequest": {
                "type": "object",
                "required": [
                  "ProgressUpdateStream",
                  "MigrationTaskName"
                ],
                "title": "ListCreatedArtifactsRequest",
                "properties": {
                  "ProgressUpdateStream": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ProgressUpdateStream"
                      },
                      {
                        "description": "The name of the ProgressUpdateStream. "
                      }
                    ]
                  },
                  "MigrationTaskName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/MigrationTaskName"
                      },
                      {
                        "description": "Unique identifier that references the migration task. <i>Do not store personal data in this field.</i> "
                      }
                    ]
                  },
                  "NextToken": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Token"
                      },
                      {
                        "description": "If a <code>NextToken</code> was returned by a previous call, there are more results available. To retrieve the next page of results, make the call again using the returned token in <code>NextToken</code>."
                      }
                    ]
                  },
                  "MaxResults": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/MaxResultsCreatedArtifacts"
                      },
                      {
                        "description": "Maximum number of results to be returned per page."
                      }
                    ]
                  }
                }
              },
              "ListDiscoveredResourcesResult": {
                "type": "object",
                "properties": {
                  "NextToken": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Token"
                      },
                      {
                        "description": "If there are more discovered resources than the max result, return the next token to be passed to the next call as a bookmark of where to start from."
                      }
                    ]
                  },
                  "DiscoveredResourceList": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/DiscoveredResourceList"
                      },
                      {
                        "description": "Returned list of discovered resources associated with the given MigrationTask."
                      }
                    ]
                  }
                }
              },
              "ListDiscoveredResourcesRequest": {
                "type": "object",
                "required": [
                  "ProgressUpdateStream",
                  "MigrationTaskName"
                ],
                "title": "ListDiscoveredResourcesRequest",
                "properties": {
                  "ProgressUpdateStream": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ProgressUpdateStream"
                      },
                      {
                        "description": "The name of the ProgressUpdateStream."
                      }
                    ]
                  },
                  "MigrationTaskName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/MigrationTaskName"
                      },
                      {
                        "description": "The name of the MigrationTask. <i>Do not store personal data in this field.</i> "
                      }
                    ]
                  },
                  "NextToken": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Token"
                      },
                      {
                        "description": "If a <code>NextToken</code> was returned by a previous call, there are more results available. To retrieve the next page of results, make the call again using the returned token in <code>NextToken</code>."
                      }
                    ]
                  },
                  "MaxResults": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/MaxResultsResources"
                      },
                      {
                        "description": "The maximum number of results returned per page."
                      }
                    ]
                  }
                }
              },
              "ListMigrationTasksResult": {
                "type": "object",
                "properties": {
                  "NextToken": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Token"
                      },
                      {
                        "description": "If there are more migration tasks than the max result, return the next token to be passed to the next call as a bookmark of where to start from."
                      }
                    ]
                  },
                  "MigrationTaskSummaryList": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/MigrationTaskSummaryList"
                      },
                      {
                        "description": "Lists the migration task's summary which includes: <code>MigrationTaskName</code>, <code>ProgressPercent</code>, <code>ProgressUpdateStream</code>, <code>Status</code>, and the <code>UpdateDateTime</code> for each task."
                      }
                    ]
                  }
                }
              },
              "ListMigrationTasksRequest": {
                "type": "object",
                "title": "ListMigrationTasksRequest",
                "properties": {
                  "NextToken": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Token"
                      },
                      {
                        "description": "If a <code>NextToken</code> was returned by a previous call, there are more results available. To retrieve the next page of results, make the call again using the returned token in <code>NextToken</code>."
                      }
                    ]
                  },
                  "MaxResults": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/MaxResults"
                      },
                      {
                        "description": "Value to specify how many results are returned per page."
                      }
                    ]
                  },
                  "ResourceName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ResourceName"
                      },
                      {
                        "description": "Filter migration tasks by discovered resource name."
                      }
                    ]
                  }
                }
              },
              "ListProgressUpdateStreamsResult": {
                "type": "object",
                "properties": {
                  "ProgressUpdateStreamSummaryList": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ProgressUpdateStreamSummaryList"
                      },
                      {
                        "description": "List of progress update streams up to the max number of results passed in the input."
                      }
                    ]
                  },
                  "NextToken": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Token"
                      },
                      {
                        "description": "If there are more streams created than the max result, return the next token to be passed to the next call as a bookmark of where to start from."
                      }
                    ]
                  }
                }
              },
              "ListProgressUpdateStreamsRequest": {
                "type": "object",
                "title": "ListProgressUpdateStreamsRequest",
                "properties": {
                  "NextToken": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Token"
                      },
                      {
                        "description": "If a <code>NextToken</code> was returned by a previous call, there are more results available. To retrieve the next page of results, make the call again using the returned token in <code>NextToken</code>."
                      }
                    ]
                  },
                  "MaxResults": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/MaxResults"
                      },
                      {
                        "description": "Filter to limit the maximum number of results to list per page."
                      }
                    ]
                  }
                }
              },
              "NotifyApplicationStateResult": {
                "type": "object",
                "properties": {}
              },
              "NotifyApplicationStateRequest": {
                "type": "object",
                "required": [
                  "ApplicationId",
                  "Status"
                ],
                "title": "NotifyApplicationStateRequest",
                "properties": {
                  "ApplicationId": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ApplicationId"
                      },
                      {
                        "description": "The configurationId in Application Discovery Service that uniquely identifies the grouped application."
                      }
                    ]
                  },
                  "Status": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ApplicationStatus"
                      },
                      {
                        "description": "Status of the application - Not Started, In-Progress, Complete."
                      }
                    ]
                  },
                  "UpdateDateTime": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/UpdateDateTime"
                      },
                      {
                        "description": "The timestamp when the application state changed."
                      }
                    ]
                  },
                  "DryRun": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/DryRun"
                      },
                      {
                        "description": "Optional boolean flag to indicate whether any effect should take place. Used to test if the caller has permission to make the call."
                      }
                    ]
                  }
                }
              },
              "NotifyMigrationTaskStateResult": {
                "type": "object",
                "properties": {}
              },
              "NotifyMigrationTaskStateRequest": {
                "type": "object",
                "required": [
                  "ProgressUpdateStream",
                  "MigrationTaskName",
                  "Task",
                  "UpdateDateTime",
                  "NextUpdateSeconds"
                ],
                "title": "NotifyMigrationTaskStateRequest",
                "properties": {
                  "ProgressUpdateStream": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ProgressUpdateStream"
                      },
                      {
                        "description": "The name of the ProgressUpdateStream. "
                      }
                    ]
                  },
                  "MigrationTaskName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/MigrationTaskName"
                      },
                      {
                        "description": "Unique identifier that references the migration task. <i>Do not store personal data in this field.</i> "
                      }
                    ]
                  },
                  "Task": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Task"
                      },
                      {
                        "description": "Information about the task's progress and status."
                      }
                    ]
                  },
                  "UpdateDateTime": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/UpdateDateTime"
                      },
                      {
                        "description": "The timestamp when the task was gathered."
                      }
                    ]
                  },
                  "NextUpdateSeconds": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/NextUpdateSeconds"
                      },
                      {
                        "description": "Number of seconds after the UpdateDateTime within which the Migration Hub can expect an update. If Migration Hub does not receive an update within the specified interval, then the migration task will be considered stale."
                      }
                    ]
                  },
                  "DryRun": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/DryRun"
                      },
                      {
                        "description": "Optional boolean flag to indicate whether any effect should take place. Used to test if the caller has permission to make the call."
                      }
                    ]
                  }
                }
              },
              "PutResourceAttributesResult": {
                "type": "object",
                "properties": {}
              },
              "PutResourceAttributesRequest": {
                "type": "object",
                "required": [
                  "ProgressUpdateStream",
                  "MigrationTaskName",
                  "ResourceAttributeList"
                ],
                "title": "PutResourceAttributesRequest",
                "properties": {
                  "ProgressUpdateStream": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ProgressUpdateStream"
                      },
                      {
                        "description": "The name of the ProgressUpdateStream. "
                      }
                    ]
                  },
                  "MigrationTaskName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/MigrationTaskName"
                      },
                      {
                        "description": "Unique identifier that references the migration task. <i>Do not store personal data in this field.</i> "
                      }
                    ]
                  },
                  "ResourceAttributeList": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ResourceAttributeList"
                      },
                      {
                        "description": "<p>Information about the resource that is being migrated. This data will be used to map the task to a resource in the Application Discovery Service repository.</p> <note> <p>Takes the object array of <code>ResourceAttribute</code> where the <code>Type</code> field is reserved for the following values: <code>IPV4_ADDRESS | IPV6_ADDRESS | MAC_ADDRESS | FQDN | VM_MANAGER_ID | VM_MANAGED_OBJECT_REFERENCE | VM_NAME | VM_PATH | BIOS_ID | MOTHERBOARD_SERIAL_NUMBER</code> where the identifying value can be a string up to 256 characters.</p> </note> <important> <ul> <li> <p>If any \"VM\" related value is set for a <code>ResourceAttribute</code> object, it is required that <code>VM_MANAGER_ID</code>, as a minimum, is always set. If <code>VM_MANAGER_ID</code> is not set, then all \"VM\" fields will be discarded and \"VM\" fields will not be used for matching the migration task to a server in Application Discovery Service repository. See the <a href=\"https://docs.aws.amazon.com/migrationhub/latest/ug/API_PutResourceAttributes.html#API_PutResourceAttributes_Examples\">Example</a> section below for a use case of specifying \"VM\" related values.</p> </li> <li> <p> If a server you are trying to match has multiple IP or MAC addresses, you should provide as many as you know in separate type/value pairs passed to the <code>ResourceAttributeList</code> parameter to maximize the chances of matching.</p> </li> </ul> </important>"
                      }
                    ]
                  },
                  "DryRun": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/DryRun"
                      },
                      {
                        "description": "Optional boolean flag to indicate whether any effect should take place. Used to test if the caller has permission to make the call."
                      }
                    ]
                  }
                }
              },
              "ApplicationId": {
                "type": "string",
                "pattern": "^.{1,1600}$",
                "minLength": 1,
                "maxLength": 1600
              },
              "ApplicationIds": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ApplicationId"
                },
                "minItems": 1,
                "maxItems": 100
              },
              "ApplicationStatus": {
                "type": "string",
                "enum": [
                  "NOT_STARTED",
                  "IN_PROGRESS",
                  "COMPLETED"
                ]
              },
              "UpdateDateTime": {
                "type": "string",
                "format": "date-time"
              },
              "ApplicationState": {
                "type": "object",
                "properties": {
                  "ApplicationId": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ApplicationId"
                      },
                      {
                        "description": "The configurationId from the Application Discovery Service that uniquely identifies an application."
                      }
                    ]
                  },
                  "ApplicationStatus": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ApplicationStatus"
                      },
                      {
                        "description": "The current status of an application."
                      }
                    ]
                  },
                  "LastUpdatedTime": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/UpdateDateTime"
                      },
                      {
                        "description": "The timestamp when the application status was last updated."
                      }
                    ]
                  }
                },
                "description": "The state of an application discovered through Migration Hub import, the AWS Agentless Discovery Connector, or the AWS Application Discovery Agent."
              },
              "ApplicationStateList": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ApplicationState"
                },
                "minItems": 0,
                "maxItems": 1000
              },
              "ProgressUpdateStream": {
                "type": "string",
                "pattern": "[^/:|\\000-\\037]+",
                "minLength": 1,
                "maxLength": 50
              },
              "MigrationTaskName": {
                "type": "string",
                "pattern": "[^:|]+",
                "minLength": 1,
                "maxLength": 256
              },
              "CreatedArtifact": {
                "type": "object",
                "required": [
                  "Name"
                ],
                "properties": {
                  "Name": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/CreatedArtifactName"
                      },
                      {
                        "description": "An ARN that uniquely identifies the result of a migration task."
                      }
                    ]
                  },
                  "Description": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/CreatedArtifactDescription"
                      },
                      {
                        "description": "A description that can be free-form text to record additional detail about the artifact for clarity or for later reference."
                      }
                    ]
                  }
                },
                "description": "An ARN of the AWS cloud resource target receiving the migration (e.g., AMI, EC2 instance, RDS instance, etc.)."
              },
              "DryRun": {
                "type": "boolean"
              },
              "DiscoveredResource": {
                "type": "object",
                "required": [
                  "ConfigurationId"
                ],
                "properties": {
                  "ConfigurationId": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ConfigurationId"
                      },
                      {
                        "description": "The configurationId in Application Discovery Service that uniquely identifies the on-premise resource."
                      }
                    ]
                  },
                  "Description": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/DiscoveredResourceDescription"
                      },
                      {
                        "description": "A description that can be free-form text to record additional detail about the discovered resource for clarity or later reference."
                      }
                    ]
                  }
                },
                "description": "Object representing the on-premises resource being migrated."
              },
              "ConfigurationId": {
                "type": "string",
                "pattern": "^.{1,1600}$",
                "minLength": 1,
                "maxLength": 1600
              },
              "CreatedArtifactName": {
                "type": "string",
                "pattern": "arn:[a-z-]+:[a-z0-9-]+:(?:[a-z0-9-]+|):(?:[0-9]{12}|):.*",
                "minLength": 1,
                "maxLength": 1600
              },
              "CreatedArtifactDescription": {
                "type": "string",
                "pattern": "^.{0,500}$",
                "minLength": 0,
                "maxLength": 500
              },
              "CreatedArtifactList": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CreatedArtifact"
                }
              },
              "MigrationTask": {
                "type": "object",
                "properties": {
                  "ProgressUpdateStream": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ProgressUpdateStream"
                      },
                      {
                        "description": "A name that identifies the vendor of the migration tool being used."
                      }
                    ]
                  },
                  "MigrationTaskName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/MigrationTaskName"
                      },
                      {
                        "description": "Unique identifier that references the migration task. <i>Do not store personal data in this field.</i> "
                      }
                    ]
                  },
                  "Task": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Task"
                      },
                      {
                        "description": "Task object encapsulating task information."
                      }
                    ]
                  },
                  "UpdateDateTime": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/UpdateDateTime"
                      },
                      {
                        "description": "The timestamp when the task was gathered."
                      }
                    ]
                  },
                  "ResourceAttributeList": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/LatestResourceAttributeList"
                      },
                      {
                        "description": "Information about the resource that is being migrated. This data will be used to map the task to a resource in the Application Discovery Service repository."
                      }
                    ]
                  }
                },
                "description": "Represents a migration task in a migration tool."
              },
              "DiscoveredResourceDescription": {
                "type": "string",
                "pattern": "^.{0,500}$",
                "minLength": 0,
                "maxLength": 500
              },
              "DiscoveredResourceList": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/DiscoveredResource"
                }
              },
              "ResourceAttribute": {
                "type": "object",
                "required": [
                  "Type",
                  "Value"
                ],
                "properties": {
                  "Type": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ResourceAttributeType"
                      },
                      {
                        "description": "Type of resource."
                      }
                    ]
                  },
                  "Value": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ResourceAttributeValue"
                      },
                      {
                        "description": "Value of the resource type."
                      }
                    ]
                  }
                },
                "description": "<p>Attribute associated with a resource.</p> <p>Note the corresponding format required per type listed below:</p> <dl> <dt>IPV4</dt> <dd> <p> <code>x.x.x.x</code> </p> <p> <i>where x is an integer in the range [0,255]</i> </p> </dd> <dt>IPV6</dt> <dd> <p> <code>y : y : y : y : y : y : y : y</code> </p> <p> <i>where y is a hexadecimal between 0 and FFFF. [0, FFFF]</i> </p> </dd> <dt>MAC_ADDRESS</dt> <dd> <p> <code>^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})$</code> </p> </dd> <dt>FQDN</dt> <dd> <p> <code>^[^&lt;&gt;{}\\\\\\\\/?,=\\\\p{Cntrl}]{1,256}$</code> </p> </dd> </dl>"
              },
              "LatestResourceAttributeList": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ResourceAttribute"
                },
                "minItems": 0,
                "maxItems": 100
              },
              "Token": {
                "type": "string",
                "pattern": "^[a-zA-Z0-9\\/\\+\\=]{0,2048}$",
                "minLength": 0,
                "maxLength": 2048
              },
              "MaxResults": {
                "type": "integer",
                "minimum": 1,
                "maximum": 100
              },
              "MaxResultsCreatedArtifacts": {
                "type": "integer",
                "minimum": 1,
                "maximum": 10
              },
              "MaxResultsResources": {
                "type": "integer",
                "minimum": 1,
                "maximum": 10
              },
              "ResourceName": {
                "type": "string",
                "pattern": "^.{1,1600}$",
                "minLength": 1,
                "maxLength": 1600
              },
              "MigrationTaskSummaryList": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/MigrationTaskSummary"
                }
              },
              "ProgressUpdateStreamSummaryList": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ProgressUpdateStreamSummary"
                }
              },
              "Task": {
                "type": "object",
                "required": [
                  "Status"
                ],
                "properties": {
                  "Status": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Status"
                      },
                      {
                        "description": "Status of the task - Not Started, In-Progress, Complete."
                      }
                    ]
                  },
                  "StatusDetail": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/StatusDetail"
                      },
                      {
                        "description": "Details of task status as notified by a migration tool. A tool might use this field to provide clarifying information about the status that is unique to that tool or that explains an error state."
                      }
                    ]
                  },
                  "ProgressPercent": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ProgressPercent"
                      },
                      {
                        "description": "Indication of the percentage completion of the task."
                      }
                    ]
                  }
                },
                "description": "Task object encapsulating task information."
              },
              "Status": {
                "type": "string",
                "enum": [
                  "NOT_STARTED",
                  "IN_PROGRESS",
                  "FAILED",
                  "COMPLETED"
                ]
              },
              "ProgressPercent": {
                "type": "integer",
                "minimum": 0,
                "maximum": 100
              },
              "StatusDetail": {
                "type": "string",
                "pattern": "^.{0,500}$",
                "minLength": 0,
                "maxLength": 500
              },
              "MigrationTaskSummary": {
                "type": "object",
                "properties": {
                  "ProgressUpdateStream": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ProgressUpdateStream"
                      },
                      {
                        "description": "An AWS resource used for access control. It should uniquely identify the migration tool as it is used for all updates made by the tool."
                      }
                    ]
                  },
                  "MigrationTaskName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/MigrationTaskName"
                      },
                      {
                        "description": "Unique identifier that references the migration task. <i>Do not store personal data in this field.</i> "
                      }
                    ]
                  },
                  "Status": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Status"
                      },
                      {
                        "description": "Status of the task."
                      }
                    ]
                  },
                  "ProgressPercent": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ProgressPercent"
                      },
                      {
                        "description": "Indication of the percentage completion of the task."
                      }
                    ]
                  },
                  "StatusDetail": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/StatusDetail"
                      },
                      {
                        "description": "Detail information of what is being done within the overall status state."
                      }
                    ]
                  },
                  "UpdateDateTime": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/UpdateDateTime"
                      },
                      {
                        "description": "The timestamp when the task was gathered."
                      }
                    ]
                  }
                },
                "description": "MigrationTaskSummary includes <code>MigrationTaskName</code>, <code>ProgressPercent</code>, <code>ProgressUpdateStream</code>, <code>Status</code>, and <code>UpdateDateTime</code> for each task."
              },
              "NextUpdateSeconds": {
                "type": "integer",
                "minimum": 0
              },
              "ProgressUpdateStreamSummary": {
                "type": "object",
                "properties": {
                  "ProgressUpdateStreamName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ProgressUpdateStream"
                      },
                      {
                        "description": "The name of the ProgressUpdateStream. <i>Do not store personal data in this field.</i> "
                      }
                    ]
                  }
                },
                "description": "Summary of the AWS resource used for access control that is implicitly linked to your AWS account."
              },
              "ResourceAttributeList": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ResourceAttribute"
                },
                "minItems": 1,
                "maxItems": 100
              },
              "ResourceAttributeType": {
                "type": "string",
                "enum": [
                  "IPV4_ADDRESS",
                  "IPV6_ADDRESS",
                  "MAC_ADDRESS",
                  "FQDN",
                  "VM_MANAGER_ID",
                  "VM_MANAGED_OBJECT_REFERENCE",
                  "VM_NAME",
                  "VM_PATH",
                  "BIOS_ID",
                  "MOTHERBOARD_SERIAL_NUMBER"
                ]
              },
              "ResourceAttributeValue": {
                "type": "string",
                "pattern": "^.{1,256}$",
                "minLength": 1,
                "maxLength": 256
              }
            }
          },
          "security": [
            {
              "hmac": []
            }
          ]
        }
        // Exercise and evaluate
        assert.ok(typeof schema === 'object')
    })
    it('should match schema2', () => {
        // Setup
        const schema: OpenAPI = {
          "openapi": "3.0.0",
          "info": {
            "version": "2017-07-25",
            "x-release": "v4",
            "title": "AWS Amplify",
            "description": "Amplify enables developers to develop and deploy cloud-powered mobile and web apps. The Amplify Console provides a continuous delivery and hosting service for web applications. For more information, see the <a href=\"https://docs.aws.amazon.com/amplify/latest/userguide/welcome.html\">Amplify Console User Guide</a>. The Amplify Framework is a comprehensive set of SDKs, libraries, tools, and documentation for client app development. For more information, see the <a href=\"https://docs.amplify.aws/\">Amplify Framework.</a> ",
            "x-logo": {
              "url": "https://api.apis.guru/v2/cache/logo/https_twitter.com_awscloud_profile_image.png",
              "backgroundColor": "#FFFFFF"
            },
            "termsOfService": "https://aws.amazon.com/service-terms/",
            "contact": {
              "name": "Mike Ralphson",
              "email": "mike.ralphson@gmail.com",
              "url": "https://github.com/mermade/aws2openapi",
              "x-twitter": "PermittedSoc"
            },
            "license": {
              "name": "Apache 2.0 License",
              "url": "http://www.apache.org/licenses/"
            },
            "x-providerName": "amazonaws.com",
            "x-serviceName": "amplify",
            "x-aws-signingName": "amplify",
            "x-origin": [
              {
                "contentType": "application/json",
                "url": "https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/amplify-2017-07-25.normal.json",
                "converter": {
                  "url": "https://github.com/mermade/aws2openapi",
                  "version": "1.0.0"
                },
                "x-apisguru-driver": "external"
              }
            ],
            "x-apiClientRegistration": {
              "url": "https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct"
            },
            "x-apisguru-categories": [
              "cloud"
            ],
            "x-preferred": true
          },
          "externalDocs": {
            "description": "Amazon Web Services documentation",
            "url": "https://docs.aws.amazon.com/amplify/"
          },
          "servers": [
            {
              "url": "http://amplify.{region}.amazonaws.com",
              "variables": {
                "region": {
                  "description": "The AWS region",
                  "enum": [
                    "us-east-1",
                    "us-east-2",
                    "us-west-1",
                    "us-west-2",
                    "us-gov-west-1",
                    "us-gov-east-1",
                    "ca-central-1",
                    "eu-north-1",
                    "eu-west-1",
                    "eu-west-2",
                    "eu-west-3",
                    "eu-central-1",
                    "eu-south-1",
                    "af-south-1",
                    "ap-northeast-1",
                    "ap-northeast-2",
                    "ap-northeast-3",
                    "ap-southeast-1",
                    "ap-southeast-2",
                    "ap-east-1",
                    "ap-south-1",
                    "sa-east-1",
                    "me-south-1"
                  ],
                  "default": "us-east-1"
                }
              },
              "description": "The Amplify multi-region endpoint"
            },
            {
              "url": "https://amplify.{region}.amazonaws.com",
              "variables": {
                "region": {
                  "description": "The AWS region",
                  "enum": [
                    "us-east-1",
                    "us-east-2",
                    "us-west-1",
                    "us-west-2",
                    "us-gov-west-1",
                    "us-gov-east-1",
                    "ca-central-1",
                    "eu-north-1",
                    "eu-west-1",
                    "eu-west-2",
                    "eu-west-3",
                    "eu-central-1",
                    "eu-south-1",
                    "af-south-1",
                    "ap-northeast-1",
                    "ap-northeast-2",
                    "ap-northeast-3",
                    "ap-southeast-1",
                    "ap-southeast-2",
                    "ap-east-1",
                    "ap-south-1",
                    "sa-east-1",
                    "me-south-1"
                  ],
                  "default": "us-east-1"
                }
              },
              "description": "The Amplify multi-region endpoint"
            },
            {
              "url": "http://amplify.{region}.amazonaws.com.cn",
              "variables": {
                "region": {
                  "description": "The AWS region",
                  "enum": [
                    "cn-north-1",
                    "cn-northwest-1"
                  ],
                  "default": "cn-north-1"
                }
              },
              "description": "The Amplify endpoint for China (Beijing) and China (Ningxia)"
            },
            {
              "url": "https://amplify.{region}.amazonaws.com.cn",
              "variables": {
                "region": {
                  "description": "The AWS region",
                  "enum": [
                    "cn-north-1",
                    "cn-northwest-1"
                  ],
                  "default": "cn-north-1"
                }
              },
              "description": "The Amplify endpoint for China (Beijing) and China (Ningxia)"
            }
          ],
          "x-hasEquivalentPaths": true,
          "paths": {
            "/apps": {
              "post": {
                "operationId": "CreateApp",
                "description": " Creates a new Amplify app. ",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/CreateAppResult"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "BadRequestException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/BadRequestException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "UnauthorizedException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/UnauthorizedException"
                        }
                      }
                    }
                  },
                  "482": {
                    "description": "InternalFailureException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InternalFailureException"
                        }
                      }
                    }
                  },
                  "483": {
                    "description": "LimitExceededException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/LimitExceededException"
                        }
                      }
                    }
                  },
                  "484": {
                    "description": "DependentServiceFailureException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/DependentServiceFailureException"
                        }
                      }
                    }
                  }
                },
                "parameters": [],
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "required": [
                          "name"
                        ],
                        "properties": {
                          "name": {
                            "description": " The name for an Amplify app. ",
                            "type": "string",
                            "pattern": "\\(\\?s\\).\\+",
                            "minLength": 1,
                            "maxLength": 255
                          },
                          "description": {
                            "description": " The description for an Amplify app. ",
                            "type": "string",
                            "pattern": "\\(\\?s\\).*",
                            "maxLength": 1000
                          },
                          "repository": {
                            "description": " The repository for an Amplify app. ",
                            "type": "string",
                            "pattern": "\\(\\?s\\).*",
                            "maxLength": 1000
                          },
                          "platform": {
                            "description": " The platform for the Amplify app. For a static app, set the platform type to <code>WEB</code>. For a dynamic server-side rendered (SSR) app, set the platform type to <code>WEB_COMPUTE</code>. For an app requiring Amplify Hosting's original SSR support only, set the platform type to <code>WEB_DYNAMIC</code>.",
                            "type": "string",
                            "enum": [
                              "WEB",
                              "WEB_DYNAMIC",
                              "WEB_COMPUTE"
                            ]
                          },
                          "iamServiceRoleArn": {
                            "description": " The AWS Identity and Access Management (IAM) service role for an Amplify app. ",
                            "type": "string",
                            "pattern": "\\(\\?s\\).*",
                            "minLength": 0,
                            "maxLength": 1000
                          },
                          "oauthToken": {
                            "description": "<p>The OAuth token for a third-party source control system for an Amplify app. The OAuth token is used to create a webhook and a read-only deploy key using SSH cloning. The OAuth token is not stored.</p> <p>Use <code>oauthToken</code> for repository providers other than GitHub, such as Bitbucket or CodeCommit. To authorize access to GitHub as your repository provider, use <code>accessToken</code>.</p> <p>You must specify either <code>oauthToken</code> or <code>accessToken</code> when you create a new app.</p> <p>Existing Amplify apps deployed from a GitHub repository using OAuth continue to work with CI/CD. However, we strongly recommend that you migrate these apps to use the GitHub App. For more information, see <a href=\"https://docs.aws.amazon.com/amplify/latest/UserGuide/setting-up-GitHub-access.html#migrating-to-github-app-auth\">Migrating an existing OAuth app to the Amplify GitHub App</a> in the <i>Amplify User Guide</i> .</p>",
                            "type": "string",
                            "pattern": "\\(\\?s\\).*",
                            "maxLength": 1000,
                            "format": "password"
                          },
                          "accessToken": {
                            "description": "<p>The personal access token for a GitHub repository for an Amplify app. The personal access token is used to authorize access to a GitHub repository using the Amplify GitHub App. The token is not stored.</p> <p>Use <code>accessToken</code> for GitHub repositories only. To authorize access to a repository provider such as Bitbucket or CodeCommit, use <code>oauthToken</code>.</p> <p>You must specify either <code>accessToken</code> or <code>oauthToken</code> when you create a new app.</p> <p>Existing Amplify apps deployed from a GitHub repository using OAuth continue to work with CI/CD. However, we strongly recommend that you migrate these apps to use the GitHub App. For more information, see <a href=\"https://docs.aws.amazon.com/amplify/latest/UserGuide/setting-up-GitHub-access.html#migrating-to-github-app-auth\">Migrating an existing OAuth app to the Amplify GitHub App</a> in the <i>Amplify User Guide</i> .</p>",
                            "type": "string",
                            "pattern": "\\(\\?s\\).\\+",
                            "minLength": 1,
                            "maxLength": 255,
                            "format": "password"
                          },
                          "environmentVariables": {
                            "description": " The environment variables map for an Amplify app. ",
                            "type": "object",
                            "additionalProperties": {
                              "$ref": "#/components/schemas/EnvValue"
                            }
                          },
                          "enableBranchAutoBuild": {
                            "description": " Enables the auto building of branches for an Amplify app. ",
                            "type": "boolean"
                          },
                          "enableBranchAutoDeletion": {
                            "description": " Automatically disconnects a branch in the Amplify Console when you delete a branch from your Git repository. ",
                            "type": "boolean"
                          },
                          "enableBasicAuth": {
                            "description": " Enables basic authorization for an Amplify app. This will apply to all branches that are part of this app. ",
                            "type": "boolean"
                          },
                          "basicAuthCredentials": {
                            "description": " The credentials for basic authorization for an Amplify app. You must base64-encode the authorization credentials and provide them in the format <code>user:password</code>.",
                            "type": "string",
                            "pattern": "\\(\\?s\\).*",
                            "maxLength": 2000,
                            "format": "password"
                          },
                          "customRules": {
                            "description": " The custom rewrite and redirect rules for an Amplify app. ",
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/CustomRule"
                            }
                          },
                          "tags": {
                            "description": " The tag for an Amplify app. ",
                            "type": "object",
                            "minProperties": 0,
                            "maxProperties": 50,
                            "additionalProperties": {
                              "$ref": "#/components/schemas/TagValue"
                            }
                          },
                          "buildSpec": {
                            "description": " The build specification (build spec) file for an Amplify app build. ",
                            "type": "string",
                            "pattern": "\\(\\?s\\).\\+",
                            "minLength": 1,
                            "maxLength": 25000,
                            "format": "password"
                          },
                          "customHeaders": {
                            "description": "The custom HTTP headers for an Amplify app.",
                            "type": "string",
                            "pattern": "\\(\\?s\\).*",
                            "minLength": 0,
                            "maxLength": 25000
                          },
                          "enableAutoBranchCreation": {
                            "description": " Enables automated branch creation for an Amplify app. ",
                            "type": "boolean"
                          },
                          "autoBranchCreationPatterns": {
                            "description": " The automated branch creation glob patterns for an Amplify app. ",
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/AutoBranchCreationPattern"
                            }
                          },
                          "autoBranchCreationConfig": {
                            "description": " Describes the automated branch creation configuration. ",
                            "type": "object",
                            "properties": {
                              "stage": {
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/Stage"
                                  },
                                  {
                                    "description": " Describes the current stage for the autocreated branch. "
                                  }
                                ]
                              },
                              "framework": {
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/Framework"
                                  },
                                  {
                                    "description": " The framework for the autocreated branch. "
                                  }
                                ]
                              },
                              "enableAutoBuild": {
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/EnableAutoBuild"
                                  },
                                  {
                                    "description": " Enables auto building for the autocreated branch. "
                                  }
                                ]
                              },
                              "environmentVariables": {
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/EnvironmentVariables"
                                  },
                                  {
                                    "description": " The environment variables for the autocreated branch. "
                                  }
                                ]
                              },
                              "basicAuthCredentials": {
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/BasicAuthCredentials"
                                  },
                                  {
                                    "description": " The basic authorization credentials for the autocreated branch. You must base64-encode the authorization credentials and provide them in the format <code>user:password</code>."
                                  }
                                ]
                              },
                              "enableBasicAuth": {
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/EnableBasicAuth"
                                  },
                                  {
                                    "description": " Enables basic authorization for the autocreated branch. "
                                  }
                                ]
                              },
                              "enablePerformanceMode": {
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/EnablePerformanceMode"
                                  },
                                  {
                                    "description": "<p>Enables performance mode for the branch.</p> <p>Performance mode optimizes for faster hosting performance by keeping content cached at the edge for a longer interval. When performance mode is enabled, hosting configuration or code changes can take up to 10 minutes to roll out. </p>"
                                  }
                                ]
                              },
                              "buildSpec": {
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/BuildSpec"
                                  },
                                  {
                                    "description": " The build specification (build spec) for the autocreated branch. "
                                  }
                                ]
                              },
                              "enablePullRequestPreview": {
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/EnablePullRequestPreview"
                                  },
                                  {
                                    "description": " Enables pull request previews for the autocreated branch. "
                                  }
                                ]
                              },
                              "pullRequestEnvironmentName": {
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/PullRequestEnvironmentName"
                                  },
                                  {
                                    "description": " The Amplify environment name for the pull request. "
                                  }
                                ]
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "parameters": [
                {
                  "$ref": "#/components/parameters/X-Amz-Content-Sha256"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Date"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Algorithm"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Credential"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Security-Token"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Signature"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-SignedHeaders"
                }
              ],
              "get": {
                "operationId": "ListApps",
                "description": " Returns a list of the existing Amplify apps. ",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ListAppsResult"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "BadRequestException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/BadRequestException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "UnauthorizedException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/UnauthorizedException"
                        }
                      }
                    }
                  },
                  "482": {
                    "description": "InternalFailureException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InternalFailureException"
                        }
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "nextToken",
                    "in": "query",
                    "required": false,
                    "description": " A pagination token. If non-null, the pagination token is returned in a result. Pass its value in another request to retrieve more entries. ",
                    "schema": {
                      "type": "string",
                      "pattern": "\\(\\?s\\).*",
                      "maxLength": 2000
                    }
                  },
                  {
                    "name": "maxResults",
                    "in": "query",
                    "required": false,
                    "description": " The maximum number of records to list in a single response. ",
                    "schema": {
                      "type": "integer",
                      "minimum": 0,
                      "maximum": 100
                    }
                  }
                ]
              }
            },
            "/apps/{appId}/backendenvironments": {
              "post": {
                "operationId": "CreateBackendEnvironment",
                "description": " Creates a new backend environment for an Amplify app. ",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/CreateBackendEnvironmentResult"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "BadRequestException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/BadRequestException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "UnauthorizedException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/UnauthorizedException"
                        }
                      }
                    }
                  },
                  "482": {
                    "description": "NotFoundException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/NotFoundException"
                        }
                      }
                    }
                  },
                  "483": {
                    "description": "InternalFailureException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InternalFailureException"
                        }
                      }
                    }
                  },
                  "484": {
                    "description": "LimitExceededException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/LimitExceededException"
                        }
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "appId",
                    "in": "path",
                    "required": true,
                    "description": " The unique ID for an Amplify app. ",
                    "schema": {
                      "type": "string",
                      "pattern": "d[a-z0-9]+",
                      "minLength": 1,
                      "maxLength": 20
                    }
                  }
                ],
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "required": [
                          "environmentName"
                        ],
                        "properties": {
                          "environmentName": {
                            "description": " The name for the backend environment. ",
                            "type": "string",
                            "pattern": "\\(\\?s\\).\\+",
                            "minLength": 1,
                            "maxLength": 255
                          },
                          "stackName": {
                            "description": " The AWS CloudFormation stack name of a backend environment. ",
                            "type": "string",
                            "pattern": "\\(\\?s\\).\\+",
                            "minLength": 1,
                            "maxLength": 255
                          },
                          "deploymentArtifacts": {
                            "description": " The name of deployment artifacts. ",
                            "type": "string",
                            "pattern": "\\(\\?s\\).\\+",
                            "minLength": 1,
                            "maxLength": 1000
                          }
                        }
                      }
                    }
                  }
                }
              },
              "parameters": [
                {
                  "$ref": "#/components/parameters/X-Amz-Content-Sha256"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Date"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Algorithm"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Credential"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Security-Token"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Signature"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-SignedHeaders"
                }
              ],
              "get": {
                "operationId": "ListBackendEnvironments",
                "description": " Lists the backend environments for an Amplify app. ",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ListBackendEnvironmentsResult"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "BadRequestException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/BadRequestException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "UnauthorizedException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/UnauthorizedException"
                        }
                      }
                    }
                  },
                  "482": {
                    "description": "InternalFailureException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InternalFailureException"
                        }
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "appId",
                    "in": "path",
                    "required": true,
                    "description": " The unique ID for an Amplify app. ",
                    "schema": {
                      "type": "string",
                      "pattern": "d[a-z0-9]+",
                      "minLength": 1,
                      "maxLength": 20
                    }
                  },
                  {
                    "name": "environmentName",
                    "in": "query",
                    "required": false,
                    "description": " The name of the backend environment ",
                    "schema": {
                      "type": "string",
                      "pattern": "\\(\\?s\\).\\+",
                      "minLength": 1,
                      "maxLength": 255
                    }
                  },
                  {
                    "name": "nextToken",
                    "in": "query",
                    "required": false,
                    "description": " A pagination token. Set to null to start listing backend environments from the start. If a non-null pagination token is returned in a result, pass its value in here to list more backend environments. ",
                    "schema": {
                      "type": "string",
                      "pattern": "\\(\\?s\\).*",
                      "maxLength": 2000
                    }
                  },
                  {
                    "name": "maxResults",
                    "in": "query",
                    "required": false,
                    "description": " The maximum number of records to list in a single response. ",
                    "schema": {
                      "type": "integer",
                      "minimum": 0,
                      "maximum": 100
                    }
                  }
                ]
              }
            },
            "/apps/{appId}/branches": {
              "post": {
                "operationId": "CreateBranch",
                "description": " Creates a new branch for an Amplify app. ",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/CreateBranchResult"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "BadRequestException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/BadRequestException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "UnauthorizedException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/UnauthorizedException"
                        }
                      }
                    }
                  },
                  "482": {
                    "description": "NotFoundException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/NotFoundException"
                        }
                      }
                    }
                  },
                  "483": {
                    "description": "InternalFailureException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InternalFailureException"
                        }
                      }
                    }
                  },
                  "484": {
                    "description": "LimitExceededException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/LimitExceededException"
                        }
                      }
                    }
                  },
                  "485": {
                    "description": "DependentServiceFailureException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/DependentServiceFailureException"
                        }
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "appId",
                    "in": "path",
                    "required": true,
                    "description": " The unique ID for an Amplify app. ",
                    "schema": {
                      "type": "string",
                      "pattern": "d[a-z0-9]+",
                      "minLength": 1,
                      "maxLength": 20
                    }
                  }
                ],
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "required": [
                          "branchName"
                        ],
                        "properties": {
                          "branchName": {
                            "description": " The name for the branch. ",
                            "type": "string",
                            "pattern": "\\(\\?s\\).\\+",
                            "minLength": 1,
                            "maxLength": 255
                          },
                          "description": {
                            "description": " The description for the branch. ",
                            "type": "string",
                            "pattern": "\\(\\?s\\).*",
                            "maxLength": 1000
                          },
                          "stage": {
                            "description": " Describes the current stage for the branch. ",
                            "type": "string",
                            "enum": [
                              "PRODUCTION",
                              "BETA",
                              "DEVELOPMENT",
                              "EXPERIMENTAL",
                              "PULL_REQUEST"
                            ]
                          },
                          "framework": {
                            "description": " The framework for the branch. ",
                            "type": "string",
                            "pattern": "\\(\\?s\\).*",
                            "maxLength": 255
                          },
                          "enableNotification": {
                            "description": " Enables notifications for the branch. ",
                            "type": "boolean"
                          },
                          "enableAutoBuild": {
                            "description": " Enables auto building for the branch. ",
                            "type": "boolean"
                          },
                          "environmentVariables": {
                            "description": " The environment variables for the branch. ",
                            "type": "object",
                            "additionalProperties": {
                              "$ref": "#/components/schemas/EnvValue"
                            }
                          },
                          "basicAuthCredentials": {
                            "description": " The basic authorization credentials for the branch. You must base64-encode the authorization credentials and provide them in the format <code>user:password</code>.",
                            "type": "string",
                            "pattern": "\\(\\?s\\).*",
                            "maxLength": 2000,
                            "format": "password"
                          },
                          "enableBasicAuth": {
                            "description": " Enables basic authorization for the branch. ",
                            "type": "boolean"
                          },
                          "enablePerformanceMode": {
                            "description": "<p>Enables performance mode for the branch.</p> <p>Performance mode optimizes for faster hosting performance by keeping content cached at the edge for a longer interval. When performance mode is enabled, hosting configuration or code changes can take up to 10 minutes to roll out. </p>",
                            "type": "boolean"
                          },
                          "tags": {
                            "description": " The tag for the branch. ",
                            "type": "object",
                            "minProperties": 0,
                            "maxProperties": 50,
                            "additionalProperties": {
                              "$ref": "#/components/schemas/TagValue"
                            }
                          },
                          "buildSpec": {
                            "description": " The build specification (build spec) file for an Amplify app build. ",
                            "type": "string",
                            "pattern": "\\(\\?s\\).\\+",
                            "minLength": 1,
                            "maxLength": 25000,
                            "format": "password"
                          },
                          "ttl": {
                            "description": " The content Time to Live (TTL) for the website in seconds. ",
                            "type": "string",
                            "pattern": "\\d*",
                            "minLength": 0,
                            "maxLength": 32
                          },
                          "displayName": {
                            "description": " The display name for a branch. This is used as the default domain prefix. ",
                            "type": "string",
                            "pattern": "\\(\\?s\\).*",
                            "maxLength": 255
                          },
                          "enablePullRequestPreview": {
                            "description": " Enables pull request previews for this branch. ",
                            "type": "boolean"
                          },
                          "pullRequestEnvironmentName": {
                            "description": " The Amplify environment name for the pull request. ",
                            "type": "string",
                            "pattern": "\\(\\?s\\).*",
                            "maxLength": 20
                          },
                          "backendEnvironmentArn": {
                            "description": " The Amazon Resource Name (ARN) for a backend environment that is part of an Amplify app. ",
                            "type": "string",
                            "pattern": "\\(\\?s\\).*",
                            "minLength": 0,
                            "maxLength": 1000
                          }
                        }
                      }
                    }
                  }
                }
              },
              "parameters": [
                {
                  "$ref": "#/components/parameters/X-Amz-Content-Sha256"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Date"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Algorithm"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Credential"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Security-Token"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Signature"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-SignedHeaders"
                }
              ],
              "get": {
                "operationId": "ListBranches",
                "description": " Lists the branches of an Amplify app. ",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ListBranchesResult"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "BadRequestException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/BadRequestException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "UnauthorizedException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/UnauthorizedException"
                        }
                      }
                    }
                  },
                  "482": {
                    "description": "InternalFailureException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InternalFailureException"
                        }
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "appId",
                    "in": "path",
                    "required": true,
                    "description": " The unique ID for an Amplify app. ",
                    "schema": {
                      "type": "string",
                      "pattern": "d[a-z0-9]+",
                      "minLength": 1,
                      "maxLength": 20
                    }
                  },
                  {
                    "name": "nextToken",
                    "in": "query",
                    "required": false,
                    "description": " A pagination token. Set to null to start listing branches from the start. If a non-null pagination token is returned in a result, pass its value in here to list more branches. ",
                    "schema": {
                      "type": "string",
                      "pattern": "\\(\\?s\\).*",
                      "maxLength": 2000
                    }
                  },
                  {
                    "name": "maxResults",
                    "in": "query",
                    "required": false,
                    "description": " The maximum number of records to list in a single response. ",
                    "schema": {
                      "type": "integer",
                      "minimum": 0,
                      "maximum": 100
                    }
                  }
                ]
              }
            },
            "/apps/{appId}/branches/{branchName}/deployments": {
              "post": {
                "operationId": "CreateDeployment",
                "description": " Creates a deployment for a manually deployed Amplify app. Manually deployed apps are not connected to a repository. ",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/CreateDeploymentResult"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "BadRequestException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/BadRequestException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "UnauthorizedException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/UnauthorizedException"
                        }
                      }
                    }
                  },
                  "482": {
                    "description": "InternalFailureException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InternalFailureException"
                        }
                      }
                    }
                  },
                  "483": {
                    "description": "LimitExceededException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/LimitExceededException"
                        }
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "appId",
                    "in": "path",
                    "required": true,
                    "description": " The unique ID for an Amplify app. ",
                    "schema": {
                      "type": "string",
                      "pattern": "d[a-z0-9]+",
                      "minLength": 1,
                      "maxLength": 20
                    }
                  },
                  {
                    "name": "branchName",
                    "in": "path",
                    "required": true,
                    "description": " The name for the branch, for the job. ",
                    "schema": {
                      "type": "string",
                      "pattern": "\\(\\?s\\).\\+",
                      "minLength": 1,
                      "maxLength": 255
                    }
                  }
                ],
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "fileMap": {
                            "description": " An optional file map that contains the file name as the key and the file content md5 hash as the value. If this argument is provided, the service will generate a unique upload URL per file. Otherwise, the service will only generate a single upload URL for the zipped files. ",
                            "type": "object",
                            "additionalProperties": {
                              "$ref": "#/components/schemas/MD5Hash"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "parameters": [
                {
                  "$ref": "#/components/parameters/X-Amz-Content-Sha256"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Date"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Algorithm"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Credential"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Security-Token"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Signature"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-SignedHeaders"
                }
              ]
            },
            "/apps/{appId}/domains": {
              "post": {
                "operationId": "CreateDomainAssociation",
                "description": " Creates a new domain association for an Amplify app. This action associates a custom domain with the Amplify app ",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/CreateDomainAssociationResult"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "BadRequestException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/BadRequestException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "UnauthorizedException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/UnauthorizedException"
                        }
                      }
                    }
                  },
                  "482": {
                    "description": "NotFoundException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/NotFoundException"
                        }
                      }
                    }
                  },
                  "483": {
                    "description": "InternalFailureException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InternalFailureException"
                        }
                      }
                    }
                  },
                  "484": {
                    "description": "LimitExceededException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/LimitExceededException"
                        }
                      }
                    }
                  },
                  "485": {
                    "description": "DependentServiceFailureException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/DependentServiceFailureException"
                        }
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "appId",
                    "in": "path",
                    "required": true,
                    "description": " The unique ID for an Amplify app. ",
                    "schema": {
                      "type": "string",
                      "pattern": "d[a-z0-9]+",
                      "minLength": 1,
                      "maxLength": 20
                    }
                  }
                ],
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "required": [
                          "domainName",
                          "subDomainSettings"
                        ],
                        "properties": {
                          "domainName": {
                            "description": " The domain name for the domain association. ",
                            "type": "string",
                            "pattern": "^(((?!-)[A-Za-z0-9-]{0,62}[A-Za-z0-9])\\.)+((?!-)[A-Za-z0-9-]{1,62}[A-Za-z0-9])(\\.)?$",
                            "maxLength": 64
                          },
                          "enableAutoSubDomain": {
                            "description": " Enables the automated creation of subdomains for branches. ",
                            "type": "boolean"
                          },
                          "subDomainSettings": {
                            "description": " The setting for the subdomain. ",
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/SubDomainSetting"
                            },
                            "maxItems": 500
                          },
                          "autoSubDomainCreationPatterns": {
                            "description": " Sets the branch patterns for automatic subdomain creation. ",
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/AutoSubDomainCreationPattern"
                            }
                          },
                          "autoSubDomainIAMRole": {
                            "description": " The required AWS Identity and Access Management (IAM) service role for the Amazon Resource Name (ARN) for automatically creating subdomains. ",
                            "type": "string",
                            "pattern": "^$|^arn:aws:iam::\\d{12}:role.+",
                            "maxLength": 1000
                          }
                        }
                      }
                    }
                  }
                }
              },
              "parameters": [
                {
                  "$ref": "#/components/parameters/X-Amz-Content-Sha256"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Date"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Algorithm"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Credential"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Security-Token"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Signature"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-SignedHeaders"
                }
              ],
              "get": {
                "operationId": "ListDomainAssociations",
                "description": " Returns the domain associations for an Amplify app. ",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ListDomainAssociationsResult"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "BadRequestException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/BadRequestException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "UnauthorizedException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/UnauthorizedException"
                        }
                      }
                    }
                  },
                  "482": {
                    "description": "InternalFailureException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InternalFailureException"
                        }
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "appId",
                    "in": "path",
                    "required": true,
                    "description": " The unique ID for an Amplify app. ",
                    "schema": {
                      "type": "string",
                      "pattern": "d[a-z0-9]+",
                      "minLength": 1,
                      "maxLength": 20
                    }
                  },
                  {
                    "name": "nextToken",
                    "in": "query",
                    "required": false,
                    "description": " A pagination token. Set to null to start listing apps from the start. If non-null, a pagination token is returned in a result. Pass its value in here to list more projects. ",
                    "schema": {
                      "type": "string",
                      "pattern": "\\(\\?s\\).*",
                      "maxLength": 2000
                    }
                  },
                  {
                    "name": "maxResults",
                    "in": "query",
                    "required": false,
                    "description": " The maximum number of records to list in a single response. ",
                    "schema": {
                      "type": "integer",
                      "minimum": 0,
                      "maximum": 100
                    }
                  }
                ]
              }
            },
            "/apps/{appId}/webhooks": {
              "post": {
                "operationId": "CreateWebhook",
                "description": " Creates a new webhook on an Amplify app. ",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/CreateWebhookResult"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "BadRequestException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/BadRequestException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "UnauthorizedException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/UnauthorizedException"
                        }
                      }
                    }
                  },
                  "482": {
                    "description": "NotFoundException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/NotFoundException"
                        }
                      }
                    }
                  },
                  "483": {
                    "description": "InternalFailureException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InternalFailureException"
                        }
                      }
                    }
                  },
                  "484": {
                    "description": "LimitExceededException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/LimitExceededException"
                        }
                      }
                    }
                  },
                  "485": {
                    "description": "DependentServiceFailureException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/DependentServiceFailureException"
                        }
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "appId",
                    "in": "path",
                    "required": true,
                    "description": " The unique ID for an Amplify app. ",
                    "schema": {
                      "type": "string",
                      "pattern": "d[a-z0-9]+",
                      "minLength": 1,
                      "maxLength": 20
                    }
                  }
                ],
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "required": [
                          "branchName"
                        ],
                        "properties": {
                          "branchName": {
                            "description": " The name for a branch that is part of an Amplify app. ",
                            "type": "string",
                            "pattern": "\\(\\?s\\).\\+",
                            "minLength": 1,
                            "maxLength": 255
                          },
                          "description": {
                            "description": " The description for a webhook. ",
                            "type": "string",
                            "pattern": "\\(\\?s\\).*",
                            "maxLength": 1000
                          }
                        }
                      }
                    }
                  }
                }
              },
              "parameters": [
                {
                  "$ref": "#/components/parameters/X-Amz-Content-Sha256"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Date"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Algorithm"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Credential"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Security-Token"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Signature"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-SignedHeaders"
                }
              ],
              "get": {
                "operationId": "ListWebhooks",
                "description": " Returns a list of webhooks for an Amplify app. ",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ListWebhooksResult"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "BadRequestException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/BadRequestException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "UnauthorizedException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/UnauthorizedException"
                        }
                      }
                    }
                  },
                  "482": {
                    "description": "InternalFailureException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InternalFailureException"
                        }
                      }
                    }
                  },
                  "483": {
                    "description": "LimitExceededException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/LimitExceededException"
                        }
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "appId",
                    "in": "path",
                    "required": true,
                    "description": " The unique ID for an Amplify app. ",
                    "schema": {
                      "type": "string",
                      "pattern": "d[a-z0-9]+",
                      "minLength": 1,
                      "maxLength": 20
                    }
                  },
                  {
                    "name": "nextToken",
                    "in": "query",
                    "required": false,
                    "description": " A pagination token. Set to null to start listing webhooks from the start. If non-null,the pagination token is returned in a result. Pass its value in here to list more webhooks. ",
                    "schema": {
                      "type": "string",
                      "pattern": "\\(\\?s\\).*",
                      "maxLength": 2000
                    }
                  },
                  {
                    "name": "maxResults",
                    "in": "query",
                    "required": false,
                    "description": " The maximum number of records to list in a single response. ",
                    "schema": {
                      "type": "integer",
                      "minimum": 0,
                      "maximum": 100
                    }
                  }
                ]
              }
            },
            "/apps/{appId}": {
              "delete": {
                "operationId": "DeleteApp",
                "description": " Deletes an existing Amplify app specified by an app ID. ",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/DeleteAppResult"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "BadRequestException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/BadRequestException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "NotFoundException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/NotFoundException"
                        }
                      }
                    }
                  },
                  "482": {
                    "description": "UnauthorizedException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/UnauthorizedException"
                        }
                      }
                    }
                  },
                  "483": {
                    "description": "InternalFailureException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InternalFailureException"
                        }
                      }
                    }
                  },
                  "484": {
                    "description": "DependentServiceFailureException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/DependentServiceFailureException"
                        }
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "appId",
                    "in": "path",
                    "required": true,
                    "description": " The unique ID for an Amplify app. ",
                    "schema": {
                      "type": "string",
                      "pattern": "d[a-z0-9]+",
                      "minLength": 1,
                      "maxLength": 20
                    }
                  }
                ]
              },
              "parameters": [
                {
                  "$ref": "#/components/parameters/X-Amz-Content-Sha256"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Date"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Algorithm"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Credential"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Security-Token"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Signature"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-SignedHeaders"
                }
              ],
              "get": {
                "operationId": "GetApp",
                "description": " Returns an existing Amplify app by appID. ",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/GetAppResult"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "BadRequestException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/BadRequestException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "NotFoundException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/NotFoundException"
                        }
                      }
                    }
                  },
                  "482": {
                    "description": "UnauthorizedException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/UnauthorizedException"
                        }
                      }
                    }
                  },
                  "483": {
                    "description": "InternalFailureException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InternalFailureException"
                        }
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "appId",
                    "in": "path",
                    "required": true,
                    "description": " The unique ID for an Amplify app. ",
                    "schema": {
                      "type": "string",
                      "pattern": "d[a-z0-9]+",
                      "minLength": 1,
                      "maxLength": 20
                    }
                  }
                ]
              },
              "post": {
                "operationId": "UpdateApp",
                "description": " Updates an existing Amplify app. ",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/UpdateAppResult"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "BadRequestException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/BadRequestException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "NotFoundException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/NotFoundException"
                        }
                      }
                    }
                  },
                  "482": {
                    "description": "UnauthorizedException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/UnauthorizedException"
                        }
                      }
                    }
                  },
                  "483": {
                    "description": "InternalFailureException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InternalFailureException"
                        }
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "appId",
                    "in": "path",
                    "required": true,
                    "description": " The unique ID for an Amplify app. ",
                    "schema": {
                      "type": "string",
                      "pattern": "d[a-z0-9]+",
                      "minLength": 1,
                      "maxLength": 20
                    }
                  }
                ],
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "description": " The name for an Amplify app. ",
                            "type": "string",
                            "pattern": "\\(\\?s\\).\\+",
                            "minLength": 1,
                            "maxLength": 255
                          },
                          "description": {
                            "description": " The description for an Amplify app. ",
                            "type": "string",
                            "pattern": "\\(\\?s\\).*",
                            "maxLength": 1000
                          },
                          "platform": {
                            "description": " The platform for the Amplify app. For a static app, set the platform type to <code>WEB</code>. For a dynamic server-side rendered (SSR) app, set the platform type to <code>WEB_COMPUTE</code>. For an app requiring Amplify Hosting's original SSR support only, set the platform type to <code>WEB_DYNAMIC</code>.",
                            "type": "string",
                            "enum": [
                              "WEB",
                              "WEB_DYNAMIC",
                              "WEB_COMPUTE"
                            ]
                          },
                          "iamServiceRoleArn": {
                            "description": " The AWS Identity and Access Management (IAM) service role for an Amplify app. ",
                            "type": "string",
                            "pattern": "\\(\\?s\\).*",
                            "minLength": 0,
                            "maxLength": 1000
                          },
                          "environmentVariables": {
                            "description": " The environment variables for an Amplify app. ",
                            "type": "object",
                            "additionalProperties": {
                              "$ref": "#/components/schemas/EnvValue"
                            }
                          },
                          "enableBranchAutoBuild": {
                            "description": " Enables branch auto-building for an Amplify app. ",
                            "type": "boolean"
                          },
                          "enableBranchAutoDeletion": {
                            "description": " Automatically disconnects a branch in the Amplify Console when you delete a branch from your Git repository. ",
                            "type": "boolean"
                          },
                          "enableBasicAuth": {
                            "description": " Enables basic authorization for an Amplify app. ",
                            "type": "boolean"
                          },
                          "basicAuthCredentials": {
                            "description": " The basic authorization credentials for an Amplify app. You must base64-encode the authorization credentials and provide them in the format <code>user:password</code>.",
                            "type": "string",
                            "pattern": "\\(\\?s\\).*",
                            "maxLength": 2000,
                            "format": "password"
                          },
                          "customRules": {
                            "description": " The custom redirect and rewrite rules for an Amplify app. ",
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/CustomRule"
                            }
                          },
                          "buildSpec": {
                            "description": " The build specification (build spec) file for an Amplify app build. ",
                            "type": "string",
                            "pattern": "\\(\\?s\\).\\+",
                            "minLength": 1,
                            "maxLength": 25000,
                            "format": "password"
                          },
                          "customHeaders": {
                            "description": "The custom HTTP headers for an Amplify app.",
                            "type": "string",
                            "pattern": "\\(\\?s\\).*",
                            "minLength": 0,
                            "maxLength": 25000
                          },
                          "enableAutoBranchCreation": {
                            "description": " Enables automated branch creation for an Amplify app. ",
                            "type": "boolean"
                          },
                          "autoBranchCreationPatterns": {
                            "description": " Describes the automated branch creation glob patterns for an Amplify app. ",
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/AutoBranchCreationPattern"
                            }
                          },
                          "autoBranchCreationConfig": {
                            "description": " Describes the automated branch creation configuration. ",
                            "type": "object",
                            "properties": {
                              "stage": {
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/Stage"
                                  },
                                  {
                                    "description": " Describes the current stage for the autocreated branch. "
                                  }
                                ]
                              },
                              "framework": {
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/Framework"
                                  },
                                  {
                                    "description": " The framework for the autocreated branch. "
                                  }
                                ]
                              },
                              "enableAutoBuild": {
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/EnableAutoBuild"
                                  },
                                  {
                                    "description": " Enables auto building for the autocreated branch. "
                                  }
                                ]
                              },
                              "environmentVariables": {
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/EnvironmentVariables"
                                  },
                                  {
                                    "description": " The environment variables for the autocreated branch. "
                                  }
                                ]
                              },
                              "basicAuthCredentials": {
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/BasicAuthCredentials"
                                  },
                                  {
                                    "description": " The basic authorization credentials for the autocreated branch. You must base64-encode the authorization credentials and provide them in the format <code>user:password</code>."
                                  }
                                ]
                              },
                              "enableBasicAuth": {
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/EnableBasicAuth"
                                  },
                                  {
                                    "description": " Enables basic authorization for the autocreated branch. "
                                  }
                                ]
                              },
                              "enablePerformanceMode": {
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/EnablePerformanceMode"
                                  },
                                  {
                                    "description": "<p>Enables performance mode for the branch.</p> <p>Performance mode optimizes for faster hosting performance by keeping content cached at the edge for a longer interval. When performance mode is enabled, hosting configuration or code changes can take up to 10 minutes to roll out. </p>"
                                  }
                                ]
                              },
                              "buildSpec": {
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/BuildSpec"
                                  },
                                  {
                                    "description": " The build specification (build spec) for the autocreated branch. "
                                  }
                                ]
                              },
                              "enablePullRequestPreview": {
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/EnablePullRequestPreview"
                                  },
                                  {
                                    "description": " Enables pull request previews for the autocreated branch. "
                                  }
                                ]
                              },
                              "pullRequestEnvironmentName": {
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/PullRequestEnvironmentName"
                                  },
                                  {
                                    "description": " The Amplify environment name for the pull request. "
                                  }
                                ]
                              }
                            }
                          },
                          "repository": {
                            "description": " The name of the repository for an Amplify app ",
                            "type": "string",
                            "pattern": "\\(\\?s\\).*",
                            "maxLength": 1000
                          },
                          "oauthToken": {
                            "description": "<p>The OAuth token for a third-party source control system for an Amplify app. The OAuth token is used to create a webhook and a read-only deploy key using SSH cloning. The OAuth token is not stored.</p> <p>Use <code>oauthToken</code> for repository providers other than GitHub, such as Bitbucket or CodeCommit.</p> <p>To authorize access to GitHub as your repository provider, use <code>accessToken</code>.</p> <p>You must specify either <code>oauthToken</code> or <code>accessToken</code> when you update an app.</p> <p>Existing Amplify apps deployed from a GitHub repository using OAuth continue to work with CI/CD. However, we strongly recommend that you migrate these apps to use the GitHub App. For more information, see <a href=\"https://docs.aws.amazon.com/amplify/latest/UserGuide/setting-up-GitHub-access.html#migrating-to-github-app-auth\">Migrating an existing OAuth app to the Amplify GitHub App</a> in the <i>Amplify User Guide</i> .</p>",
                            "type": "string",
                            "pattern": "\\(\\?s\\).*",
                            "maxLength": 1000,
                            "format": "password"
                          },
                          "accessToken": {
                            "description": "<p>The personal access token for a GitHub repository for an Amplify app. The personal access token is used to authorize access to a GitHub repository using the Amplify GitHub App. The token is not stored.</p> <p>Use <code>accessToken</code> for GitHub repositories only. To authorize access to a repository provider such as Bitbucket or CodeCommit, use <code>oauthToken</code>.</p> <p>You must specify either <code>accessToken</code> or <code>oauthToken</code> when you update an app.</p> <p>Existing Amplify apps deployed from a GitHub repository using OAuth continue to work with CI/CD. However, we strongly recommend that you migrate these apps to use the GitHub App. For more information, see <a href=\"https://docs.aws.amazon.com/amplify/latest/UserGuide/setting-up-GitHub-access.html#migrating-to-github-app-auth\">Migrating an existing OAuth app to the Amplify GitHub App</a> in the <i>Amplify User Guide</i> .</p>",
                            "type": "string",
                            "pattern": "\\(\\?s\\).\\+",
                            "minLength": 1,
                            "maxLength": 255,
                            "format": "password"
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "/apps/{appId}/backendenvironments/{environmentName}": {
              "delete": {
                "operationId": "DeleteBackendEnvironment",
                "description": " Deletes a backend environment for an Amplify app. ",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/DeleteBackendEnvironmentResult"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "BadRequestException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/BadRequestException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "UnauthorizedException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/UnauthorizedException"
                        }
                      }
                    }
                  },
                  "482": {
                    "description": "NotFoundException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/NotFoundException"
                        }
                      }
                    }
                  },
                  "483": {
                    "description": "InternalFailureException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InternalFailureException"
                        }
                      }
                    }
                  },
                  "484": {
                    "description": "DependentServiceFailureException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/DependentServiceFailureException"
                        }
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "appId",
                    "in": "path",
                    "required": true,
                    "description": " The unique ID of an Amplify app. ",
                    "schema": {
                      "type": "string",
                      "pattern": "d[a-z0-9]+",
                      "minLength": 1,
                      "maxLength": 20
                    }
                  },
                  {
                    "name": "environmentName",
                    "in": "path",
                    "required": true,
                    "description": " The name of a backend environment of an Amplify app. ",
                    "schema": {
                      "type": "string",
                      "pattern": "\\(\\?s\\).\\+",
                      "minLength": 1,
                      "maxLength": 255
                    }
                  }
                ]
              },
              "parameters": [
                {
                  "$ref": "#/components/parameters/X-Amz-Content-Sha256"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Date"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Algorithm"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Credential"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Security-Token"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Signature"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-SignedHeaders"
                }
              ],
              "get": {
                "operationId": "GetBackendEnvironment",
                "description": " Returns a backend environment for an Amplify app. ",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/GetBackendEnvironmentResult"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "BadRequestException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/BadRequestException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "UnauthorizedException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/UnauthorizedException"
                        }
                      }
                    }
                  },
                  "482": {
                    "description": "NotFoundException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/NotFoundException"
                        }
                      }
                    }
                  },
                  "483": {
                    "description": "InternalFailureException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InternalFailureException"
                        }
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "appId",
                    "in": "path",
                    "required": true,
                    "description": " The unique id for an Amplify app. ",
                    "schema": {
                      "type": "string",
                      "pattern": "d[a-z0-9]+",
                      "minLength": 1,
                      "maxLength": 20
                    }
                  },
                  {
                    "name": "environmentName",
                    "in": "path",
                    "required": true,
                    "description": " The name for the backend environment. ",
                    "schema": {
                      "type": "string",
                      "pattern": "\\(\\?s\\).\\+",
                      "minLength": 1,
                      "maxLength": 255
                    }
                  }
                ]
              }
            },
            "/apps/{appId}/branches/{branchName}": {
              "delete": {
                "operationId": "DeleteBranch",
                "description": " Deletes a branch for an Amplify app. ",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/DeleteBranchResult"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "BadRequestException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/BadRequestException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "UnauthorizedException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/UnauthorizedException"
                        }
                      }
                    }
                  },
                  "482": {
                    "description": "NotFoundException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/NotFoundException"
                        }
                      }
                    }
                  },
                  "483": {
                    "description": "InternalFailureException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InternalFailureException"
                        }
                      }
                    }
                  },
                  "484": {
                    "description": "DependentServiceFailureException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/DependentServiceFailureException"
                        }
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "appId",
                    "in": "path",
                    "required": true,
                    "description": " The unique ID for an Amplify app. ",
                    "schema": {
                      "type": "string",
                      "pattern": "d[a-z0-9]+",
                      "minLength": 1,
                      "maxLength": 20
                    }
                  },
                  {
                    "name": "branchName",
                    "in": "path",
                    "required": true,
                    "description": " The name for the branch. ",
                    "schema": {
                      "type": "string",
                      "pattern": "\\(\\?s\\).\\+",
                      "minLength": 1,
                      "maxLength": 255
                    }
                  }
                ]
              },
              "parameters": [
                {
                  "$ref": "#/components/parameters/X-Amz-Content-Sha256"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Date"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Algorithm"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Credential"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Security-Token"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Signature"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-SignedHeaders"
                }
              ],
              "get": {
                "operationId": "GetBranch",
                "description": " Returns a branch for an Amplify app. ",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/GetBranchResult"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "BadRequestException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/BadRequestException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "UnauthorizedException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/UnauthorizedException"
                        }
                      }
                    }
                  },
                  "482": {
                    "description": "NotFoundException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/NotFoundException"
                        }
                      }
                    }
                  },
                  "483": {
                    "description": "InternalFailureException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InternalFailureException"
                        }
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "appId",
                    "in": "path",
                    "required": true,
                    "description": " The unique ID for an Amplify app. ",
                    "schema": {
                      "type": "string",
                      "pattern": "d[a-z0-9]+",
                      "minLength": 1,
                      "maxLength": 20
                    }
                  },
                  {
                    "name": "branchName",
                    "in": "path",
                    "required": true,
                    "description": " The name for the branch. ",
                    "schema": {
                      "type": "string",
                      "pattern": "\\(\\?s\\).\\+",
                      "minLength": 1,
                      "maxLength": 255
                    }
                  }
                ]
              },
              "post": {
                "operationId": "UpdateBranch",
                "description": " Updates a branch for an Amplify app. ",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/UpdateBranchResult"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "BadRequestException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/BadRequestException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "UnauthorizedException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/UnauthorizedException"
                        }
                      }
                    }
                  },
                  "482": {
                    "description": "NotFoundException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/NotFoundException"
                        }
                      }
                    }
                  },
                  "483": {
                    "description": "InternalFailureException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InternalFailureException"
                        }
                      }
                    }
                  },
                  "484": {
                    "description": "DependentServiceFailureException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/DependentServiceFailureException"
                        }
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "appId",
                    "in": "path",
                    "required": true,
                    "description": " The unique ID for an Amplify app. ",
                    "schema": {
                      "type": "string",
                      "pattern": "d[a-z0-9]+",
                      "minLength": 1,
                      "maxLength": 20
                    }
                  },
                  {
                    "name": "branchName",
                    "in": "path",
                    "required": true,
                    "description": " The name for the branch. ",
                    "schema": {
                      "type": "string",
                      "pattern": "\\(\\?s\\).\\+",
                      "minLength": 1,
                      "maxLength": 255
                    }
                  }
                ],
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "description": {
                            "description": " The description for the branch. ",
                            "type": "string",
                            "pattern": "\\(\\?s\\).*",
                            "maxLength": 1000
                          },
                          "framework": {
                            "description": " The framework for the branch. ",
                            "type": "string",
                            "pattern": "\\(\\?s\\).*",
                            "maxLength": 255
                          },
                          "stage": {
                            "description": " Describes the current stage for the branch. ",
                            "type": "string",
                            "enum": [
                              "PRODUCTION",
                              "BETA",
                              "DEVELOPMENT",
                              "EXPERIMENTAL",
                              "PULL_REQUEST"
                            ]
                          },
                          "enableNotification": {
                            "description": " Enables notifications for the branch. ",
                            "type": "boolean"
                          },
                          "enableAutoBuild": {
                            "description": " Enables auto building for the branch. ",
                            "type": "boolean"
                          },
                          "environmentVariables": {
                            "description": " The environment variables for the branch. ",
                            "type": "object",
                            "additionalProperties": {
                              "$ref": "#/components/schemas/EnvValue"
                            }
                          },
                          "basicAuthCredentials": {
                            "description": " The basic authorization credentials for the branch. You must base64-encode the authorization credentials and provide them in the format <code>user:password</code>.",
                            "type": "string",
                            "pattern": "\\(\\?s\\).*",
                            "maxLength": 2000,
                            "format": "password"
                          },
                          "enableBasicAuth": {
                            "description": " Enables basic authorization for the branch. ",
                            "type": "boolean"
                          },
                          "enablePerformanceMode": {
                            "description": "<p>Enables performance mode for the branch.</p> <p>Performance mode optimizes for faster hosting performance by keeping content cached at the edge for a longer interval. When performance mode is enabled, hosting configuration or code changes can take up to 10 minutes to roll out. </p>",
                            "type": "boolean"
                          },
                          "buildSpec": {
                            "description": " The build specification (build spec) file for an Amplify app build. ",
                            "type": "string",
                            "pattern": "\\(\\?s\\).\\+",
                            "minLength": 1,
                            "maxLength": 25000,
                            "format": "password"
                          },
                          "ttl": {
                            "description": " The content Time to Live (TTL) for the website in seconds. ",
                            "type": "string",
                            "pattern": "\\d*",
                            "minLength": 0,
                            "maxLength": 32
                          },
                          "displayName": {
                            "description": " The display name for a branch. This is used as the default domain prefix. ",
                            "type": "string",
                            "pattern": "\\(\\?s\\).*",
                            "maxLength": 255
                          },
                          "enablePullRequestPreview": {
                            "description": " Enables pull request previews for this branch. ",
                            "type": "boolean"
                          },
                          "pullRequestEnvironmentName": {
                            "description": " The Amplify environment name for the pull request. ",
                            "type": "string",
                            "pattern": "\\(\\?s\\).*",
                            "maxLength": 20
                          },
                          "backendEnvironmentArn": {
                            "description": " The Amazon Resource Name (ARN) for a backend environment that is part of an Amplify app. ",
                            "type": "string",
                            "pattern": "\\(\\?s\\).*",
                            "minLength": 0,
                            "maxLength": 1000
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "/apps/{appId}/domains/{domainName}": {
              "delete": {
                "operationId": "DeleteDomainAssociation",
                "description": " Deletes a domain association for an Amplify app. ",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/DeleteDomainAssociationResult"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "BadRequestException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/BadRequestException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "UnauthorizedException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/UnauthorizedException"
                        }
                      }
                    }
                  },
                  "482": {
                    "description": "NotFoundException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/NotFoundException"
                        }
                      }
                    }
                  },
                  "483": {
                    "description": "InternalFailureException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InternalFailureException"
                        }
                      }
                    }
                  },
                  "484": {
                    "description": "DependentServiceFailureException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/DependentServiceFailureException"
                        }
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "appId",
                    "in": "path",
                    "required": true,
                    "description": " The unique id for an Amplify app. ",
                    "schema": {
                      "type": "string",
                      "pattern": "d[a-z0-9]+",
                      "minLength": 1,
                      "maxLength": 20
                    }
                  },
                  {
                    "name": "domainName",
                    "in": "path",
                    "required": true,
                    "description": " The name of the domain. ",
                    "schema": {
                      "type": "string",
                      "pattern": "^(((?!-)[A-Za-z0-9-]{0,62}[A-Za-z0-9])\\.)+((?!-)[A-Za-z0-9-]{1,62}[A-Za-z0-9])(\\.)?$",
                      "maxLength": 64
                    }
                  }
                ]
              },
              "parameters": [
                {
                  "$ref": "#/components/parameters/X-Amz-Content-Sha256"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Date"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Algorithm"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Credential"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Security-Token"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Signature"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-SignedHeaders"
                }
              ],
              "get": {
                "operationId": "GetDomainAssociation",
                "description": " Returns the domain information for an Amplify app. ",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/GetDomainAssociationResult"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "BadRequestException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/BadRequestException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "UnauthorizedException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/UnauthorizedException"
                        }
                      }
                    }
                  },
                  "482": {
                    "description": "NotFoundException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/NotFoundException"
                        }
                      }
                    }
                  },
                  "483": {
                    "description": "InternalFailureException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InternalFailureException"
                        }
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "appId",
                    "in": "path",
                    "required": true,
                    "description": " The unique id for an Amplify app. ",
                    "schema": {
                      "type": "string",
                      "pattern": "d[a-z0-9]+",
                      "minLength": 1,
                      "maxLength": 20
                    }
                  },
                  {
                    "name": "domainName",
                    "in": "path",
                    "required": true,
                    "description": " The name of the domain. ",
                    "schema": {
                      "type": "string",
                      "pattern": "^(((?!-)[A-Za-z0-9-]{0,62}[A-Za-z0-9])\\.)+((?!-)[A-Za-z0-9-]{1,62}[A-Za-z0-9])(\\.)?$",
                      "maxLength": 64
                    }
                  }
                ]
              },
              "post": {
                "operationId": "UpdateDomainAssociation",
                "description": " Creates a new domain association for an Amplify app.",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/UpdateDomainAssociationResult"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "BadRequestException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/BadRequestException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "UnauthorizedException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/UnauthorizedException"
                        }
                      }
                    }
                  },
                  "482": {
                    "description": "NotFoundException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/NotFoundException"
                        }
                      }
                    }
                  },
                  "483": {
                    "description": "InternalFailureException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InternalFailureException"
                        }
                      }
                    }
                  },
                  "484": {
                    "description": "DependentServiceFailureException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/DependentServiceFailureException"
                        }
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "appId",
                    "in": "path",
                    "required": true,
                    "description": " The unique ID for an Amplify app. ",
                    "schema": {
                      "type": "string",
                      "pattern": "d[a-z0-9]+",
                      "minLength": 1,
                      "maxLength": 20
                    }
                  },
                  {
                    "name": "domainName",
                    "in": "path",
                    "required": true,
                    "description": " The name of the domain. ",
                    "schema": {
                      "type": "string",
                      "pattern": "^(((?!-)[A-Za-z0-9-]{0,62}[A-Za-z0-9])\\.)+((?!-)[A-Za-z0-9-]{1,62}[A-Za-z0-9])(\\.)?$",
                      "maxLength": 64
                    }
                  }
                ],
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "enableAutoSubDomain": {
                            "description": " Enables the automated creation of subdomains for branches. ",
                            "type": "boolean"
                          },
                          "subDomainSettings": {
                            "description": " Describes the settings for the subdomain. ",
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/SubDomainSetting"
                            },
                            "maxItems": 500
                          },
                          "autoSubDomainCreationPatterns": {
                            "description": " Sets the branch patterns for automatic subdomain creation. ",
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/AutoSubDomainCreationPattern"
                            }
                          },
                          "autoSubDomainIAMRole": {
                            "description": " The required AWS Identity and Access Management (IAM) service role for the Amazon Resource Name (ARN) for automatically creating subdomains. ",
                            "type": "string",
                            "pattern": "^$|^arn:aws:iam::\\d{12}:role.+",
                            "maxLength": 1000
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "/apps/{appId}/branches/{branchName}/jobs/{jobId}": {
              "delete": {
                "operationId": "DeleteJob",
                "description": " Deletes a job for a branch of an Amplify app. ",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/DeleteJobResult"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "BadRequestException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/BadRequestException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "UnauthorizedException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/UnauthorizedException"
                        }
                      }
                    }
                  },
                  "482": {
                    "description": "InternalFailureException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InternalFailureException"
                        }
                      }
                    }
                  },
                  "483": {
                    "description": "NotFoundException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/NotFoundException"
                        }
                      }
                    }
                  },
                  "484": {
                    "description": "LimitExceededException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/LimitExceededException"
                        }
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "appId",
                    "in": "path",
                    "required": true,
                    "description": " The unique ID for an Amplify app. ",
                    "schema": {
                      "type": "string",
                      "pattern": "d[a-z0-9]+",
                      "minLength": 1,
                      "maxLength": 20
                    }
                  },
                  {
                    "name": "branchName",
                    "in": "path",
                    "required": true,
                    "description": " The name for the branch, for the job. ",
                    "schema": {
                      "type": "string",
                      "pattern": "\\(\\?s\\).\\+",
                      "minLength": 1,
                      "maxLength": 255
                    }
                  },
                  {
                    "name": "jobId",
                    "in": "path",
                    "required": true,
                    "description": " The unique ID for the job. ",
                    "schema": {
                      "type": "string",
                      "pattern": "[0-9]+",
                      "maxLength": 255
                    }
                  }
                ]
              },
              "parameters": [
                {
                  "$ref": "#/components/parameters/X-Amz-Content-Sha256"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Date"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Algorithm"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Credential"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Security-Token"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Signature"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-SignedHeaders"
                }
              ],
              "get": {
                "operationId": "GetJob",
                "description": " Returns a job for a branch of an Amplify app. ",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/GetJobResult"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "BadRequestException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/BadRequestException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "UnauthorizedException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/UnauthorizedException"
                        }
                      }
                    }
                  },
                  "482": {
                    "description": "InternalFailureException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InternalFailureException"
                        }
                      }
                    }
                  },
                  "483": {
                    "description": "NotFoundException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/NotFoundException"
                        }
                      }
                    }
                  },
                  "484": {
                    "description": "LimitExceededException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/LimitExceededException"
                        }
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "appId",
                    "in": "path",
                    "required": true,
                    "description": " The unique ID for an Amplify app. ",
                    "schema": {
                      "type": "string",
                      "pattern": "d[a-z0-9]+",
                      "minLength": 1,
                      "maxLength": 20
                    }
                  },
                  {
                    "name": "branchName",
                    "in": "path",
                    "required": true,
                    "description": " The branch name for the job. ",
                    "schema": {
                      "type": "string",
                      "pattern": "\\(\\?s\\).\\+",
                      "minLength": 1,
                      "maxLength": 255
                    }
                  },
                  {
                    "name": "jobId",
                    "in": "path",
                    "required": true,
                    "description": " The unique ID for the job. ",
                    "schema": {
                      "type": "string",
                      "pattern": "[0-9]+",
                      "maxLength": 255
                    }
                  }
                ]
              }
            },
            "/webhooks/{webhookId}": {
              "delete": {
                "operationId": "DeleteWebhook",
                "description": " Deletes a webhook. ",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/DeleteWebhookResult"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "BadRequestException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/BadRequestException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "UnauthorizedException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/UnauthorizedException"
                        }
                      }
                    }
                  },
                  "482": {
                    "description": "InternalFailureException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InternalFailureException"
                        }
                      }
                    }
                  },
                  "483": {
                    "description": "NotFoundException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/NotFoundException"
                        }
                      }
                    }
                  },
                  "484": {
                    "description": "LimitExceededException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/LimitExceededException"
                        }
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "webhookId",
                    "in": "path",
                    "required": true,
                    "description": " The unique ID for a webhook. ",
                    "schema": {
                      "type": "string",
                      "pattern": "\\(\\?s\\).*",
                      "maxLength": 255
                    }
                  }
                ]
              },
              "parameters": [
                {
                  "$ref": "#/components/parameters/X-Amz-Content-Sha256"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Date"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Algorithm"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Credential"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Security-Token"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Signature"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-SignedHeaders"
                }
              ],
              "get": {
                "operationId": "GetWebhook",
                "description": " Returns the webhook information that corresponds to a specified webhook ID. ",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/GetWebhookResult"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "BadRequestException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/BadRequestException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "UnauthorizedException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/UnauthorizedException"
                        }
                      }
                    }
                  },
                  "482": {
                    "description": "InternalFailureException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InternalFailureException"
                        }
                      }
                    }
                  },
                  "483": {
                    "description": "NotFoundException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/NotFoundException"
                        }
                      }
                    }
                  },
                  "484": {
                    "description": "LimitExceededException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/LimitExceededException"
                        }
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "webhookId",
                    "in": "path",
                    "required": true,
                    "description": " The unique ID for a webhook. ",
                    "schema": {
                      "type": "string",
                      "pattern": "\\(\\?s\\).*",
                      "maxLength": 255
                    }
                  }
                ]
              },
              "post": {
                "operationId": "UpdateWebhook",
                "description": " Updates a webhook. ",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/UpdateWebhookResult"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "BadRequestException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/BadRequestException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "UnauthorizedException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/UnauthorizedException"
                        }
                      }
                    }
                  },
                  "482": {
                    "description": "NotFoundException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/NotFoundException"
                        }
                      }
                    }
                  },
                  "483": {
                    "description": "InternalFailureException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InternalFailureException"
                        }
                      }
                    }
                  },
                  "484": {
                    "description": "DependentServiceFailureException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/DependentServiceFailureException"
                        }
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "webhookId",
                    "in": "path",
                    "required": true,
                    "description": " The unique ID for a webhook. ",
                    "schema": {
                      "type": "string",
                      "pattern": "\\(\\?s\\).*",
                      "maxLength": 255
                    }
                  }
                ],
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "branchName": {
                            "description": " The name for a branch that is part of an Amplify app. ",
                            "type": "string",
                            "pattern": "\\(\\?s\\).\\+",
                            "minLength": 1,
                            "maxLength": 255
                          },
                          "description": {
                            "description": " The description for a webhook. ",
                            "type": "string",
                            "pattern": "\\(\\?s\\).*",
                            "maxLength": 1000
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "/apps/{appId}/accesslogs": {
              "post": {
                "operationId": "GenerateAccessLogs",
                "description": " Returns the website access logs for a specific time range using a presigned URL. ",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/GenerateAccessLogsResult"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "NotFoundException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/NotFoundException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "BadRequestException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/BadRequestException"
                        }
                      }
                    }
                  },
                  "482": {
                    "description": "UnauthorizedException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/UnauthorizedException"
                        }
                      }
                    }
                  },
                  "483": {
                    "description": "InternalFailureException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InternalFailureException"
                        }
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "appId",
                    "in": "path",
                    "required": true,
                    "description": " The unique ID for an Amplify app. ",
                    "schema": {
                      "type": "string",
                      "pattern": "d[a-z0-9]+",
                      "minLength": 1,
                      "maxLength": 20
                    }
                  }
                ],
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "required": [
                          "domainName"
                        ],
                        "properties": {
                          "startTime": {
                            "description": " The time at which the logs should start. The time range specified is inclusive of the start time. ",
                            "type": "string",
                            "format": "date-time"
                          },
                          "endTime": {
                            "description": " The time at which the logs should end. The time range specified is inclusive of the end time. ",
                            "type": "string",
                            "format": "date-time"
                          },
                          "domainName": {
                            "description": " The name of the domain. ",
                            "type": "string",
                            "pattern": "^(((?!-)[A-Za-z0-9-]{0,62}[A-Za-z0-9])\\.)+((?!-)[A-Za-z0-9-]{1,62}[A-Za-z0-9])(\\.)?$",
                            "maxLength": 64
                          }
                        }
                      }
                    }
                  }
                }
              },
              "parameters": [
                {
                  "$ref": "#/components/parameters/X-Amz-Content-Sha256"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Date"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Algorithm"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Credential"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Security-Token"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Signature"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-SignedHeaders"
                }
              ]
            },
            "/artifacts/{artifactId}": {
              "get": {
                "operationId": "GetArtifactUrl",
                "description": " Returns the artifact info that corresponds to an artifact id. ",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/GetArtifactUrlResult"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "BadRequestException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/BadRequestException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "UnauthorizedException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/UnauthorizedException"
                        }
                      }
                    }
                  },
                  "482": {
                    "description": "InternalFailureException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InternalFailureException"
                        }
                      }
                    }
                  },
                  "483": {
                    "description": "NotFoundException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/NotFoundException"
                        }
                      }
                    }
                  },
                  "484": {
                    "description": "LimitExceededException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/LimitExceededException"
                        }
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "artifactId",
                    "in": "path",
                    "required": true,
                    "description": " The unique ID for an artifact. ",
                    "schema": {
                      "type": "string",
                      "pattern": "\\(\\?s\\).*",
                      "maxLength": 255
                    }
                  }
                ]
              },
              "parameters": [
                {
                  "$ref": "#/components/parameters/X-Amz-Content-Sha256"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Date"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Algorithm"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Credential"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Security-Token"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Signature"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-SignedHeaders"
                }
              ]
            },
            "/apps/{appId}/branches/{branchName}/jobs/{jobId}/artifacts": {
              "get": {
                "operationId": "ListArtifacts",
                "description": " Returns a list of artifacts for a specified app, branch, and job. ",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ListArtifactsResult"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "BadRequestException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/BadRequestException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "UnauthorizedException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/UnauthorizedException"
                        }
                      }
                    }
                  },
                  "482": {
                    "description": "InternalFailureException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InternalFailureException"
                        }
                      }
                    }
                  },
                  "483": {
                    "description": "LimitExceededException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/LimitExceededException"
                        }
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "appId",
                    "in": "path",
                    "required": true,
                    "description": " The unique ID for an Amplify app. ",
                    "schema": {
                      "type": "string",
                      "pattern": "d[a-z0-9]+",
                      "minLength": 1,
                      "maxLength": 20
                    }
                  },
                  {
                    "name": "branchName",
                    "in": "path",
                    "required": true,
                    "description": " The name of a branch that is part of an Amplify app. ",
                    "schema": {
                      "type": "string",
                      "pattern": "\\(\\?s\\).\\+",
                      "minLength": 1,
                      "maxLength": 255
                    }
                  },
                  {
                    "name": "jobId",
                    "in": "path",
                    "required": true,
                    "description": " The unique ID for a job. ",
                    "schema": {
                      "type": "string",
                      "pattern": "[0-9]+",
                      "maxLength": 255
                    }
                  },
                  {
                    "name": "nextToken",
                    "in": "query",
                    "required": false,
                    "description": " A pagination token. Set to null to start listing artifacts from start. If a non-null pagination token is returned in a result, pass its value in here to list more artifacts. ",
                    "schema": {
                      "type": "string",
                      "pattern": "\\(\\?s\\).*",
                      "maxLength": 2000
                    }
                  },
                  {
                    "name": "maxResults",
                    "in": "query",
                    "required": false,
                    "description": " The maximum number of records to list in a single response. ",
                    "schema": {
                      "type": "integer",
                      "minimum": 0,
                      "maximum": 100
                    }
                  }
                ]
              },
              "parameters": [
                {
                  "$ref": "#/components/parameters/X-Amz-Content-Sha256"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Date"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Algorithm"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Credential"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Security-Token"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Signature"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-SignedHeaders"
                }
              ]
            },
            "/apps/{appId}/branches/{branchName}/jobs": {
              "get": {
                "operationId": "ListJobs",
                "description": " Lists the jobs for a branch of an Amplify app. ",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ListJobsResult"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "BadRequestException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/BadRequestException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "UnauthorizedException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/UnauthorizedException"
                        }
                      }
                    }
                  },
                  "482": {
                    "description": "InternalFailureException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InternalFailureException"
                        }
                      }
                    }
                  },
                  "483": {
                    "description": "LimitExceededException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/LimitExceededException"
                        }
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "appId",
                    "in": "path",
                    "required": true,
                    "description": " The unique ID for an Amplify app. ",
                    "schema": {
                      "type": "string",
                      "pattern": "d[a-z0-9]+",
                      "minLength": 1,
                      "maxLength": 20
                    }
                  },
                  {
                    "name": "branchName",
                    "in": "path",
                    "required": true,
                    "description": " The name for a branch. ",
                    "schema": {
                      "type": "string",
                      "pattern": "\\(\\?s\\).\\+",
                      "minLength": 1,
                      "maxLength": 255
                    }
                  },
                  {
                    "name": "nextToken",
                    "in": "query",
                    "required": false,
                    "description": " A pagination token. Set to null to start listing steps from the start. If a non-null pagination token is returned in a result, pass its value in here to list more steps. ",
                    "schema": {
                      "type": "string",
                      "pattern": "\\(\\?s\\).*",
                      "maxLength": 2000
                    }
                  },
                  {
                    "name": "maxResults",
                    "in": "query",
                    "required": false,
                    "description": " The maximum number of records to list in a single response. ",
                    "schema": {
                      "type": "integer",
                      "minimum": 0,
                      "maximum": 100
                    }
                  }
                ]
              },
              "parameters": [
                {
                  "$ref": "#/components/parameters/X-Amz-Content-Sha256"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Date"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Algorithm"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Credential"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Security-Token"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Signature"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-SignedHeaders"
                }
              ],
              "post": {
                "operationId": "StartJob",
                "description": " Starts a new job for a branch of an Amplify app. ",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/StartJobResult"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "BadRequestException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/BadRequestException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "UnauthorizedException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/UnauthorizedException"
                        }
                      }
                    }
                  },
                  "482": {
                    "description": "InternalFailureException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InternalFailureException"
                        }
                      }
                    }
                  },
                  "483": {
                    "description": "NotFoundException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/NotFoundException"
                        }
                      }
                    }
                  },
                  "484": {
                    "description": "LimitExceededException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/LimitExceededException"
                        }
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "appId",
                    "in": "path",
                    "required": true,
                    "description": " The unique ID for an Amplify app. ",
                    "schema": {
                      "type": "string",
                      "pattern": "d[a-z0-9]+",
                      "minLength": 1,
                      "maxLength": 20
                    }
                  },
                  {
                    "name": "branchName",
                    "in": "path",
                    "required": true,
                    "description": " The branch name for the job. ",
                    "schema": {
                      "type": "string",
                      "pattern": "\\(\\?s\\).\\+",
                      "minLength": 1,
                      "maxLength": 255
                    }
                  }
                ],
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "required": [
                          "jobType"
                        ],
                        "properties": {
                          "jobId": {
                            "description": " The unique ID for an existing job. This is required if the value of <code>jobType</code> is <code>RETRY</code>. ",
                            "type": "string",
                            "pattern": "[0-9]+",
                            "maxLength": 255
                          },
                          "jobType": {
                            "description": " Describes the type for the job. The job type <code>RELEASE</code> starts a new job with the latest change from the specified branch. This value is available only for apps that are connected to a repository. The job type <code>RETRY</code> retries an existing job. If the job type value is <code>RETRY</code>, the <code>jobId</code> is also required. ",
                            "type": "string",
                            "enum": [
                              "RELEASE",
                              "RETRY",
                              "MANUAL",
                              "WEB_HOOK"
                            ],
                            "maxLength": 10
                          },
                          "jobReason": {
                            "description": " A descriptive reason for starting this job. ",
                            "type": "string",
                            "pattern": "\\(\\?s\\).*",
                            "maxLength": 255
                          },
                          "commitId": {
                            "description": " The commit ID from a third-party repository provider for the job. ",
                            "type": "string",
                            "pattern": "\\(\\?s\\).*",
                            "maxLength": 255
                          },
                          "commitMessage": {
                            "description": " The commit message from a third-party repository provider for the job. ",
                            "type": "string",
                            "pattern": "\\(\\?s\\).*",
                            "maxLength": 10000
                          },
                          "commitTime": {
                            "description": " The commit date and time for the job. ",
                            "type": "string",
                            "format": "date-time"
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "/tags/{resourceArn}": {
              "get": {
                "operationId": "ListTagsForResource",
                "description": " Returns a list of tags for a specified Amazon Resource Name (ARN). ",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ListTagsForResourceResponse"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "InternalFailureException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InternalFailureException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "BadRequestException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/BadRequestException"
                        }
                      }
                    }
                  },
                  "482": {
                    "description": "ResourceNotFoundException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ResourceNotFoundException"
                        }
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "resourceArn",
                    "in": "path",
                    "required": true,
                    "description": " The Amazon Resource Name (ARN) to use to list tags. ",
                    "schema": {
                      "type": "string",
                      "pattern": "^arn:aws:amplify:.*",
                      "minLength": 0,
                      "maxLength": 2048
                    }
                  }
                ]
              },
              "parameters": [
                {
                  "$ref": "#/components/parameters/X-Amz-Content-Sha256"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Date"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Algorithm"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Credential"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Security-Token"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Signature"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-SignedHeaders"
                }
              ],
              "post": {
                "operationId": "TagResource",
                "description": " Tags the resource with a tag key and value. ",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/TagResourceResponse"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "InternalFailureException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InternalFailureException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "BadRequestException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/BadRequestException"
                        }
                      }
                    }
                  },
                  "482": {
                    "description": "ResourceNotFoundException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ResourceNotFoundException"
                        }
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "resourceArn",
                    "in": "path",
                    "required": true,
                    "description": " The Amazon Resource Name (ARN) to use to tag a resource. ",
                    "schema": {
                      "type": "string",
                      "pattern": "^arn:aws:amplify:.*",
                      "minLength": 0,
                      "maxLength": 2048
                    }
                  }
                ],
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "required": [
                          "tags"
                        ],
                        "properties": {
                          "tags": {
                            "description": " The tags used to tag the resource. ",
                            "type": "object",
                            "minProperties": 0,
                            "maxProperties": 50,
                            "additionalProperties": {
                              "$ref": "#/components/schemas/TagValue"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "/apps/{appId}/branches/{branchName}/deployments/start": {
              "post": {
                "operationId": "StartDeployment",
                "description": " Starts a deployment for a manually deployed app. Manually deployed apps are not connected to a repository. ",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/StartDeploymentResult"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "BadRequestException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/BadRequestException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "UnauthorizedException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/UnauthorizedException"
                        }
                      }
                    }
                  },
                  "482": {
                    "description": "InternalFailureException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InternalFailureException"
                        }
                      }
                    }
                  },
                  "483": {
                    "description": "NotFoundException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/NotFoundException"
                        }
                      }
                    }
                  },
                  "484": {
                    "description": "LimitExceededException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/LimitExceededException"
                        }
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "appId",
                    "in": "path",
                    "required": true,
                    "description": " The unique ID for an Amplify app. ",
                    "schema": {
                      "type": "string",
                      "pattern": "d[a-z0-9]+",
                      "minLength": 1,
                      "maxLength": 20
                    }
                  },
                  {
                    "name": "branchName",
                    "in": "path",
                    "required": true,
                    "description": " The name for the branch, for the job. ",
                    "schema": {
                      "type": "string",
                      "pattern": "\\(\\?s\\).\\+",
                      "minLength": 1,
                      "maxLength": 255
                    }
                  }
                ],
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "jobId": {
                            "description": " The job ID for this deployment, generated by the create deployment request. ",
                            "type": "string",
                            "pattern": "[0-9]+",
                            "maxLength": 255
                          },
                          "sourceUrl": {
                            "description": " The source URL for this deployment, used when calling start deployment without create deployment. The source URL can be any HTTP GET URL that is publicly accessible and downloads a single .zip file. ",
                            "type": "string",
                            "pattern": "\\(\\?s\\).*",
                            "maxLength": 3000
                          }
                        }
                      }
                    }
                  }
                }
              },
              "parameters": [
                {
                  "$ref": "#/components/parameters/X-Amz-Content-Sha256"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Date"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Algorithm"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Credential"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Security-Token"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Signature"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-SignedHeaders"
                }
              ]
            },
            "/apps/{appId}/branches/{branchName}/jobs/{jobId}/stop": {
              "delete": {
                "operationId": "StopJob",
                "description": " Stops a job that is in progress for a branch of an Amplify app. ",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/StopJobResult"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "BadRequestException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/BadRequestException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "UnauthorizedException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/UnauthorizedException"
                        }
                      }
                    }
                  },
                  "482": {
                    "description": "InternalFailureException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InternalFailureException"
                        }
                      }
                    }
                  },
                  "483": {
                    "description": "NotFoundException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/NotFoundException"
                        }
                      }
                    }
                  },
                  "484": {
                    "description": "LimitExceededException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/LimitExceededException"
                        }
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "appId",
                    "in": "path",
                    "required": true,
                    "description": " The unique ID for an Amplify app. ",
                    "schema": {
                      "type": "string",
                      "pattern": "d[a-z0-9]+",
                      "minLength": 1,
                      "maxLength": 20
                    }
                  },
                  {
                    "name": "branchName",
                    "in": "path",
                    "required": true,
                    "description": " The name for the branch, for the job. ",
                    "schema": {
                      "type": "string",
                      "pattern": "\\(\\?s\\).\\+",
                      "minLength": 1,
                      "maxLength": 255
                    }
                  },
                  {
                    "name": "jobId",
                    "in": "path",
                    "required": true,
                    "description": " The unique id for the job. ",
                    "schema": {
                      "type": "string",
                      "pattern": "[0-9]+",
                      "maxLength": 255
                    }
                  }
                ]
              },
              "parameters": [
                {
                  "$ref": "#/components/parameters/X-Amz-Content-Sha256"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Date"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Algorithm"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Credential"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Security-Token"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Signature"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-SignedHeaders"
                }
              ]
            },
            "/tags/{resourceArn}#tagKeys": {
              "delete": {
                "operationId": "UntagResource",
                "description": " Untags a resource with a specified Amazon Resource Name (ARN). ",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/UntagResourceResponse"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "InternalFailureException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InternalFailureException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "BadRequestException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/BadRequestException"
                        }
                      }
                    }
                  },
                  "482": {
                    "description": "ResourceNotFoundException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ResourceNotFoundException"
                        }
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "resourceArn",
                    "in": "path",
                    "required": true,
                    "description": " The Amazon Resource Name (ARN) to use to untag a resource. ",
                    "schema": {
                      "type": "string",
                      "pattern": "^arn:aws:amplify:.*",
                      "minLength": 0,
                      "maxLength": 2048
                    }
                  },
                  {
                    "name": "tagKeys",
                    "in": "query",
                    "required": true,
                    "description": " The tag keys to use to untag a resource. ",
                    "schema": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/TagKey"
                      },
                      "minItems": 1,
                      "maxItems": 50
                    }
                  }
                ]
              },
              "parameters": [
                {
                  "$ref": "#/components/parameters/X-Amz-Content-Sha256"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Date"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Algorithm"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Credential"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Security-Token"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Signature"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-SignedHeaders"
                }
              ]
            }
          },
          "components": {
            "parameters": {
              "X-Amz-Content-Sha256": {
                "name": "X-Amz-Content-Sha256",
                "in": "header",
                "schema": {
                  "type": "string"
                },
                "required": false
              },
              "X-Amz-Date": {
                "name": "X-Amz-Date",
                "in": "header",
                "schema": {
                  "type": "string"
                },
                "required": false
              },
              "X-Amz-Algorithm": {
                "name": "X-Amz-Algorithm",
                "in": "header",
                "schema": {
                  "type": "string"
                },
                "required": false
              },
              "X-Amz-Credential": {
                "name": "X-Amz-Credential",
                "in": "header",
                "schema": {
                  "type": "string"
                },
                "required": false
              },
              "X-Amz-Security-Token": {
                "name": "X-Amz-Security-Token",
                "in": "header",
                "schema": {
                  "type": "string"
                },
                "required": false
              },
              "X-Amz-Signature": {
                "name": "X-Amz-Signature",
                "in": "header",
                "schema": {
                  "type": "string"
                },
                "required": false
              },
              "X-Amz-SignedHeaders": {
                "name": "X-Amz-SignedHeaders",
                "in": "header",
                "schema": {
                  "type": "string"
                },
                "required": false
              }
            },
            "securitySchemes": {
              "hmac": {
                "type": "apiKey",
                "name": "Authorization",
                "in": "header",
                "description": "Amazon Signature authorization v4",
                "x-amazon-apigateway-authtype": "awsSigv4"
              }
            },
            "schemas": {
              "CreateAppResult": {
                "type": "object",
                "required": [
                  "app"
                ],
                "properties": {
                  "app": {
                    "$ref": "#/components/schemas/App"
                  }
                }
              },
              "EnvValue": {
                "type": "string",
                "pattern": "\\(\\?s\\).*",
                "maxLength": 5500
              },
              "CustomRule": {
                "type": "object",
                "required": [
                  "source",
                  "target"
                ],
                "properties": {
                  "source": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Source"
                      },
                      {
                        "description": " The source pattern for a URL rewrite or redirect rule. "
                      }
                    ]
                  },
                  "target": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Target"
                      },
                      {
                        "description": " The target pattern for a URL rewrite or redirect rule. "
                      }
                    ]
                  },
                  "status": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Status"
                      },
                      {
                        "description": "<p> The status code for a URL rewrite or redirect rule. </p> <dl> <dt>200</dt> <dd> <p>Represents a 200 rewrite rule.</p> </dd> <dt>301</dt> <dd> <p>Represents a 301 (moved pemanently) redirect rule. This and all future requests should be directed to the target URL. </p> </dd> <dt>302</dt> <dd> <p>Represents a 302 temporary redirect rule.</p> </dd> <dt>404</dt> <dd> <p>Represents a 404 redirect rule.</p> </dd> <dt>404-200</dt> <dd> <p>Represents a 404 rewrite rule.</p> </dd> </dl>"
                      }
                    ]
                  },
                  "condition": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Condition"
                      },
                      {
                        "description": " The condition for a URL rewrite or redirect rule, such as a country code. "
                      }
                    ]
                  }
                },
                "description": " Describes a custom rewrite or redirect rule. "
              },
              "TagValue": {
                "type": "string",
                "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*)$",
                "maxLength": 256
              },
              "AutoBranchCreationPattern": {
                "type": "string",
                "pattern": "\\(\\?s\\).\\+",
                "minLength": 1,
                "maxLength": 2048
              },
              "Stage": {
                "type": "string",
                "enum": [
                  "PRODUCTION",
                  "BETA",
                  "DEVELOPMENT",
                  "EXPERIMENTAL",
                  "PULL_REQUEST"
                ]
              },
              "Framework": {
                "type": "string",
                "pattern": "\\(\\?s\\).*",
                "maxLength": 255
              },
              "EnableAutoBuild": {
                "type": "boolean"
              },
              "EnvironmentVariables": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/EnvValue"
                }
              },
              "BasicAuthCredentials": {
                "type": "string",
                "pattern": "\\(\\?s\\).*",
                "maxLength": 2000,
                "format": "password"
              },
              "EnableBasicAuth": {
                "type": "boolean"
              },
              "EnablePerformanceMode": {
                "type": "boolean"
              },
              "BuildSpec": {
                "type": "string",
                "pattern": "\\(\\?s\\).\\+",
                "description": " The build specification (build spec) file for an Amplify app build. ",
                "minLength": 1,
                "maxLength": 25000,
                "format": "password"
              },
              "EnablePullRequestPreview": {
                "type": "boolean"
              },
              "PullRequestEnvironmentName": {
                "type": "string",
                "pattern": "\\(\\?s\\).*",
                "maxLength": 20
              },
              "BadRequestException": {},
              "UnauthorizedException": {},
              "InternalFailureException": {},
              "LimitExceededException": {},
              "DependentServiceFailureException": {},
              "CreateBackendEnvironmentResult": {
                "type": "object",
                "required": [
                  "backendEnvironment"
                ],
                "properties": {
                  "backendEnvironment": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/BackendEnvironment"
                      },
                      {
                        "description": " Describes the backend environment for an Amplify app. "
                      }
                    ]
                  }
                },
                "description": " The result structure for the create backend environment request. "
              },
              "NotFoundException": {},
              "CreateBranchResult": {
                "type": "object",
                "required": [
                  "branch"
                ],
                "properties": {
                  "branch": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Branch"
                      },
                      {
                        "description": " Describes the branch for an Amplify app, which maps to a third-party repository branch. "
                      }
                    ]
                  }
                },
                "description": " The result structure for create branch request. "
              },
              "CreateDeploymentResult": {
                "type": "object",
                "required": [
                  "fileUploadUrls",
                  "zipUploadUrl"
                ],
                "properties": {
                  "jobId": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/JobId"
                      },
                      {
                        "description": " The job ID for this deployment. will supply to start deployment api. "
                      }
                    ]
                  },
                  "fileUploadUrls": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/FileUploadUrls"
                      },
                      {
                        "description": " When the <code>fileMap</code> argument is provided in the request, <code>fileUploadUrls</code> will contain a map of file names to upload URLs. "
                      }
                    ]
                  },
                  "zipUploadUrl": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/UploadUrl"
                      },
                      {
                        "description": " When the <code>fileMap</code> argument is not provided in the request, this <code>zipUploadUrl</code> is returned. "
                      }
                    ]
                  }
                },
                "description": " The result structure for the create a new deployment request. "
              },
              "MD5Hash": {
                "type": "string",
                "pattern": "\\(\\?s\\).*",
                "maxLength": 32
              },
              "CreateDomainAssociationResult": {
                "type": "object",
                "required": [
                  "domainAssociation"
                ],
                "properties": {
                  "domainAssociation": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/DomainAssociation"
                      },
                      {
                        "description": " Describes the structure of a domain association, which associates a custom domain with an Amplify app. "
                      }
                    ]
                  }
                },
                "description": " The result structure for the create domain association request. "
              },
              "SubDomainSetting": {
                "type": "object",
                "required": [
                  "prefix",
                  "branchName"
                ],
                "properties": {
                  "prefix": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/DomainPrefix"
                      },
                      {
                        "description": " The prefix setting for the subdomain. "
                      }
                    ]
                  },
                  "branchName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/BranchName"
                      },
                      {
                        "description": " The branch name setting for the subdomain. "
                      }
                    ]
                  }
                },
                "description": " Describes the settings for the subdomain. "
              },
              "AutoSubDomainCreationPattern": {
                "type": "string",
                "pattern": "\\(\\?s\\).\\+",
                "minLength": 1,
                "maxLength": 2048
              },
              "CreateWebhookResult": {
                "type": "object",
                "required": [
                  "webhook"
                ],
                "properties": {
                  "webhook": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Webhook"
                      },
                      {
                        "description": " Describes a webhook that connects repository events to an Amplify app. "
                      }
                    ]
                  }
                },
                "description": " The result structure for the create webhook request. "
              },
              "DeleteAppResult": {
                "type": "object",
                "required": [
                  "app"
                ],
                "properties": {
                  "app": {
                    "$ref": "#/components/schemas/App"
                  }
                },
                "description": " The result structure for the delete app request. "
              },
              "DeleteBackendEnvironmentResult": {
                "type": "object",
                "required": [
                  "backendEnvironment"
                ],
                "properties": {
                  "backendEnvironment": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/BackendEnvironment"
                      },
                      {
                        "description": " Describes the backend environment for an Amplify app. "
                      }
                    ]
                  }
                },
                "description": " The result structure of the delete backend environment result. "
              },
              "DeleteBranchResult": {
                "type": "object",
                "required": [
                  "branch"
                ],
                "properties": {
                  "branch": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Branch"
                      },
                      {
                        "description": " The branch for an Amplify app, which maps to a third-party repository branch. "
                      }
                    ]
                  }
                },
                "description": " The result structure for the delete branch request. "
              },
              "DeleteDomainAssociationResult": {
                "type": "object",
                "required": [
                  "domainAssociation"
                ],
                "properties": {
                  "domainAssociation": {
                    "$ref": "#/components/schemas/DomainAssociation"
                  }
                }
              },
              "DeleteJobResult": {
                "type": "object",
                "required": [
                  "jobSummary"
                ],
                "properties": {
                  "jobSummary": {
                    "$ref": "#/components/schemas/JobSummary"
                  }
                },
                "description": " The result structure for the delete job request. "
              },
              "DeleteWebhookResult": {
                "type": "object",
                "required": [
                  "webhook"
                ],
                "properties": {
                  "webhook": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Webhook"
                      },
                      {
                        "description": " Describes a webhook that connects repository events to an Amplify app. "
                      }
                    ]
                  }
                },
                "description": " The result structure for the delete webhook request. "
              },
              "GenerateAccessLogsResult": {
                "type": "object",
                "properties": {
                  "logUrl": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/LogUrl"
                      },
                      {
                        "description": " The pre-signed URL for the requested access logs. "
                      }
                    ]
                  }
                },
                "description": " The result structure for the generate access logs request. "
              },
              "GetAppResult": {
                "type": "object",
                "required": [
                  "app"
                ],
                "properties": {
                  "app": {
                    "$ref": "#/components/schemas/App"
                  }
                }
              },
              "GetArtifactUrlResult": {
                "type": "object",
                "required": [
                  "artifactId",
                  "artifactUrl"
                ],
                "properties": {
                  "artifactId": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ArtifactId"
                      },
                      {
                        "description": " The unique ID for an artifact. "
                      }
                    ]
                  },
                  "artifactUrl": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ArtifactUrl"
                      },
                      {
                        "description": " The presigned URL for the artifact. "
                      }
                    ]
                  }
                },
                "description": " Returns the result structure for the get artifact request. "
              },
              "GetBackendEnvironmentResult": {
                "type": "object",
                "required": [
                  "backendEnvironment"
                ],
                "properties": {
                  "backendEnvironment": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/BackendEnvironment"
                      },
                      {
                        "description": " Describes the backend environment for an Amplify app. "
                      }
                    ]
                  }
                },
                "description": " The result structure for the get backend environment result. "
              },
              "GetBranchResult": {
                "type": "object",
                "required": [
                  "branch"
                ],
                "properties": {
                  "branch": {
                    "$ref": "#/components/schemas/Branch"
                  }
                }
              },
              "GetDomainAssociationResult": {
                "type": "object",
                "required": [
                  "domainAssociation"
                ],
                "properties": {
                  "domainAssociation": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/DomainAssociation"
                      },
                      {
                        "description": " Describes the structure of a domain association, which associates a custom domain with an Amplify app. "
                      }
                    ]
                  }
                },
                "description": " The result structure for the get domain association request. "
              },
              "GetJobResult": {
                "type": "object",
                "required": [
                  "job"
                ],
                "properties": {
                  "job": {
                    "$ref": "#/components/schemas/Job"
                  }
                }
              },
              "GetWebhookResult": {
                "type": "object",
                "required": [
                  "webhook"
                ],
                "properties": {
                  "webhook": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Webhook"
                      },
                      {
                        "description": " Describes the structure of a webhook. "
                      }
                    ]
                  }
                },
                "description": " The result structure for the get webhook request. "
              },
              "ListAppsResult": {
                "type": "object",
                "required": [
                  "apps"
                ],
                "properties": {
                  "apps": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Apps"
                      },
                      {
                        "description": " A list of Amplify apps. "
                      }
                    ]
                  },
                  "nextToken": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/NextToken"
                      },
                      {
                        "description": " A pagination token. Set to null to start listing apps from start. If non-null, the pagination token is returned in a result. Pass its value in here to list more projects. "
                      }
                    ]
                  }
                },
                "description": " The result structure for an Amplify app list request. "
              },
              "ListArtifactsResult": {
                "type": "object",
                "required": [
                  "artifacts"
                ],
                "properties": {
                  "artifacts": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Artifacts"
                      },
                      {
                        "description": " A list of artifacts. "
                      }
                    ]
                  },
                  "nextToken": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/NextToken"
                      },
                      {
                        "description": " A pagination token. If a non-null pagination token is returned in a result, pass its value in another request to retrieve more entries. "
                      }
                    ]
                  }
                },
                "description": " The result structure for the list artifacts request. "
              },
              "ListBackendEnvironmentsResult": {
                "type": "object",
                "required": [
                  "backendEnvironments"
                ],
                "properties": {
                  "backendEnvironments": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/BackendEnvironments"
                      },
                      {
                        "description": " The list of backend environments for an Amplify app. "
                      }
                    ]
                  },
                  "nextToken": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/NextToken"
                      },
                      {
                        "description": " A pagination token. If a non-null pagination token is returned in a result, pass its value in another request to retrieve more entries. "
                      }
                    ]
                  }
                },
                "description": " The result structure for the list backend environments result. "
              },
              "ListBranchesResult": {
                "type": "object",
                "required": [
                  "branches"
                ],
                "properties": {
                  "branches": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Branches"
                      },
                      {
                        "description": " A list of branches for an Amplify app. "
                      }
                    ]
                  },
                  "nextToken": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/NextToken"
                      },
                      {
                        "description": " A pagination token. If a non-null pagination token is returned in a result, pass its value in another request to retrieve more entries. "
                      }
                    ]
                  }
                },
                "description": " The result structure for the list branches request. "
              },
              "ListDomainAssociationsResult": {
                "type": "object",
                "required": [
                  "domainAssociations"
                ],
                "properties": {
                  "domainAssociations": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/DomainAssociations"
                      },
                      {
                        "description": " A list of domain associations. "
                      }
                    ]
                  },
                  "nextToken": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/NextToken"
                      },
                      {
                        "description": " A pagination token. If non-null, a pagination token is returned in a result. Pass its value in another request to retrieve more entries. "
                      }
                    ]
                  }
                },
                "description": " The result structure for the list domain association request. "
              },
              "ListJobsResult": {
                "type": "object",
                "required": [
                  "jobSummaries"
                ],
                "properties": {
                  "jobSummaries": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/JobSummaries"
                      },
                      {
                        "description": " The result structure for the list job result request. "
                      }
                    ]
                  },
                  "nextToken": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/NextToken"
                      },
                      {
                        "description": " A pagination token. If non-null the pagination token is returned in a result. Pass its value in another request to retrieve more entries. "
                      }
                    ]
                  }
                },
                "description": " The maximum number of records to list in a single response. "
              },
              "ListTagsForResourceResponse": {
                "type": "object",
                "properties": {
                  "tags": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/TagMap"
                      },
                      {
                        "description": " A list of tags for the specified The Amazon Resource Name (ARN). "
                      }
                    ]
                  }
                },
                "description": " The response for the list tags for resource request. "
              },
              "ResourceNotFoundException": {},
              "ListWebhooksResult": {
                "type": "object",
                "required": [
                  "webhooks"
                ],
                "properties": {
                  "webhooks": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Webhooks"
                      },
                      {
                        "description": " A list of webhooks. "
                      }
                    ]
                  },
                  "nextToken": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/NextToken"
                      },
                      {
                        "description": " A pagination token. If non-null, the pagination token is returned in a result. Pass its value in another request to retrieve more entries. "
                      }
                    ]
                  }
                },
                "description": " The result structure for the list webhooks request. "
              },
              "StartDeploymentResult": {
                "type": "object",
                "required": [
                  "jobSummary"
                ],
                "properties": {
                  "jobSummary": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/JobSummary"
                      },
                      {
                        "description": " The summary for the job. "
                      }
                    ]
                  }
                },
                "description": " The result structure for the start a deployment request. "
              },
              "StartJobResult": {
                "type": "object",
                "required": [
                  "jobSummary"
                ],
                "properties": {
                  "jobSummary": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/JobSummary"
                      },
                      {
                        "description": " The summary for the job. "
                      }
                    ]
                  }
                },
                "description": " The result structure for the run job request. "
              },
              "StopJobResult": {
                "type": "object",
                "required": [
                  "jobSummary"
                ],
                "properties": {
                  "jobSummary": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/JobSummary"
                      },
                      {
                        "description": " The summary for the job. "
                      }
                    ]
                  }
                },
                "description": " The result structure for the stop job request. "
              },
              "TagResourceResponse": {
                "type": "object",
                "properties": {},
                "description": " The response for the tag resource request. "
              },
              "UntagResourceResponse": {
                "type": "object",
                "properties": {},
                "description": " The response for the untag resource request. "
              },
              "TagKey": {
                "type": "string",
                "pattern": "^(?!aws:)[a-zA-Z+-=._:/]+$",
                "minLength": 1,
                "maxLength": 128
              },
              "UpdateAppResult": {
                "type": "object",
                "required": [
                  "app"
                ],
                "properties": {
                  "app": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/App"
                      },
                      {
                        "description": " Represents the updated Amplify app. "
                      }
                    ]
                  }
                },
                "description": " The result structure for an Amplify app update request. "
              },
              "UpdateBranchResult": {
                "type": "object",
                "required": [
                  "branch"
                ],
                "properties": {
                  "branch": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Branch"
                      },
                      {
                        "description": " The branch for an Amplify app, which maps to a third-party repository branch. "
                      }
                    ]
                  }
                },
                "description": " The result structure for the update branch request. "
              },
              "UpdateDomainAssociationResult": {
                "type": "object",
                "required": [
                  "domainAssociation"
                ],
                "properties": {
                  "domainAssociation": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/DomainAssociation"
                      },
                      {
                        "description": " Describes a domain association, which associates a custom domain with an Amplify app. "
                      }
                    ]
                  }
                },
                "description": " The result structure for the update domain association request. "
              },
              "UpdateWebhookResult": {
                "type": "object",
                "required": [
                  "webhook"
                ],
                "properties": {
                  "webhook": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Webhook"
                      },
                      {
                        "description": " Describes a webhook that connects repository events to an Amplify app. "
                      }
                    ]
                  }
                },
                "description": " The result structure for the update webhook request. "
              },
              "AccessToken": {
                "type": "string",
                "pattern": "\\(\\?s\\).\\+",
                "minLength": 1,
                "maxLength": 255,
                "format": "password"
              },
              "ActiveJobId": {
                "type": "string",
                "maxLength": 1000
              },
              "AppId": {
                "type": "string",
                "pattern": "d[a-z0-9]+",
                "minLength": 1,
                "maxLength": 20
              },
              "AppArn": {
                "type": "string",
                "maxLength": 1000
              },
              "Name": {
                "type": "string",
                "pattern": "\\(\\?s\\).\\+",
                "minLength": 1,
                "maxLength": 255
              },
              "TagMap": {
                "type": "object",
                "minProperties": 0,
                "maxProperties": 50,
                "additionalProperties": {
                  "$ref": "#/components/schemas/TagValue"
                }
              },
              "Description": {
                "type": "string",
                "pattern": "\\(\\?s\\).*",
                "maxLength": 1000
              },
              "Repository": {
                "type": "string",
                "pattern": "\\(\\?s\\).*",
                "maxLength": 1000
              },
              "Platform": {
                "type": "string",
                "enum": [
                  "WEB",
                  "WEB_DYNAMIC",
                  "WEB_COMPUTE"
                ]
              },
              "CreateTime": {
                "type": "string",
                "format": "date-time"
              },
              "UpdateTime": {
                "type": "string",
                "format": "date-time"
              },
              "ServiceRoleArn": {
                "type": "string",
                "pattern": "\\(\\?s\\).*",
                "minLength": 0,
                "maxLength": 1000
              },
              "DefaultDomain": {
                "type": "string",
                "minLength": 1,
                "maxLength": 1000
              },
              "EnableBranchAutoBuild": {
                "type": "boolean"
              },
              "EnableBranchAutoDeletion": {
                "type": "boolean"
              },
              "CustomRules": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CustomRule"
                }
              },
              "ProductionBranch": {
                "type": "object",
                "properties": {
                  "lastDeployTime": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/LastDeployTime"
                      },
                      {
                        "description": " The last deploy time of the production branch. "
                      }
                    ]
                  },
                  "status": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Status"
                      },
                      {
                        "description": " The status of the production branch. "
                      }
                    ]
                  },
                  "thumbnailUrl": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ThumbnailUrl"
                      },
                      {
                        "description": " The thumbnail URL for the production branch. "
                      }
                    ]
                  },
                  "branchName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/BranchName"
                      },
                      {
                        "description": " The branch name for the production branch. "
                      }
                    ]
                  }
                },
                "description": " Describes the information about a production branch for an Amplify app. "
              },
              "CustomHeaders": {
                "type": "string",
                "pattern": "\\(\\?s\\).*",
                "minLength": 0,
                "maxLength": 25000
              },
              "EnableAutoBranchCreation": {
                "type": "boolean"
              },
              "AutoBranchCreationPatterns": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AutoBranchCreationPattern"
                }
              },
              "AutoBranchCreationConfig": {
                "type": "object",
                "properties": {
                  "stage": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Stage"
                      },
                      {
                        "description": " Describes the current stage for the autocreated branch. "
                      }
                    ]
                  },
                  "framework": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Framework"
                      },
                      {
                        "description": " The framework for the autocreated branch. "
                      }
                    ]
                  },
                  "enableAutoBuild": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/EnableAutoBuild"
                      },
                      {
                        "description": " Enables auto building for the autocreated branch. "
                      }
                    ]
                  },
                  "environmentVariables": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/EnvironmentVariables"
                      },
                      {
                        "description": " The environment variables for the autocreated branch. "
                      }
                    ]
                  },
                  "basicAuthCredentials": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/BasicAuthCredentials"
                      },
                      {
                        "description": " The basic authorization credentials for the autocreated branch. You must base64-encode the authorization credentials and provide them in the format <code>user:password</code>."
                      }
                    ]
                  },
                  "enableBasicAuth": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/EnableBasicAuth"
                      },
                      {
                        "description": " Enables basic authorization for the autocreated branch. "
                      }
                    ]
                  },
                  "enablePerformanceMode": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/EnablePerformanceMode"
                      },
                      {
                        "description": "<p>Enables performance mode for the branch.</p> <p>Performance mode optimizes for faster hosting performance by keeping content cached at the edge for a longer interval. When performance mode is enabled, hosting configuration or code changes can take up to 10 minutes to roll out. </p>"
                      }
                    ]
                  },
                  "buildSpec": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/BuildSpec"
                      },
                      {
                        "description": " The build specification (build spec) for the autocreated branch. "
                      }
                    ]
                  },
                  "enablePullRequestPreview": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/EnablePullRequestPreview"
                      },
                      {
                        "description": " Enables pull request previews for the autocreated branch. "
                      }
                    ]
                  },
                  "pullRequestEnvironmentName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/PullRequestEnvironmentName"
                      },
                      {
                        "description": " The Amplify environment name for the pull request. "
                      }
                    ]
                  }
                },
                "description": " Describes the automated branch creation configuration. "
              },
              "RepositoryCloneMethod": {
                "type": "string",
                "enum": [
                  "SSH",
                  "TOKEN",
                  "SIGV4"
                ]
              },
              "App": {
                "type": "object",
                "required": [
                  "appId",
                  "appArn",
                  "name",
                  "description",
                  "repository",
                  "platform",
                  "createTime",
                  "updateTime",
                  "environmentVariables",
                  "defaultDomain",
                  "enableBranchAutoBuild",
                  "enableBasicAuth"
                ],
                "properties": {
                  "appId": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/AppId"
                      },
                      {
                        "description": " The unique ID of the Amplify app. "
                      }
                    ]
                  },
                  "appArn": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/AppArn"
                      },
                      {
                        "description": " The Amazon Resource Name (ARN) of the Amplify app. "
                      }
                    ]
                  },
                  "name": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Name"
                      },
                      {
                        "description": " The name for the Amplify app. "
                      }
                    ]
                  },
                  "tags": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/TagMap"
                      },
                      {
                        "description": " The tag for the Amplify app. "
                      }
                    ]
                  },
                  "description": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Description"
                      },
                      {
                        "description": " The description for the Amplify app. "
                      }
                    ]
                  },
                  "repository": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Repository"
                      },
                      {
                        "description": " The Git repository for the Amplify app. "
                      }
                    ]
                  },
                  "platform": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Platform"
                      },
                      {
                        "description": " The platform for the Amplify app. For a static app, set the platform type to <code>WEB</code>. For a dynamic server-side rendered (SSR) app, set the platform type to <code>WEB_COMPUTE</code>. For an app requiring Amplify Hosting's original SSR support only, set the platform type to <code>WEB_DYNAMIC</code>."
                      }
                    ]
                  },
                  "createTime": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/CreateTime"
                      },
                      {
                        "description": " Creates a date and time for the Amplify app. "
                      }
                    ]
                  },
                  "updateTime": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/UpdateTime"
                      },
                      {
                        "description": " Updates the date and time for the Amplify app. "
                      }
                    ]
                  },
                  "iamServiceRoleArn": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ServiceRoleArn"
                      },
                      {
                        "description": " The AWS Identity and Access Management (IAM) service role for the Amazon Resource Name (ARN) of the Amplify app. "
                      }
                    ]
                  },
                  "environmentVariables": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/EnvironmentVariables"
                      },
                      {
                        "description": " The environment variables for the Amplify app. "
                      }
                    ]
                  },
                  "defaultDomain": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/DefaultDomain"
                      },
                      {
                        "description": " The default domain for the Amplify app. "
                      }
                    ]
                  },
                  "enableBranchAutoBuild": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/EnableBranchAutoBuild"
                      },
                      {
                        "description": " Enables the auto-building of branches for the Amplify app. "
                      }
                    ]
                  },
                  "enableBranchAutoDeletion": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/EnableBranchAutoDeletion"
                      },
                      {
                        "description": " Automatically disconnect a branch in the Amplify Console when you delete a branch from your Git repository. "
                      }
                    ]
                  },
                  "enableBasicAuth": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/EnableBasicAuth"
                      },
                      {
                        "description": " Enables basic authorization for the Amplify app's branches. "
                      }
                    ]
                  },
                  "basicAuthCredentials": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/BasicAuthCredentials"
                      },
                      {
                        "description": " The basic authorization credentials for branches for the Amplify app. You must base64-encode the authorization credentials and provide them in the format <code>user:password</code>."
                      }
                    ]
                  },
                  "customRules": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/CustomRules"
                      },
                      {
                        "description": " Describes the custom redirect and rewrite rules for the Amplify app. "
                      }
                    ]
                  },
                  "productionBranch": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ProductionBranch"
                      },
                      {
                        "description": " Describes the information about a production branch of the Amplify app. "
                      }
                    ]
                  },
                  "buildSpec": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/BuildSpec"
                      },
                      {
                        "description": " Describes the content of the build specification (build spec) for the Amplify app. "
                      }
                    ]
                  },
                  "customHeaders": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/CustomHeaders"
                      },
                      {
                        "description": "Describes the custom HTTP headers for the Amplify app."
                      }
                    ]
                  },
                  "enableAutoBranchCreation": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/EnableAutoBranchCreation"
                      },
                      {
                        "description": " Enables automated branch creation for the Amplify app. "
                      }
                    ]
                  },
                  "autoBranchCreationPatterns": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/AutoBranchCreationPatterns"
                      },
                      {
                        "description": " Describes the automated branch creation glob patterns for the Amplify app. "
                      }
                    ]
                  },
                  "autoBranchCreationConfig": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/AutoBranchCreationConfig"
                      },
                      {
                        "description": " Describes the automated branch creation configuration for the Amplify app. "
                      }
                    ]
                  },
                  "repositoryCloneMethod": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/RepositoryCloneMethod"
                      },
                      {
                        "description": "<note> <p>This is for internal use.</p> </note> <p>The Amplify service uses this parameter to specify the authentication protocol to use to access the Git repository for an Amplify app. Amplify specifies <code>TOKEN</code> for a GitHub repository, <code>SIGV4</code> for an Amazon Web Services CodeCommit repository, and <code>SSH</code> for GitLab and Bitbucket repositories.</p>"
                      }
                    ]
                  }
                },
                "description": " Represents the different branches of a repository for building, deploying, and hosting an Amplify app. "
              },
              "Apps": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/App"
                }
              },
              "ArtifactFileName": {
                "type": "string",
                "maxLength": 1000
              },
              "ArtifactId": {
                "type": "string",
                "pattern": "\\(\\?s\\).*",
                "maxLength": 255
              },
              "Artifact": {
                "type": "object",
                "required": [
                  "artifactFileName",
                  "artifactId"
                ],
                "properties": {
                  "artifactFileName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ArtifactFileName"
                      },
                      {
                        "description": " The file name for the artifact. "
                      }
                    ]
                  },
                  "artifactId": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ArtifactId"
                      },
                      {
                        "description": " The unique ID for the artifact. "
                      }
                    ]
                  }
                },
                "description": " Describes an artifact. "
              },
              "ArtifactUrl": {
                "type": "string",
                "maxLength": 1000
              },
              "Artifacts": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Artifact"
                }
              },
              "ArtifactsUrl": {
                "type": "string",
                "maxLength": 1000
              },
              "AssociatedResource": {
                "type": "string",
                "minLength": 1,
                "maxLength": 2048
              },
              "AssociatedResources": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AssociatedResource"
                }
              },
              "AutoSubDomainCreationPatterns": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AutoSubDomainCreationPattern"
                }
              },
              "AutoSubDomainIAMRole": {
                "type": "string",
                "pattern": "^$|^arn:aws:iam::\\d{12}:role.+",
                "maxLength": 1000
              },
              "BackendEnvironmentArn": {
                "type": "string",
                "pattern": "\\(\\?s\\).*",
                "minLength": 0,
                "maxLength": 1000
              },
              "EnvironmentName": {
                "type": "string",
                "pattern": "\\(\\?s\\).\\+",
                "minLength": 1,
                "maxLength": 255
              },
              "StackName": {
                "type": "string",
                "pattern": "\\(\\?s\\).\\+",
                "minLength": 1,
                "maxLength": 255
              },
              "DeploymentArtifacts": {
                "type": "string",
                "pattern": "\\(\\?s\\).\\+",
                "minLength": 1,
                "maxLength": 1000
              },
              "BackendEnvironment": {
                "type": "object",
                "required": [
                  "backendEnvironmentArn",
                  "environmentName",
                  "createTime",
                  "updateTime"
                ],
                "properties": {
                  "backendEnvironmentArn": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/BackendEnvironmentArn"
                      },
                      {
                        "description": " The Amazon Resource Name (ARN) for a backend environment that is part of an Amplify app. "
                      }
                    ]
                  },
                  "environmentName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/EnvironmentName"
                      },
                      {
                        "description": " The name for a backend environment that is part of an Amplify app. "
                      }
                    ]
                  },
                  "stackName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/StackName"
                      },
                      {
                        "description": " The AWS CloudFormation stack name of a backend environment. "
                      }
                    ]
                  },
                  "deploymentArtifacts": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/DeploymentArtifacts"
                      },
                      {
                        "description": " The name of deployment artifacts. "
                      }
                    ]
                  },
                  "createTime": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/CreateTime"
                      },
                      {
                        "description": " The creation date and time for a backend environment that is part of an Amplify app. "
                      }
                    ]
                  },
                  "updateTime": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/UpdateTime"
                      },
                      {
                        "description": " The last updated date and time for a backend environment that is part of an Amplify app. "
                      }
                    ]
                  }
                },
                "description": " Describes the backend environment for an Amplify app. "
              },
              "BackendEnvironments": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/BackendEnvironment"
                }
              },
              "BranchArn": {
                "type": "string",
                "pattern": "\\(\\?s\\).*",
                "maxLength": 1000
              },
              "BranchName": {
                "type": "string",
                "pattern": "\\(\\?s\\).\\+",
                "minLength": 1,
                "maxLength": 255
              },
              "DisplayName": {
                "type": "string",
                "pattern": "\\(\\?s\\).*",
                "maxLength": 255
              },
              "EnableNotification": {
                "type": "boolean"
              },
              "CustomDomains": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CustomDomain"
                },
                "maxItems": 255
              },
              "TotalNumberOfJobs": {
                "type": "string",
                "maxLength": 1000
              },
              "ThumbnailUrl": {
                "type": "string",
                "minLength": 1,
                "maxLength": 2000
              },
              "TTL": {
                "type": "string",
                "pattern": "\\d*",
                "description": " The content Time to Live (TTL) for the website in seconds. ",
                "minLength": 0,
                "maxLength": 32
              },
              "Branch": {
                "type": "object",
                "required": [
                  "branchArn",
                  "branchName",
                  "description",
                  "stage",
                  "displayName",
                  "enableNotification",
                  "createTime",
                  "updateTime",
                  "environmentVariables",
                  "enableAutoBuild",
                  "customDomains",
                  "framework",
                  "activeJobId",
                  "totalNumberOfJobs",
                  "enableBasicAuth",
                  "ttl",
                  "enablePullRequestPreview"
                ],
                "properties": {
                  "branchArn": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/BranchArn"
                      },
                      {
                        "description": " The Amazon Resource Name (ARN) for a branch that is part of an Amplify app. "
                      }
                    ]
                  },
                  "branchName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/BranchName"
                      },
                      {
                        "description": " The name for the branch that is part of an Amplify app. "
                      }
                    ]
                  },
                  "description": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Description"
                      },
                      {
                        "description": " The description for the branch that is part of an Amplify app. "
                      }
                    ]
                  },
                  "tags": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/TagMap"
                      },
                      {
                        "description": " The tag for the branch of an Amplify app. "
                      }
                    ]
                  },
                  "stage": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Stage"
                      },
                      {
                        "description": " The current stage for the branch that is part of an Amplify app. "
                      }
                    ]
                  },
                  "displayName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/DisplayName"
                      },
                      {
                        "description": " The display name for the branch. This is used as the default domain prefix. "
                      }
                    ]
                  },
                  "enableNotification": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/EnableNotification"
                      },
                      {
                        "description": " Enables notifications for a branch that is part of an Amplify app. "
                      }
                    ]
                  },
                  "createTime": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/CreateTime"
                      },
                      {
                        "description": " The creation date and time for a branch that is part of an Amplify app. "
                      }
                    ]
                  },
                  "updateTime": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/UpdateTime"
                      },
                      {
                        "description": " The last updated date and time for a branch that is part of an Amplify app. "
                      }
                    ]
                  },
                  "environmentVariables": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/EnvironmentVariables"
                      },
                      {
                        "description": " The environment variables specific to a branch of an Amplify app. "
                      }
                    ]
                  },
                  "enableAutoBuild": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/EnableAutoBuild"
                      },
                      {
                        "description": " Enables auto-building on push for a branch of an Amplify app. "
                      }
                    ]
                  },
                  "customDomains": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/CustomDomains"
                      },
                      {
                        "description": " The custom domains for a branch of an Amplify app. "
                      }
                    ]
                  },
                  "framework": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Framework"
                      },
                      {
                        "description": " The framework for a branch of an Amplify app. "
                      }
                    ]
                  },
                  "activeJobId": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ActiveJobId"
                      },
                      {
                        "description": " The ID of the active job for a branch of an Amplify app. "
                      }
                    ]
                  },
                  "totalNumberOfJobs": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/TotalNumberOfJobs"
                      },
                      {
                        "description": " The total number of jobs that are part of an Amplify app. "
                      }
                    ]
                  },
                  "enableBasicAuth": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/EnableBasicAuth"
                      },
                      {
                        "description": " Enables basic authorization for a branch of an Amplify app. "
                      }
                    ]
                  },
                  "enablePerformanceMode": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/EnablePerformanceMode"
                      },
                      {
                        "description": "<p>Enables performance mode for the branch.</p> <p>Performance mode optimizes for faster hosting performance by keeping content cached at the edge for a longer interval. When performance mode is enabled, hosting configuration or code changes can take up to 10 minutes to roll out. </p>"
                      }
                    ]
                  },
                  "thumbnailUrl": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ThumbnailUrl"
                      },
                      {
                        "description": " The thumbnail URL for the branch of an Amplify app. "
                      }
                    ]
                  },
                  "basicAuthCredentials": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/BasicAuthCredentials"
                      },
                      {
                        "description": " The basic authorization credentials for a branch of an Amplify app. You must base64-encode the authorization credentials and provide them in the format <code>user:password</code>."
                      }
                    ]
                  },
                  "buildSpec": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/BuildSpec"
                      },
                      {
                        "description": " The build specification (build spec) content for the branch of an Amplify app. "
                      }
                    ]
                  },
                  "ttl": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/TTL"
                      },
                      {
                        "description": " The content Time to Live (TTL) for the website in seconds. "
                      }
                    ]
                  },
                  "associatedResources": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/AssociatedResources"
                      },
                      {
                        "description": " A list of custom resources that are linked to this branch. "
                      }
                    ]
                  },
                  "enablePullRequestPreview": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/EnablePullRequestPreview"
                      },
                      {
                        "description": " Enables pull request previews for the branch. "
                      }
                    ]
                  },
                  "pullRequestEnvironmentName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/PullRequestEnvironmentName"
                      },
                      {
                        "description": " The Amplify environment name for the pull request. "
                      }
                    ]
                  },
                  "destinationBranch": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/BranchName"
                      },
                      {
                        "description": " The destination branch if the branch is a pull request branch. "
                      }
                    ]
                  },
                  "sourceBranch": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/BranchName"
                      },
                      {
                        "description": " The source branch if the branch is a pull request branch. "
                      }
                    ]
                  },
                  "backendEnvironmentArn": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/BackendEnvironmentArn"
                      },
                      {
                        "description": " The Amazon Resource Name (ARN) for a backend environment that is part of an Amplify app. "
                      }
                    ]
                  }
                },
                "description": " The branch for an Amplify app, which maps to a third-party repository branch. "
              },
              "Branches": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Branch"
                },
                "maxItems": 255
              },
              "CertificateVerificationDNSRecord": {
                "type": "string",
                "maxLength": 1000
              },
              "CommitId": {
                "type": "string",
                "pattern": "\\(\\?s\\).*",
                "maxLength": 255
              },
              "CommitMessage": {
                "type": "string",
                "pattern": "\\(\\?s\\).*",
                "maxLength": 10000
              },
              "CommitTime": {
                "type": "string",
                "format": "date-time"
              },
              "Condition": {
                "type": "string",
                "pattern": "\\(\\?s\\).*",
                "minLength": 0,
                "maxLength": 2048
              },
              "Context": {
                "type": "string"
              },
              "OauthToken": {
                "type": "string",
                "pattern": "\\(\\?s\\).*",
                "maxLength": 1000,
                "format": "password"
              },
              "CreateAppRequest": {
                "type": "object",
                "required": [
                  "name"
                ],
                "title": "CreateAppRequest",
                "properties": {
                  "name": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Name"
                      },
                      {
                        "description": " The name for an Amplify app. "
                      }
                    ]
                  },
                  "description": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Description"
                      },
                      {
                        "description": " The description for an Amplify app. "
                      }
                    ]
                  },
                  "repository": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Repository"
                      },
                      {
                        "description": " The repository for an Amplify app. "
                      }
                    ]
                  },
                  "platform": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Platform"
                      },
                      {
                        "description": " The platform for the Amplify app. For a static app, set the platform type to <code>WEB</code>. For a dynamic server-side rendered (SSR) app, set the platform type to <code>WEB_COMPUTE</code>. For an app requiring Amplify Hosting's original SSR support only, set the platform type to <code>WEB_DYNAMIC</code>."
                      }
                    ]
                  },
                  "iamServiceRoleArn": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ServiceRoleArn"
                      },
                      {
                        "description": " The AWS Identity and Access Management (IAM) service role for an Amplify app. "
                      }
                    ]
                  },
                  "oauthToken": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/OauthToken"
                      },
                      {
                        "description": "<p>The OAuth token for a third-party source control system for an Amplify app. The OAuth token is used to create a webhook and a read-only deploy key using SSH cloning. The OAuth token is not stored.</p> <p>Use <code>oauthToken</code> for repository providers other than GitHub, such as Bitbucket or CodeCommit. To authorize access to GitHub as your repository provider, use <code>accessToken</code>.</p> <p>You must specify either <code>oauthToken</code> or <code>accessToken</code> when you create a new app.</p> <p>Existing Amplify apps deployed from a GitHub repository using OAuth continue to work with CI/CD. However, we strongly recommend that you migrate these apps to use the GitHub App. For more information, see <a href=\"https://docs.aws.amazon.com/amplify/latest/UserGuide/setting-up-GitHub-access.html#migrating-to-github-app-auth\">Migrating an existing OAuth app to the Amplify GitHub App</a> in the <i>Amplify User Guide</i> .</p>"
                      }
                    ]
                  },
                  "accessToken": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/AccessToken"
                      },
                      {
                        "description": "<p>The personal access token for a GitHub repository for an Amplify app. The personal access token is used to authorize access to a GitHub repository using the Amplify GitHub App. The token is not stored.</p> <p>Use <code>accessToken</code> for GitHub repositories only. To authorize access to a repository provider such as Bitbucket or CodeCommit, use <code>oauthToken</code>.</p> <p>You must specify either <code>accessToken</code> or <code>oauthToken</code> when you create a new app.</p> <p>Existing Amplify apps deployed from a GitHub repository using OAuth continue to work with CI/CD. However, we strongly recommend that you migrate these apps to use the GitHub App. For more information, see <a href=\"https://docs.aws.amazon.com/amplify/latest/UserGuide/setting-up-GitHub-access.html#migrating-to-github-app-auth\">Migrating an existing OAuth app to the Amplify GitHub App</a> in the <i>Amplify User Guide</i> .</p>"
                      }
                    ]
                  },
                  "environmentVariables": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/EnvironmentVariables"
                      },
                      {
                        "description": " The environment variables map for an Amplify app. "
                      }
                    ]
                  },
                  "enableBranchAutoBuild": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/EnableBranchAutoBuild"
                      },
                      {
                        "description": " Enables the auto building of branches for an Amplify app. "
                      }
                    ]
                  },
                  "enableBranchAutoDeletion": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/EnableBranchAutoDeletion"
                      },
                      {
                        "description": " Automatically disconnects a branch in the Amplify Console when you delete a branch from your Git repository. "
                      }
                    ]
                  },
                  "enableBasicAuth": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/EnableBasicAuth"
                      },
                      {
                        "description": " Enables basic authorization for an Amplify app. This will apply to all branches that are part of this app. "
                      }
                    ]
                  },
                  "basicAuthCredentials": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/BasicAuthCredentials"
                      },
                      {
                        "description": " The credentials for basic authorization for an Amplify app. You must base64-encode the authorization credentials and provide them in the format <code>user:password</code>."
                      }
                    ]
                  },
                  "customRules": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/CustomRules"
                      },
                      {
                        "description": " The custom rewrite and redirect rules for an Amplify app. "
                      }
                    ]
                  },
                  "tags": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/TagMap"
                      },
                      {
                        "description": " The tag for an Amplify app. "
                      }
                    ]
                  },
                  "buildSpec": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/BuildSpec"
                      },
                      {
                        "description": " The build specification (build spec) for an Amplify app. "
                      }
                    ]
                  },
                  "customHeaders": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/CustomHeaders"
                      },
                      {
                        "description": "The custom HTTP headers for an Amplify app."
                      }
                    ]
                  },
                  "enableAutoBranchCreation": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/EnableAutoBranchCreation"
                      },
                      {
                        "description": " Enables automated branch creation for an Amplify app. "
                      }
                    ]
                  },
                  "autoBranchCreationPatterns": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/AutoBranchCreationPatterns"
                      },
                      {
                        "description": " The automated branch creation glob patterns for an Amplify app. "
                      }
                    ]
                  },
                  "autoBranchCreationConfig": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/AutoBranchCreationConfig"
                      },
                      {
                        "description": " The automated branch creation configuration for an Amplify app. "
                      }
                    ]
                  }
                },
                "description": " The request structure used to create apps in Amplify. "
              },
              "CreateBackendEnvironmentRequest": {
                "type": "object",
                "required": [
                  "environmentName"
                ],
                "title": "CreateBackendEnvironmentRequest",
                "properties": {
                  "environmentName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/EnvironmentName"
                      },
                      {
                        "description": " The name for the backend environment. "
                      }
                    ]
                  },
                  "stackName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/StackName"
                      },
                      {
                        "description": " The AWS CloudFormation stack name of a backend environment. "
                      }
                    ]
                  },
                  "deploymentArtifacts": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/DeploymentArtifacts"
                      },
                      {
                        "description": " The name of deployment artifacts. "
                      }
                    ]
                  }
                },
                "description": " The request structure for the backend environment create request. "
              },
              "CreateBranchRequest": {
                "type": "object",
                "required": [
                  "branchName"
                ],
                "title": "CreateBranchRequest",
                "properties": {
                  "branchName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/BranchName"
                      },
                      {
                        "description": " The name for the branch. "
                      }
                    ]
                  },
                  "description": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Description"
                      },
                      {
                        "description": " The description for the branch. "
                      }
                    ]
                  },
                  "stage": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Stage"
                      },
                      {
                        "description": " Describes the current stage for the branch. "
                      }
                    ]
                  },
                  "framework": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Framework"
                      },
                      {
                        "description": " The framework for the branch. "
                      }
                    ]
                  },
                  "enableNotification": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/EnableNotification"
                      },
                      {
                        "description": " Enables notifications for the branch. "
                      }
                    ]
                  },
                  "enableAutoBuild": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/EnableAutoBuild"
                      },
                      {
                        "description": " Enables auto building for the branch. "
                      }
                    ]
                  },
                  "environmentVariables": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/EnvironmentVariables"
                      },
                      {
                        "description": " The environment variables for the branch. "
                      }
                    ]
                  },
                  "basicAuthCredentials": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/BasicAuthCredentials"
                      },
                      {
                        "description": " The basic authorization credentials for the branch. You must base64-encode the authorization credentials and provide them in the format <code>user:password</code>."
                      }
                    ]
                  },
                  "enableBasicAuth": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/EnableBasicAuth"
                      },
                      {
                        "description": " Enables basic authorization for the branch. "
                      }
                    ]
                  },
                  "enablePerformanceMode": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/EnablePerformanceMode"
                      },
                      {
                        "description": "<p>Enables performance mode for the branch.</p> <p>Performance mode optimizes for faster hosting performance by keeping content cached at the edge for a longer interval. When performance mode is enabled, hosting configuration or code changes can take up to 10 minutes to roll out. </p>"
                      }
                    ]
                  },
                  "tags": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/TagMap"
                      },
                      {
                        "description": " The tag for the branch. "
                      }
                    ]
                  },
                  "buildSpec": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/BuildSpec"
                      },
                      {
                        "description": " The build specification (build spec) for the branch. "
                      }
                    ]
                  },
                  "ttl": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/TTL"
                      },
                      {
                        "description": " The content Time To Live (TTL) for the website in seconds. "
                      }
                    ]
                  },
                  "displayName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/DisplayName"
                      },
                      {
                        "description": " The display name for a branch. This is used as the default domain prefix. "
                      }
                    ]
                  },
                  "enablePullRequestPreview": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/EnablePullRequestPreview"
                      },
                      {
                        "description": " Enables pull request previews for this branch. "
                      }
                    ]
                  },
                  "pullRequestEnvironmentName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/PullRequestEnvironmentName"
                      },
                      {
                        "description": " The Amplify environment name for the pull request. "
                      }
                    ]
                  },
                  "backendEnvironmentArn": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/BackendEnvironmentArn"
                      },
                      {
                        "description": " The Amazon Resource Name (ARN) for a backend environment that is part of an Amplify app. "
                      }
                    ]
                  }
                },
                "description": " The request structure for the create branch request. "
              },
              "FileMap": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/MD5Hash"
                }
              },
              "CreateDeploymentRequest": {
                "type": "object",
                "title": "CreateDeploymentRequest",
                "properties": {
                  "fileMap": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/FileMap"
                      },
                      {
                        "description": " An optional file map that contains the file name as the key and the file content md5 hash as the value. If this argument is provided, the service will generate a unique upload URL per file. Otherwise, the service will only generate a single upload URL for the zipped files. "
                      }
                    ]
                  }
                },
                "description": " The request structure for the create a new deployment request. "
              },
              "JobId": {
                "type": "string",
                "pattern": "[0-9]+",
                "maxLength": 255
              },
              "FileUploadUrls": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/UploadUrl"
                }
              },
              "UploadUrl": {
                "type": "string",
                "maxLength": 1000
              },
              "DomainName": {
                "type": "string",
                "pattern": "^(((?!-)[A-Za-z0-9-]{0,62}[A-Za-z0-9])\\.)+((?!-)[A-Za-z0-9-]{1,62}[A-Za-z0-9])(\\.)?$",
                "maxLength": 64
              },
              "EnableAutoSubDomain": {
                "type": "boolean"
              },
              "SubDomainSettings": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SubDomainSetting"
                },
                "maxItems": 500
              },
              "CreateDomainAssociationRequest": {
                "type": "object",
                "required": [
                  "domainName",
                  "subDomainSettings"
                ],
                "title": "CreateDomainAssociationRequest",
                "properties": {
                  "domainName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/DomainName"
                      },
                      {
                        "description": " The domain name for the domain association. "
                      }
                    ]
                  },
                  "enableAutoSubDomain": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/EnableAutoSubDomain"
                      },
                      {
                        "description": " Enables the automated creation of subdomains for branches. "
                      }
                    ]
                  },
                  "subDomainSettings": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/SubDomainSettings"
                      },
                      {
                        "description": " The setting for the subdomain. "
                      }
                    ]
                  },
                  "autoSubDomainCreationPatterns": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/AutoSubDomainCreationPatterns"
                      },
                      {
                        "description": " Sets the branch patterns for automatic subdomain creation. "
                      }
                    ]
                  },
                  "autoSubDomainIAMRole": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/AutoSubDomainIAMRole"
                      },
                      {
                        "description": " The required AWS Identity and Access Management (IAM) service role for the Amazon Resource Name (ARN) for automatically creating subdomains. "
                      }
                    ]
                  }
                },
                "description": " The request structure for the create domain association request. "
              },
              "DomainAssociation": {
                "type": "object",
                "required": [
                  "domainAssociationArn",
                  "domainName",
                  "enableAutoSubDomain",
                  "domainStatus",
                  "statusReason",
                  "subDomains"
                ],
                "properties": {
                  "domainAssociationArn": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/DomainAssociationArn"
                      },
                      {
                        "description": " The Amazon Resource Name (ARN) for the domain association. "
                      }
                    ]
                  },
                  "domainName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/DomainName"
                      },
                      {
                        "description": " The name of the domain. "
                      }
                    ]
                  },
                  "enableAutoSubDomain": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/EnableAutoSubDomain"
                      },
                      {
                        "description": " Enables the automated creation of subdomains for branches. "
                      }
                    ]
                  },
                  "autoSubDomainCreationPatterns": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/AutoSubDomainCreationPatterns"
                      },
                      {
                        "description": " Sets branch patterns for automatic subdomain creation. "
                      }
                    ]
                  },
                  "autoSubDomainIAMRole": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/AutoSubDomainIAMRole"
                      },
                      {
                        "description": " The required AWS Identity and Access Management (IAM) service role for the Amazon Resource Name (ARN) for automatically creating subdomains. "
                      }
                    ]
                  },
                  "domainStatus": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/DomainStatus"
                      },
                      {
                        "description": " The current status of the domain association. "
                      }
                    ]
                  },
                  "statusReason": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/StatusReason"
                      },
                      {
                        "description": " The reason for the current status of the domain association. "
                      }
                    ]
                  },
                  "certificateVerificationDNSRecord": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/CertificateVerificationDNSRecord"
                      },
                      {
                        "description": " The DNS record for certificate verification. "
                      }
                    ]
                  },
                  "subDomains": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/SubDomains"
                      },
                      {
                        "description": " The subdomains for the domain association. "
                      }
                    ]
                  }
                },
                "description": " Describes a domain association that associates a custom domain with an Amplify app. "
              },
              "CreateWebhookRequest": {
                "type": "object",
                "required": [
                  "branchName"
                ],
                "title": "CreateWebhookRequest",
                "properties": {
                  "branchName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/BranchName"
                      },
                      {
                        "description": " The name for a branch that is part of an Amplify app. "
                      }
                    ]
                  },
                  "description": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Description"
                      },
                      {
                        "description": " The description for a webhook. "
                      }
                    ]
                  }
                },
                "description": " The request structure for the create webhook request. "
              },
              "Webhook": {
                "type": "object",
                "required": [
                  "webhookArn",
                  "webhookId",
                  "webhookUrl",
                  "branchName",
                  "description",
                  "createTime",
                  "updateTime"
                ],
                "properties": {
                  "webhookArn": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/WebhookArn"
                      },
                      {
                        "description": " The Amazon Resource Name (ARN) for the webhook. "
                      }
                    ]
                  },
                  "webhookId": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/WebhookId"
                      },
                      {
                        "description": " The ID of the webhook. "
                      }
                    ]
                  },
                  "webhookUrl": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/WebhookUrl"
                      },
                      {
                        "description": " The URL of the webhook. "
                      }
                    ]
                  },
                  "branchName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/BranchName"
                      },
                      {
                        "description": " The name for a branch that is part of an Amplify app. "
                      }
                    ]
                  },
                  "description": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Description"
                      },
                      {
                        "description": " The description for a webhook. "
                      }
                    ]
                  },
                  "createTime": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/CreateTime"
                      },
                      {
                        "description": " The create date and time for a webhook. "
                      }
                    ]
                  },
                  "updateTime": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/UpdateTime"
                      },
                      {
                        "description": " Updates the date and time for a webhook. "
                      }
                    ]
                  }
                },
                "description": " Describes a webhook that connects repository events to an Amplify app. "
              },
              "CustomDomain": {
                "type": "string",
                "maxLength": 255
              },
              "Source": {
                "type": "string",
                "pattern": "\\(\\?s\\).\\+",
                "minLength": 1,
                "maxLength": 2048
              },
              "Target": {
                "type": "string",
                "pattern": "\\(\\?s\\).\\+",
                "minLength": 1,
                "maxLength": 2048
              },
              "Status": {
                "type": "string",
                "pattern": ".{3,7}",
                "minLength": 3,
                "maxLength": 7
              },
              "DNSRecord": {
                "type": "string",
                "maxLength": 1000
              },
              "DeleteAppRequest": {
                "type": "object",
                "title": "DeleteAppRequest",
                "properties": {},
                "description": " Describes the request structure for the delete app request. "
              },
              "DeleteBackendEnvironmentRequest": {
                "type": "object",
                "title": "DeleteBackendEnvironmentRequest",
                "properties": {},
                "description": " The request structure for the delete backend environment request. "
              },
              "DeleteBranchRequest": {
                "type": "object",
                "title": "DeleteBranchRequest",
                "properties": {},
                "description": " The request structure for the delete branch request. "
              },
              "DeleteDomainAssociationRequest": {
                "type": "object",
                "title": "DeleteDomainAssociationRequest",
                "properties": {},
                "description": " The request structure for the delete domain association request. "
              },
              "DeleteJobRequest": {
                "type": "object",
                "title": "DeleteJobRequest",
                "properties": {},
                "description": " The request structure for the delete job request. "
              },
              "JobSummary": {
                "type": "object",
                "required": [
                  "jobArn",
                  "jobId",
                  "commitId",
                  "commitMessage",
                  "commitTime",
                  "startTime",
                  "status",
                  "jobType"
                ],
                "properties": {
                  "jobArn": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/JobArn"
                      },
                      {
                        "description": " The Amazon Resource Name (ARN) for the job. "
                      }
                    ]
                  },
                  "jobId": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/JobId"
                      },
                      {
                        "description": " The unique ID for the job. "
                      }
                    ]
                  },
                  "commitId": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/CommitId"
                      },
                      {
                        "description": " The commit ID from a third-party repository provider for the job. "
                      }
                    ]
                  },
                  "commitMessage": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/CommitMessage"
                      },
                      {
                        "description": " The commit message from a third-party repository provider for the job. "
                      }
                    ]
                  },
                  "commitTime": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/CommitTime"
                      },
                      {
                        "description": " The commit date and time for the job. "
                      }
                    ]
                  },
                  "startTime": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/StartTime"
                      },
                      {
                        "description": " The start date and time for the job. "
                      }
                    ]
                  },
                  "status": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/JobStatus"
                      },
                      {
                        "description": " The current status for the job. "
                      }
                    ]
                  },
                  "endTime": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/EndTime"
                      },
                      {
                        "description": " The end date and time for the job. "
                      }
                    ]
                  },
                  "jobType": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/JobType"
                      },
                      {
                        "description": " The type for the job. If the value is <code>RELEASE</code>, the job was manually released from its source by using the <code>StartJob</code> API. If the value is <code>RETRY</code>, the job was manually retried using the <code>StartJob</code> API. If the value is <code>WEB_HOOK</code>, the job was automatically triggered by webhooks. "
                      }
                    ]
                  }
                },
                "description": " Describes the summary for an execution job for an Amplify app. "
              },
              "WebhookId": {
                "type": "string",
                "pattern": "\\(\\?s\\).*",
                "maxLength": 255
              },
              "DeleteWebhookRequest": {
                "type": "object",
                "title": "DeleteWebhookRequest",
                "properties": {},
                "description": " The request structure for the delete webhook request. "
              },
              "DomainAssociationArn": {
                "type": "string",
                "maxLength": 1000
              },
              "DomainStatus": {
                "type": "string",
                "enum": [
                  "PENDING_VERIFICATION",
                  "IN_PROGRESS",
                  "AVAILABLE",
                  "PENDING_DEPLOYMENT",
                  "FAILED",
                  "CREATING",
                  "REQUESTING_CERTIFICATE",
                  "UPDATING"
                ]
              },
              "StatusReason": {
                "type": "string",
                "maxLength": 1000
              },
              "SubDomains": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SubDomain"
                },
                "maxItems": 500
              },
              "DomainAssociations": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/DomainAssociation"
                },
                "maxItems": 255
              },
              "DomainPrefix": {
                "type": "string",
                "pattern": "\\(\\?s\\).*",
                "maxLength": 255
              },
              "EndTime": {
                "type": "string",
                "format": "date-time"
              },
              "EnvKey": {
                "type": "string",
                "pattern": "\\(\\?s\\).*",
                "maxLength": 255
              },
              "FileName": {
                "type": "string",
                "pattern": "\\(\\?s\\).*",
                "maxLength": 255
              },
              "StartTime": {
                "type": "string",
                "format": "date-time"
              },
              "GenerateAccessLogsRequest": {
                "type": "object",
                "required": [
                  "domainName"
                ],
                "title": "GenerateAccessLogsRequest",
                "properties": {
                  "startTime": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/StartTime"
                      },
                      {
                        "description": " The time at which the logs should start. The time range specified is inclusive of the start time. "
                      }
                    ]
                  },
                  "endTime": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/EndTime"
                      },
                      {
                        "description": " The time at which the logs should end. The time range specified is inclusive of the end time. "
                      }
                    ]
                  },
                  "domainName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/DomainName"
                      },
                      {
                        "description": " The name of the domain. "
                      }
                    ]
                  }
                },
                "description": " The request structure for the generate access logs request. "
              },
              "LogUrl": {
                "type": "string",
                "maxLength": 1000
              },
              "GetAppRequest": {
                "type": "object",
                "title": "GetAppRequest",
                "properties": {},
                "description": " The request structure for the get app request. "
              },
              "GetArtifactUrlRequest": {
                "type": "object",
                "title": "GetArtifactUrlRequest",
                "properties": {},
                "description": " Returns the request structure for the get artifact request. "
              },
              "GetBackendEnvironmentRequest": {
                "type": "object",
                "title": "GetBackendEnvironmentRequest",
                "properties": {},
                "description": " The request structure for the get backend environment request. "
              },
              "GetBranchRequest": {
                "type": "object",
                "title": "GetBranchRequest",
                "properties": {},
                "description": " The request structure for the get branch request. "
              },
              "GetDomainAssociationRequest": {
                "type": "object",
                "title": "GetDomainAssociationRequest",
                "properties": {},
                "description": " The request structure for the get domain association request. "
              },
              "GetJobRequest": {
                "type": "object",
                "title": "GetJobRequest",
                "properties": {},
                "description": " The request structure for the get job request. "
              },
              "Job": {
                "type": "object",
                "required": [
                  "summary",
                  "steps"
                ],
                "properties": {
                  "summary": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/JobSummary"
                      },
                      {
                        "description": " Describes the summary for an execution job for an Amplify app. "
                      }
                    ]
                  },
                  "steps": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Steps"
                      },
                      {
                        "description": " The execution steps for an execution job, for an Amplify app. "
                      }
                    ]
                  }
                },
                "description": " Describes an execution job for an Amplify app. "
              },
              "GetWebhookRequest": {
                "type": "object",
                "title": "GetWebhookRequest",
                "properties": {},
                "description": " The request structure for the get webhook request. "
              },
              "Steps": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Step"
                }
              },
              "JobArn": {
                "type": "string",
                "maxLength": 1000
              },
              "JobReason": {
                "type": "string",
                "pattern": "\\(\\?s\\).*",
                "maxLength": 255
              },
              "JobStatus": {
                "type": "string",
                "enum": [
                  "PENDING",
                  "PROVISIONING",
                  "RUNNING",
                  "FAILED",
                  "SUCCEED",
                  "CANCELLING",
                  "CANCELLED"
                ]
              },
              "JobSummaries": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/JobSummary"
                }
              },
              "JobType": {
                "type": "string",
                "enum": [
                  "RELEASE",
                  "RETRY",
                  "MANUAL",
                  "WEB_HOOK"
                ],
                "maxLength": 10
              },
              "LastDeployTime": {
                "type": "string",
                "format": "date-time"
              },
              "NextToken": {
                "type": "string",
                "pattern": "\\(\\?s\\).*",
                "maxLength": 2000
              },
              "MaxResults": {
                "type": "integer",
                "minimum": 0,
                "maximum": 100
              },
              "ListAppsRequest": {
                "type": "object",
                "title": "ListAppsRequest",
                "properties": {},
                "description": " The request structure for the list apps request. "
              },
              "ListArtifactsRequest": {
                "type": "object",
                "title": "ListArtifactsRequest",
                "properties": {},
                "description": " Describes the request structure for the list artifacts request. "
              },
              "ListBackendEnvironmentsRequest": {
                "type": "object",
                "title": "ListBackendEnvironmentsRequest",
                "properties": {},
                "description": " The request structure for the list backend environments request. "
              },
              "ListBranchesRequest": {
                "type": "object",
                "title": "ListBranchesRequest",
                "properties": {},
                "description": " The request structure for the list branches request. "
              },
              "ListDomainAssociationsRequest": {
                "type": "object",
                "title": "ListDomainAssociationsRequest",
                "properties": {},
                "description": " The request structure for the list domain associations request. "
              },
              "ListJobsRequest": {
                "type": "object",
                "title": "ListJobsRequest",
                "properties": {},
                "description": " The request structure for the list jobs request. "
              },
              "ResourceArn": {
                "type": "string",
                "pattern": "^arn:aws:amplify:.*",
                "minLength": 0,
                "maxLength": 2048
              },
              "ListTagsForResourceRequest": {
                "type": "object",
                "title": "ListTagsForResourceRequest",
                "properties": {},
                "description": " The request structure to use to list tags for a resource. "
              },
              "ListWebhooksRequest": {
                "type": "object",
                "title": "ListWebhooksRequest",
                "properties": {},
                "description": " The request structure for the list webhooks request. "
              },
              "Webhooks": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Webhook"
                }
              },
              "Screenshots": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/ThumbnailUrl"
                }
              },
              "SourceUrl": {
                "type": "string",
                "pattern": "\\(\\?s\\).*",
                "maxLength": 3000
              },
              "StartDeploymentRequest": {
                "type": "object",
                "title": "StartDeploymentRequest",
                "properties": {
                  "jobId": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/JobId"
                      },
                      {
                        "description": " The job ID for this deployment, generated by the create deployment request. "
                      }
                    ]
                  },
                  "sourceUrl": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/SourceUrl"
                      },
                      {
                        "description": " The source URL for this deployment, used when calling start deployment without create deployment. The source URL can be any HTTP GET URL that is publicly accessible and downloads a single .zip file. "
                      }
                    ]
                  }
                },
                "description": " The request structure for the start a deployment request. "
              },
              "StartJobRequest": {
                "type": "object",
                "required": [
                  "jobType"
                ],
                "title": "StartJobRequest",
                "properties": {
                  "jobId": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/JobId"
                      },
                      {
                        "description": " The unique ID for an existing job. This is required if the value of <code>jobType</code> is <code>RETRY</code>. "
                      }
                    ]
                  },
                  "jobType": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/JobType"
                      },
                      {
                        "description": " Describes the type for the job. The job type <code>RELEASE</code> starts a new job with the latest change from the specified branch. This value is available only for apps that are connected to a repository. The job type <code>RETRY</code> retries an existing job. If the job type value is <code>RETRY</code>, the <code>jobId</code> is also required. "
                      }
                    ]
                  },
                  "jobReason": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/JobReason"
                      },
                      {
                        "description": " A descriptive reason for starting this job. "
                      }
                    ]
                  },
                  "commitId": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/CommitId"
                      },
                      {
                        "description": " The commit ID from a third-party repository provider for the job. "
                      }
                    ]
                  },
                  "commitMessage": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/CommitMessage"
                      },
                      {
                        "description": " The commit message from a third-party repository provider for the job. "
                      }
                    ]
                  },
                  "commitTime": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/CommitTime"
                      },
                      {
                        "description": " The commit date and time for the job. "
                      }
                    ]
                  }
                },
                "description": " The request structure for the start job request. "
              },
              "StepName": {
                "type": "string",
                "maxLength": 255
              },
              "TestArtifactsUrl": {
                "type": "string",
                "maxLength": 1000
              },
              "TestConfigUrl": {
                "type": "string",
                "maxLength": 1000
              },
              "Step": {
                "type": "object",
                "required": [
                  "stepName",
                  "startTime",
                  "status",
                  "endTime"
                ],
                "properties": {
                  "stepName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/StepName"
                      },
                      {
                        "description": " The name of the execution step. "
                      }
                    ]
                  },
                  "startTime": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/StartTime"
                      },
                      {
                        "description": " The start date and time of the execution step. "
                      }
                    ]
                  },
                  "status": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/JobStatus"
                      },
                      {
                        "description": " The status of the execution step. "
                      }
                    ]
                  },
                  "endTime": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/EndTime"
                      },
                      {
                        "description": " The end date and time of the execution step. "
                      }
                    ]
                  },
                  "logUrl": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/LogUrl"
                      },
                      {
                        "description": " The URL to the logs for the execution step. "
                      }
                    ]
                  },
                  "artifactsUrl": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ArtifactsUrl"
                      },
                      {
                        "description": " The URL to the artifact for the execution step. "
                      }
                    ]
                  },
                  "testArtifactsUrl": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/TestArtifactsUrl"
                      },
                      {
                        "description": " The URL to the test artifact for the execution step. "
                      }
                    ]
                  },
                  "testConfigUrl": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/TestConfigUrl"
                      },
                      {
                        "description": " The URL to the test configuration for the execution step. "
                      }
                    ]
                  },
                  "screenshots": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Screenshots"
                      },
                      {
                        "description": " The list of screenshot URLs for the execution step, if relevant. "
                      }
                    ]
                  },
                  "statusReason": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/StatusReason"
                      },
                      {
                        "description": " The reason for the current step status. "
                      }
                    ]
                  },
                  "context": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Context"
                      },
                      {
                        "description": " The context for the current step. Includes a build image if the step is build. "
                      }
                    ]
                  }
                },
                "description": " Describes an execution step, for an execution job, for an Amplify app. "
              },
              "StopJobRequest": {
                "type": "object",
                "title": "StopJobRequest",
                "properties": {},
                "description": " The request structure for the stop job request. "
              },
              "Verified": {
                "type": "boolean"
              },
              "SubDomain": {
                "type": "object",
                "required": [
                  "subDomainSetting",
                  "verified",
                  "dnsRecord"
                ],
                "properties": {
                  "subDomainSetting": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/SubDomainSetting"
                      },
                      {
                        "description": " Describes the settings for the subdomain. "
                      }
                    ]
                  },
                  "verified": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Verified"
                      },
                      {
                        "description": " The verified status of the subdomain "
                      }
                    ]
                  },
                  "dnsRecord": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/DNSRecord"
                      },
                      {
                        "description": " The DNS record for the subdomain. "
                      }
                    ]
                  }
                },
                "description": " The subdomain for the domain association. "
              },
              "TagKeyList": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/TagKey"
                },
                "minItems": 1,
                "maxItems": 50
              },
              "TagResourceRequest": {
                "type": "object",
                "required": [
                  "tags"
                ],
                "title": "TagResourceRequest",
                "properties": {
                  "tags": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/TagMap"
                      },
                      {
                        "description": " The tags used to tag the resource. "
                      }
                    ]
                  }
                },
                "description": " The request structure to tag a resource with a tag key and value. "
              },
              "ThumbnailName": {
                "type": "string",
                "maxLength": 256
              },
              "UntagResourceRequest": {
                "type": "object",
                "title": "UntagResourceRequest",
                "properties": {},
                "description": " The request structure for the untag resource request. "
              },
              "UpdateAppRequest": {
                "type": "object",
                "title": "UpdateAppRequest",
                "properties": {
                  "name": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Name"
                      },
                      {
                        "description": " The name for an Amplify app. "
                      }
                    ]
                  },
                  "description": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Description"
                      },
                      {
                        "description": " The description for an Amplify app. "
                      }
                    ]
                  },
                  "platform": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Platform"
                      },
                      {
                        "description": " The platform for the Amplify app. For a static app, set the platform type to <code>WEB</code>. For a dynamic server-side rendered (SSR) app, set the platform type to <code>WEB_COMPUTE</code>. For an app requiring Amplify Hosting's original SSR support only, set the platform type to <code>WEB_DYNAMIC</code>."
                      }
                    ]
                  },
                  "iamServiceRoleArn": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ServiceRoleArn"
                      },
                      {
                        "description": " The AWS Identity and Access Management (IAM) service role for an Amplify app. "
                      }
                    ]
                  },
                  "environmentVariables": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/EnvironmentVariables"
                      },
                      {
                        "description": " The environment variables for an Amplify app. "
                      }
                    ]
                  },
                  "enableBranchAutoBuild": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/EnableAutoBuild"
                      },
                      {
                        "description": " Enables branch auto-building for an Amplify app. "
                      }
                    ]
                  },
                  "enableBranchAutoDeletion": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/EnableBranchAutoDeletion"
                      },
                      {
                        "description": " Automatically disconnects a branch in the Amplify Console when you delete a branch from your Git repository. "
                      }
                    ]
                  },
                  "enableBasicAuth": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/EnableBasicAuth"
                      },
                      {
                        "description": " Enables basic authorization for an Amplify app. "
                      }
                    ]
                  },
                  "basicAuthCredentials": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/BasicAuthCredentials"
                      },
                      {
                        "description": " The basic authorization credentials for an Amplify app. You must base64-encode the authorization credentials and provide them in the format <code>user:password</code>."
                      }
                    ]
                  },
                  "customRules": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/CustomRules"
                      },
                      {
                        "description": " The custom redirect and rewrite rules for an Amplify app. "
                      }
                    ]
                  },
                  "buildSpec": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/BuildSpec"
                      },
                      {
                        "description": " The build specification (build spec) for an Amplify app. "
                      }
                    ]
                  },
                  "customHeaders": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/CustomHeaders"
                      },
                      {
                        "description": "The custom HTTP headers for an Amplify app."
                      }
                    ]
                  },
                  "enableAutoBranchCreation": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/EnableAutoBranchCreation"
                      },
                      {
                        "description": " Enables automated branch creation for an Amplify app. "
                      }
                    ]
                  },
                  "autoBranchCreationPatterns": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/AutoBranchCreationPatterns"
                      },
                      {
                        "description": " Describes the automated branch creation glob patterns for an Amplify app. "
                      }
                    ]
                  },
                  "autoBranchCreationConfig": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/AutoBranchCreationConfig"
                      },
                      {
                        "description": " The automated branch creation configuration for an Amplify app. "
                      }
                    ]
                  },
                  "repository": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Repository"
                      },
                      {
                        "description": " The name of the repository for an Amplify app "
                      }
                    ]
                  },
                  "oauthToken": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/OauthToken"
                      },
                      {
                        "description": "<p>The OAuth token for a third-party source control system for an Amplify app. The OAuth token is used to create a webhook and a read-only deploy key using SSH cloning. The OAuth token is not stored.</p> <p>Use <code>oauthToken</code> for repository providers other than GitHub, such as Bitbucket or CodeCommit.</p> <p>To authorize access to GitHub as your repository provider, use <code>accessToken</code>.</p> <p>You must specify either <code>oauthToken</code> or <code>accessToken</code> when you update an app.</p> <p>Existing Amplify apps deployed from a GitHub repository using OAuth continue to work with CI/CD. However, we strongly recommend that you migrate these apps to use the GitHub App. For more information, see <a href=\"https://docs.aws.amazon.com/amplify/latest/UserGuide/setting-up-GitHub-access.html#migrating-to-github-app-auth\">Migrating an existing OAuth app to the Amplify GitHub App</a> in the <i>Amplify User Guide</i> .</p>"
                      }
                    ]
                  },
                  "accessToken": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/AccessToken"
                      },
                      {
                        "description": "<p>The personal access token for a GitHub repository for an Amplify app. The personal access token is used to authorize access to a GitHub repository using the Amplify GitHub App. The token is not stored.</p> <p>Use <code>accessToken</code> for GitHub repositories only. To authorize access to a repository provider such as Bitbucket or CodeCommit, use <code>oauthToken</code>.</p> <p>You must specify either <code>accessToken</code> or <code>oauthToken</code> when you update an app.</p> <p>Existing Amplify apps deployed from a GitHub repository using OAuth continue to work with CI/CD. However, we strongly recommend that you migrate these apps to use the GitHub App. For more information, see <a href=\"https://docs.aws.amazon.com/amplify/latest/UserGuide/setting-up-GitHub-access.html#migrating-to-github-app-auth\">Migrating an existing OAuth app to the Amplify GitHub App</a> in the <i>Amplify User Guide</i> .</p>"
                      }
                    ]
                  }
                },
                "description": " The request structure for the update app request. "
              },
              "UpdateBranchRequest": {
                "type": "object",
                "title": "UpdateBranchRequest",
                "properties": {
                  "description": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Description"
                      },
                      {
                        "description": " The description for the branch. "
                      }
                    ]
                  },
                  "framework": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Framework"
                      },
                      {
                        "description": " The framework for the branch. "
                      }
                    ]
                  },
                  "stage": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Stage"
                      },
                      {
                        "description": " Describes the current stage for the branch. "
                      }
                    ]
                  },
                  "enableNotification": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/EnableNotification"
                      },
                      {
                        "description": " Enables notifications for the branch. "
                      }
                    ]
                  },
                  "enableAutoBuild": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/EnableAutoBuild"
                      },
                      {
                        "description": " Enables auto building for the branch. "
                      }
                    ]
                  },
                  "environmentVariables": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/EnvironmentVariables"
                      },
                      {
                        "description": " The environment variables for the branch. "
                      }
                    ]
                  },
                  "basicAuthCredentials": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/BasicAuthCredentials"
                      },
                      {
                        "description": " The basic authorization credentials for the branch. You must base64-encode the authorization credentials and provide them in the format <code>user:password</code>."
                      }
                    ]
                  },
                  "enableBasicAuth": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/EnableBasicAuth"
                      },
                      {
                        "description": " Enables basic authorization for the branch. "
                      }
                    ]
                  },
                  "enablePerformanceMode": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/EnablePerformanceMode"
                      },
                      {
                        "description": "<p>Enables performance mode for the branch.</p> <p>Performance mode optimizes for faster hosting performance by keeping content cached at the edge for a longer interval. When performance mode is enabled, hosting configuration or code changes can take up to 10 minutes to roll out. </p>"
                      }
                    ]
                  },
                  "buildSpec": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/BuildSpec"
                      },
                      {
                        "description": " The build specification (build spec) for the branch. "
                      }
                    ]
                  },
                  "ttl": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/TTL"
                      },
                      {
                        "description": " The content Time to Live (TTL) for the website in seconds. "
                      }
                    ]
                  },
                  "displayName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/DisplayName"
                      },
                      {
                        "description": " The display name for a branch. This is used as the default domain prefix. "
                      }
                    ]
                  },
                  "enablePullRequestPreview": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/EnablePullRequestPreview"
                      },
                      {
                        "description": " Enables pull request previews for this branch. "
                      }
                    ]
                  },
                  "pullRequestEnvironmentName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/PullRequestEnvironmentName"
                      },
                      {
                        "description": " The Amplify environment name for the pull request. "
                      }
                    ]
                  },
                  "backendEnvironmentArn": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/BackendEnvironmentArn"
                      },
                      {
                        "description": " The Amazon Resource Name (ARN) for a backend environment that is part of an Amplify app. "
                      }
                    ]
                  }
                },
                "description": " The request structure for the update branch request. "
              },
              "UpdateDomainAssociationRequest": {
                "type": "object",
                "title": "UpdateDomainAssociationRequest",
                "properties": {
                  "enableAutoSubDomain": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/EnableAutoSubDomain"
                      },
                      {
                        "description": " Enables the automated creation of subdomains for branches. "
                      }
                    ]
                  },
                  "subDomainSettings": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/SubDomainSettings"
                      },
                      {
                        "description": " Describes the settings for the subdomain. "
                      }
                    ]
                  },
                  "autoSubDomainCreationPatterns": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/AutoSubDomainCreationPatterns"
                      },
                      {
                        "description": " Sets the branch patterns for automatic subdomain creation. "
                      }
                    ]
                  },
                  "autoSubDomainIAMRole": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/AutoSubDomainIAMRole"
                      },
                      {
                        "description": " The required AWS Identity and Access Management (IAM) service role for the Amazon Resource Name (ARN) for automatically creating subdomains. "
                      }
                    ]
                  }
                },
                "description": " The request structure for the update domain association request. "
              },
              "UpdateWebhookRequest": {
                "type": "object",
                "title": "UpdateWebhookRequest",
                "properties": {
                  "branchName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/BranchName"
                      },
                      {
                        "description": " The name for a branch that is part of an Amplify app. "
                      }
                    ]
                  },
                  "description": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Description"
                      },
                      {
                        "description": " The description for a webhook. "
                      }
                    ]
                  }
                },
                "description": " The request structure for the update webhook request. "
              },
              "WebhookArn": {
                "type": "string",
                "maxLength": 1000
              },
              "WebhookUrl": {
                "type": "string",
                "maxLength": 1000
              }
            }
          },
          "security": [
            {
              "hmac": []
            }
          ]
        }
        // Exercise and evaluate
        assert.ok(typeof schema === 'object')
    })
    it('should match schema3', () => {
        // Setup
        const schema: OpenAPI = {
          "openapi": "3.0.0",
          "info": {
            "version": "2016-12-01",
            "x-release": "v4",
            "title": "Amazon AppStream",
            "description": "<fullname>Amazon AppStream 2.0</fullname> <p>This is the <i>Amazon AppStream 2.0 API Reference</i>. This documentation provides descriptions and syntax for each of the actions and data types in AppStream 2.0. AppStream 2.0 is a fully managed, secure application streaming service that lets you stream desktop applications to users without rewriting applications. AppStream 2.0 manages the AWS resources that are required to host and run your applications, scales automatically, and provides access to your users on demand. </p> <note> <p>You can call the AppStream 2.0 API operations by using an interface VPC endpoint (interface endpoint). For more information, see <a href=\"https://docs.aws.amazon.com/appstream2/latest/developerguide/access-api-cli-through-interface-vpc-endpoint.html\">Access AppStream 2.0 API Operations and CLI Commands Through an Interface VPC Endpoint</a> in the <i>Amazon AppStream 2.0 Administration Guide</i>.</p> </note> <p>To learn more about AppStream 2.0, see the following resources:</p> <ul> <li> <p> <a href=\"http://aws.amazon.com/appstream2\">Amazon AppStream 2.0 product page</a> </p> </li> <li> <p> <a href=\"http://aws.amazon.com/documentation/appstream2\">Amazon AppStream 2.0 documentation</a> </p> </li> </ul>",
            "x-logo": {
              "url": "https://api.apis.guru/v2/cache/logo/https_twitter.com_awscloud_profile_image.png",
              "backgroundColor": "#FFFFFF"
            },
            "termsOfService": "https://aws.amazon.com/service-terms/",
            "contact": {
              "name": "Mike Ralphson",
              "email": "mike.ralphson@gmail.com",
              "url": "https://github.com/mermade/aws2openapi",
              "x-twitter": "PermittedSoc"
            },
            "license": {
              "name": "Apache 2.0 License",
              "url": "http://www.apache.org/licenses/"
            },
            "x-providerName": "amazonaws.com",
            "x-serviceName": "appstream",
            "x-aws-signingName": "appstream",
            "x-origin": [
              {
                "contentType": "application/json",
                "url": "https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/appstream-2016-12-01.normal.json",
                "converter": {
                  "url": "https://github.com/mermade/aws2openapi",
                  "version": "1.0.0"
                },
                "x-apisguru-driver": "external"
              }
            ],
            "x-apiClientRegistration": {
              "url": "https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct"
            },
            "x-apisguru-categories": [
              "cloud"
            ],
            "x-preferred": true
          },
          "externalDocs": {
            "description": "Amazon Web Services documentation",
            "url": "https://docs.aws.amazon.com/appstream2/"
          },
          "servers": [
            {
              "url": "http://appstream2.{region}.amazonaws.com",
              "variables": {
                "region": {
                  "description": "The AWS region",
                  "enum": [
                    "us-east-1",
                    "us-east-2",
                    "us-west-1",
                    "us-west-2",
                    "us-gov-west-1",
                    "us-gov-east-1",
                    "ca-central-1",
                    "eu-north-1",
                    "eu-west-1",
                    "eu-west-2",
                    "eu-west-3",
                    "eu-central-1",
                    "eu-south-1",
                    "af-south-1",
                    "ap-northeast-1",
                    "ap-northeast-2",
                    "ap-northeast-3",
                    "ap-southeast-1",
                    "ap-southeast-2",
                    "ap-east-1",
                    "ap-south-1",
                    "sa-east-1",
                    "me-south-1"
                  ],
                  "default": "us-east-1"
                }
              },
              "description": "The Amazon AppStream multi-region endpoint"
            },
            {
              "url": "https://appstream2.{region}.amazonaws.com",
              "variables": {
                "region": {
                  "description": "The AWS region",
                  "enum": [
                    "us-east-1",
                    "us-east-2",
                    "us-west-1",
                    "us-west-2",
                    "us-gov-west-1",
                    "us-gov-east-1",
                    "ca-central-1",
                    "eu-north-1",
                    "eu-west-1",
                    "eu-west-2",
                    "eu-west-3",
                    "eu-central-1",
                    "eu-south-1",
                    "af-south-1",
                    "ap-northeast-1",
                    "ap-northeast-2",
                    "ap-northeast-3",
                    "ap-southeast-1",
                    "ap-southeast-2",
                    "ap-east-1",
                    "ap-south-1",
                    "sa-east-1",
                    "me-south-1"
                  ],
                  "default": "us-east-1"
                }
              },
              "description": "The Amazon AppStream multi-region endpoint"
            },
            {
              "url": "http://appstream2.{region}.amazonaws.com.cn",
              "variables": {
                "region": {
                  "description": "The AWS region",
                  "enum": [
                    "cn-north-1",
                    "cn-northwest-1"
                  ],
                  "default": "cn-north-1"
                }
              },
              "description": "The Amazon AppStream endpoint for China (Beijing) and China (Ningxia)"
            },
            {
              "url": "https://appstream2.{region}.amazonaws.com.cn",
              "variables": {
                "region": {
                  "description": "The AWS region",
                  "enum": [
                    "cn-north-1",
                    "cn-northwest-1"
                  ],
                  "default": "cn-north-1"
                }
              },
              "description": "The Amazon AppStream endpoint for China (Beijing) and China (Ningxia)"
            }
          ],
          "x-hasEquivalentPaths": true,
          "paths": {
            "/#X-Amz-Target=PhotonAdminProxyService.AssociateApplicationFleet": {
              "post": {
                "operationId": "AssociateApplicationFleet",
                "description": "Associates the specified application with the specified fleet. This is only supported for Elastic fleets.",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/AssociateApplicationFleetResult"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "ConcurrentModificationException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ConcurrentModificationException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "LimitExceededException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/LimitExceededException"
                        }
                      }
                    }
                  },
                  "482": {
                    "description": "ResourceNotFoundException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ResourceNotFoundException"
                        }
                      }
                    }
                  },
                  "483": {
                    "description": "InvalidParameterCombinationException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InvalidParameterCombinationException"
                        }
                      }
                    }
                  },
                  "484": {
                    "description": "OperationNotPermittedException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/OperationNotPermittedException"
                        }
                      }
                    }
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/AssociateApplicationFleetRequest"
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "X-Amz-Target",
                    "in": "header",
                    "required": true,
                    "schema": {
                      "type": "string",
                      "enum": [
                        "PhotonAdminProxyService.AssociateApplicationFleet"
                      ]
                    }
                  }
                ]
              },
              "parameters": [
                {
                  "$ref": "#/components/parameters/X-Amz-Content-Sha256"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Date"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Algorithm"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Credential"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Security-Token"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Signature"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-SignedHeaders"
                }
              ]
            },
            "/#X-Amz-Target=PhotonAdminProxyService.AssociateApplicationToEntitlement": {
              "post": {
                "operationId": "AssociateApplicationToEntitlement",
                "description": "Associates an application to entitle.",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/AssociateApplicationToEntitlementResult"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "OperationNotPermittedException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/OperationNotPermittedException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "ResourceNotFoundException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ResourceNotFoundException"
                        }
                      }
                    }
                  },
                  "482": {
                    "description": "EntitlementNotFoundException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/EntitlementNotFoundException"
                        }
                      }
                    }
                  },
                  "483": {
                    "description": "LimitExceededException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/LimitExceededException"
                        }
                      }
                    }
                  },
                  "484": {
                    "description": "OperationNotPermittedException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/OperationNotPermittedException"
                        }
                      }
                    }
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/AssociateApplicationToEntitlementRequest"
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "X-Amz-Target",
                    "in": "header",
                    "required": true,
                    "schema": {
                      "type": "string",
                      "enum": [
                        "PhotonAdminProxyService.AssociateApplicationToEntitlement"
                      ]
                    }
                  }
                ]
              },
              "parameters": [
                {
                  "$ref": "#/components/parameters/X-Amz-Content-Sha256"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Date"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Algorithm"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Credential"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Security-Token"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Signature"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-SignedHeaders"
                }
              ]
            },
            "/#X-Amz-Target=PhotonAdminProxyService.AssociateFleet": {
              "post": {
                "operationId": "AssociateFleet",
                "description": "Associates the specified fleet with the specified stack.",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/AssociateFleetResult"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "LimitExceededException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/LimitExceededException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "InvalidAccountStatusException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InvalidAccountStatusException"
                        }
                      }
                    }
                  },
                  "482": {
                    "description": "ResourceNotFoundException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ResourceNotFoundException"
                        }
                      }
                    }
                  },
                  "483": {
                    "description": "ConcurrentModificationException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ConcurrentModificationException"
                        }
                      }
                    }
                  },
                  "484": {
                    "description": "IncompatibleImageException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/IncompatibleImageException"
                        }
                      }
                    }
                  },
                  "485": {
                    "description": "OperationNotPermittedException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/OperationNotPermittedException"
                        }
                      }
                    }
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/AssociateFleetRequest"
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "X-Amz-Target",
                    "in": "header",
                    "required": true,
                    "schema": {
                      "type": "string",
                      "enum": [
                        "PhotonAdminProxyService.AssociateFleet"
                      ]
                    }
                  }
                ]
              },
              "parameters": [
                {
                  "$ref": "#/components/parameters/X-Amz-Content-Sha256"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Date"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Algorithm"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Credential"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Security-Token"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Signature"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-SignedHeaders"
                }
              ]
            },
            "/#X-Amz-Target=PhotonAdminProxyService.BatchAssociateUserStack": {
              "post": {
                "operationId": "BatchAssociateUserStack",
                "description": "Associates the specified users with the specified stacks. Users in a user pool cannot be assigned to stacks with fleets that are joined to an Active Directory domain.",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/BatchAssociateUserStackResult"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "OperationNotPermittedException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/OperationNotPermittedException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "InvalidParameterCombinationException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InvalidParameterCombinationException"
                        }
                      }
                    }
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/BatchAssociateUserStackRequest"
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "X-Amz-Target",
                    "in": "header",
                    "required": true,
                    "schema": {
                      "type": "string",
                      "enum": [
                        "PhotonAdminProxyService.BatchAssociateUserStack"
                      ]
                    }
                  }
                ]
              },
              "parameters": [
                {
                  "$ref": "#/components/parameters/X-Amz-Content-Sha256"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Date"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Algorithm"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Credential"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Security-Token"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Signature"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-SignedHeaders"
                }
              ]
            },
            "/#X-Amz-Target=PhotonAdminProxyService.BatchDisassociateUserStack": {
              "post": {
                "operationId": "BatchDisassociateUserStack",
                "description": "Disassociates the specified users from the specified stacks.",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/BatchDisassociateUserStackResult"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "OperationNotPermittedException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/OperationNotPermittedException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "InvalidParameterCombinationException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InvalidParameterCombinationException"
                        }
                      }
                    }
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/BatchDisassociateUserStackRequest"
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "X-Amz-Target",
                    "in": "header",
                    "required": true,
                    "schema": {
                      "type": "string",
                      "enum": [
                        "PhotonAdminProxyService.BatchDisassociateUserStack"
                      ]
                    }
                  }
                ]
              },
              "parameters": [
                {
                  "$ref": "#/components/parameters/X-Amz-Content-Sha256"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Date"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Algorithm"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Credential"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Security-Token"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Signature"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-SignedHeaders"
                }
              ]
            },
            "/#X-Amz-Target=PhotonAdminProxyService.CopyImage": {
              "post": {
                "operationId": "CopyImage",
                "description": "Copies the image within the same region or to a new region within the same AWS account. Note that any tags you added to the image will not be copied.",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/CopyImageResponse"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "ResourceAlreadyExistsException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ResourceAlreadyExistsException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "ResourceNotFoundException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ResourceNotFoundException"
                        }
                      }
                    }
                  },
                  "482": {
                    "description": "ResourceNotAvailableException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ResourceNotAvailableException"
                        }
                      }
                    }
                  },
                  "483": {
                    "description": "LimitExceededException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/LimitExceededException"
                        }
                      }
                    }
                  },
                  "484": {
                    "description": "InvalidAccountStatusException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InvalidAccountStatusException"
                        }
                      }
                    }
                  },
                  "485": {
                    "description": "IncompatibleImageException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/IncompatibleImageException"
                        }
                      }
                    }
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CopyImageRequest"
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "X-Amz-Target",
                    "in": "header",
                    "required": true,
                    "schema": {
                      "type": "string",
                      "enum": [
                        "PhotonAdminProxyService.CopyImage"
                      ]
                    }
                  }
                ]
              },
              "parameters": [
                {
                  "$ref": "#/components/parameters/X-Amz-Content-Sha256"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Date"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Algorithm"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Credential"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Security-Token"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Signature"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-SignedHeaders"
                }
              ]
            },
            "/#X-Amz-Target=PhotonAdminProxyService.CreateAppBlock": {
              "post": {
                "operationId": "CreateAppBlock",
                "description": "<p>Creates an app block.</p> <p>App blocks are an Amazon AppStream 2.0 resource that stores the details about the virtual hard disk in an S3 bucket. It also stores the setup script with details about how to mount the virtual hard disk. The virtual hard disk includes the application binaries and other files necessary to launch your applications. Multiple applications can be assigned to a single app block.</p> <p>This is only supported for Elastic fleets.</p>",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/CreateAppBlockResult"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "ConcurrentModificationException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ConcurrentModificationException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "LimitExceededException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/LimitExceededException"
                        }
                      }
                    }
                  },
                  "482": {
                    "description": "OperationNotPermittedException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/OperationNotPermittedException"
                        }
                      }
                    }
                  },
                  "483": {
                    "description": "ResourceAlreadyExistsException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ResourceAlreadyExistsException"
                        }
                      }
                    }
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CreateAppBlockRequest"
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "X-Amz-Target",
                    "in": "header",
                    "required": true,
                    "schema": {
                      "type": "string",
                      "enum": [
                        "PhotonAdminProxyService.CreateAppBlock"
                      ]
                    }
                  }
                ]
              },
              "parameters": [
                {
                  "$ref": "#/components/parameters/X-Amz-Content-Sha256"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Date"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Algorithm"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Credential"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Security-Token"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Signature"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-SignedHeaders"
                }
              ]
            },
            "/#X-Amz-Target=PhotonAdminProxyService.CreateApplication": {
              "post": {
                "operationId": "CreateApplication",
                "description": "<p>Creates an application.</p> <p>Applications are an Amazon AppStream 2.0 resource that stores the details about how to launch applications on Elastic fleet streaming instances. An application consists of the launch details, icon, and display name. Applications are associated with an app block that contains the application binaries and other files. The applications assigned to an Elastic fleet are the applications users can launch. </p> <p>This is only supported for Elastic fleets.</p>",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/CreateApplicationResult"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "OperationNotPermittedException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/OperationNotPermittedException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "ResourceAlreadyExistsException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ResourceAlreadyExistsException"
                        }
                      }
                    }
                  },
                  "482": {
                    "description": "LimitExceededException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/LimitExceededException"
                        }
                      }
                    }
                  },
                  "483": {
                    "description": "ConcurrentModificationException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ConcurrentModificationException"
                        }
                      }
                    }
                  },
                  "484": {
                    "description": "ResourceNotFoundException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ResourceNotFoundException"
                        }
                      }
                    }
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CreateApplicationRequest"
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "X-Amz-Target",
                    "in": "header",
                    "required": true,
                    "schema": {
                      "type": "string",
                      "enum": [
                        "PhotonAdminProxyService.CreateApplication"
                      ]
                    }
                  }
                ]
              },
              "parameters": [
                {
                  "$ref": "#/components/parameters/X-Amz-Content-Sha256"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Date"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Algorithm"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Credential"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Security-Token"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Signature"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-SignedHeaders"
                }
              ]
            },
            "/#X-Amz-Target=PhotonAdminProxyService.CreateDirectoryConfig": {
              "post": {
                "operationId": "CreateDirectoryConfig",
                "description": "Creates a Directory Config object in AppStream 2.0. This object includes the configuration information required to join fleets and image builders to Microsoft Active Directory domains.",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/CreateDirectoryConfigResult"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "ResourceNotFoundException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ResourceNotFoundException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "ResourceAlreadyExistsException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ResourceAlreadyExistsException"
                        }
                      }
                    }
                  },
                  "482": {
                    "description": "LimitExceededException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/LimitExceededException"
                        }
                      }
                    }
                  },
                  "483": {
                    "description": "InvalidAccountStatusException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InvalidAccountStatusException"
                        }
                      }
                    }
                  },
                  "484": {
                    "description": "OperationNotPermittedException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/OperationNotPermittedException"
                        }
                      }
                    }
                  },
                  "485": {
                    "description": "InvalidRoleException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InvalidRoleException"
                        }
                      }
                    }
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CreateDirectoryConfigRequest"
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "X-Amz-Target",
                    "in": "header",
                    "required": true,
                    "schema": {
                      "type": "string",
                      "enum": [
                        "PhotonAdminProxyService.CreateDirectoryConfig"
                      ]
                    }
                  }
                ]
              },
              "parameters": [
                {
                  "$ref": "#/components/parameters/X-Amz-Content-Sha256"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Date"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Algorithm"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Credential"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Security-Token"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Signature"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-SignedHeaders"
                }
              ]
            },
            "/#X-Amz-Target=PhotonAdminProxyService.CreateEntitlement": {
              "post": {
                "operationId": "CreateEntitlement",
                "description": "Creates a new entitlement. Entitlements control access to specific applications within a stack, based on user attributes. Entitlements apply to SAML 2.0 federated user identities. Amazon AppStream 2.0 user pool and streaming URL users are entitled to all applications in a stack. Entitlements don't apply to the desktop stream view application, or to applications managed by a dynamic app provider using the Dynamic Application Framework.",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/CreateEntitlementResult"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "OperationNotPermittedException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/OperationNotPermittedException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "ResourceNotFoundException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ResourceNotFoundException"
                        }
                      }
                    }
                  },
                  "482": {
                    "description": "LimitExceededException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/LimitExceededException"
                        }
                      }
                    }
                  },
                  "483": {
                    "description": "EntitlementAlreadyExistsException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/EntitlementAlreadyExistsException"
                        }
                      }
                    }
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CreateEntitlementRequest"
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "X-Amz-Target",
                    "in": "header",
                    "required": true,
                    "schema": {
                      "type": "string",
                      "enum": [
                        "PhotonAdminProxyService.CreateEntitlement"
                      ]
                    }
                  }
                ]
              },
              "parameters": [
                {
                  "$ref": "#/components/parameters/X-Amz-Content-Sha256"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Date"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Algorithm"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Credential"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Security-Token"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Signature"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-SignedHeaders"
                }
              ]
            },
            "/#X-Amz-Target=PhotonAdminProxyService.CreateFleet": {
              "post": {
                "operationId": "CreateFleet",
                "description": "Creates a fleet. A fleet consists of streaming instances that your users access for their applications and desktops.",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/CreateFleetResult"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "ResourceAlreadyExistsException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ResourceAlreadyExistsException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "ResourceNotAvailableException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ResourceNotAvailableException"
                        }
                      }
                    }
                  },
                  "482": {
                    "description": "ResourceNotFoundException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ResourceNotFoundException"
                        }
                      }
                    }
                  },
                  "483": {
                    "description": "LimitExceededException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/LimitExceededException"
                        }
                      }
                    }
                  },
                  "484": {
                    "description": "RequestLimitExceededException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/RequestLimitExceededException"
                        }
                      }
                    }
                  },
                  "485": {
                    "description": "InvalidAccountStatusException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InvalidAccountStatusException"
                        }
                      }
                    }
                  },
                  "486": {
                    "description": "InvalidRoleException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InvalidRoleException"
                        }
                      }
                    }
                  },
                  "487": {
                    "description": "ConcurrentModificationException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ConcurrentModificationException"
                        }
                      }
                    }
                  },
                  "488": {
                    "description": "InvalidParameterCombinationException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InvalidParameterCombinationException"
                        }
                      }
                    }
                  },
                  "489": {
                    "description": "IncompatibleImageException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/IncompatibleImageException"
                        }
                      }
                    }
                  },
                  "490": {
                    "description": "OperationNotPermittedException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/OperationNotPermittedException"
                        }
                      }
                    }
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CreateFleetRequest"
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "X-Amz-Target",
                    "in": "header",
                    "required": true,
                    "schema": {
                      "type": "string",
                      "enum": [
                        "PhotonAdminProxyService.CreateFleet"
                      ]
                    }
                  }
                ]
              },
              "parameters": [
                {
                  "$ref": "#/components/parameters/X-Amz-Content-Sha256"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Date"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Algorithm"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Credential"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Security-Token"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Signature"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-SignedHeaders"
                }
              ]
            },
            "/#X-Amz-Target=PhotonAdminProxyService.CreateImageBuilder": {
              "post": {
                "operationId": "CreateImageBuilder",
                "description": "<p>Creates an image builder. An image builder is a virtual machine that is used to create an image.</p> <p>The initial state of the builder is <code>PENDING</code>. When it is ready, the state is <code>RUNNING</code>.</p>",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/CreateImageBuilderResult"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "LimitExceededException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/LimitExceededException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "RequestLimitExceededException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/RequestLimitExceededException"
                        }
                      }
                    }
                  },
                  "482": {
                    "description": "InvalidAccountStatusException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InvalidAccountStatusException"
                        }
                      }
                    }
                  },
                  "483": {
                    "description": "ResourceAlreadyExistsException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ResourceAlreadyExistsException"
                        }
                      }
                    }
                  },
                  "484": {
                    "description": "ResourceNotAvailableException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ResourceNotAvailableException"
                        }
                      }
                    }
                  },
                  "485": {
                    "description": "ResourceNotFoundException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ResourceNotFoundException"
                        }
                      }
                    }
                  },
                  "486": {
                    "description": "InvalidRoleException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InvalidRoleException"
                        }
                      }
                    }
                  },
                  "487": {
                    "description": "ConcurrentModificationException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ConcurrentModificationException"
                        }
                      }
                    }
                  },
                  "488": {
                    "description": "InvalidParameterCombinationException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InvalidParameterCombinationException"
                        }
                      }
                    }
                  },
                  "489": {
                    "description": "IncompatibleImageException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/IncompatibleImageException"
                        }
                      }
                    }
                  },
                  "490": {
                    "description": "OperationNotPermittedException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/OperationNotPermittedException"
                        }
                      }
                    }
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CreateImageBuilderRequest"
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "X-Amz-Target",
                    "in": "header",
                    "required": true,
                    "schema": {
                      "type": "string",
                      "enum": [
                        "PhotonAdminProxyService.CreateImageBuilder"
                      ]
                    }
                  }
                ]
              },
              "parameters": [
                {
                  "$ref": "#/components/parameters/X-Amz-Content-Sha256"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Date"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Algorithm"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Credential"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Security-Token"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Signature"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-SignedHeaders"
                }
              ]
            },
            "/#X-Amz-Target=PhotonAdminProxyService.CreateImageBuilderStreamingURL": {
              "post": {
                "operationId": "CreateImageBuilderStreamingURL",
                "description": "Creates a URL to start an image builder streaming session.",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/CreateImageBuilderStreamingURLResult"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "OperationNotPermittedException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/OperationNotPermittedException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "ResourceNotFoundException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ResourceNotFoundException"
                        }
                      }
                    }
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CreateImageBuilderStreamingURLRequest"
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "X-Amz-Target",
                    "in": "header",
                    "required": true,
                    "schema": {
                      "type": "string",
                      "enum": [
                        "PhotonAdminProxyService.CreateImageBuilderStreamingURL"
                      ]
                    }
                  }
                ]
              },
              "parameters": [
                {
                  "$ref": "#/components/parameters/X-Amz-Content-Sha256"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Date"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Algorithm"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Credential"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Security-Token"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Signature"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-SignedHeaders"
                }
              ]
            },
            "/#X-Amz-Target=PhotonAdminProxyService.CreateStack": {
              "post": {
                "operationId": "CreateStack",
                "description": "Creates a stack to start streaming applications to users. A stack consists of an associated fleet, user access policies, and storage configurations. ",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/CreateStackResult"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "LimitExceededException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/LimitExceededException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "InvalidAccountStatusException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InvalidAccountStatusException"
                        }
                      }
                    }
                  },
                  "482": {
                    "description": "ResourceAlreadyExistsException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ResourceAlreadyExistsException"
                        }
                      }
                    }
                  },
                  "483": {
                    "description": "ConcurrentModificationException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ConcurrentModificationException"
                        }
                      }
                    }
                  },
                  "484": {
                    "description": "InvalidRoleException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InvalidRoleException"
                        }
                      }
                    }
                  },
                  "485": {
                    "description": "ResourceNotFoundException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ResourceNotFoundException"
                        }
                      }
                    }
                  },
                  "486": {
                    "description": "InvalidParameterCombinationException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InvalidParameterCombinationException"
                        }
                      }
                    }
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CreateStackRequest"
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "X-Amz-Target",
                    "in": "header",
                    "required": true,
                    "schema": {
                      "type": "string",
                      "enum": [
                        "PhotonAdminProxyService.CreateStack"
                      ]
                    }
                  }
                ]
              },
              "parameters": [
                {
                  "$ref": "#/components/parameters/X-Amz-Content-Sha256"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Date"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Algorithm"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Credential"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Security-Token"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Signature"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-SignedHeaders"
                }
              ]
            },
            "/#X-Amz-Target=PhotonAdminProxyService.CreateStreamingURL": {
              "post": {
                "operationId": "CreateStreamingURL",
                "description": "Creates a temporary URL to start an AppStream 2.0 streaming session for the specified user. A streaming URL enables application streaming to be tested without user setup. ",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/CreateStreamingURLResult"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "ResourceNotFoundException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ResourceNotFoundException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "ResourceNotAvailableException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ResourceNotAvailableException"
                        }
                      }
                    }
                  },
                  "482": {
                    "description": "OperationNotPermittedException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/OperationNotPermittedException"
                        }
                      }
                    }
                  },
                  "483": {
                    "description": "InvalidParameterCombinationException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InvalidParameterCombinationException"
                        }
                      }
                    }
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CreateStreamingURLRequest"
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "X-Amz-Target",
                    "in": "header",
                    "required": true,
                    "schema": {
                      "type": "string",
                      "enum": [
                        "PhotonAdminProxyService.CreateStreamingURL"
                      ]
                    }
                  }
                ]
              },
              "parameters": [
                {
                  "$ref": "#/components/parameters/X-Amz-Content-Sha256"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Date"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Algorithm"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Credential"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Security-Token"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Signature"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-SignedHeaders"
                }
              ]
            },
            "/#X-Amz-Target=PhotonAdminProxyService.CreateUpdatedImage": {
              "post": {
                "operationId": "CreateUpdatedImage",
                "description": "<p>Creates a new image with the latest Windows operating system updates, driver updates, and AppStream 2.0 agent software.</p> <p>For more information, see the \"Update an Image by Using Managed AppStream 2.0 Image Updates\" section in <a href=\"https://docs.aws.amazon.com/appstream2/latest/developerguide/administer-images.html\">Administer Your AppStream 2.0 Images</a>, in the <i>Amazon AppStream 2.0 Administration Guide</i>.</p>",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/CreateUpdatedImageResult"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "LimitExceededException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/LimitExceededException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "InvalidAccountStatusException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InvalidAccountStatusException"
                        }
                      }
                    }
                  },
                  "482": {
                    "description": "OperationNotPermittedException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/OperationNotPermittedException"
                        }
                      }
                    }
                  },
                  "483": {
                    "description": "ResourceAlreadyExistsException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ResourceAlreadyExistsException"
                        }
                      }
                    }
                  },
                  "484": {
                    "description": "ResourceNotFoundException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ResourceNotFoundException"
                        }
                      }
                    }
                  },
                  "485": {
                    "description": "ConcurrentModificationException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ConcurrentModificationException"
                        }
                      }
                    }
                  },
                  "486": {
                    "description": "IncompatibleImageException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/IncompatibleImageException"
                        }
                      }
                    }
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CreateUpdatedImageRequest"
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "X-Amz-Target",
                    "in": "header",
                    "required": true,
                    "schema": {
                      "type": "string",
                      "enum": [
                        "PhotonAdminProxyService.CreateUpdatedImage"
                      ]
                    }
                  }
                ]
              },
              "parameters": [
                {
                  "$ref": "#/components/parameters/X-Amz-Content-Sha256"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Date"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Algorithm"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Credential"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Security-Token"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Signature"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-SignedHeaders"
                }
              ]
            },
            "/#X-Amz-Target=PhotonAdminProxyService.CreateUsageReportSubscription": {
              "post": {
                "operationId": "CreateUsageReportSubscription",
                "description": "Creates a usage report subscription. Usage reports are generated daily.",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/CreateUsageReportSubscriptionResult"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "InvalidRoleException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InvalidRoleException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "InvalidAccountStatusException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InvalidAccountStatusException"
                        }
                      }
                    }
                  },
                  "482": {
                    "description": "LimitExceededException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/LimitExceededException"
                        }
                      }
                    }
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CreateUsageReportSubscriptionRequest"
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "X-Amz-Target",
                    "in": "header",
                    "required": true,
                    "schema": {
                      "type": "string",
                      "enum": [
                        "PhotonAdminProxyService.CreateUsageReportSubscription"
                      ]
                    }
                  }
                ]
              },
              "parameters": [
                {
                  "$ref": "#/components/parameters/X-Amz-Content-Sha256"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Date"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Algorithm"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Credential"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Security-Token"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Signature"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-SignedHeaders"
                }
              ]
            },
            "/#X-Amz-Target=PhotonAdminProxyService.CreateUser": {
              "post": {
                "operationId": "CreateUser",
                "description": "Creates a new user in the user pool.",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/CreateUserResult"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "ResourceAlreadyExistsException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ResourceAlreadyExistsException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "InvalidAccountStatusException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InvalidAccountStatusException"
                        }
                      }
                    }
                  },
                  "482": {
                    "description": "InvalidParameterCombinationException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InvalidParameterCombinationException"
                        }
                      }
                    }
                  },
                  "483": {
                    "description": "LimitExceededException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/LimitExceededException"
                        }
                      }
                    }
                  },
                  "484": {
                    "description": "OperationNotPermittedException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/OperationNotPermittedException"
                        }
                      }
                    }
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CreateUserRequest"
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "X-Amz-Target",
                    "in": "header",
                    "required": true,
                    "schema": {
                      "type": "string",
                      "enum": [
                        "PhotonAdminProxyService.CreateUser"
                      ]
                    }
                  }
                ]
              },
              "parameters": [
                {
                  "$ref": "#/components/parameters/X-Amz-Content-Sha256"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Date"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Algorithm"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Credential"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Security-Token"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Signature"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-SignedHeaders"
                }
              ]
            },
            "/#X-Amz-Target=PhotonAdminProxyService.DeleteAppBlock": {
              "post": {
                "operationId": "DeleteAppBlock",
                "description": "Deletes an app block.",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/DeleteAppBlockResult"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "ConcurrentModificationException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ConcurrentModificationException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "ResourceInUseException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ResourceInUseException"
                        }
                      }
                    }
                  },
                  "482": {
                    "description": "ResourceNotFoundException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ResourceNotFoundException"
                        }
                      }
                    }
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/DeleteAppBlockRequest"
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "X-Amz-Target",
                    "in": "header",
                    "required": true,
                    "schema": {
                      "type": "string",
                      "enum": [
                        "PhotonAdminProxyService.DeleteAppBlock"
                      ]
                    }
                  }
                ]
              },
              "parameters": [
                {
                  "$ref": "#/components/parameters/X-Amz-Content-Sha256"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Date"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Algorithm"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Credential"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Security-Token"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Signature"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-SignedHeaders"
                }
              ]
            },
            "/#X-Amz-Target=PhotonAdminProxyService.DeleteApplication": {
              "post": {
                "operationId": "DeleteApplication",
                "description": "Deletes an application.",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/DeleteApplicationResult"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "OperationNotPermittedException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/OperationNotPermittedException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "ResourceInUseException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ResourceInUseException"
                        }
                      }
                    }
                  },
                  "482": {
                    "description": "ResourceNotFoundException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ResourceNotFoundException"
                        }
                      }
                    }
                  },
                  "483": {
                    "description": "ConcurrentModificationException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ConcurrentModificationException"
                        }
                      }
                    }
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/DeleteApplicationRequest"
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "X-Amz-Target",
                    "in": "header",
                    "required": true,
                    "schema": {
                      "type": "string",
                      "enum": [
                        "PhotonAdminProxyService.DeleteApplication"
                      ]
                    }
                  }
                ]
              },
              "parameters": [
                {
                  "$ref": "#/components/parameters/X-Amz-Content-Sha256"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Date"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Algorithm"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Credential"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Security-Token"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Signature"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-SignedHeaders"
                }
              ]
            },
            "/#X-Amz-Target=PhotonAdminProxyService.DeleteDirectoryConfig": {
              "post": {
                "operationId": "DeleteDirectoryConfig",
                "description": "Deletes the specified Directory Config object from AppStream 2.0. This object includes the information required to join streaming instances to an Active Directory domain.",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/DeleteDirectoryConfigResult"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "ResourceInUseException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ResourceInUseException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "ResourceNotFoundException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ResourceNotFoundException"
                        }
                      }
                    }
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/DeleteDirectoryConfigRequest"
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "X-Amz-Target",
                    "in": "header",
                    "required": true,
                    "schema": {
                      "type": "string",
                      "enum": [
                        "PhotonAdminProxyService.DeleteDirectoryConfig"
                      ]
                    }
                  }
                ]
              },
              "parameters": [
                {
                  "$ref": "#/components/parameters/X-Amz-Content-Sha256"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Date"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Algorithm"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Credential"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Security-Token"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Signature"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-SignedHeaders"
                }
              ]
            },
            "/#X-Amz-Target=PhotonAdminProxyService.DeleteEntitlement": {
              "post": {
                "operationId": "DeleteEntitlement",
                "description": "Deletes the specified entitlement.",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/DeleteEntitlementResult"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "OperationNotPermittedException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/OperationNotPermittedException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "ResourceNotFoundException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ResourceNotFoundException"
                        }
                      }
                    }
                  },
                  "482": {
                    "description": "EntitlementNotFoundException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/EntitlementNotFoundException"
                        }
                      }
                    }
                  },
                  "483": {
                    "description": "OperationNotPermittedException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/OperationNotPermittedException"
                        }
                      }
                    }
                  },
                  "484": {
                    "description": "ConcurrentModificationException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ConcurrentModificationException"
                        }
                      }
                    }
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/DeleteEntitlementRequest"
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "X-Amz-Target",
                    "in": "header",
                    "required": true,
                    "schema": {
                      "type": "string",
                      "enum": [
                        "PhotonAdminProxyService.DeleteEntitlement"
                      ]
                    }
                  }
                ]
              },
              "parameters": [
                {
                  "$ref": "#/components/parameters/X-Amz-Content-Sha256"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Date"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Algorithm"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Credential"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Security-Token"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Signature"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-SignedHeaders"
                }
              ]
            },
            "/#X-Amz-Target=PhotonAdminProxyService.DeleteFleet": {
              "post": {
                "operationId": "DeleteFleet",
                "description": "Deletes the specified fleet.",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/DeleteFleetResult"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "ResourceInUseException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ResourceInUseException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "ResourceNotFoundException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ResourceNotFoundException"
                        }
                      }
                    }
                  },
                  "482": {
                    "description": "ConcurrentModificationException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ConcurrentModificationException"
                        }
                      }
                    }
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/DeleteFleetRequest"
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "X-Amz-Target",
                    "in": "header",
                    "required": true,
                    "schema": {
                      "type": "string",
                      "enum": [
                        "PhotonAdminProxyService.DeleteFleet"
                      ]
                    }
                  }
                ]
              },
              "parameters": [
                {
                  "$ref": "#/components/parameters/X-Amz-Content-Sha256"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Date"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Algorithm"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Credential"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Security-Token"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Signature"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-SignedHeaders"
                }
              ]
            },
            "/#X-Amz-Target=PhotonAdminProxyService.DeleteImage": {
              "post": {
                "operationId": "DeleteImage",
                "description": "Deletes the specified image. You cannot delete an image when it is in use. After you delete an image, you cannot provision new capacity using the image.",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/DeleteImageResult"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "ResourceInUseException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ResourceInUseException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "ResourceNotFoundException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ResourceNotFoundException"
                        }
                      }
                    }
                  },
                  "482": {
                    "description": "OperationNotPermittedException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/OperationNotPermittedException"
                        }
                      }
                    }
                  },
                  "483": {
                    "description": "ConcurrentModificationException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ConcurrentModificationException"
                        }
                      }
                    }
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/DeleteImageRequest"
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "X-Amz-Target",
                    "in": "header",
                    "required": true,
                    "schema": {
                      "type": "string",
                      "enum": [
                        "PhotonAdminProxyService.DeleteImage"
                      ]
                    }
                  }
                ]
              },
              "parameters": [
                {
                  "$ref": "#/components/parameters/X-Amz-Content-Sha256"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Date"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Algorithm"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Credential"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Security-Token"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Signature"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-SignedHeaders"
                }
              ]
            },
            "/#X-Amz-Target=PhotonAdminProxyService.DeleteImageBuilder": {
              "post": {
                "operationId": "DeleteImageBuilder",
                "description": "Deletes the specified image builder and releases the capacity.",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/DeleteImageBuilderResult"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "ResourceNotFoundException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ResourceNotFoundException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "OperationNotPermittedException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/OperationNotPermittedException"
                        }
                      }
                    }
                  },
                  "482": {
                    "description": "ConcurrentModificationException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ConcurrentModificationException"
                        }
                      }
                    }
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/DeleteImageBuilderRequest"
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "X-Amz-Target",
                    "in": "header",
                    "required": true,
                    "schema": {
                      "type": "string",
                      "enum": [
                        "PhotonAdminProxyService.DeleteImageBuilder"
                      ]
                    }
                  }
                ]
              },
              "parameters": [
                {
                  "$ref": "#/components/parameters/X-Amz-Content-Sha256"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Date"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Algorithm"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Credential"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Security-Token"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Signature"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-SignedHeaders"
                }
              ]
            },
            "/#X-Amz-Target=PhotonAdminProxyService.DeleteImagePermissions": {
              "post": {
                "operationId": "DeleteImagePermissions",
                "description": "Deletes permissions for the specified private image. After you delete permissions for an image, AWS accounts to which you previously granted these permissions can no longer use the image.",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/DeleteImagePermissionsResult"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "ResourceNotAvailableException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ResourceNotAvailableException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "ResourceNotFoundException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ResourceNotFoundException"
                        }
                      }
                    }
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/DeleteImagePermissionsRequest"
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "X-Amz-Target",
                    "in": "header",
                    "required": true,
                    "schema": {
                      "type": "string",
                      "enum": [
                        "PhotonAdminProxyService.DeleteImagePermissions"
                      ]
                    }
                  }
                ]
              },
              "parameters": [
                {
                  "$ref": "#/components/parameters/X-Amz-Content-Sha256"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Date"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Algorithm"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Credential"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Security-Token"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Signature"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-SignedHeaders"
                }
              ]
            },
            "/#X-Amz-Target=PhotonAdminProxyService.DeleteStack": {
              "post": {
                "operationId": "DeleteStack",
                "description": "Deletes the specified stack. After the stack is deleted, the application streaming environment provided by the stack is no longer available to users. Also, any reservations made for application streaming sessions for the stack are released.",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/DeleteStackResult"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "ResourceInUseException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ResourceInUseException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "ResourceNotFoundException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ResourceNotFoundException"
                        }
                      }
                    }
                  },
                  "482": {
                    "description": "OperationNotPermittedException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/OperationNotPermittedException"
                        }
                      }
                    }
                  },
                  "483": {
                    "description": "ConcurrentModificationException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ConcurrentModificationException"
                        }
                      }
                    }
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/DeleteStackRequest"
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "X-Amz-Target",
                    "in": "header",
                    "required": true,
                    "schema": {
                      "type": "string",
                      "enum": [
                        "PhotonAdminProxyService.DeleteStack"
                      ]
                    }
                  }
                ]
              },
              "parameters": [
                {
                  "$ref": "#/components/parameters/X-Amz-Content-Sha256"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Date"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Algorithm"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Credential"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Security-Token"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Signature"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-SignedHeaders"
                }
              ]
            },
            "/#X-Amz-Target=PhotonAdminProxyService.DeleteUsageReportSubscription": {
              "post": {
                "operationId": "DeleteUsageReportSubscription",
                "description": "Disables usage report generation.",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/DeleteUsageReportSubscriptionResult"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "InvalidAccountStatusException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InvalidAccountStatusException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "ResourceNotFoundException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ResourceNotFoundException"
                        }
                      }
                    }
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/DeleteUsageReportSubscriptionRequest"
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "X-Amz-Target",
                    "in": "header",
                    "required": true,
                    "schema": {
                      "type": "string",
                      "enum": [
                        "PhotonAdminProxyService.DeleteUsageReportSubscription"
                      ]
                    }
                  }
                ]
              },
              "parameters": [
                {
                  "$ref": "#/components/parameters/X-Amz-Content-Sha256"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Date"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Algorithm"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Credential"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Security-Token"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Signature"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-SignedHeaders"
                }
              ]
            },
            "/#X-Amz-Target=PhotonAdminProxyService.DeleteUser": {
              "post": {
                "operationId": "DeleteUser",
                "description": "Deletes a user from the user pool.",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/DeleteUserResult"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "ResourceNotFoundException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ResourceNotFoundException"
                        }
                      }
                    }
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/DeleteUserRequest"
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "X-Amz-Target",
                    "in": "header",
                    "required": true,
                    "schema": {
                      "type": "string",
                      "enum": [
                        "PhotonAdminProxyService.DeleteUser"
                      ]
                    }
                  }
                ]
              },
              "parameters": [
                {
                  "$ref": "#/components/parameters/X-Amz-Content-Sha256"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Date"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Algorithm"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Credential"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Security-Token"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Signature"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-SignedHeaders"
                }
              ]
            },
            "/#X-Amz-Target=PhotonAdminProxyService.DescribeAppBlocks": {
              "post": {
                "operationId": "DescribeAppBlocks",
                "description": "Retrieves a list that describes one or more app blocks.",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/DescribeAppBlocksResult"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "OperationNotPermittedException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/OperationNotPermittedException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "ResourceNotFoundException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ResourceNotFoundException"
                        }
                      }
                    }
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/DescribeAppBlocksRequest"
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "X-Amz-Target",
                    "in": "header",
                    "required": true,
                    "schema": {
                      "type": "string",
                      "enum": [
                        "PhotonAdminProxyService.DescribeAppBlocks"
                      ]
                    }
                  }
                ]
              },
              "parameters": [
                {
                  "$ref": "#/components/parameters/X-Amz-Content-Sha256"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Date"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Algorithm"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Credential"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Security-Token"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Signature"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-SignedHeaders"
                }
              ]
            },
            "/#X-Amz-Target=PhotonAdminProxyService.DescribeApplicationFleetAssociations": {
              "post": {
                "operationId": "DescribeApplicationFleetAssociations",
                "description": "Retrieves a list that describes one or more application fleet associations. Either ApplicationArn or FleetName must be specified.",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/DescribeApplicationFleetAssociationsResult"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "InvalidParameterCombinationException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InvalidParameterCombinationException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "OperationNotPermittedException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/OperationNotPermittedException"
                        }
                      }
                    }
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/DescribeApplicationFleetAssociationsRequest"
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "X-Amz-Target",
                    "in": "header",
                    "required": true,
                    "schema": {
                      "type": "string",
                      "enum": [
                        "PhotonAdminProxyService.DescribeApplicationFleetAssociations"
                      ]
                    }
                  }
                ]
              },
              "parameters": [
                {
                  "$ref": "#/components/parameters/X-Amz-Content-Sha256"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Date"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Algorithm"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Credential"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Security-Token"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Signature"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-SignedHeaders"
                }
              ]
            },
            "/#X-Amz-Target=PhotonAdminProxyService.DescribeApplications": {
              "post": {
                "operationId": "DescribeApplications",
                "description": "Retrieves a list that describes one or more applications.",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/DescribeApplicationsResult"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "OperationNotPermittedException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/OperationNotPermittedException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "ResourceNotFoundException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ResourceNotFoundException"
                        }
                      }
                    }
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/DescribeApplicationsRequest"
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "X-Amz-Target",
                    "in": "header",
                    "required": true,
                    "schema": {
                      "type": "string",
                      "enum": [
                        "PhotonAdminProxyService.DescribeApplications"
                      ]
                    }
                  }
                ]
              },
              "parameters": [
                {
                  "$ref": "#/components/parameters/X-Amz-Content-Sha256"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Date"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Algorithm"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Credential"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Security-Token"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Signature"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-SignedHeaders"
                }
              ]
            },
            "/#X-Amz-Target=PhotonAdminProxyService.DescribeDirectoryConfigs": {
              "post": {
                "operationId": "DescribeDirectoryConfigs",
                "description": "<p>Retrieves a list that describes one or more specified Directory Config objects for AppStream 2.0, if the names for these objects are provided. Otherwise, all Directory Config objects in the account are described. These objects include the configuration information required to join fleets and image builders to Microsoft Active Directory domains. </p> <p>Although the response syntax in this topic includes the account password, this password is not returned in the actual response.</p>",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/DescribeDirectoryConfigsResult"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "ResourceNotFoundException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ResourceNotFoundException"
                        }
                      }
                    }
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/DescribeDirectoryConfigsRequest"
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "X-Amz-Target",
                    "in": "header",
                    "required": true,
                    "schema": {
                      "type": "string",
                      "enum": [
                        "PhotonAdminProxyService.DescribeDirectoryConfigs"
                      ]
                    }
                  }
                ]
              },
              "parameters": [
                {
                  "$ref": "#/components/parameters/X-Amz-Content-Sha256"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Date"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Algorithm"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Credential"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Security-Token"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Signature"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-SignedHeaders"
                }
              ]
            },
            "/#X-Amz-Target=PhotonAdminProxyService.DescribeEntitlements": {
              "post": {
                "operationId": "DescribeEntitlements",
                "description": "Retrieves a list that describes one of more entitlements.",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/DescribeEntitlementsResult"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "OperationNotPermittedException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/OperationNotPermittedException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "ResourceNotFoundException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ResourceNotFoundException"
                        }
                      }
                    }
                  },
                  "482": {
                    "description": "EntitlementNotFoundException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/EntitlementNotFoundException"
                        }
                      }
                    }
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/DescribeEntitlementsRequest"
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "X-Amz-Target",
                    "in": "header",
                    "required": true,
                    "schema": {
                      "type": "string",
                      "enum": [
                        "PhotonAdminProxyService.DescribeEntitlements"
                      ]
                    }
                  }
                ]
              },
              "parameters": [
                {
                  "$ref": "#/components/parameters/X-Amz-Content-Sha256"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Date"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Algorithm"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Credential"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Security-Token"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Signature"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-SignedHeaders"
                }
              ]
            },
            "/#X-Amz-Target=PhotonAdminProxyService.DescribeFleets": {
              "post": {
                "operationId": "DescribeFleets",
                "description": "Retrieves a list that describes one or more specified fleets, if the fleet names are provided. Otherwise, all fleets in the account are described.",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/DescribeFleetsResult"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "ResourceNotFoundException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ResourceNotFoundException"
                        }
                      }
                    }
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/DescribeFleetsRequest"
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "X-Amz-Target",
                    "in": "header",
                    "required": true,
                    "schema": {
                      "type": "string",
                      "enum": [
                        "PhotonAdminProxyService.DescribeFleets"
                      ]
                    }
                  }
                ]
              },
              "parameters": [
                {
                  "$ref": "#/components/parameters/X-Amz-Content-Sha256"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Date"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Algorithm"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Credential"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Security-Token"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Signature"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-SignedHeaders"
                }
              ]
            },
            "/#X-Amz-Target=PhotonAdminProxyService.DescribeImageBuilders": {
              "post": {
                "operationId": "DescribeImageBuilders",
                "description": "Retrieves a list that describes one or more specified image builders, if the image builder names are provided. Otherwise, all image builders in the account are described.",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/DescribeImageBuildersResult"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "ResourceNotFoundException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ResourceNotFoundException"
                        }
                      }
                    }
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/DescribeImageBuildersRequest"
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "X-Amz-Target",
                    "in": "header",
                    "required": true,
                    "schema": {
                      "type": "string",
                      "enum": [
                        "PhotonAdminProxyService.DescribeImageBuilders"
                      ]
                    }
                  }
                ]
              },
              "parameters": [
                {
                  "$ref": "#/components/parameters/X-Amz-Content-Sha256"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Date"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Algorithm"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Credential"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Security-Token"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Signature"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-SignedHeaders"
                }
              ]
            },
            "/#X-Amz-Target=PhotonAdminProxyService.DescribeImagePermissions": {
              "post": {
                "operationId": "DescribeImagePermissions",
                "description": "Retrieves a list that describes the permissions for shared AWS account IDs on a private image that you own. ",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/DescribeImagePermissionsResult"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "ResourceNotFoundException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ResourceNotFoundException"
                        }
                      }
                    }
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/DescribeImagePermissionsRequest"
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "MaxResults",
                    "in": "query",
                    "schema": {
                      "type": "string"
                    },
                    "description": "Pagination limit",
                    "required": false
                  },
                  {
                    "name": "NextToken",
                    "in": "query",
                    "schema": {
                      "type": "string"
                    },
                    "description": "Pagination token",
                    "required": false
                  },
                  {
                    "name": "X-Amz-Target",
                    "in": "header",
                    "required": true,
                    "schema": {
                      "type": "string",
                      "enum": [
                        "PhotonAdminProxyService.DescribeImagePermissions"
                      ]
                    }
                  }
                ]
              },
              "parameters": [
                {
                  "$ref": "#/components/parameters/X-Amz-Content-Sha256"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Date"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Algorithm"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Credential"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Security-Token"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Signature"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-SignedHeaders"
                }
              ]
            },
            "/#X-Amz-Target=PhotonAdminProxyService.DescribeImages": {
              "post": {
                "operationId": "DescribeImages",
                "description": "Retrieves a list that describes one or more specified images, if the image names or image ARNs are provided. Otherwise, all images in the account are described.",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/DescribeImagesResult"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "InvalidParameterCombinationException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InvalidParameterCombinationException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "ResourceNotFoundException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ResourceNotFoundException"
                        }
                      }
                    }
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/DescribeImagesRequest"
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "MaxResults",
                    "in": "query",
                    "schema": {
                      "type": "string"
                    },
                    "description": "Pagination limit",
                    "required": false
                  },
                  {
                    "name": "NextToken",
                    "in": "query",
                    "schema": {
                      "type": "string"
                    },
                    "description": "Pagination token",
                    "required": false
                  },
                  {
                    "name": "X-Amz-Target",
                    "in": "header",
                    "required": true,
                    "schema": {
                      "type": "string",
                      "enum": [
                        "PhotonAdminProxyService.DescribeImages"
                      ]
                    }
                  }
                ]
              },
              "parameters": [
                {
                  "$ref": "#/components/parameters/X-Amz-Content-Sha256"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Date"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Algorithm"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Credential"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Security-Token"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Signature"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-SignedHeaders"
                }
              ]
            },
            "/#X-Amz-Target=PhotonAdminProxyService.DescribeSessions": {
              "post": {
                "operationId": "DescribeSessions",
                "description": "Retrieves a list that describes the streaming sessions for a specified stack and fleet. If a UserId is provided for the stack and fleet, only streaming sessions for that user are described. If an authentication type is not provided, the default is to authenticate users using a streaming URL.",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/DescribeSessionsResult"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "InvalidParameterCombinationException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InvalidParameterCombinationException"
                        }
                      }
                    }
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/DescribeSessionsRequest"
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "X-Amz-Target",
                    "in": "header",
                    "required": true,
                    "schema": {
                      "type": "string",
                      "enum": [
                        "PhotonAdminProxyService.DescribeSessions"
                      ]
                    }
                  }
                ]
              },
              "parameters": [
                {
                  "$ref": "#/components/parameters/X-Amz-Content-Sha256"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Date"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Algorithm"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Credential"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Security-Token"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Signature"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-SignedHeaders"
                }
              ]
            },
            "/#X-Amz-Target=PhotonAdminProxyService.DescribeStacks": {
              "post": {
                "operationId": "DescribeStacks",
                "description": "Retrieves a list that describes one or more specified stacks, if the stack names are provided. Otherwise, all stacks in the account are described.",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/DescribeStacksResult"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "ResourceNotFoundException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ResourceNotFoundException"
                        }
                      }
                    }
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/DescribeStacksRequest"
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "X-Amz-Target",
                    "in": "header",
                    "required": true,
                    "schema": {
                      "type": "string",
                      "enum": [
                        "PhotonAdminProxyService.DescribeStacks"
                      ]
                    }
                  }
                ]
              },
              "parameters": [
                {
                  "$ref": "#/components/parameters/X-Amz-Content-Sha256"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Date"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Algorithm"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Credential"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Security-Token"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Signature"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-SignedHeaders"
                }
              ]
            },
            "/#X-Amz-Target=PhotonAdminProxyService.DescribeUsageReportSubscriptions": {
              "post": {
                "operationId": "DescribeUsageReportSubscriptions",
                "description": "Retrieves a list that describes one or more usage report subscriptions.",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/DescribeUsageReportSubscriptionsResult"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "ResourceNotFoundException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ResourceNotFoundException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "InvalidAccountStatusException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InvalidAccountStatusException"
                        }
                      }
                    }
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/DescribeUsageReportSubscriptionsRequest"
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "X-Amz-Target",
                    "in": "header",
                    "required": true,
                    "schema": {
                      "type": "string",
                      "enum": [
                        "PhotonAdminProxyService.DescribeUsageReportSubscriptions"
                      ]
                    }
                  }
                ]
              },
              "parameters": [
                {
                  "$ref": "#/components/parameters/X-Amz-Content-Sha256"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Date"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Algorithm"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Credential"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Security-Token"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Signature"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-SignedHeaders"
                }
              ]
            },
            "/#X-Amz-Target=PhotonAdminProxyService.DescribeUserStackAssociations": {
              "post": {
                "operationId": "DescribeUserStackAssociations",
                "description": "<p>Retrieves a list that describes the UserStackAssociation objects. You must specify either or both of the following:</p> <ul> <li> <p>The stack name</p> </li> <li> <p>The user name (email address of the user associated with the stack) and the authentication type for the user</p> </li> </ul>",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/DescribeUserStackAssociationsResult"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "InvalidParameterCombinationException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InvalidParameterCombinationException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "OperationNotPermittedException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/OperationNotPermittedException"
                        }
                      }
                    }
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/DescribeUserStackAssociationsRequest"
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "X-Amz-Target",
                    "in": "header",
                    "required": true,
                    "schema": {
                      "type": "string",
                      "enum": [
                        "PhotonAdminProxyService.DescribeUserStackAssociations"
                      ]
                    }
                  }
                ]
              },
              "parameters": [
                {
                  "$ref": "#/components/parameters/X-Amz-Content-Sha256"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Date"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Algorithm"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Credential"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Security-Token"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Signature"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-SignedHeaders"
                }
              ]
            },
            "/#X-Amz-Target=PhotonAdminProxyService.DescribeUsers": {
              "post": {
                "operationId": "DescribeUsers",
                "description": "Retrieves a list that describes one or more specified users in the user pool.",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/DescribeUsersResult"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "ResourceNotFoundException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ResourceNotFoundException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "InvalidParameterCombinationException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InvalidParameterCombinationException"
                        }
                      }
                    }
                  },
                  "482": {
                    "description": "OperationNotPermittedException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/OperationNotPermittedException"
                        }
                      }
                    }
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/DescribeUsersRequest"
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "X-Amz-Target",
                    "in": "header",
                    "required": true,
                    "schema": {
                      "type": "string",
                      "enum": [
                        "PhotonAdminProxyService.DescribeUsers"
                      ]
                    }
                  }
                ]
              },
              "parameters": [
                {
                  "$ref": "#/components/parameters/X-Amz-Content-Sha256"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Date"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Algorithm"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Credential"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Security-Token"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Signature"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-SignedHeaders"
                }
              ]
            },
            "/#X-Amz-Target=PhotonAdminProxyService.DisableUser": {
              "post": {
                "operationId": "DisableUser",
                "description": "Disables the specified user in the user pool. Users can't sign in to AppStream 2.0 until they are re-enabled. This action does not delete the user. ",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/DisableUserResult"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "ResourceNotFoundException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ResourceNotFoundException"
                        }
                      }
                    }
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/DisableUserRequest"
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "X-Amz-Target",
                    "in": "header",
                    "required": true,
                    "schema": {
                      "type": "string",
                      "enum": [
                        "PhotonAdminProxyService.DisableUser"
                      ]
                    }
                  }
                ]
              },
              "parameters": [
                {
                  "$ref": "#/components/parameters/X-Amz-Content-Sha256"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Date"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Algorithm"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Credential"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Security-Token"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Signature"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-SignedHeaders"
                }
              ]
            },
            "/#X-Amz-Target=PhotonAdminProxyService.DisassociateApplicationFleet": {
              "post": {
                "operationId": "DisassociateApplicationFleet",
                "description": "Disassociates the specified application from the fleet.",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/DisassociateApplicationFleetResult"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "ConcurrentModificationException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ConcurrentModificationException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "InvalidParameterCombinationException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InvalidParameterCombinationException"
                        }
                      }
                    }
                  },
                  "482": {
                    "description": "OperationNotPermittedException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/OperationNotPermittedException"
                        }
                      }
                    }
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/DisassociateApplicationFleetRequest"
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "X-Amz-Target",
                    "in": "header",
                    "required": true,
                    "schema": {
                      "type": "string",
                      "enum": [
                        "PhotonAdminProxyService.DisassociateApplicationFleet"
                      ]
                    }
                  }
                ]
              },
              "parameters": [
                {
                  "$ref": "#/components/parameters/X-Amz-Content-Sha256"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Date"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Algorithm"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Credential"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Security-Token"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Signature"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-SignedHeaders"
                }
              ]
            },
            "/#X-Amz-Target=PhotonAdminProxyService.DisassociateApplicationFromEntitlement": {
              "post": {
                "operationId": "DisassociateApplicationFromEntitlement",
                "description": "Deletes the specified application from the specified entitlement.",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/DisassociateApplicationFromEntitlementResult"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "OperationNotPermittedException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/OperationNotPermittedException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "ResourceNotFoundException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ResourceNotFoundException"
                        }
                      }
                    }
                  },
                  "482": {
                    "description": "EntitlementNotFoundException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/EntitlementNotFoundException"
                        }
                      }
                    }
                  },
                  "483": {
                    "description": "OperationNotPermittedException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/OperationNotPermittedException"
                        }
                      }
                    }
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/DisassociateApplicationFromEntitlementRequest"
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "X-Amz-Target",
                    "in": "header",
                    "required": true,
                    "schema": {
                      "type": "string",
                      "enum": [
                        "PhotonAdminProxyService.DisassociateApplicationFromEntitlement"
                      ]
                    }
                  }
                ]
              },
              "parameters": [
                {
                  "$ref": "#/components/parameters/X-Amz-Content-Sha256"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Date"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Algorithm"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Credential"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Security-Token"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Signature"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-SignedHeaders"
                }
              ]
            },
            "/#X-Amz-Target=PhotonAdminProxyService.DisassociateFleet": {
              "post": {
                "operationId": "DisassociateFleet",
                "description": "Disassociates the specified fleet from the specified stack.",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/DisassociateFleetResult"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "ResourceInUseException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ResourceInUseException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "ResourceNotFoundException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ResourceNotFoundException"
                        }
                      }
                    }
                  },
                  "482": {
                    "description": "ConcurrentModificationException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ConcurrentModificationException"
                        }
                      }
                    }
                  },
                  "483": {
                    "description": "OperationNotPermittedException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/OperationNotPermittedException"
                        }
                      }
                    }
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/DisassociateFleetRequest"
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "X-Amz-Target",
                    "in": "header",
                    "required": true,
                    "schema": {
                      "type": "string",
                      "enum": [
                        "PhotonAdminProxyService.DisassociateFleet"
                      ]
                    }
                  }
                ]
              },
              "parameters": [
                {
                  "$ref": "#/components/parameters/X-Amz-Content-Sha256"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Date"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Algorithm"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Credential"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Security-Token"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Signature"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-SignedHeaders"
                }
              ]
            },
            "/#X-Amz-Target=PhotonAdminProxyService.EnableUser": {
              "post": {
                "operationId": "EnableUser",
                "description": "Enables a user in the user pool. After being enabled, users can sign in to AppStream 2.0 and open applications from the stacks to which they are assigned.",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/EnableUserResult"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "ResourceNotFoundException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ResourceNotFoundException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "InvalidAccountStatusException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InvalidAccountStatusException"
                        }
                      }
                    }
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/EnableUserRequest"
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "X-Amz-Target",
                    "in": "header",
                    "required": true,
                    "schema": {
                      "type": "string",
                      "enum": [
                        "PhotonAdminProxyService.EnableUser"
                      ]
                    }
                  }
                ]
              },
              "parameters": [
                {
                  "$ref": "#/components/parameters/X-Amz-Content-Sha256"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Date"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Algorithm"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Credential"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Security-Token"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Signature"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-SignedHeaders"
                }
              ]
            },
            "/#X-Amz-Target=PhotonAdminProxyService.ExpireSession": {
              "post": {
                "operationId": "ExpireSession",
                "description": "Immediately stops the specified streaming session.",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ExpireSessionResult"
                        }
                      }
                    }
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ExpireSessionRequest"
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "X-Amz-Target",
                    "in": "header",
                    "required": true,
                    "schema": {
                      "type": "string",
                      "enum": [
                        "PhotonAdminProxyService.ExpireSession"
                      ]
                    }
                  }
                ]
              },
              "parameters": [
                {
                  "$ref": "#/components/parameters/X-Amz-Content-Sha256"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Date"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Algorithm"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Credential"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Security-Token"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Signature"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-SignedHeaders"
                }
              ]
            },
            "/#X-Amz-Target=PhotonAdminProxyService.ListAssociatedFleets": {
              "post": {
                "operationId": "ListAssociatedFleets",
                "description": "Retrieves the name of the fleet that is associated with the specified stack.",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ListAssociatedFleetsResult"
                        }
                      }
                    }
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ListAssociatedFleetsRequest"
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "X-Amz-Target",
                    "in": "header",
                    "required": true,
                    "schema": {
                      "type": "string",
                      "enum": [
                        "PhotonAdminProxyService.ListAssociatedFleets"
                      ]
                    }
                  }
                ]
              },
              "parameters": [
                {
                  "$ref": "#/components/parameters/X-Amz-Content-Sha256"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Date"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Algorithm"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Credential"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Security-Token"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Signature"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-SignedHeaders"
                }
              ]
            },
            "/#X-Amz-Target=PhotonAdminProxyService.ListAssociatedStacks": {
              "post": {
                "operationId": "ListAssociatedStacks",
                "description": "Retrieves the name of the stack with which the specified fleet is associated.",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ListAssociatedStacksResult"
                        }
                      }
                    }
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ListAssociatedStacksRequest"
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "X-Amz-Target",
                    "in": "header",
                    "required": true,
                    "schema": {
                      "type": "string",
                      "enum": [
                        "PhotonAdminProxyService.ListAssociatedStacks"
                      ]
                    }
                  }
                ]
              },
              "parameters": [
                {
                  "$ref": "#/components/parameters/X-Amz-Content-Sha256"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Date"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Algorithm"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Credential"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Security-Token"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Signature"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-SignedHeaders"
                }
              ]
            },
            "/#X-Amz-Target=PhotonAdminProxyService.ListEntitledApplications": {
              "post": {
                "operationId": "ListEntitledApplications",
                "description": "Retrieves a list of entitled applications.",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ListEntitledApplicationsResult"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "OperationNotPermittedException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/OperationNotPermittedException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "ResourceNotFoundException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ResourceNotFoundException"
                        }
                      }
                    }
                  },
                  "482": {
                    "description": "EntitlementNotFoundException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/EntitlementNotFoundException"
                        }
                      }
                    }
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ListEntitledApplicationsRequest"
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "X-Amz-Target",
                    "in": "header",
                    "required": true,
                    "schema": {
                      "type": "string",
                      "enum": [
                        "PhotonAdminProxyService.ListEntitledApplications"
                      ]
                    }
                  }
                ]
              },
              "parameters": [
                {
                  "$ref": "#/components/parameters/X-Amz-Content-Sha256"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Date"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Algorithm"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Credential"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Security-Token"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Signature"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-SignedHeaders"
                }
              ]
            },
            "/#X-Amz-Target=PhotonAdminProxyService.ListTagsForResource": {
              "post": {
                "operationId": "ListTagsForResource",
                "description": "<p>Retrieves a list of all tags for the specified AppStream 2.0 resource. You can tag AppStream 2.0 image builders, images, fleets, and stacks.</p> <p>For more information about tags, see <a href=\"https://docs.aws.amazon.com/appstream2/latest/developerguide/tagging-basic.html\">Tagging Your Resources</a> in the <i>Amazon AppStream 2.0 Administration Guide</i>.</p>",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ListTagsForResourceResponse"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "ResourceNotFoundException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ResourceNotFoundException"
                        }
                      }
                    }
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ListTagsForResourceRequest"
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "X-Amz-Target",
                    "in": "header",
                    "required": true,
                    "schema": {
                      "type": "string",
                      "enum": [
                        "PhotonAdminProxyService.ListTagsForResource"
                      ]
                    }
                  }
                ]
              },
              "parameters": [
                {
                  "$ref": "#/components/parameters/X-Amz-Content-Sha256"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Date"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Algorithm"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Credential"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Security-Token"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Signature"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-SignedHeaders"
                }
              ]
            },
            "/#X-Amz-Target=PhotonAdminProxyService.StartFleet": {
              "post": {
                "operationId": "StartFleet",
                "description": "Starts the specified fleet.",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/StartFleetResult"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "ResourceNotFoundException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ResourceNotFoundException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "OperationNotPermittedException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/OperationNotPermittedException"
                        }
                      }
                    }
                  },
                  "482": {
                    "description": "LimitExceededException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/LimitExceededException"
                        }
                      }
                    }
                  },
                  "483": {
                    "description": "RequestLimitExceededException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/RequestLimitExceededException"
                        }
                      }
                    }
                  },
                  "484": {
                    "description": "InvalidAccountStatusException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InvalidAccountStatusException"
                        }
                      }
                    }
                  },
                  "485": {
                    "description": "ConcurrentModificationException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ConcurrentModificationException"
                        }
                      }
                    }
                  },
                  "486": {
                    "description": "ResourceNotAvailableException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ResourceNotAvailableException"
                        }
                      }
                    }
                  },
                  "487": {
                    "description": "InvalidRoleException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InvalidRoleException"
                        }
                      }
                    }
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/StartFleetRequest"
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "X-Amz-Target",
                    "in": "header",
                    "required": true,
                    "schema": {
                      "type": "string",
                      "enum": [
                        "PhotonAdminProxyService.StartFleet"
                      ]
                    }
                  }
                ]
              },
              "parameters": [
                {
                  "$ref": "#/components/parameters/X-Amz-Content-Sha256"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Date"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Algorithm"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Credential"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Security-Token"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Signature"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-SignedHeaders"
                }
              ]
            },
            "/#X-Amz-Target=PhotonAdminProxyService.StartImageBuilder": {
              "post": {
                "operationId": "StartImageBuilder",
                "description": "Starts the specified image builder.",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/StartImageBuilderResult"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "ResourceNotAvailableException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ResourceNotAvailableException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "ResourceNotFoundException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ResourceNotFoundException"
                        }
                      }
                    }
                  },
                  "482": {
                    "description": "ConcurrentModificationException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ConcurrentModificationException"
                        }
                      }
                    }
                  },
                  "483": {
                    "description": "InvalidAccountStatusException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InvalidAccountStatusException"
                        }
                      }
                    }
                  },
                  "484": {
                    "description": "IncompatibleImageException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/IncompatibleImageException"
                        }
                      }
                    }
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/StartImageBuilderRequest"
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "X-Amz-Target",
                    "in": "header",
                    "required": true,
                    "schema": {
                      "type": "string",
                      "enum": [
                        "PhotonAdminProxyService.StartImageBuilder"
                      ]
                    }
                  }
                ]
              },
              "parameters": [
                {
                  "$ref": "#/components/parameters/X-Amz-Content-Sha256"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Date"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Algorithm"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Credential"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Security-Token"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Signature"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-SignedHeaders"
                }
              ]
            },
            "/#X-Amz-Target=PhotonAdminProxyService.StopFleet": {
              "post": {
                "operationId": "StopFleet",
                "description": "Stops the specified fleet.",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/StopFleetResult"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "ResourceNotFoundException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ResourceNotFoundException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "ConcurrentModificationException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ConcurrentModificationException"
                        }
                      }
                    }
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/StopFleetRequest"
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "X-Amz-Target",
                    "in": "header",
                    "required": true,
                    "schema": {
                      "type": "string",
                      "enum": [
                        "PhotonAdminProxyService.StopFleet"
                      ]
                    }
                  }
                ]
              },
              "parameters": [
                {
                  "$ref": "#/components/parameters/X-Amz-Content-Sha256"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Date"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Algorithm"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Credential"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Security-Token"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Signature"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-SignedHeaders"
                }
              ]
            },
            "/#X-Amz-Target=PhotonAdminProxyService.StopImageBuilder": {
              "post": {
                "operationId": "StopImageBuilder",
                "description": "Stops the specified image builder.",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/StopImageBuilderResult"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "ResourceNotFoundException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ResourceNotFoundException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "OperationNotPermittedException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/OperationNotPermittedException"
                        }
                      }
                    }
                  },
                  "482": {
                    "description": "ConcurrentModificationException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ConcurrentModificationException"
                        }
                      }
                    }
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/StopImageBuilderRequest"
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "X-Amz-Target",
                    "in": "header",
                    "required": true,
                    "schema": {
                      "type": "string",
                      "enum": [
                        "PhotonAdminProxyService.StopImageBuilder"
                      ]
                    }
                  }
                ]
              },
              "parameters": [
                {
                  "$ref": "#/components/parameters/X-Amz-Content-Sha256"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Date"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Algorithm"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Credential"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Security-Token"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Signature"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-SignedHeaders"
                }
              ]
            },
            "/#X-Amz-Target=PhotonAdminProxyService.TagResource": {
              "post": {
                "operationId": "TagResource",
                "description": "<p>Adds or overwrites one or more tags for the specified AppStream 2.0 resource. You can tag AppStream 2.0 image builders, images, fleets, and stacks.</p> <p>Each tag consists of a key and an optional value. If a resource already has a tag with the same key, this operation updates its value.</p> <p>To list the current tags for your resources, use <a>ListTagsForResource</a>. To disassociate tags from your resources, use <a>UntagResource</a>.</p> <p>For more information about tags, see <a href=\"https://docs.aws.amazon.com/appstream2/latest/developerguide/tagging-basic.html\">Tagging Your Resources</a> in the <i>Amazon AppStream 2.0 Administration Guide</i>.</p>",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/TagResourceResponse"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "LimitExceededException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/LimitExceededException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "InvalidAccountStatusException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InvalidAccountStatusException"
                        }
                      }
                    }
                  },
                  "482": {
                    "description": "ResourceNotFoundException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ResourceNotFoundException"
                        }
                      }
                    }
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/TagResourceRequest"
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "X-Amz-Target",
                    "in": "header",
                    "required": true,
                    "schema": {
                      "type": "string",
                      "enum": [
                        "PhotonAdminProxyService.TagResource"
                      ]
                    }
                  }
                ]
              },
              "parameters": [
                {
                  "$ref": "#/components/parameters/X-Amz-Content-Sha256"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Date"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Algorithm"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Credential"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Security-Token"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Signature"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-SignedHeaders"
                }
              ]
            },
            "/#X-Amz-Target=PhotonAdminProxyService.UntagResource": {
              "post": {
                "operationId": "UntagResource",
                "description": "<p>Disassociates one or more specified tags from the specified AppStream 2.0 resource.</p> <p>To list the current tags for your resources, use <a>ListTagsForResource</a>.</p> <p>For more information about tags, see <a href=\"https://docs.aws.amazon.com/appstream2/latest/developerguide/tagging-basic.html\">Tagging Your Resources</a> in the <i>Amazon AppStream 2.0 Administration Guide</i>.</p>",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/UntagResourceResponse"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "ResourceNotFoundException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ResourceNotFoundException"
                        }
                      }
                    }
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/UntagResourceRequest"
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "X-Amz-Target",
                    "in": "header",
                    "required": true,
                    "schema": {
                      "type": "string",
                      "enum": [
                        "PhotonAdminProxyService.UntagResource"
                      ]
                    }
                  }
                ]
              },
              "parameters": [
                {
                  "$ref": "#/components/parameters/X-Amz-Content-Sha256"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Date"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Algorithm"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Credential"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Security-Token"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Signature"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-SignedHeaders"
                }
              ]
            },
            "/#X-Amz-Target=PhotonAdminProxyService.UpdateApplication": {
              "post": {
                "operationId": "UpdateApplication",
                "description": "Updates the specified application.",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/UpdateApplicationResult"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "OperationNotPermittedException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/OperationNotPermittedException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "ConcurrentModificationException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ConcurrentModificationException"
                        }
                      }
                    }
                  },
                  "482": {
                    "description": "ResourceNotFoundException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ResourceNotFoundException"
                        }
                      }
                    }
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/UpdateApplicationRequest"
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "X-Amz-Target",
                    "in": "header",
                    "required": true,
                    "schema": {
                      "type": "string",
                      "enum": [
                        "PhotonAdminProxyService.UpdateApplication"
                      ]
                    }
                  }
                ]
              },
              "parameters": [
                {
                  "$ref": "#/components/parameters/X-Amz-Content-Sha256"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Date"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Algorithm"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Credential"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Security-Token"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Signature"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-SignedHeaders"
                }
              ]
            },
            "/#X-Amz-Target=PhotonAdminProxyService.UpdateDirectoryConfig": {
              "post": {
                "operationId": "UpdateDirectoryConfig",
                "description": "Updates the specified Directory Config object in AppStream 2.0. This object includes the configuration information required to join fleets and image builders to Microsoft Active Directory domains.",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/UpdateDirectoryConfigResult"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "ResourceInUseException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ResourceInUseException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "ResourceNotFoundException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ResourceNotFoundException"
                        }
                      }
                    }
                  },
                  "482": {
                    "description": "ConcurrentModificationException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ConcurrentModificationException"
                        }
                      }
                    }
                  },
                  "483": {
                    "description": "OperationNotPermittedException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/OperationNotPermittedException"
                        }
                      }
                    }
                  },
                  "484": {
                    "description": "InvalidRoleException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InvalidRoleException"
                        }
                      }
                    }
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/UpdateDirectoryConfigRequest"
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "X-Amz-Target",
                    "in": "header",
                    "required": true,
                    "schema": {
                      "type": "string",
                      "enum": [
                        "PhotonAdminProxyService.UpdateDirectoryConfig"
                      ]
                    }
                  }
                ]
              },
              "parameters": [
                {
                  "$ref": "#/components/parameters/X-Amz-Content-Sha256"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Date"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Algorithm"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Credential"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Security-Token"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Signature"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-SignedHeaders"
                }
              ]
            },
            "/#X-Amz-Target=PhotonAdminProxyService.UpdateEntitlement": {
              "post": {
                "operationId": "UpdateEntitlement",
                "description": "Updates the specified entitlement.",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/UpdateEntitlementResult"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "OperationNotPermittedException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/OperationNotPermittedException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "ResourceNotFoundException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ResourceNotFoundException"
                        }
                      }
                    }
                  },
                  "482": {
                    "description": "EntitlementNotFoundException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/EntitlementNotFoundException"
                        }
                      }
                    }
                  },
                  "483": {
                    "description": "ConcurrentModificationException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ConcurrentModificationException"
                        }
                      }
                    }
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/UpdateEntitlementRequest"
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "X-Amz-Target",
                    "in": "header",
                    "required": true,
                    "schema": {
                      "type": "string",
                      "enum": [
                        "PhotonAdminProxyService.UpdateEntitlement"
                      ]
                    }
                  }
                ]
              },
              "parameters": [
                {
                  "$ref": "#/components/parameters/X-Amz-Content-Sha256"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Date"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Algorithm"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Credential"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Security-Token"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Signature"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-SignedHeaders"
                }
              ]
            },
            "/#X-Amz-Target=PhotonAdminProxyService.UpdateFleet": {
              "post": {
                "operationId": "UpdateFleet",
                "description": "<p>Updates the specified fleet.</p> <p>If the fleet is in the <code>STOPPED</code> state, you can update any attribute except the fleet name.</p> <p>If the fleet is in the <code>RUNNING</code> state, you can update the following based on the fleet type:</p> <ul> <li> <p>Always-On and On-Demand fleet types</p> <p>You can update the <code>DisplayName</code>, <code>ComputeCapacity</code>, <code>ImageARN</code>, <code>ImageName</code>, <code>IdleDisconnectTimeoutInSeconds</code>, and <code>DisconnectTimeoutInSeconds</code> attributes.</p> </li> <li> <p>Elastic fleet type</p> <p>You can update the <code>DisplayName</code>, <code>IdleDisconnectTimeoutInSeconds</code>, <code>DisconnectTimeoutInSeconds</code>, <code>MaxConcurrentSessions</code>, <code>SessionScriptS3Location</code> and <code>UsbDeviceFilterStrings</code> attributes.</p> </li> </ul> <p>If the fleet is in the <code>STARTING</code> or <code>STOPPED</code> state, you can't update it.</p>",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/UpdateFleetResult"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "ResourceInUseException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ResourceInUseException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "LimitExceededException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/LimitExceededException"
                        }
                      }
                    }
                  },
                  "482": {
                    "description": "RequestLimitExceededException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/RequestLimitExceededException"
                        }
                      }
                    }
                  },
                  "483": {
                    "description": "InvalidAccountStatusException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InvalidAccountStatusException"
                        }
                      }
                    }
                  },
                  "484": {
                    "description": "InvalidRoleException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InvalidRoleException"
                        }
                      }
                    }
                  },
                  "485": {
                    "description": "ResourceNotFoundException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ResourceNotFoundException"
                        }
                      }
                    }
                  },
                  "486": {
                    "description": "ResourceNotAvailableException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ResourceNotAvailableException"
                        }
                      }
                    }
                  },
                  "487": {
                    "description": "InvalidParameterCombinationException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InvalidParameterCombinationException"
                        }
                      }
                    }
                  },
                  "488": {
                    "description": "ConcurrentModificationException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ConcurrentModificationException"
                        }
                      }
                    }
                  },
                  "489": {
                    "description": "IncompatibleImageException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/IncompatibleImageException"
                        }
                      }
                    }
                  },
                  "490": {
                    "description": "OperationNotPermittedException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/OperationNotPermittedException"
                        }
                      }
                    }
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/UpdateFleetRequest"
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "X-Amz-Target",
                    "in": "header",
                    "required": true,
                    "schema": {
                      "type": "string",
                      "enum": [
                        "PhotonAdminProxyService.UpdateFleet"
                      ]
                    }
                  }
                ]
              },
              "parameters": [
                {
                  "$ref": "#/components/parameters/X-Amz-Content-Sha256"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Date"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Algorithm"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Credential"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Security-Token"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Signature"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-SignedHeaders"
                }
              ]
            },
            "/#X-Amz-Target=PhotonAdminProxyService.UpdateImagePermissions": {
              "post": {
                "operationId": "UpdateImagePermissions",
                "description": "Adds or updates permissions for the specified private image. ",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/UpdateImagePermissionsResult"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "ResourceNotFoundException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ResourceNotFoundException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "ResourceNotAvailableException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ResourceNotAvailableException"
                        }
                      }
                    }
                  },
                  "482": {
                    "description": "LimitExceededException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/LimitExceededException"
                        }
                      }
                    }
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/UpdateImagePermissionsRequest"
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "X-Amz-Target",
                    "in": "header",
                    "required": true,
                    "schema": {
                      "type": "string",
                      "enum": [
                        "PhotonAdminProxyService.UpdateImagePermissions"
                      ]
                    }
                  }
                ]
              },
              "parameters": [
                {
                  "$ref": "#/components/parameters/X-Amz-Content-Sha256"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Date"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Algorithm"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Credential"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Security-Token"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Signature"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-SignedHeaders"
                }
              ]
            },
            "/#X-Amz-Target=PhotonAdminProxyService.UpdateStack": {
              "post": {
                "operationId": "UpdateStack",
                "description": "Updates the specified fields for the specified stack.",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/UpdateStackResult"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "ResourceNotFoundException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ResourceNotFoundException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "ResourceInUseException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ResourceInUseException"
                        }
                      }
                    }
                  },
                  "482": {
                    "description": "InvalidRoleException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InvalidRoleException"
                        }
                      }
                    }
                  },
                  "483": {
                    "description": "InvalidParameterCombinationException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InvalidParameterCombinationException"
                        }
                      }
                    }
                  },
                  "484": {
                    "description": "LimitExceededException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/LimitExceededException"
                        }
                      }
                    }
                  },
                  "485": {
                    "description": "InvalidAccountStatusException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InvalidAccountStatusException"
                        }
                      }
                    }
                  },
                  "486": {
                    "description": "IncompatibleImageException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/IncompatibleImageException"
                        }
                      }
                    }
                  },
                  "487": {
                    "description": "OperationNotPermittedException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/OperationNotPermittedException"
                        }
                      }
                    }
                  },
                  "488": {
                    "description": "ConcurrentModificationException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ConcurrentModificationException"
                        }
                      }
                    }
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/UpdateStackRequest"
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "X-Amz-Target",
                    "in": "header",
                    "required": true,
                    "schema": {
                      "type": "string",
                      "enum": [
                        "PhotonAdminProxyService.UpdateStack"
                      ]
                    }
                  }
                ]
              },
              "parameters": [
                {
                  "$ref": "#/components/parameters/X-Amz-Content-Sha256"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Date"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Algorithm"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Credential"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Security-Token"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Signature"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-SignedHeaders"
                }
              ]
            }
          },
          "components": {
            "parameters": {
              "X-Amz-Content-Sha256": {
                "name": "X-Amz-Content-Sha256",
                "in": "header",
                "schema": {
                  "type": "string"
                },
                "required": false
              },
              "X-Amz-Date": {
                "name": "X-Amz-Date",
                "in": "header",
                "schema": {
                  "type": "string"
                },
                "required": false
              },
              "X-Amz-Algorithm": {
                "name": "X-Amz-Algorithm",
                "in": "header",
                "schema": {
                  "type": "string"
                },
                "required": false
              },
              "X-Amz-Credential": {
                "name": "X-Amz-Credential",
                "in": "header",
                "schema": {
                  "type": "string"
                },
                "required": false
              },
              "X-Amz-Security-Token": {
                "name": "X-Amz-Security-Token",
                "in": "header",
                "schema": {
                  "type": "string"
                },
                "required": false
              },
              "X-Amz-Signature": {
                "name": "X-Amz-Signature",
                "in": "header",
                "schema": {
                  "type": "string"
                },
                "required": false
              },
              "X-Amz-SignedHeaders": {
                "name": "X-Amz-SignedHeaders",
                "in": "header",
                "schema": {
                  "type": "string"
                },
                "required": false
              }
            },
            "securitySchemes": {
              "hmac": {
                "type": "apiKey",
                "name": "Authorization",
                "in": "header",
                "description": "Amazon Signature authorization v4",
                "x-amazon-apigateway-authtype": "awsSigv4"
              }
            },
            "schemas": {
              "AssociateApplicationFleetResult": {
                "type": "object",
                "properties": {
                  "ApplicationFleetAssociation": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ApplicationFleetAssociation"
                      },
                      {
                        "description": "If fleet name is specified, this returns the list of applications that are associated to it. If application ARN is specified, this returns the list of fleets to which it is associated."
                      }
                    ]
                  }
                }
              },
              "AssociateApplicationFleetRequest": {
                "type": "object",
                "required": [
                  "FleetName",
                  "ApplicationArn"
                ],
                "title": "AssociateApplicationFleetRequest",
                "properties": {
                  "FleetName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Name"
                      },
                      {
                        "description": "The name of the fleet."
                      }
                    ]
                  },
                  "ApplicationArn": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Arn"
                      },
                      {
                        "description": "The ARN of the application."
                      }
                    ]
                  }
                }
              },
              "ConcurrentModificationException": {},
              "LimitExceededException": {},
              "ResourceNotFoundException": {},
              "InvalidParameterCombinationException": {},
              "OperationNotPermittedException": {},
              "AssociateApplicationToEntitlementResult": {
                "type": "object",
                "properties": {}
              },
              "AssociateApplicationToEntitlementRequest": {
                "type": "object",
                "required": [
                  "StackName",
                  "EntitlementName",
                  "ApplicationIdentifier"
                ],
                "title": "AssociateApplicationToEntitlementRequest",
                "properties": {
                  "StackName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Name"
                      },
                      {
                        "description": "The name of the stack."
                      }
                    ]
                  },
                  "EntitlementName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Name"
                      },
                      {
                        "description": "The name of the entitlement."
                      }
                    ]
                  },
                  "ApplicationIdentifier": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/String"
                      },
                      {
                        "description": "The identifier of the application."
                      }
                    ]
                  }
                }
              },
              "EntitlementNotFoundException": {},
              "AssociateFleetResult": {
                "type": "object",
                "properties": {}
              },
              "AssociateFleetRequest": {
                "type": "object",
                "required": [
                  "FleetName",
                  "StackName"
                ],
                "title": "AssociateFleetRequest",
                "properties": {
                  "FleetName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/String"
                      },
                      {
                        "description": "The name of the fleet. "
                      }
                    ]
                  },
                  "StackName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/String"
                      },
                      {
                        "description": "The name of the stack."
                      }
                    ]
                  }
                }
              },
              "InvalidAccountStatusException": {},
              "IncompatibleImageException": {},
              "BatchAssociateUserStackResult": {
                "type": "object",
                "properties": {
                  "errors": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/UserStackAssociationErrorList"
                      },
                      {
                        "description": "The list of UserStackAssociationError objects."
                      }
                    ]
                  }
                }
              },
              "BatchAssociateUserStackRequest": {
                "type": "object",
                "required": [
                  "UserStackAssociations"
                ],
                "title": "BatchAssociateUserStackRequest",
                "properties": {
                  "UserStackAssociations": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/UserStackAssociationList"
                      },
                      {
                        "description": "The list of UserStackAssociation objects."
                      }
                    ]
                  }
                }
              },
              "BatchDisassociateUserStackResult": {
                "type": "object",
                "properties": {
                  "errors": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/UserStackAssociationErrorList"
                      },
                      {
                        "description": "The list of UserStackAssociationError objects."
                      }
                    ]
                  }
                }
              },
              "BatchDisassociateUserStackRequest": {
                "type": "object",
                "required": [
                  "UserStackAssociations"
                ],
                "title": "BatchDisassociateUserStackRequest",
                "properties": {
                  "UserStackAssociations": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/UserStackAssociationList"
                      },
                      {
                        "description": "The list of UserStackAssociation objects."
                      }
                    ]
                  }
                }
              },
              "CopyImageResponse": {
                "type": "object",
                "properties": {
                  "DestinationImageName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Name"
                      },
                      {
                        "description": "The name of the destination image."
                      }
                    ]
                  }
                }
              },
              "CopyImageRequest": {
                "type": "object",
                "required": [
                  "SourceImageName",
                  "DestinationImageName",
                  "DestinationRegion"
                ],
                "title": "CopyImageRequest",
                "properties": {
                  "SourceImageName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Name"
                      },
                      {
                        "description": "The name of the image to copy."
                      }
                    ]
                  },
                  "DestinationImageName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Name"
                      },
                      {
                        "description": "The name that the image will have when it is copied to the destination."
                      }
                    ]
                  },
                  "DestinationRegion": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/RegionName"
                      },
                      {
                        "description": "The destination region to which the image will be copied. This parameter is required, even if you are copying an image within the same region."
                      }
                    ]
                  },
                  "DestinationImageDescription": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Description"
                      },
                      {
                        "description": "The description that the image will have when it is copied to the destination."
                      }
                    ]
                  }
                }
              },
              "ResourceAlreadyExistsException": {},
              "ResourceNotAvailableException": {},
              "CreateAppBlockResult": {
                "type": "object",
                "properties": {
                  "AppBlock": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/AppBlock"
                      },
                      {
                        "description": "The app block."
                      }
                    ]
                  }
                }
              },
              "CreateAppBlockRequest": {
                "type": "object",
                "required": [
                  "Name",
                  "SourceS3Location",
                  "SetupScriptDetails"
                ],
                "title": "CreateAppBlockRequest",
                "properties": {
                  "Name": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Name"
                      },
                      {
                        "description": "The name of the app block."
                      }
                    ]
                  },
                  "Description": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Description"
                      },
                      {
                        "description": "The description of the app block."
                      }
                    ]
                  },
                  "DisplayName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/DisplayName"
                      },
                      {
                        "description": "The display name of the app block. This is not displayed to the user."
                      }
                    ]
                  },
                  "SourceS3Location": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/S3Location"
                      },
                      {
                        "description": "The source S3 location of the app block."
                      }
                    ]
                  },
                  "SetupScriptDetails": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ScriptDetails"
                      },
                      {
                        "description": "The setup script details of the app block."
                      }
                    ]
                  },
                  "Tags": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Tags"
                      },
                      {
                        "description": "The tags assigned to the app block."
                      }
                    ]
                  }
                }
              },
              "CreateApplicationResult": {
                "type": "object",
                "properties": {
                  "Application": {
                    "$ref": "#/components/schemas/Application"
                  }
                }
              },
              "CreateApplicationRequest": {
                "type": "object",
                "required": [
                  "Name",
                  "IconS3Location",
                  "LaunchPath",
                  "Platforms",
                  "InstanceFamilies",
                  "AppBlockArn"
                ],
                "title": "CreateApplicationRequest",
                "properties": {
                  "Name": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Name"
                      },
                      {
                        "description": "The name of the application. This name is visible to users when display name is not specified."
                      }
                    ]
                  },
                  "DisplayName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/DisplayName"
                      },
                      {
                        "description": "The display name of the application. This name is visible to users in the application catalog."
                      }
                    ]
                  },
                  "Description": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Description"
                      },
                      {
                        "description": "The description of the application."
                      }
                    ]
                  },
                  "IconS3Location": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/S3Location"
                      },
                      {
                        "description": "The location in S3 of the application icon."
                      }
                    ]
                  },
                  "LaunchPath": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/String"
                      },
                      {
                        "description": "The launch path of the application."
                      }
                    ]
                  },
                  "WorkingDirectory": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/String"
                      },
                      {
                        "description": "The working directory of the application."
                      }
                    ]
                  },
                  "LaunchParameters": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/String"
                      },
                      {
                        "description": "The launch parameters of the application."
                      }
                    ]
                  },
                  "Platforms": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Platforms"
                      },
                      {
                        "description": "The platforms the application supports. WINDOWS_SERVER_2019 and AMAZON_LINUX2 are supported for Elastic fleets."
                      }
                    ]
                  },
                  "InstanceFamilies": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/StringList"
                      },
                      {
                        "description": "The instance families the application supports. Valid values are GENERAL_PURPOSE and GRAPHICS_G4."
                      }
                    ]
                  },
                  "AppBlockArn": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Arn"
                      },
                      {
                        "description": "The app block ARN to which the application should be associated"
                      }
                    ]
                  },
                  "Tags": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Tags"
                      },
                      {
                        "description": "The tags assigned to the application."
                      }
                    ]
                  }
                }
              },
              "CreateDirectoryConfigResult": {
                "type": "object",
                "properties": {
                  "DirectoryConfig": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/DirectoryConfig"
                      },
                      {
                        "description": "Information about the directory configuration."
                      }
                    ]
                  }
                }
              },
              "CreateDirectoryConfigRequest": {
                "type": "object",
                "required": [
                  "DirectoryName",
                  "OrganizationalUnitDistinguishedNames"
                ],
                "title": "CreateDirectoryConfigRequest",
                "properties": {
                  "DirectoryName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/DirectoryName"
                      },
                      {
                        "description": "The fully qualified name of the directory (for example, corp.example.com)."
                      }
                    ]
                  },
                  "OrganizationalUnitDistinguishedNames": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/OrganizationalUnitDistinguishedNamesList"
                      },
                      {
                        "description": "The distinguished names of the organizational units for computer accounts."
                      }
                    ]
                  },
                  "ServiceAccountCredentials": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ServiceAccountCredentials"
                      },
                      {
                        "description": "The credentials for the service account used by the fleet or image builder to connect to the directory."
                      }
                    ]
                  },
                  "CertificateBasedAuthProperties": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/CertificateBasedAuthProperties"
                      },
                      {
                        "description": "The certificate-based authentication properties used to authenticate SAML 2.0 Identity Provider (IdP) user identities to Active Directory domain-joined streaming instances. Fallback is turned on by default when certificate-based authentication is <b>Enabled</b> . Fallback allows users to log in using their AD domain password if certificate-based authentication is unsuccessful, or to unlock a desktop lock screen. <b>Enabled_no_directory_login_fallback</b> enables certificate-based authentication, but does not allow users to log in using their AD domain password. Users will be disconnected to re-authenticate using certificates."
                      }
                    ]
                  }
                }
              },
              "InvalidRoleException": {},
              "CreateEntitlementResult": {
                "type": "object",
                "properties": {
                  "Entitlement": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Entitlement"
                      },
                      {
                        "description": "The entitlement."
                      }
                    ]
                  }
                }
              },
              "CreateEntitlementRequest": {
                "type": "object",
                "required": [
                  "Name",
                  "StackName",
                  "AppVisibility",
                  "Attributes"
                ],
                "title": "CreateEntitlementRequest",
                "properties": {
                  "Name": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Name"
                      },
                      {
                        "description": "The name of the entitlement."
                      }
                    ]
                  },
                  "StackName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Name"
                      },
                      {
                        "description": "The name of the stack with which the entitlement is associated."
                      }
                    ]
                  },
                  "Description": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Description"
                      },
                      {
                        "description": "The description of the entitlement."
                      }
                    ]
                  },
                  "AppVisibility": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/AppVisibility"
                      },
                      {
                        "description": "Specifies whether all or selected apps are entitled."
                      }
                    ]
                  },
                  "Attributes": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/EntitlementAttributeList"
                      },
                      {
                        "description": "The attributes of the entitlement."
                      }
                    ]
                  }
                }
              },
              "EntitlementAlreadyExistsException": {},
              "CreateFleetResult": {
                "type": "object",
                "properties": {
                  "Fleet": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Fleet"
                      },
                      {
                        "description": "Information about the fleet."
                      }
                    ]
                  }
                }
              },
              "CreateFleetRequest": {
                "type": "object",
                "required": [
                  "Name",
                  "InstanceType"
                ],
                "title": "CreateFleetRequest",
                "properties": {
                  "Name": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Name"
                      },
                      {
                        "description": "A unique name for the fleet."
                      }
                    ]
                  },
                  "ImageName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/String"
                      },
                      {
                        "description": "The name of the image used to create the fleet."
                      }
                    ]
                  },
                  "ImageArn": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Arn"
                      },
                      {
                        "description": "The ARN of the public, private, or shared image to use."
                      }
                    ]
                  },
                  "InstanceType": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/String"
                      },
                      {
                        "description": "<p>The instance type to use when launching fleet instances. The following instance types are available:</p> <ul> <li> <p>stream.standard.small</p> </li> <li> <p>stream.standard.medium</p> </li> <li> <p>stream.standard.large</p> </li> <li> <p>stream.standard.xlarge</p> </li> <li> <p>stream.standard.2xlarge</p> </li> <li> <p>stream.compute.large</p> </li> <li> <p>stream.compute.xlarge</p> </li> <li> <p>stream.compute.2xlarge</p> </li> <li> <p>stream.compute.4xlarge</p> </li> <li> <p>stream.compute.8xlarge</p> </li> <li> <p>stream.memory.large</p> </li> <li> <p>stream.memory.xlarge</p> </li> <li> <p>stream.memory.2xlarge</p> </li> <li> <p>stream.memory.4xlarge</p> </li> <li> <p>stream.memory.8xlarge</p> </li> <li> <p>stream.memory.z1d.large</p> </li> <li> <p>stream.memory.z1d.xlarge</p> </li> <li> <p>stream.memory.z1d.2xlarge</p> </li> <li> <p>stream.memory.z1d.3xlarge</p> </li> <li> <p>stream.memory.z1d.6xlarge</p> </li> <li> <p>stream.memory.z1d.12xlarge</p> </li> <li> <p>stream.graphics-design.large</p> </li> <li> <p>stream.graphics-design.xlarge</p> </li> <li> <p>stream.graphics-design.2xlarge</p> </li> <li> <p>stream.graphics-design.4xlarge</p> </li> <li> <p>stream.graphics-desktop.2xlarge</p> </li> <li> <p>stream.graphics.g4dn.xlarge</p> </li> <li> <p>stream.graphics.g4dn.2xlarge</p> </li> <li> <p>stream.graphics.g4dn.4xlarge</p> </li> <li> <p>stream.graphics.g4dn.8xlarge</p> </li> <li> <p>stream.graphics.g4dn.12xlarge</p> </li> <li> <p>stream.graphics.g4dn.16xlarge</p> </li> <li> <p>stream.graphics-pro.4xlarge</p> </li> <li> <p>stream.graphics-pro.8xlarge</p> </li> <li> <p>stream.graphics-pro.16xlarge</p> </li> </ul> <p>The following instance types are available for Elastic fleets:</p> <ul> <li> <p>stream.standard.small</p> </li> <li> <p>stream.standard.medium</p> </li> <li> <p>stream.standard.large</p> </li> <li> <p>stream.standard.xlarge</p> </li> <li> <p>stream.standard.2xlarge</p> </li> </ul>"
                      }
                    ]
                  },
                  "FleetType": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/FleetType"
                      },
                      {
                        "description": "<p>The fleet type.</p> <dl> <dt>ALWAYS_ON</dt> <dd> <p>Provides users with instant-on access to their apps. You are charged for all running instances in your fleet, even if no users are streaming apps.</p> </dd> <dt>ON_DEMAND</dt> <dd> <p>Provide users with access to applications after they connect, which takes one to two minutes. You are charged for instance streaming when users are connected and a small hourly fee for instances that are not streaming apps.</p> </dd> </dl>"
                      }
                    ]
                  },
                  "ComputeCapacity": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ComputeCapacity"
                      },
                      {
                        "description": "The desired capacity for the fleet. This is not allowed for Elastic fleets. For Elastic fleets, specify MaxConcurrentSessions instead."
                      }
                    ]
                  },
                  "VpcConfig": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/VpcConfig"
                      },
                      {
                        "description": "The VPC configuration for the fleet. This is required for Elastic fleets, but not required for other fleet types. Elastic fleets require that you specify at least two subnets in different availability zones."
                      }
                    ]
                  },
                  "MaxUserDurationInSeconds": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Integer"
                      },
                      {
                        "description": "<p>The maximum amount of time that a streaming session can remain active, in seconds. If users are still connected to a streaming instance five minutes before this limit is reached, they are prompted to save any open documents before being disconnected. After this time elapses, the instance is terminated and replaced by a new instance.</p> <p>Specify a value between 600 and 360000.</p>"
                      }
                    ]
                  },
                  "DisconnectTimeoutInSeconds": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Integer"
                      },
                      {
                        "description": "<p>The amount of time that a streaming session remains active after users disconnect. If users try to reconnect to the streaming session after a disconnection or network interruption within this time interval, they are connected to their previous session. Otherwise, they are connected to a new session with a new streaming instance. </p> <p>Specify a value between 60 and 360000.</p>"
                      }
                    ]
                  },
                  "Description": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Description"
                      },
                      {
                        "description": "The description to display."
                      }
                    ]
                  },
                  "DisplayName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/DisplayName"
                      },
                      {
                        "description": "The fleet name to display."
                      }
                    ]
                  },
                  "EnableDefaultInternetAccess": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/BooleanObject"
                      },
                      {
                        "description": "Enables or disables default internet access for the fleet."
                      }
                    ]
                  },
                  "DomainJoinInfo": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/DomainJoinInfo"
                      },
                      {
                        "description": "The name of the directory and organizational unit (OU) to use to join the fleet to a Microsoft Active Directory domain. This is not allowed for Elastic fleets. "
                      }
                    ]
                  },
                  "Tags": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Tags"
                      },
                      {
                        "description": "<p>The tags to associate with the fleet. A tag is a key-value pair, and the value is optional. For example, Environment=Test. If you do not specify a value, Environment=. </p> <p>If you do not specify a value, the value is set to an empty string.</p> <p>Generally allowed characters are: letters, numbers, and spaces representable in UTF-8, and the following special characters: </p> <p>_ . : / = + \\ - @</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/appstream2/latest/developerguide/tagging-basic.html\">Tagging Your Resources</a> in the <i>Amazon AppStream 2.0 Administration Guide</i>.</p>"
                      }
                    ]
                  },
                  "IdleDisconnectTimeoutInSeconds": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Integer"
                      },
                      {
                        "description": "<p>The amount of time that users can be idle (inactive) before they are disconnected from their streaming session and the <code>DisconnectTimeoutInSeconds</code> time interval begins. Users are notified before they are disconnected due to inactivity. If they try to reconnect to the streaming session before the time interval specified in <code>DisconnectTimeoutInSeconds</code> elapses, they are connected to their previous session. Users are considered idle when they stop providing keyboard or mouse input during their streaming session. File uploads and downloads, audio in, audio out, and pixels changing do not qualify as user activity. If users continue to be idle after the time interval in <code>IdleDisconnectTimeoutInSeconds</code> elapses, they are disconnected.</p> <p>To prevent users from being disconnected due to inactivity, specify a value of 0. Otherwise, specify a value between 60 and 3600. The default value is 0.</p> <note> <p>If you enable this feature, we recommend that you specify a value that corresponds exactly to a whole number of minutes (for example, 60, 120, and 180). If you don't do this, the value is rounded to the nearest minute. For example, if you specify a value of 70, users are disconnected after 1 minute of inactivity. If you specify a value that is at the midpoint between two different minutes, the value is rounded up. For example, if you specify a value of 90, users are disconnected after 2 minutes of inactivity. </p> </note>"
                      }
                    ]
                  },
                  "IamRoleArn": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Arn"
                      },
                      {
                        "description": "<p>The Amazon Resource Name (ARN) of the IAM role to apply to the fleet. To assume a role, a fleet instance calls the AWS Security Token Service (STS) <code>AssumeRole</code> API operation and passes the ARN of the role to use. The operation creates a new session with temporary credentials. AppStream 2.0 retrieves the temporary credentials and creates the <b>appstream_machine_role</b> credential profile on the instance.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/appstream2/latest/developerguide/using-iam-roles-to-grant-permissions-to-applications-scripts-streaming-instances.html\">Using an IAM Role to Grant Permissions to Applications and Scripts Running on AppStream 2.0 Streaming Instances</a> in the <i>Amazon AppStream 2.0 Administration Guide</i>.</p>"
                      }
                    ]
                  },
                  "StreamView": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/StreamView"
                      },
                      {
                        "description": "<p>The AppStream 2.0 view that is displayed to your users when they stream from the fleet. When <code>APP</code> is specified, only the windows of applications opened by users display. When <code>DESKTOP</code> is specified, the standard desktop that is provided by the operating system displays.</p> <p>The default value is <code>APP</code>.</p>"
                      }
                    ]
                  },
                  "Platform": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/PlatformType"
                      },
                      {
                        "description": "The fleet platform. WINDOWS_SERVER_2019 and AMAZON_LINUX2 are supported for Elastic fleets. "
                      }
                    ]
                  },
                  "MaxConcurrentSessions": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Integer"
                      },
                      {
                        "description": "The maximum concurrent sessions of the Elastic fleet. This is required for Elastic fleets, and not allowed for other fleet types."
                      }
                    ]
                  },
                  "UsbDeviceFilterStrings": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/UsbDeviceFilterStrings"
                      },
                      {
                        "description": "The USB device filter strings that specify which USB devices a user can redirect to the fleet streaming session, when using the Windows native client. This is allowed but not required for Elastic fleets."
                      }
                    ]
                  },
                  "SessionScriptS3Location": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/S3Location"
                      },
                      {
                        "description": "The S3 location of the session scripts configuration zip file. This only applies to Elastic fleets."
                      }
                    ]
                  }
                }
              },
              "RequestLimitExceededException": {},
              "CreateImageBuilderResult": {
                "type": "object",
                "properties": {
                  "ImageBuilder": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ImageBuilder"
                      },
                      {
                        "description": "Information about the image builder."
                      }
                    ]
                  }
                }
              },
              "CreateImageBuilderRequest": {
                "type": "object",
                "required": [
                  "Name",
                  "InstanceType"
                ],
                "title": "CreateImageBuilderRequest",
                "properties": {
                  "Name": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Name"
                      },
                      {
                        "description": "A unique name for the image builder."
                      }
                    ]
                  },
                  "ImageName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/String"
                      },
                      {
                        "description": "The name of the image used to create the image builder."
                      }
                    ]
                  },
                  "ImageArn": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Arn"
                      },
                      {
                        "description": "The ARN of the public, private, or shared image to use."
                      }
                    ]
                  },
                  "InstanceType": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/String"
                      },
                      {
                        "description": "<p>The instance type to use when launching the image builder. The following instance types are available:</p> <ul> <li> <p>stream.standard.small</p> </li> <li> <p>stream.standard.medium</p> </li> <li> <p>stream.standard.large</p> </li> <li> <p>stream.compute.large</p> </li> <li> <p>stream.compute.xlarge</p> </li> <li> <p>stream.compute.2xlarge</p> </li> <li> <p>stream.compute.4xlarge</p> </li> <li> <p>stream.compute.8xlarge</p> </li> <li> <p>stream.memory.large</p> </li> <li> <p>stream.memory.xlarge</p> </li> <li> <p>stream.memory.2xlarge</p> </li> <li> <p>stream.memory.4xlarge</p> </li> <li> <p>stream.memory.8xlarge</p> </li> <li> <p>stream.memory.z1d.large</p> </li> <li> <p>stream.memory.z1d.xlarge</p> </li> <li> <p>stream.memory.z1d.2xlarge</p> </li> <li> <p>stream.memory.z1d.3xlarge</p> </li> <li> <p>stream.memory.z1d.6xlarge</p> </li> <li> <p>stream.memory.z1d.12xlarge</p> </li> <li> <p>stream.graphics-design.large</p> </li> <li> <p>stream.graphics-design.xlarge</p> </li> <li> <p>stream.graphics-design.2xlarge</p> </li> <li> <p>stream.graphics-design.4xlarge</p> </li> <li> <p>stream.graphics-desktop.2xlarge</p> </li> <li> <p>stream.graphics.g4dn.xlarge</p> </li> <li> <p>stream.graphics.g4dn.2xlarge</p> </li> <li> <p>stream.graphics.g4dn.4xlarge</p> </li> <li> <p>stream.graphics.g4dn.8xlarge</p> </li> <li> <p>stream.graphics.g4dn.12xlarge</p> </li> <li> <p>stream.graphics.g4dn.16xlarge</p> </li> <li> <p>stream.graphics-pro.4xlarge</p> </li> <li> <p>stream.graphics-pro.8xlarge</p> </li> <li> <p>stream.graphics-pro.16xlarge</p> </li> </ul>"
                      }
                    ]
                  },
                  "Description": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Description"
                      },
                      {
                        "description": "The description to display."
                      }
                    ]
                  },
                  "DisplayName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/DisplayName"
                      },
                      {
                        "description": "The image builder name to display."
                      }
                    ]
                  },
                  "VpcConfig": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/VpcConfig"
                      },
                      {
                        "description": "The VPC configuration for the image builder. You can specify only one subnet."
                      }
                    ]
                  },
                  "IamRoleArn": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Arn"
                      },
                      {
                        "description": "<p>The Amazon Resource Name (ARN) of the IAM role to apply to the image builder. To assume a role, the image builder calls the AWS Security Token Service (STS) <code>AssumeRole</code> API operation and passes the ARN of the role to use. The operation creates a new session with temporary credentials. AppStream 2.0 retrieves the temporary credentials and creates the <b>appstream_machine_role</b> credential profile on the instance.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/appstream2/latest/developerguide/using-iam-roles-to-grant-permissions-to-applications-scripts-streaming-instances.html\">Using an IAM Role to Grant Permissions to Applications and Scripts Running on AppStream 2.0 Streaming Instances</a> in the <i>Amazon AppStream 2.0 Administration Guide</i>.</p>"
                      }
                    ]
                  },
                  "EnableDefaultInternetAccess": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/BooleanObject"
                      },
                      {
                        "description": "Enables or disables default internet access for the image builder."
                      }
                    ]
                  },
                  "DomainJoinInfo": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/DomainJoinInfo"
                      },
                      {
                        "description": "The name of the directory and organizational unit (OU) to use to join the image builder to a Microsoft Active Directory domain. "
                      }
                    ]
                  },
                  "AppstreamAgentVersion": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/AppstreamAgentVersion"
                      },
                      {
                        "description": "The version of the AppStream 2.0 agent to use for this image builder. To use the latest version of the AppStream 2.0 agent, specify [LATEST]. "
                      }
                    ]
                  },
                  "Tags": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Tags"
                      },
                      {
                        "description": "<p>The tags to associate with the image builder. A tag is a key-value pair, and the value is optional. For example, Environment=Test. If you do not specify a value, Environment=. </p> <p>Generally allowed characters are: letters, numbers, and spaces representable in UTF-8, and the following special characters: </p> <p>_ . : / = + \\ - @</p> <p>If you do not specify a value, the value is set to an empty string.</p> <p>For more information about tags, see <a href=\"https://docs.aws.amazon.com/appstream2/latest/developerguide/tagging-basic.html\">Tagging Your Resources</a> in the <i>Amazon AppStream 2.0 Administration Guide</i>.</p>"
                      }
                    ]
                  },
                  "AccessEndpoints": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/AccessEndpointList"
                      },
                      {
                        "description": "The list of interface VPC endpoint (interface endpoint) objects. Administrators can connect to the image builder only through the specified endpoints."
                      }
                    ]
                  }
                }
              },
              "CreateImageBuilderStreamingURLResult": {
                "type": "object",
                "properties": {
                  "StreamingURL": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/String"
                      },
                      {
                        "description": "The URL to start the AppStream 2.0 streaming session."
                      }
                    ]
                  },
                  "Expires": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Timestamp"
                      },
                      {
                        "description": "The elapsed time, in seconds after the Unix epoch, when this URL expires."
                      }
                    ]
                  }
                }
              },
              "CreateImageBuilderStreamingURLRequest": {
                "type": "object",
                "required": [
                  "Name"
                ],
                "title": "CreateImageBuilderStreamingURLRequest",
                "properties": {
                  "Name": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/String"
                      },
                      {
                        "description": "The name of the image builder."
                      }
                    ]
                  },
                  "Validity": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Long"
                      },
                      {
                        "description": "The time that the streaming URL will be valid, in seconds. Specify a value between 1 and 604800 seconds. The default is 3600 seconds."
                      }
                    ]
                  }
                }
              },
              "CreateStackResult": {
                "type": "object",
                "properties": {
                  "Stack": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Stack"
                      },
                      {
                        "description": "Information about the stack."
                      }
                    ]
                  }
                }
              },
              "CreateStackRequest": {
                "type": "object",
                "required": [
                  "Name"
                ],
                "title": "CreateStackRequest",
                "properties": {
                  "Name": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Name"
                      },
                      {
                        "description": "The name of the stack."
                      }
                    ]
                  },
                  "Description": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Description"
                      },
                      {
                        "description": "The description to display."
                      }
                    ]
                  },
                  "DisplayName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/DisplayName"
                      },
                      {
                        "description": "The stack name to display."
                      }
                    ]
                  },
                  "StorageConnectors": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/StorageConnectorList"
                      },
                      {
                        "description": "The storage connectors to enable."
                      }
                    ]
                  },
                  "RedirectURL": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/RedirectURL"
                      },
                      {
                        "description": "The URL that users are redirected to after their streaming session ends."
                      }
                    ]
                  },
                  "FeedbackURL": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/FeedbackURL"
                      },
                      {
                        "description": "The URL that users are redirected to after they click the Send Feedback link. If no URL is specified, no Send Feedback link is displayed."
                      }
                    ]
                  },
                  "UserSettings": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/UserSettingList"
                      },
                      {
                        "description": "The actions that are enabled or disabled for users during their streaming sessions. By default, these actions are enabled. "
                      }
                    ]
                  },
                  "ApplicationSettings": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ApplicationSettings"
                      },
                      {
                        "description": "The persistent application settings for users of a stack. When these settings are enabled, changes that users make to applications and Windows settings are automatically saved after each session and applied to the next session."
                      }
                    ]
                  },
                  "Tags": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Tags"
                      },
                      {
                        "description": "<p>The tags to associate with the stack. A tag is a key-value pair, and the value is optional. For example, Environment=Test. If you do not specify a value, Environment=. </p> <p>If you do not specify a value, the value is set to an empty string.</p> <p>Generally allowed characters are: letters, numbers, and spaces representable in UTF-8, and the following special characters: </p> <p>_ . : / = + \\ - @</p> <p>For more information about tags, see <a href=\"https://docs.aws.amazon.com/appstream2/latest/developerguide/tagging-basic.html\">Tagging Your Resources</a> in the <i>Amazon AppStream 2.0 Administration Guide</i>.</p>"
                      }
                    ]
                  },
                  "AccessEndpoints": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/AccessEndpointList"
                      },
                      {
                        "description": "The list of interface VPC endpoint (interface endpoint) objects. Users of the stack can connect to AppStream 2.0 only through the specified endpoints."
                      }
                    ]
                  },
                  "EmbedHostDomains": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/EmbedHostDomains"
                      },
                      {
                        "description": "The domains where AppStream 2.0 streaming sessions can be embedded in an iframe. You must approve the domains that you want to host embedded AppStream 2.0 streaming sessions. "
                      }
                    ]
                  },
                  "StreamingExperienceSettings": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/StreamingExperienceSettings"
                      },
                      {
                        "description": "The streaming protocol you want your stack to prefer. This can be UDP or TCP. Currently, UDP is only supported in the Windows native client."
                      }
                    ]
                  }
                }
              },
              "CreateStreamingURLResult": {
                "type": "object",
                "properties": {
                  "StreamingURL": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/String"
                      },
                      {
                        "description": "The URL to start the AppStream 2.0 streaming session."
                      }
                    ]
                  },
                  "Expires": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Timestamp"
                      },
                      {
                        "description": "The elapsed time, in seconds after the Unix epoch, when this URL expires."
                      }
                    ]
                  }
                }
              },
              "CreateStreamingURLRequest": {
                "type": "object",
                "required": [
                  "StackName",
                  "FleetName",
                  "UserId"
                ],
                "title": "CreateStreamingURLRequest",
                "properties": {
                  "StackName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/String"
                      },
                      {
                        "description": "The name of the stack."
                      }
                    ]
                  },
                  "FleetName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/String"
                      },
                      {
                        "description": "The name of the fleet."
                      }
                    ]
                  },
                  "UserId": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/StreamingUrlUserId"
                      },
                      {
                        "description": "The identifier of the user."
                      }
                    ]
                  },
                  "ApplicationId": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/String"
                      },
                      {
                        "description": "The name of the application to launch after the session starts. This is the name that you specified as <b>Name</b> in the Image Assistant. If your fleet is enabled for the <b>Desktop</b> stream view, you can also choose to launch directly to the operating system desktop. To do so, specify <b>Desktop</b>."
                      }
                    ]
                  },
                  "Validity": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Long"
                      },
                      {
                        "description": "The time that the streaming URL will be valid, in seconds. Specify a value between 1 and 604800 seconds. The default is 60 seconds."
                      }
                    ]
                  },
                  "SessionContext": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/String"
                      },
                      {
                        "description": "The session context. For more information, see <a href=\"https://docs.aws.amazon.com/appstream2/latest/developerguide/managing-stacks-fleets.html#managing-stacks-fleets-parameters\">Session Context</a> in the <i>Amazon AppStream 2.0 Administration Guide</i>."
                      }
                    ]
                  }
                }
              },
              "CreateUpdatedImageResult": {
                "type": "object",
                "properties": {
                  "image": {
                    "$ref": "#/components/schemas/Image"
                  },
                  "canUpdateImage": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Boolean"
                      },
                      {
                        "description": "Indicates whether a new image can be created."
                      }
                    ]
                  }
                }
              },
              "CreateUpdatedImageRequest": {
                "type": "object",
                "required": [
                  "existingImageName",
                  "newImageName"
                ],
                "title": "CreateUpdatedImageRequest",
                "properties": {
                  "existingImageName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Name"
                      },
                      {
                        "description": "The name of the image to update."
                      }
                    ]
                  },
                  "newImageName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Name"
                      },
                      {
                        "description": "The name of the new image. The name must be unique within the AWS account and Region."
                      }
                    ]
                  },
                  "newImageDescription": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Description"
                      },
                      {
                        "description": "The description to display for the new image."
                      }
                    ]
                  },
                  "newImageDisplayName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/DisplayName"
                      },
                      {
                        "description": "The name to display for the new image."
                      }
                    ]
                  },
                  "newImageTags": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Tags"
                      },
                      {
                        "description": "<p>The tags to associate with the new image. A tag is a key-value pair, and the value is optional. For example, Environment=Test. If you do not specify a value, Environment=. </p> <p>Generally allowed characters are: letters, numbers, and spaces representable in UTF-8, and the following special characters: </p> <p>_ . : / = + \\ - @</p> <p>If you do not specify a value, the value is set to an empty string.</p> <p>For more information about tags, see <a href=\"https://docs.aws.amazon.com/appstream2/latest/developerguide/tagging-basic.html\">Tagging Your Resources</a> in the <i>Amazon AppStream 2.0 Administration Guide</i>.</p>"
                      }
                    ]
                  },
                  "dryRun": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Boolean"
                      },
                      {
                        "description": "Indicates whether to display the status of image update availability before AppStream 2.0 initiates the process of creating a new updated image. If this value is set to <code>true</code>, AppStream 2.0 displays whether image updates are available. If this value is set to <code>false</code>, AppStream 2.0 initiates the process of creating a new updated image without displaying whether image updates are available."
                      }
                    ]
                  }
                }
              },
              "CreateUsageReportSubscriptionResult": {
                "type": "object",
                "properties": {
                  "S3BucketName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/String"
                      },
                      {
                        "description": "<p>The Amazon S3 bucket where generated reports are stored.</p> <p>If you enabled on-instance session scripts and Amazon S3 logging for your session script configuration, AppStream 2.0 created an S3 bucket to store the script output. The bucket is unique to your account and Region. When you enable usage reporting in this case, AppStream 2.0 uses the same bucket to store your usage reports. If you haven't already enabled on-instance session scripts, when you enable usage reports, AppStream 2.0 creates a new S3 bucket.</p>"
                      }
                    ]
                  },
                  "Schedule": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/UsageReportSchedule"
                      },
                      {
                        "description": "The schedule for generating usage reports."
                      }
                    ]
                  }
                }
              },
              "CreateUsageReportSubscriptionRequest": {
                "type": "object",
                "title": "CreateUsageReportSubscriptionRequest",
                "properties": {}
              },
              "CreateUserResult": {
                "type": "object",
                "properties": {}
              },
              "CreateUserRequest": {
                "type": "object",
                "required": [
                  "UserName",
                  "AuthenticationType"
                ],
                "title": "CreateUserRequest",
                "properties": {
                  "UserName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Username"
                      },
                      {
                        "description": "<p>The email address of the user.</p> <note> <p>Users' email addresses are case-sensitive. During login, if they specify an email address that doesn't use the same capitalization as the email address specified when their user pool account was created, a \"user does not exist\" error message displays.</p> </note>"
                      }
                    ]
                  },
                  "MessageAction": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/MessageAction"
                      },
                      {
                        "description": "<p>The action to take for the welcome email that is sent to a user after the user is created in the user pool. If you specify SUPPRESS, no email is sent. If you specify RESEND, do not specify the first name or last name of the user. If the value is null, the email is sent. </p> <note> <p>The temporary password in the welcome email is valid for only 7 days. If users don’t set their passwords within 7 days, you must send them a new welcome email.</p> </note>"
                      }
                    ]
                  },
                  "FirstName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/UserAttributeValue"
                      },
                      {
                        "description": "The first name, or given name, of the user."
                      }
                    ]
                  },
                  "LastName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/UserAttributeValue"
                      },
                      {
                        "description": "The last name, or surname, of the user."
                      }
                    ]
                  },
                  "AuthenticationType": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/AuthenticationType"
                      },
                      {
                        "description": "The authentication type for the user. You must specify USERPOOL. "
                      }
                    ]
                  }
                }
              },
              "DeleteAppBlockResult": {
                "type": "object",
                "properties": {}
              },
              "DeleteAppBlockRequest": {
                "type": "object",
                "required": [
                  "Name"
                ],
                "title": "DeleteAppBlockRequest",
                "properties": {
                  "Name": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Name"
                      },
                      {
                        "description": "The name of the app block."
                      }
                    ]
                  }
                }
              },
              "ResourceInUseException": {},
              "DeleteApplicationResult": {
                "type": "object",
                "properties": {}
              },
              "DeleteApplicationRequest": {
                "type": "object",
                "required": [
                  "Name"
                ],
                "title": "DeleteApplicationRequest",
                "properties": {
                  "Name": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Name"
                      },
                      {
                        "description": "The name of the application."
                      }
                    ]
                  }
                }
              },
              "DeleteDirectoryConfigResult": {
                "type": "object",
                "properties": {}
              },
              "DeleteDirectoryConfigRequest": {
                "type": "object",
                "required": [
                  "DirectoryName"
                ],
                "title": "DeleteDirectoryConfigRequest",
                "properties": {
                  "DirectoryName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/DirectoryName"
                      },
                      {
                        "description": "The name of the directory configuration."
                      }
                    ]
                  }
                }
              },
              "DeleteEntitlementResult": {
                "type": "object",
                "properties": {}
              },
              "DeleteEntitlementRequest": {
                "type": "object",
                "required": [
                  "Name",
                  "StackName"
                ],
                "title": "DeleteEntitlementRequest",
                "properties": {
                  "Name": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Name"
                      },
                      {
                        "description": "The name of the entitlement."
                      }
                    ]
                  },
                  "StackName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Name"
                      },
                      {
                        "description": "The name of the stack with which the entitlement is associated."
                      }
                    ]
                  }
                }
              },
              "DeleteFleetResult": {
                "type": "object",
                "properties": {}
              },
              "DeleteFleetRequest": {
                "type": "object",
                "required": [
                  "Name"
                ],
                "title": "DeleteFleetRequest",
                "properties": {
                  "Name": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/String"
                      },
                      {
                        "description": "The name of the fleet."
                      }
                    ]
                  }
                }
              },
              "DeleteImageResult": {
                "type": "object",
                "properties": {
                  "Image": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Image"
                      },
                      {
                        "description": "Information about the image."
                      }
                    ]
                  }
                }
              },
              "DeleteImageRequest": {
                "type": "object",
                "required": [
                  "Name"
                ],
                "title": "DeleteImageRequest",
                "properties": {
                  "Name": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Name"
                      },
                      {
                        "description": "The name of the image."
                      }
                    ]
                  }
                }
              },
              "DeleteImageBuilderResult": {
                "type": "object",
                "properties": {
                  "ImageBuilder": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ImageBuilder"
                      },
                      {
                        "description": "Information about the image builder."
                      }
                    ]
                  }
                }
              },
              "DeleteImageBuilderRequest": {
                "type": "object",
                "required": [
                  "Name"
                ],
                "title": "DeleteImageBuilderRequest",
                "properties": {
                  "Name": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Name"
                      },
                      {
                        "description": "The name of the image builder."
                      }
                    ]
                  }
                }
              },
              "DeleteImagePermissionsResult": {
                "type": "object",
                "properties": {}
              },
              "DeleteImagePermissionsRequest": {
                "type": "object",
                "required": [
                  "Name",
                  "SharedAccountId"
                ],
                "title": "DeleteImagePermissionsRequest",
                "properties": {
                  "Name": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Name"
                      },
                      {
                        "description": "The name of the private image."
                      }
                    ]
                  },
                  "SharedAccountId": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/AwsAccountId"
                      },
                      {
                        "description": "The 12-digit identifier of the AWS account for which to delete image permissions."
                      }
                    ]
                  }
                }
              },
              "DeleteStackResult": {
                "type": "object",
                "properties": {}
              },
              "DeleteStackRequest": {
                "type": "object",
                "required": [
                  "Name"
                ],
                "title": "DeleteStackRequest",
                "properties": {
                  "Name": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/String"
                      },
                      {
                        "description": "The name of the stack."
                      }
                    ]
                  }
                }
              },
              "DeleteUsageReportSubscriptionResult": {
                "type": "object",
                "properties": {}
              },
              "DeleteUsageReportSubscriptionRequest": {
                "type": "object",
                "title": "DeleteUsageReportSubscriptionRequest",
                "properties": {}
              },
              "DeleteUserResult": {
                "type": "object",
                "properties": {}
              },
              "DeleteUserRequest": {
                "type": "object",
                "required": [
                  "UserName",
                  "AuthenticationType"
                ],
                "title": "DeleteUserRequest",
                "properties": {
                  "UserName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Username"
                      },
                      {
                        "description": "<p>The email address of the user.</p> <note> <p>Users' email addresses are case-sensitive.</p> </note>"
                      }
                    ]
                  },
                  "AuthenticationType": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/AuthenticationType"
                      },
                      {
                        "description": "The authentication type for the user. You must specify USERPOOL."
                      }
                    ]
                  }
                }
              },
              "DescribeAppBlocksResult": {
                "type": "object",
                "properties": {
                  "AppBlocks": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/AppBlocks"
                      },
                      {
                        "description": "The app blocks in the list."
                      }
                    ]
                  },
                  "NextToken": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/String"
                      },
                      {
                        "description": "The pagination token used to retrieve the next page of results for this operation."
                      }
                    ]
                  }
                }
              },
              "DescribeAppBlocksRequest": {
                "type": "object",
                "title": "DescribeAppBlocksRequest",
                "properties": {
                  "Arns": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ArnList"
                      },
                      {
                        "description": "The ARNs of the app blocks."
                      }
                    ]
                  },
                  "NextToken": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/String"
                      },
                      {
                        "description": "The pagination token used to retrieve the next page of results for this operation."
                      }
                    ]
                  },
                  "MaxResults": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Integer"
                      },
                      {
                        "description": "The maximum size of each page of results."
                      }
                    ]
                  }
                }
              },
              "DescribeApplicationFleetAssociationsResult": {
                "type": "object",
                "properties": {
                  "ApplicationFleetAssociations": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ApplicationFleetAssociationList"
                      },
                      {
                        "description": "The application fleet associations in the list."
                      }
                    ]
                  },
                  "NextToken": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/String"
                      },
                      {
                        "description": "The pagination token used to retrieve the next page of results for this operation."
                      }
                    ]
                  }
                }
              },
              "DescribeApplicationFleetAssociationsRequest": {
                "type": "object",
                "title": "DescribeApplicationFleetAssociationsRequest",
                "properties": {
                  "FleetName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Name"
                      },
                      {
                        "description": "The name of the fleet."
                      }
                    ]
                  },
                  "ApplicationArn": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Arn"
                      },
                      {
                        "description": "The ARN of the application."
                      }
                    ]
                  },
                  "MaxResults": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Integer"
                      },
                      {
                        "description": "The maximum size of each page of results."
                      }
                    ]
                  },
                  "NextToken": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/String"
                      },
                      {
                        "description": "The pagination token used to retrieve the next page of results for this operation."
                      }
                    ]
                  }
                }
              },
              "DescribeApplicationsResult": {
                "type": "object",
                "properties": {
                  "Applications": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Applications"
                      },
                      {
                        "description": "The applications in the list."
                      }
                    ]
                  },
                  "NextToken": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/String"
                      },
                      {
                        "description": "The pagination token used to retrieve the next page of results for this operation."
                      }
                    ]
                  }
                }
              },
              "DescribeApplicationsRequest": {
                "type": "object",
                "title": "DescribeApplicationsRequest",
                "properties": {
                  "Arns": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ArnList"
                      },
                      {
                        "description": "The ARNs for the applications."
                      }
                    ]
                  },
                  "NextToken": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/String"
                      },
                      {
                        "description": "The pagination token used to retrieve the next page of results for this operation."
                      }
                    ]
                  },
                  "MaxResults": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Integer"
                      },
                      {
                        "description": "The maximum size of each page of results."
                      }
                    ]
                  }
                }
              },
              "DescribeDirectoryConfigsResult": {
                "type": "object",
                "properties": {
                  "DirectoryConfigs": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/DirectoryConfigList"
                      },
                      {
                        "description": "Information about the directory configurations. Note that although the response syntax in this topic includes the account password, this password is not returned in the actual response. "
                      }
                    ]
                  },
                  "NextToken": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/String"
                      },
                      {
                        "description": "The pagination token to use to retrieve the next page of results for this operation. If there are no more pages, this value is null."
                      }
                    ]
                  }
                }
              },
              "DescribeDirectoryConfigsRequest": {
                "type": "object",
                "title": "DescribeDirectoryConfigsRequest",
                "properties": {
                  "DirectoryNames": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/DirectoryNameList"
                      },
                      {
                        "description": "The directory names."
                      }
                    ]
                  },
                  "MaxResults": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Integer"
                      },
                      {
                        "description": "The maximum size of each page of results."
                      }
                    ]
                  },
                  "NextToken": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/String"
                      },
                      {
                        "description": "The pagination token to use to retrieve the next page of results for this operation. If this value is null, it retrieves the first page."
                      }
                    ]
                  }
                }
              },
              "DescribeEntitlementsResult": {
                "type": "object",
                "properties": {
                  "Entitlements": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/EntitlementList"
                      },
                      {
                        "description": "The entitlements."
                      }
                    ]
                  },
                  "NextToken": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/String"
                      },
                      {
                        "description": "The pagination token used to retrieve the next page of results for this operation."
                      }
                    ]
                  }
                }
              },
              "DescribeEntitlementsRequest": {
                "type": "object",
                "required": [
                  "StackName"
                ],
                "title": "DescribeEntitlementsRequest",
                "properties": {
                  "Name": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Name"
                      },
                      {
                        "description": "The name of the entitlement."
                      }
                    ]
                  },
                  "StackName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Name"
                      },
                      {
                        "description": "The name of the stack with which the entitlement is associated."
                      }
                    ]
                  },
                  "NextToken": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/String"
                      },
                      {
                        "description": "The pagination token used to retrieve the next page of results for this operation."
                      }
                    ]
                  },
                  "MaxResults": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Integer"
                      },
                      {
                        "description": "The maximum size of each page of results."
                      }
                    ]
                  }
                }
              },
              "DescribeFleetsResult": {
                "type": "object",
                "properties": {
                  "Fleets": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/FleetList"
                      },
                      {
                        "description": "Information about the fleets."
                      }
                    ]
                  },
                  "NextToken": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/String"
                      },
                      {
                        "description": "The pagination token to use to retrieve the next page of results for this operation. If there are no more pages, this value is null."
                      }
                    ]
                  }
                }
              },
              "DescribeFleetsRequest": {
                "type": "object",
                "title": "DescribeFleetsRequest",
                "properties": {
                  "Names": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/StringList"
                      },
                      {
                        "description": "The names of the fleets to describe."
                      }
                    ]
                  },
                  "NextToken": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/String"
                      },
                      {
                        "description": "The pagination token to use to retrieve the next page of results for this operation. If this value is null, it retrieves the first page."
                      }
                    ]
                  }
                }
              },
              "DescribeImageBuildersResult": {
                "type": "object",
                "properties": {
                  "ImageBuilders": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ImageBuilderList"
                      },
                      {
                        "description": "Information about the image builders."
                      }
                    ]
                  },
                  "NextToken": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/String"
                      },
                      {
                        "description": "The pagination token to use to retrieve the next page of results for this operation. If there are no more pages, this value is null."
                      }
                    ]
                  }
                }
              },
              "DescribeImageBuildersRequest": {
                "type": "object",
                "title": "DescribeImageBuildersRequest",
                "properties": {
                  "Names": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/StringList"
                      },
                      {
                        "description": "The names of the image builders to describe."
                      }
                    ]
                  },
                  "MaxResults": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Integer"
                      },
                      {
                        "description": "The maximum size of each page of results."
                      }
                    ]
                  },
                  "NextToken": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/String"
                      },
                      {
                        "description": "The pagination token to use to retrieve the next page of results for this operation. If this value is null, it retrieves the first page."
                      }
                    ]
                  }
                }
              },
              "DescribeImagePermissionsResult": {
                "type": "object",
                "properties": {
                  "Name": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Name"
                      },
                      {
                        "description": "The name of the private image."
                      }
                    ]
                  },
                  "SharedImagePermissionsList": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/SharedImagePermissionsList"
                      },
                      {
                        "description": "The permissions for a private image that you own. "
                      }
                    ]
                  },
                  "NextToken": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/String"
                      },
                      {
                        "description": "The pagination token to use to retrieve the next page of results for this operation. If there are no more pages, this value is null."
                      }
                    ]
                  }
                }
              },
              "DescribeImagePermissionsRequest": {
                "type": "object",
                "required": [
                  "Name"
                ],
                "title": "DescribeImagePermissionsRequest",
                "properties": {
                  "Name": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Name"
                      },
                      {
                        "description": "The name of the private image for which to describe permissions. The image must be one that you own. "
                      }
                    ]
                  },
                  "MaxResults": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/MaxResults"
                      },
                      {
                        "description": "The maximum size of each page of results."
                      }
                    ]
                  },
                  "SharedAwsAccountIds": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/AwsAccountIdList"
                      },
                      {
                        "description": "The 12-digit identifier of one or more AWS accounts with which the image is shared."
                      }
                    ]
                  },
                  "NextToken": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/String"
                      },
                      {
                        "description": "The pagination token to use to retrieve the next page of results for this operation. If this value is null, it retrieves the first page."
                      }
                    ]
                  }
                }
              },
              "DescribeImagesResult": {
                "type": "object",
                "properties": {
                  "Images": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ImageList"
                      },
                      {
                        "description": "Information about the images."
                      }
                    ]
                  },
                  "NextToken": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/String"
                      },
                      {
                        "description": "The pagination token to use to retrieve the next page of results for this operation. If there are no more pages, this value is null."
                      }
                    ]
                  }
                }
              },
              "DescribeImagesRequest": {
                "type": "object",
                "title": "DescribeImagesRequest",
                "properties": {
                  "Names": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/StringList"
                      },
                      {
                        "description": "The names of the public or private images to describe."
                      }
                    ]
                  },
                  "Arns": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ArnList"
                      },
                      {
                        "description": "The ARNs of the public, private, and shared images to describe."
                      }
                    ]
                  },
                  "Type": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/VisibilityType"
                      },
                      {
                        "description": "The type of image (public, private, or shared) to describe. "
                      }
                    ]
                  },
                  "NextToken": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/String"
                      },
                      {
                        "description": "The pagination token to use to retrieve the next page of results for this operation. If this value is null, it retrieves the first page."
                      }
                    ]
                  },
                  "MaxResults": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/DescribeImagesMaxResults"
                      },
                      {
                        "description": "The maximum size of each page of results."
                      }
                    ]
                  }
                }
              },
              "DescribeSessionsResult": {
                "type": "object",
                "properties": {
                  "Sessions": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/SessionList"
                      },
                      {
                        "description": "Information about the streaming sessions."
                      }
                    ]
                  },
                  "NextToken": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/String"
                      },
                      {
                        "description": "The pagination token to use to retrieve the next page of results for this operation. If there are no more pages, this value is null."
                      }
                    ]
                  }
                }
              },
              "DescribeSessionsRequest": {
                "type": "object",
                "required": [
                  "StackName",
                  "FleetName"
                ],
                "title": "DescribeSessionsRequest",
                "properties": {
                  "StackName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/String"
                      },
                      {
                        "description": "The name of the stack. This value is case-sensitive."
                      }
                    ]
                  },
                  "FleetName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/String"
                      },
                      {
                        "description": "The name of the fleet. This value is case-sensitive."
                      }
                    ]
                  },
                  "UserId": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/UserId"
                      },
                      {
                        "description": "The user identifier (ID). If you specify a user ID, you must also specify the authentication type."
                      }
                    ]
                  },
                  "NextToken": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/String"
                      },
                      {
                        "description": "The pagination token to use to retrieve the next page of results for this operation. If this value is null, it retrieves the first page."
                      }
                    ]
                  },
                  "Limit": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Integer"
                      },
                      {
                        "description": "The size of each page of results. The default value is 20 and the maximum value is 50."
                      }
                    ]
                  },
                  "AuthenticationType": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/AuthenticationType"
                      },
                      {
                        "description": "The authentication method. Specify <code>API</code> for a user authenticated using a streaming URL or <code>SAML</code> for a SAML federated user. The default is to authenticate users using a streaming URL."
                      }
                    ]
                  }
                }
              },
              "DescribeStacksResult": {
                "type": "object",
                "properties": {
                  "Stacks": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/StackList"
                      },
                      {
                        "description": "Information about the stacks."
                      }
                    ]
                  },
                  "NextToken": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/String"
                      },
                      {
                        "description": "The pagination token to use to retrieve the next page of results for this operation. If there are no more pages, this value is null."
                      }
                    ]
                  }
                }
              },
              "DescribeStacksRequest": {
                "type": "object",
                "title": "DescribeStacksRequest",
                "properties": {
                  "Names": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/StringList"
                      },
                      {
                        "description": "The names of the stacks to describe."
                      }
                    ]
                  },
                  "NextToken": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/String"
                      },
                      {
                        "description": "The pagination token to use to retrieve the next page of results for this operation. If this value is null, it retrieves the first page."
                      }
                    ]
                  }
                }
              },
              "DescribeUsageReportSubscriptionsResult": {
                "type": "object",
                "properties": {
                  "UsageReportSubscriptions": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/UsageReportSubscriptionList"
                      },
                      {
                        "description": "Information about the usage report subscription."
                      }
                    ]
                  },
                  "NextToken": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/String"
                      },
                      {
                        "description": "The pagination token to use to retrieve the next page of results for this operation. If there are no more pages, this value is null."
                      }
                    ]
                  }
                }
              },
              "DescribeUsageReportSubscriptionsRequest": {
                "type": "object",
                "title": "DescribeUsageReportSubscriptionsRequest",
                "properties": {
                  "MaxResults": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Integer"
                      },
                      {
                        "description": "The maximum size of each page of results."
                      }
                    ]
                  },
                  "NextToken": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/String"
                      },
                      {
                        "description": "The pagination token to use to retrieve the next page of results for this operation. If this value is null, it retrieves the first page."
                      }
                    ]
                  }
                }
              },
              "DescribeUserStackAssociationsResult": {
                "type": "object",
                "properties": {
                  "UserStackAssociations": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/UserStackAssociationList"
                      },
                      {
                        "description": "The UserStackAssociation objects."
                      }
                    ]
                  },
                  "NextToken": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/String"
                      },
                      {
                        "description": "The pagination token to use to retrieve the next page of results for this operation. If there are no more pages, this value is null."
                      }
                    ]
                  }
                }
              },
              "DescribeUserStackAssociationsRequest": {
                "type": "object",
                "title": "DescribeUserStackAssociationsRequest",
                "properties": {
                  "StackName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/String"
                      },
                      {
                        "description": "The name of the stack that is associated with the user."
                      }
                    ]
                  },
                  "UserName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Username"
                      },
                      {
                        "description": "<p>The email address of the user who is associated with the stack.</p> <note> <p>Users' email addresses are case-sensitive.</p> </note>"
                      }
                    ]
                  },
                  "AuthenticationType": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/AuthenticationType"
                      },
                      {
                        "description": "The authentication type for the user who is associated with the stack. You must specify USERPOOL."
                      }
                    ]
                  },
                  "MaxResults": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/MaxResults"
                      },
                      {
                        "description": "The maximum size of each page of results."
                      }
                    ]
                  },
                  "NextToken": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/String"
                      },
                      {
                        "description": "The pagination token to use to retrieve the next page of results for this operation. If this value is null, it retrieves the first page."
                      }
                    ]
                  }
                }
              },
              "DescribeUsersResult": {
                "type": "object",
                "properties": {
                  "Users": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/UserList"
                      },
                      {
                        "description": "Information about users in the user pool."
                      }
                    ]
                  },
                  "NextToken": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/String"
                      },
                      {
                        "description": "The pagination token to use to retrieve the next page of results for this operation. If there are no more pages, this value is null."
                      }
                    ]
                  }
                }
              },
              "DescribeUsersRequest": {
                "type": "object",
                "required": [
                  "AuthenticationType"
                ],
                "title": "DescribeUsersRequest",
                "properties": {
                  "AuthenticationType": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/AuthenticationType"
                      },
                      {
                        "description": "The authentication type for the users in the user pool to describe. You must specify USERPOOL."
                      }
                    ]
                  },
                  "MaxResults": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Integer"
                      },
                      {
                        "description": "The maximum size of each page of results."
                      }
                    ]
                  },
                  "NextToken": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/String"
                      },
                      {
                        "description": "The pagination token to use to retrieve the next page of results for this operation. If this value is null, it retrieves the first page."
                      }
                    ]
                  }
                }
              },
              "DisableUserResult": {
                "type": "object",
                "properties": {}
              },
              "DisableUserRequest": {
                "type": "object",
                "required": [
                  "UserName",
                  "AuthenticationType"
                ],
                "title": "DisableUserRequest",
                "properties": {
                  "UserName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Username"
                      },
                      {
                        "description": "<p>The email address of the user.</p> <note> <p>Users' email addresses are case-sensitive.</p> </note>"
                      }
                    ]
                  },
                  "AuthenticationType": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/AuthenticationType"
                      },
                      {
                        "description": "The authentication type for the user. You must specify USERPOOL."
                      }
                    ]
                  }
                }
              },
              "DisassociateApplicationFleetResult": {
                "type": "object",
                "properties": {}
              },
              "DisassociateApplicationFleetRequest": {
                "type": "object",
                "required": [
                  "FleetName",
                  "ApplicationArn"
                ],
                "title": "DisassociateApplicationFleetRequest",
                "properties": {
                  "FleetName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Name"
                      },
                      {
                        "description": "The name of the fleet."
                      }
                    ]
                  },
                  "ApplicationArn": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Arn"
                      },
                      {
                        "description": "The ARN of the application."
                      }
                    ]
                  }
                }
              },
              "DisassociateApplicationFromEntitlementResult": {
                "type": "object",
                "properties": {}
              },
              "DisassociateApplicationFromEntitlementRequest": {
                "type": "object",
                "required": [
                  "StackName",
                  "EntitlementName",
                  "ApplicationIdentifier"
                ],
                "title": "DisassociateApplicationFromEntitlementRequest",
                "properties": {
                  "StackName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Name"
                      },
                      {
                        "description": "The name of the stack with which the entitlement is associated."
                      }
                    ]
                  },
                  "EntitlementName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Name"
                      },
                      {
                        "description": "The name of the entitlement."
                      }
                    ]
                  },
                  "ApplicationIdentifier": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/String"
                      },
                      {
                        "description": "The identifier of the application to remove from the entitlement."
                      }
                    ]
                  }
                }
              },
              "DisassociateFleetResult": {
                "type": "object",
                "properties": {}
              },
              "DisassociateFleetRequest": {
                "type": "object",
                "required": [
                  "FleetName",
                  "StackName"
                ],
                "title": "DisassociateFleetRequest",
                "properties": {
                  "FleetName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/String"
                      },
                      {
                        "description": "The name of the fleet."
                      }
                    ]
                  },
                  "StackName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/String"
                      },
                      {
                        "description": "The name of the stack."
                      }
                    ]
                  }
                }
              },
              "EnableUserResult": {
                "type": "object",
                "properties": {}
              },
              "EnableUserRequest": {
                "type": "object",
                "required": [
                  "UserName",
                  "AuthenticationType"
                ],
                "title": "EnableUserRequest",
                "properties": {
                  "UserName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Username"
                      },
                      {
                        "description": "<p>The email address of the user.</p> <note> <p>Users' email addresses are case-sensitive. During login, if they specify an email address that doesn't use the same capitalization as the email address specified when their user pool account was created, a \"user does not exist\" error message displays. </p> </note>"
                      }
                    ]
                  },
                  "AuthenticationType": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/AuthenticationType"
                      },
                      {
                        "description": "The authentication type for the user. You must specify USERPOOL."
                      }
                    ]
                  }
                }
              },
              "ExpireSessionResult": {
                "type": "object",
                "properties": {}
              },
              "ExpireSessionRequest": {
                "type": "object",
                "required": [
                  "SessionId"
                ],
                "title": "ExpireSessionRequest",
                "properties": {
                  "SessionId": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/String"
                      },
                      {
                        "description": "The identifier of the streaming session."
                      }
                    ]
                  }
                }
              },
              "ListAssociatedFleetsResult": {
                "type": "object",
                "properties": {
                  "Names": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/StringList"
                      },
                      {
                        "description": "The name of the fleet."
                      }
                    ]
                  },
                  "NextToken": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/String"
                      },
                      {
                        "description": "The pagination token to use to retrieve the next page of results for this operation. If there are no more pages, this value is null."
                      }
                    ]
                  }
                }
              },
              "ListAssociatedFleetsRequest": {
                "type": "object",
                "required": [
                  "StackName"
                ],
                "title": "ListAssociatedFleetsRequest",
                "properties": {
                  "StackName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/String"
                      },
                      {
                        "description": "The name of the stack."
                      }
                    ]
                  },
                  "NextToken": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/String"
                      },
                      {
                        "description": "The pagination token to use to retrieve the next page of results for this operation. If this value is null, it retrieves the first page."
                      }
                    ]
                  }
                }
              },
              "ListAssociatedStacksResult": {
                "type": "object",
                "properties": {
                  "Names": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/StringList"
                      },
                      {
                        "description": "The name of the stack."
                      }
                    ]
                  },
                  "NextToken": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/String"
                      },
                      {
                        "description": "The pagination token to use to retrieve the next page of results for this operation. If there are no more pages, this value is null."
                      }
                    ]
                  }
                }
              },
              "ListAssociatedStacksRequest": {
                "type": "object",
                "required": [
                  "FleetName"
                ],
                "title": "ListAssociatedStacksRequest",
                "properties": {
                  "FleetName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/String"
                      },
                      {
                        "description": "The name of the fleet."
                      }
                    ]
                  },
                  "NextToken": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/String"
                      },
                      {
                        "description": "The pagination token to use to retrieve the next page of results for this operation. If this value is null, it retrieves the first page."
                      }
                    ]
                  }
                }
              },
              "ListEntitledApplicationsResult": {
                "type": "object",
                "properties": {
                  "EntitledApplications": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/EntitledApplicationList"
                      },
                      {
                        "description": "The entitled applications."
                      }
                    ]
                  },
                  "NextToken": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/String"
                      },
                      {
                        "description": "The pagination token used to retrieve the next page of results for this operation."
                      }
                    ]
                  }
                }
              },
              "ListEntitledApplicationsRequest": {
                "type": "object",
                "required": [
                  "StackName",
                  "EntitlementName"
                ],
                "title": "ListEntitledApplicationsRequest",
                "properties": {
                  "StackName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Name"
                      },
                      {
                        "description": "The name of the stack with which the entitlement is associated."
                      }
                    ]
                  },
                  "EntitlementName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Name"
                      },
                      {
                        "description": "The name of the entitlement."
                      }
                    ]
                  },
                  "NextToken": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/String"
                      },
                      {
                        "description": "The pagination token used to retrieve the next page of results for this operation."
                      }
                    ]
                  },
                  "MaxResults": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Integer"
                      },
                      {
                        "description": "The maximum size of each page of results."
                      }
                    ]
                  }
                }
              },
              "ListTagsForResourceResponse": {
                "type": "object",
                "properties": {
                  "Tags": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Tags"
                      },
                      {
                        "description": "The information about the tags."
                      }
                    ]
                  }
                }
              },
              "ListTagsForResourceRequest": {
                "type": "object",
                "required": [
                  "ResourceArn"
                ],
                "title": "ListTagsForResourceRequest",
                "properties": {
                  "ResourceArn": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Arn"
                      },
                      {
                        "description": "The Amazon Resource Name (ARN) of the resource."
                      }
                    ]
                  }
                }
              },
              "StartFleetResult": {
                "type": "object",
                "properties": {}
              },
              "StartFleetRequest": {
                "type": "object",
                "required": [
                  "Name"
                ],
                "title": "StartFleetRequest",
                "properties": {
                  "Name": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/String"
                      },
                      {
                        "description": "The name of the fleet."
                      }
                    ]
                  }
                }
              },
              "StartImageBuilderResult": {
                "type": "object",
                "properties": {
                  "ImageBuilder": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ImageBuilder"
                      },
                      {
                        "description": "Information about the image builder."
                      }
                    ]
                  }
                }
              },
              "StartImageBuilderRequest": {
                "type": "object",
                "required": [
                  "Name"
                ],
                "title": "StartImageBuilderRequest",
                "properties": {
                  "Name": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/String"
                      },
                      {
                        "description": "The name of the image builder."
                      }
                    ]
                  },
                  "AppstreamAgentVersion": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/AppstreamAgentVersion"
                      },
                      {
                        "description": "The version of the AppStream 2.0 agent to use for this image builder. To use the latest version of the AppStream 2.0 agent, specify [LATEST]. "
                      }
                    ]
                  }
                }
              },
              "StopFleetResult": {
                "type": "object",
                "properties": {}
              },
              "StopFleetRequest": {
                "type": "object",
                "required": [
                  "Name"
                ],
                "title": "StopFleetRequest",
                "properties": {
                  "Name": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/String"
                      },
                      {
                        "description": "The name of the fleet."
                      }
                    ]
                  }
                }
              },
              "StopImageBuilderResult": {
                "type": "object",
                "properties": {
                  "ImageBuilder": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ImageBuilder"
                      },
                      {
                        "description": "Information about the image builder."
                      }
                    ]
                  }
                }
              },
              "StopImageBuilderRequest": {
                "type": "object",
                "required": [
                  "Name"
                ],
                "title": "StopImageBuilderRequest",
                "properties": {
                  "Name": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/String"
                      },
                      {
                        "description": "The name of the image builder."
                      }
                    ]
                  }
                }
              },
              "TagResourceResponse": {
                "type": "object",
                "properties": {}
              },
              "TagResourceRequest": {
                "type": "object",
                "required": [
                  "ResourceArn",
                  "Tags"
                ],
                "title": "TagResourceRequest",
                "properties": {
                  "ResourceArn": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Arn"
                      },
                      {
                        "description": "The Amazon Resource Name (ARN) of the resource."
                      }
                    ]
                  },
                  "Tags": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Tags"
                      },
                      {
                        "description": "<p>The tags to associate. A tag is a key-value pair, and the value is optional. For example, Environment=Test. If you do not specify a value, Environment=. </p> <p>If you do not specify a value, the value is set to an empty string.</p> <p>Generally allowed characters are: letters, numbers, and spaces representable in UTF-8, and the following special characters: </p> <p>_ . : / = + \\ - @</p>"
                      }
                    ]
                  }
                }
              },
              "UntagResourceResponse": {
                "type": "object",
                "properties": {}
              },
              "UntagResourceRequest": {
                "type": "object",
                "required": [
                  "ResourceArn",
                  "TagKeys"
                ],
                "title": "UntagResourceRequest",
                "properties": {
                  "ResourceArn": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Arn"
                      },
                      {
                        "description": "The Amazon Resource Name (ARN) of the resource."
                      }
                    ]
                  },
                  "TagKeys": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/TagKeyList"
                      },
                      {
                        "description": "The tag keys for the tags to disassociate."
                      }
                    ]
                  }
                }
              },
              "UpdateApplicationResult": {
                "type": "object",
                "properties": {
                  "Application": {
                    "$ref": "#/components/schemas/Application"
                  }
                }
              },
              "UpdateApplicationRequest": {
                "type": "object",
                "required": [
                  "Name"
                ],
                "title": "UpdateApplicationRequest",
                "properties": {
                  "Name": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Name"
                      },
                      {
                        "description": "The name of the application. This name is visible to users when display name is not specified."
                      }
                    ]
                  },
                  "DisplayName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/DisplayName"
                      },
                      {
                        "description": "The display name of the application. This name is visible to users in the application catalog."
                      }
                    ]
                  },
                  "Description": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Description"
                      },
                      {
                        "description": "The description of the application."
                      }
                    ]
                  },
                  "IconS3Location": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/S3Location"
                      },
                      {
                        "description": "The icon S3 location of the application."
                      }
                    ]
                  },
                  "LaunchPath": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/String"
                      },
                      {
                        "description": "The launch path of the application."
                      }
                    ]
                  },
                  "WorkingDirectory": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/String"
                      },
                      {
                        "description": "The working directory of the application."
                      }
                    ]
                  },
                  "LaunchParameters": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/String"
                      },
                      {
                        "description": "The launch parameters of the application."
                      }
                    ]
                  },
                  "AppBlockArn": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Arn"
                      },
                      {
                        "description": "The ARN of the app block."
                      }
                    ]
                  },
                  "AttributesToDelete": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ApplicationAttributes"
                      },
                      {
                        "description": "The attributes to delete for an application."
                      }
                    ]
                  }
                }
              },
              "UpdateDirectoryConfigResult": {
                "type": "object",
                "properties": {
                  "DirectoryConfig": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/DirectoryConfig"
                      },
                      {
                        "description": "Information about the Directory Config object."
                      }
                    ]
                  }
                }
              },
              "UpdateDirectoryConfigRequest": {
                "type": "object",
                "required": [
                  "DirectoryName"
                ],
                "title": "UpdateDirectoryConfigRequest",
                "properties": {
                  "DirectoryName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/DirectoryName"
                      },
                      {
                        "description": "The name of the Directory Config object."
                      }
                    ]
                  },
                  "OrganizationalUnitDistinguishedNames": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/OrganizationalUnitDistinguishedNamesList"
                      },
                      {
                        "description": "The distinguished names of the organizational units for computer accounts."
                      }
                    ]
                  },
                  "ServiceAccountCredentials": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ServiceAccountCredentials"
                      },
                      {
                        "description": "The credentials for the service account used by the fleet or image builder to connect to the directory."
                      }
                    ]
                  },
                  "CertificateBasedAuthProperties": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/CertificateBasedAuthProperties"
                      },
                      {
                        "description": "The certificate-based authentication properties used to authenticate SAML 2.0 Identity Provider (IdP) user identities to Active Directory domain-joined streaming instances. Fallback is turned on by default when certificate-based authentication is <b>Enabled</b> . Fallback allows users to log in using their AD domain password if certificate-based authentication is unsuccessful, or to unlock a desktop lock screen. <b>Enabled_no_directory_login_fallback</b> enables certificate-based authentication, but does not allow users to log in using their AD domain password. Users will be disconnected to re-authenticate using certificates."
                      }
                    ]
                  }
                }
              },
              "UpdateEntitlementResult": {
                "type": "object",
                "properties": {
                  "Entitlement": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Entitlement"
                      },
                      {
                        "description": "The entitlement."
                      }
                    ]
                  }
                }
              },
              "UpdateEntitlementRequest": {
                "type": "object",
                "required": [
                  "Name",
                  "StackName"
                ],
                "title": "UpdateEntitlementRequest",
                "properties": {
                  "Name": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Name"
                      },
                      {
                        "description": "The name of the entitlement."
                      }
                    ]
                  },
                  "StackName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Name"
                      },
                      {
                        "description": "The name of the stack with which the entitlement is associated."
                      }
                    ]
                  },
                  "Description": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Description"
                      },
                      {
                        "description": "The description of the entitlement."
                      }
                    ]
                  },
                  "AppVisibility": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/AppVisibility"
                      },
                      {
                        "description": "Specifies whether all or only selected apps are entitled."
                      }
                    ]
                  },
                  "Attributes": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/EntitlementAttributeList"
                      },
                      {
                        "description": "The attributes of the entitlement."
                      }
                    ]
                  }
                }
              },
              "UpdateFleetResult": {
                "type": "object",
                "properties": {
                  "Fleet": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Fleet"
                      },
                      {
                        "description": "Information about the fleet."
                      }
                    ]
                  }
                }
              },
              "UpdateFleetRequest": {
                "type": "object",
                "title": "UpdateFleetRequest",
                "properties": {
                  "ImageName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/String"
                      },
                      {
                        "description": "The name of the image used to create the fleet."
                      }
                    ]
                  },
                  "ImageArn": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Arn"
                      },
                      {
                        "description": "The ARN of the public, private, or shared image to use."
                      }
                    ]
                  },
                  "Name": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/String"
                      },
                      {
                        "description": "A unique name for the fleet."
                      }
                    ]
                  },
                  "InstanceType": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/String"
                      },
                      {
                        "description": "<p>The instance type to use when launching fleet instances. The following instance types are available:</p> <ul> <li> <p>stream.standard.small</p> </li> <li> <p>stream.standard.medium</p> </li> <li> <p>stream.standard.large</p> </li> <li> <p>stream.standard.xlarge</p> </li> <li> <p>stream.standard.2xlarge</p> </li> <li> <p>stream.compute.large</p> </li> <li> <p>stream.compute.xlarge</p> </li> <li> <p>stream.compute.2xlarge</p> </li> <li> <p>stream.compute.4xlarge</p> </li> <li> <p>stream.compute.8xlarge</p> </li> <li> <p>stream.memory.large</p> </li> <li> <p>stream.memory.xlarge</p> </li> <li> <p>stream.memory.2xlarge</p> </li> <li> <p>stream.memory.4xlarge</p> </li> <li> <p>stream.memory.8xlarge</p> </li> <li> <p>stream.memory.z1d.large</p> </li> <li> <p>stream.memory.z1d.xlarge</p> </li> <li> <p>stream.memory.z1d.2xlarge</p> </li> <li> <p>stream.memory.z1d.3xlarge</p> </li> <li> <p>stream.memory.z1d.6xlarge</p> </li> <li> <p>stream.memory.z1d.12xlarge</p> </li> <li> <p>stream.graphics-design.large</p> </li> <li> <p>stream.graphics-design.xlarge</p> </li> <li> <p>stream.graphics-design.2xlarge</p> </li> <li> <p>stream.graphics-design.4xlarge</p> </li> <li> <p>stream.graphics-desktop.2xlarge</p> </li> <li> <p>stream.graphics.g4dn.xlarge</p> </li> <li> <p>stream.graphics.g4dn.2xlarge</p> </li> <li> <p>stream.graphics.g4dn.4xlarge</p> </li> <li> <p>stream.graphics.g4dn.8xlarge</p> </li> <li> <p>stream.graphics.g4dn.12xlarge</p> </li> <li> <p>stream.graphics.g4dn.16xlarge</p> </li> <li> <p>stream.graphics-pro.4xlarge</p> </li> <li> <p>stream.graphics-pro.8xlarge</p> </li> <li> <p>stream.graphics-pro.16xlarge</p> </li> </ul> <p>The following instance types are available for Elastic fleets:</p> <ul> <li> <p>stream.standard.small</p> </li> <li> <p>stream.standard.medium</p> </li> <li> <p>stream.standard.large</p> </li> <li> <p>stream.standard.xlarge</p> </li> <li> <p>stream.standard.2xlarge</p> </li> </ul>"
                      }
                    ]
                  },
                  "ComputeCapacity": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ComputeCapacity"
                      },
                      {
                        "description": "The desired capacity for the fleet. This is not allowed for Elastic fleets."
                      }
                    ]
                  },
                  "VpcConfig": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/VpcConfig"
                      },
                      {
                        "description": "The VPC configuration for the fleet. This is required for Elastic fleets, but not required for other fleet types. Elastic fleets require that you specify at least two subnets in different availability zones. "
                      }
                    ]
                  },
                  "MaxUserDurationInSeconds": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Integer"
                      },
                      {
                        "description": "<p>The maximum amount of time that a streaming session can remain active, in seconds. If users are still connected to a streaming instance five minutes before this limit is reached, they are prompted to save any open documents before being disconnected. After this time elapses, the instance is terminated and replaced by a new instance.</p> <p>Specify a value between 600 and 360000.</p>"
                      }
                    ]
                  },
                  "DisconnectTimeoutInSeconds": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Integer"
                      },
                      {
                        "description": "<p>The amount of time that a streaming session remains active after users disconnect. If users try to reconnect to the streaming session after a disconnection or network interruption within this time interval, they are connected to their previous session. Otherwise, they are connected to a new session with a new streaming instance. </p> <p>Specify a value between 60 and 360000.</p>"
                      }
                    ]
                  },
                  "DeleteVpcConfig": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Boolean"
                      },
                      {
                        "deprecated": true,
                        "description": "Deletes the VPC association for the specified fleet."
                      }
                    ]
                  },
                  "Description": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Description"
                      },
                      {
                        "description": "The description to display."
                      }
                    ]
                  },
                  "DisplayName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/DisplayName"
                      },
                      {
                        "description": "The fleet name to display."
                      }
                    ]
                  },
                  "EnableDefaultInternetAccess": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/BooleanObject"
                      },
                      {
                        "description": "Enables or disables default internet access for the fleet."
                      }
                    ]
                  },
                  "DomainJoinInfo": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/DomainJoinInfo"
                      },
                      {
                        "description": "The name of the directory and organizational unit (OU) to use to join the fleet to a Microsoft Active Directory domain. "
                      }
                    ]
                  },
                  "IdleDisconnectTimeoutInSeconds": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Integer"
                      },
                      {
                        "description": "<p>The amount of time that users can be idle (inactive) before they are disconnected from their streaming session and the <code>DisconnectTimeoutInSeconds</code> time interval begins. Users are notified before they are disconnected due to inactivity. If users try to reconnect to the streaming session before the time interval specified in <code>DisconnectTimeoutInSeconds</code> elapses, they are connected to their previous session. Users are considered idle when they stop providing keyboard or mouse input during their streaming session. File uploads and downloads, audio in, audio out, and pixels changing do not qualify as user activity. If users continue to be idle after the time interval in <code>IdleDisconnectTimeoutInSeconds</code> elapses, they are disconnected. </p> <p>To prevent users from being disconnected due to inactivity, specify a value of 0. Otherwise, specify a value between 60 and 3600. The default value is 0.</p> <note> <p>If you enable this feature, we recommend that you specify a value that corresponds exactly to a whole number of minutes (for example, 60, 120, and 180). If you don't do this, the value is rounded to the nearest minute. For example, if you specify a value of 70, users are disconnected after 1 minute of inactivity. If you specify a value that is at the midpoint between two different minutes, the value is rounded up. For example, if you specify a value of 90, users are disconnected after 2 minutes of inactivity. </p> </note>"
                      }
                    ]
                  },
                  "AttributesToDelete": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/FleetAttributes"
                      },
                      {
                        "description": "The fleet attributes to delete."
                      }
                    ]
                  },
                  "IamRoleArn": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Arn"
                      },
                      {
                        "description": "<p>The Amazon Resource Name (ARN) of the IAM role to apply to the fleet. To assume a role, a fleet instance calls the AWS Security Token Service (STS) <code>AssumeRole</code> API operation and passes the ARN of the role to use. The operation creates a new session with temporary credentials. AppStream 2.0 retrieves the temporary credentials and creates the <b>appstream_machine_role</b> credential profile on the instance.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/appstream2/latest/developerguide/using-iam-roles-to-grant-permissions-to-applications-scripts-streaming-instances.html\">Using an IAM Role to Grant Permissions to Applications and Scripts Running on AppStream 2.0 Streaming Instances</a> in the <i>Amazon AppStream 2.0 Administration Guide</i>.</p>"
                      }
                    ]
                  },
                  "StreamView": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/StreamView"
                      },
                      {
                        "description": "<p>The AppStream 2.0 view that is displayed to your users when they stream from the fleet. When <code>APP</code> is specified, only the windows of applications opened by users display. When <code>DESKTOP</code> is specified, the standard desktop that is provided by the operating system displays.</p> <p>The default value is <code>APP</code>.</p>"
                      }
                    ]
                  },
                  "Platform": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/PlatformType"
                      },
                      {
                        "description": "The platform of the fleet. WINDOWS_SERVER_2019 and AMAZON_LINUX2 are supported for Elastic fleets. "
                      }
                    ]
                  },
                  "MaxConcurrentSessions": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Integer"
                      },
                      {
                        "description": "The maximum number of concurrent sessions for a fleet."
                      }
                    ]
                  },
                  "UsbDeviceFilterStrings": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/UsbDeviceFilterStrings"
                      },
                      {
                        "description": "The USB device filter strings that specify which USB devices a user can redirect to the fleet streaming session, when using the Windows native client. This is allowed but not required for Elastic fleets."
                      }
                    ]
                  },
                  "SessionScriptS3Location": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/S3Location"
                      },
                      {
                        "description": "The S3 location of the session scripts configuration zip file. This only applies to Elastic fleets. "
                      }
                    ]
                  }
                }
              },
              "UpdateImagePermissionsResult": {
                "type": "object",
                "properties": {}
              },
              "UpdateImagePermissionsRequest": {
                "type": "object",
                "required": [
                  "Name",
                  "SharedAccountId",
                  "ImagePermissions"
                ],
                "title": "UpdateImagePermissionsRequest",
                "properties": {
                  "Name": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Name"
                      },
                      {
                        "description": "The name of the private image."
                      }
                    ]
                  },
                  "SharedAccountId": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/AwsAccountId"
                      },
                      {
                        "description": "The 12-digit identifier of the AWS account for which you want add or update image permissions."
                      }
                    ]
                  },
                  "ImagePermissions": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ImagePermissions"
                      },
                      {
                        "description": "The permissions for the image."
                      }
                    ]
                  }
                }
              },
              "UpdateStackResult": {
                "type": "object",
                "properties": {
                  "Stack": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Stack"
                      },
                      {
                        "description": "Information about the stack."
                      }
                    ]
                  }
                }
              },
              "UpdateStackRequest": {
                "type": "object",
                "required": [
                  "Name"
                ],
                "title": "UpdateStackRequest",
                "properties": {
                  "DisplayName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/DisplayName"
                      },
                      {
                        "description": "The stack name to display."
                      }
                    ]
                  },
                  "Description": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Description"
                      },
                      {
                        "description": "The description to display."
                      }
                    ]
                  },
                  "Name": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/String"
                      },
                      {
                        "description": "The name of the stack."
                      }
                    ]
                  },
                  "StorageConnectors": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/StorageConnectorList"
                      },
                      {
                        "description": "The storage connectors to enable."
                      }
                    ]
                  },
                  "DeleteStorageConnectors": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Boolean"
                      },
                      {
                        "deprecated": true,
                        "description": "Deletes the storage connectors currently enabled for the stack."
                      }
                    ]
                  },
                  "RedirectURL": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/RedirectURL"
                      },
                      {
                        "description": "The URL that users are redirected to after their streaming session ends."
                      }
                    ]
                  },
                  "FeedbackURL": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/FeedbackURL"
                      },
                      {
                        "description": "The URL that users are redirected to after they choose the Send Feedback link. If no URL is specified, no Send Feedback link is displayed."
                      }
                    ]
                  },
                  "AttributesToDelete": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/StackAttributes"
                      },
                      {
                        "description": "The stack attributes to delete."
                      }
                    ]
                  },
                  "UserSettings": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/UserSettingList"
                      },
                      {
                        "description": "The actions that are enabled or disabled for users during their streaming sessions. By default, these actions are enabled."
                      }
                    ]
                  },
                  "ApplicationSettings": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ApplicationSettings"
                      },
                      {
                        "description": "The persistent application settings for users of a stack. When these settings are enabled, changes that users make to applications and Windows settings are automatically saved after each session and applied to the next session."
                      }
                    ]
                  },
                  "AccessEndpoints": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/AccessEndpointList"
                      },
                      {
                        "description": "The list of interface VPC endpoint (interface endpoint) objects. Users of the stack can connect to AppStream 2.0 only through the specified endpoints."
                      }
                    ]
                  },
                  "EmbedHostDomains": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/EmbedHostDomains"
                      },
                      {
                        "description": "The domains where AppStream 2.0 streaming sessions can be embedded in an iframe. You must approve the domains that you want to host embedded AppStream 2.0 streaming sessions. "
                      }
                    ]
                  },
                  "StreamingExperienceSettings": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/StreamingExperienceSettings"
                      },
                      {
                        "description": "The streaming protocol you want your stack to prefer. This can be UDP or TCP. Currently, UDP is only supported in the Windows native client."
                      }
                    ]
                  }
                }
              },
              "AccessEndpointType": {
                "type": "string",
                "enum": [
                  "STREAMING"
                ]
              },
              "String": {
                "type": "string",
                "minLength": 1
              },
              "AccessEndpoint": {
                "type": "object",
                "required": [
                  "EndpointType"
                ],
                "properties": {
                  "EndpointType": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/AccessEndpointType"
                      },
                      {
                        "description": "The type of interface endpoint."
                      }
                    ]
                  },
                  "VpceId": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/String"
                      },
                      {
                        "description": "The identifier (ID) of the VPC in which the interface endpoint is used."
                      }
                    ]
                  }
                },
                "description": "Describes an interface VPC endpoint (interface endpoint) that lets you create a private connection between the virtual private cloud (VPC) that you specify and AppStream 2.0. When you specify an interface endpoint for a stack, users of the stack can connect to AppStream 2.0 only through that endpoint. When you specify an interface endpoint for an image builder, administrators can connect to the image builder only through that endpoint."
              },
              "AccessEndpointList": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AccessEndpoint"
                },
                "minItems": 1,
                "maxItems": 4
              },
              "AccountName": {
                "type": "string",
                "minLength": 1,
                "format": "password"
              },
              "AccountPassword": {
                "type": "string",
                "minLength": 1,
                "maxLength": 127,
                "format": "password"
              },
              "Action": {
                "type": "string",
                "enum": [
                  "CLIPBOARD_COPY_FROM_LOCAL_DEVICE",
                  "CLIPBOARD_COPY_TO_LOCAL_DEVICE",
                  "FILE_UPLOAD",
                  "FILE_DOWNLOAD",
                  "PRINTING_TO_LOCAL_DEVICE",
                  "DOMAIN_PASSWORD_SIGNIN",
                  "DOMAIN_SMART_CARD_SIGNIN"
                ]
              },
              "Arn": {
                "type": "string",
                "pattern": "^arn:aws(?:\\-cn|\\-iso\\-b|\\-iso|\\-us\\-gov)?:[A-Za-z0-9][A-Za-z0-9_/.-]{0,62}:[A-Za-z0-9_/.-]{0,63}:[A-Za-z0-9_/.-]{0,63}:[A-Za-z0-9][A-Za-z0-9:_/+=,@.\\\\-]{0,1023}$"
              },
              "S3Location": {
                "type": "object",
                "required": [
                  "S3Bucket",
                  "S3Key"
                ],
                "properties": {
                  "S3Bucket": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/S3Bucket"
                      },
                      {
                        "description": "The S3 bucket of the S3 object."
                      }
                    ]
                  },
                  "S3Key": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/S3Key"
                      },
                      {
                        "description": "The S3 key of the S3 object."
                      }
                    ]
                  }
                },
                "description": "Describes the S3 location."
              },
              "ScriptDetails": {
                "type": "object",
                "required": [
                  "ScriptS3Location",
                  "ExecutablePath",
                  "TimeoutInSeconds"
                ],
                "properties": {
                  "ScriptS3Location": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/S3Location"
                      },
                      {
                        "description": "The S3 object location for the script."
                      }
                    ]
                  },
                  "ExecutablePath": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/String"
                      },
                      {
                        "description": "The run path for the script."
                      }
                    ]
                  },
                  "ExecutableParameters": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/String"
                      },
                      {
                        "description": "The runtime parameters passed to the run path for the script."
                      }
                    ]
                  },
                  "TimeoutInSeconds": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Integer"
                      },
                      {
                        "description": "The run timeout, in seconds, for the script."
                      }
                    ]
                  }
                },
                "description": "Describes the details of the script."
              },
              "Timestamp": {
                "type": "string",
                "format": "date-time"
              },
              "AppBlock": {
                "type": "object",
                "required": [
                  "Name",
                  "Arn",
                  "SetupScriptDetails"
                ],
                "properties": {
                  "Name": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/String"
                      },
                      {
                        "description": "The name of the app block."
                      }
                    ]
                  },
                  "Arn": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Arn"
                      },
                      {
                        "description": "The ARN of the app block."
                      }
                    ]
                  },
                  "Description": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/String"
                      },
                      {
                        "description": "The description of the app block."
                      }
                    ]
                  },
                  "DisplayName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/String"
                      },
                      {
                        "description": "The display name of the app block."
                      }
                    ]
                  },
                  "SourceS3Location": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/S3Location"
                      },
                      {
                        "description": "The source S3 location of the app block."
                      }
                    ]
                  },
                  "SetupScriptDetails": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ScriptDetails"
                      },
                      {
                        "description": "The setup script details of the app block."
                      }
                    ]
                  },
                  "CreatedTime": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Timestamp"
                      },
                      {
                        "description": "The created time of the app block."
                      }
                    ]
                  }
                },
                "description": "<p>Describes an app block.</p> <p>App blocks are an Amazon AppStream 2.0 resource that stores the details about the virtual hard disk in an S3 bucket. It also stores the setup script with details about how to mount the virtual hard disk. The virtual hard disk includes the application binaries and other files necessary to launch your applications. Multiple applications can be assigned to a single app block.</p> <p>This is only supported for Elastic fleets.</p>"
              },
              "AppBlocks": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AppBlock"
                }
              },
              "AppVisibility": {
                "type": "string",
                "enum": [
                  "ALL",
                  "ASSOCIATED"
                ]
              },
              "Boolean": {
                "type": "boolean"
              },
              "Metadata": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/String"
                }
              },
              "Platforms": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PlatformType"
                },
                "maxItems": 4
              },
              "StringList": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/String"
                }
              },
              "Application": {
                "type": "object",
                "properties": {
                  "Name": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/String"
                      },
                      {
                        "description": "The name of the application."
                      }
                    ]
                  },
                  "DisplayName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/String"
                      },
                      {
                        "description": "The application name to display."
                      }
                    ]
                  },
                  "IconURL": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/String"
                      },
                      {
                        "description": "The URL for the application icon. This URL might be time-limited."
                      }
                    ]
                  },
                  "LaunchPath": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/String"
                      },
                      {
                        "description": "The path to the application executable in the instance."
                      }
                    ]
                  },
                  "LaunchParameters": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/String"
                      },
                      {
                        "description": "The arguments that are passed to the application at launch."
                      }
                    ]
                  },
                  "Enabled": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Boolean"
                      },
                      {
                        "description": "If there is a problem, the application can be disabled after image creation."
                      }
                    ]
                  },
                  "Metadata": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Metadata"
                      },
                      {
                        "description": "Additional attributes that describe the application."
                      }
                    ]
                  },
                  "WorkingDirectory": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/String"
                      },
                      {
                        "description": "The working directory for the application."
                      }
                    ]
                  },
                  "Description": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/String"
                      },
                      {
                        "description": "The description of the application."
                      }
                    ]
                  },
                  "Arn": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Arn"
                      },
                      {
                        "description": "The ARN of the application."
                      }
                    ]
                  },
                  "AppBlockArn": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Arn"
                      },
                      {
                        "description": "The app block ARN of the application."
                      }
                    ]
                  },
                  "IconS3Location": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/S3Location"
                      },
                      {
                        "description": "The S3 location of the application icon."
                      }
                    ]
                  },
                  "Platforms": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Platforms"
                      },
                      {
                        "description": "The platforms on which the application can run."
                      }
                    ]
                  },
                  "InstanceFamilies": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/StringList"
                      },
                      {
                        "description": "The instance families for the application."
                      }
                    ]
                  },
                  "CreatedTime": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Timestamp"
                      },
                      {
                        "description": "The time at which the application was created within the app block."
                      }
                    ]
                  }
                },
                "description": "Describes an application in the application catalog."
              },
              "ApplicationAttribute": {
                "type": "string",
                "enum": [
                  "LAUNCH_PARAMETERS",
                  "WORKING_DIRECTORY"
                ]
              },
              "ApplicationAttributes": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ApplicationAttribute"
                },
                "maxItems": 2
              },
              "ApplicationFleetAssociation": {
                "type": "object",
                "required": [
                  "FleetName",
                  "ApplicationArn"
                ],
                "properties": {
                  "FleetName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/String"
                      },
                      {
                        "description": "The name of the fleet associated with the application."
                      }
                    ]
                  },
                  "ApplicationArn": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Arn"
                      },
                      {
                        "description": "The ARN of the application associated with the fleet."
                      }
                    ]
                  }
                },
                "description": "Describes the application fleet association."
              },
              "ApplicationFleetAssociationList": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ApplicationFleetAssociation"
                },
                "minItems": 1,
                "maxItems": 25
              },
              "SettingsGroup": {
                "type": "string",
                "maxLength": 100
              },
              "ApplicationSettings": {
                "type": "object",
                "required": [
                  "Enabled"
                ],
                "properties": {
                  "Enabled": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Boolean"
                      },
                      {
                        "description": "Enables or disables persistent application settings for users during their streaming sessions. "
                      }
                    ]
                  },
                  "SettingsGroup": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/SettingsGroup"
                      },
                      {
                        "description": "The path prefix for the S3 bucket where users’ persistent application settings are stored. You can allow the same persistent application settings to be used across multiple stacks by specifying the same settings group for each stack. "
                      }
                    ]
                  }
                },
                "description": "The persistent application settings for users of a stack."
              },
              "ApplicationSettingsResponse": {
                "type": "object",
                "properties": {
                  "Enabled": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Boolean"
                      },
                      {
                        "description": "Specifies whether persistent application settings are enabled for users during their streaming sessions."
                      }
                    ]
                  },
                  "SettingsGroup": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/SettingsGroup"
                      },
                      {
                        "description": "The path prefix for the S3 bucket where users’ persistent application settings are stored."
                      }
                    ]
                  },
                  "S3BucketName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/String"
                      },
                      {
                        "description": "The S3 bucket where users’ persistent application settings are stored. When persistent application settings are enabled for the first time for an account in an AWS Region, an S3 bucket is created. The bucket is unique to the AWS account and the Region. "
                      }
                    ]
                  }
                },
                "description": "Describes the persistent application settings for users of a stack."
              },
              "Applications": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Application"
                }
              },
              "AppstreamAgentVersion": {
                "type": "string",
                "minLength": 1,
                "maxLength": 100
              },
              "ArnList": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Arn"
                }
              },
              "Name": {
                "type": "string",
                "pattern": "^[a-zA-Z0-9][a-zA-Z0-9_.-]{0,100}$"
              },
              "AuthenticationType": {
                "type": "string",
                "enum": [
                  "API",
                  "SAML",
                  "USERPOOL",
                  "AWS_AD"
                ]
              },
              "AwsAccountId": {
                "type": "string",
                "pattern": "^\\d+$"
              },
              "AwsAccountIdList": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AwsAccountId"
                },
                "minItems": 1,
                "maxItems": 5
              },
              "UserStackAssociationList": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/UserStackAssociation"
                },
                "minItems": 1,
                "maxItems": 25
              },
              "UserStackAssociationErrorList": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/UserStackAssociationError"
                }
              },
              "BooleanObject": {
                "type": "boolean"
              },
              "CertificateBasedAuthStatus": {
                "type": "string",
                "enum": [
                  "DISABLED",
                  "ENABLED",
                  "ENABLED_NO_DIRECTORY_LOGIN_FALLBACK"
                ]
              },
              "CertificateBasedAuthProperties": {
                "type": "object",
                "properties": {
                  "Status": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/CertificateBasedAuthStatus"
                      },
                      {
                        "description": "The status of the certificate-based authentication properties."
                      }
                    ]
                  },
                  "CertificateAuthorityArn": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Arn"
                      },
                      {
                        "description": "The ARN of the AWS Certificate Manager Private CA resource."
                      }
                    ]
                  }
                },
                "description": "The certificate-based authentication properties used to authenticate SAML 2.0 Identity Provider (IdP) user identities to Active Directory domain-joined streaming instances. Fallback is turned on by default when certificate-based authentication is <b>Enabled</b> . Fallback allows users to log in using their AD domain password if certificate-based authentication is unsuccessful, or to unlock a desktop lock screen. <b>Enabled_no_directory_login_fallback</b> enables certificate-based authentication, but does not allow users to log in using their AD domain password. Users will be disconnected to re-authenticate using certificates."
              },
              "Integer": {
                "type": "integer"
              },
              "ComputeCapacity": {
                "type": "object",
                "required": [
                  "DesiredInstances"
                ],
                "properties": {
                  "DesiredInstances": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Integer"
                      },
                      {
                        "description": "The desired number of streaming instances."
                      }
                    ]
                  }
                },
                "description": "Describes the capacity for a fleet."
              },
              "ComputeCapacityStatus": {
                "type": "object",
                "required": [
                  "Desired"
                ],
                "properties": {
                  "Desired": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Integer"
                      },
                      {
                        "description": "The desired number of streaming instances."
                      }
                    ]
                  },
                  "Running": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Integer"
                      },
                      {
                        "description": "The total number of simultaneous streaming instances that are running."
                      }
                    ]
                  },
                  "InUse": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Integer"
                      },
                      {
                        "description": "The number of instances in use for streaming."
                      }
                    ]
                  },
                  "Available": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Integer"
                      },
                      {
                        "description": "The number of currently available instances that can be used to stream sessions."
                      }
                    ]
                  }
                },
                "description": "Describes the capacity status for a fleet."
              },
              "RegionName": {
                "type": "string",
                "minLength": 1,
                "maxLength": 32
              },
              "Description": {
                "type": "string",
                "maxLength": 256
              },
              "DisplayName": {
                "type": "string",
                "maxLength": 100
              },
              "Tags": {
                "type": "object",
                "minProperties": 1,
                "maxProperties": 50,
                "additionalProperties": {
                  "$ref": "#/components/schemas/TagValue"
                }
              },
              "DirectoryName": {
                "type": "string"
              },
              "OrganizationalUnitDistinguishedNamesList": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/OrganizationalUnitDistinguishedName"
                }
              },
              "ServiceAccountCredentials": {
                "type": "object",
                "required": [
                  "AccountName",
                  "AccountPassword"
                ],
                "properties": {
                  "AccountName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/AccountName"
                      },
                      {
                        "description": "The user name of the account. This account must have the following privileges: create computer objects, join computers to the domain, and change/reset the password on descendant computer objects for the organizational units specified."
                      }
                    ]
                  },
                  "AccountPassword": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/AccountPassword"
                      },
                      {
                        "description": "The password for the account."
                      }
                    ]
                  }
                },
                "description": "Describes the credentials for the service account used by the fleet or image builder to connect to the directory."
              },
              "DirectoryConfig": {
                "type": "object",
                "required": [
                  "DirectoryName"
                ],
                "properties": {
                  "DirectoryName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/DirectoryName"
                      },
                      {
                        "description": "The fully qualified name of the directory (for example, corp.example.com)."
                      }
                    ]
                  },
                  "OrganizationalUnitDistinguishedNames": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/OrganizationalUnitDistinguishedNamesList"
                      },
                      {
                        "description": "The distinguished names of the organizational units for computer accounts."
                      }
                    ]
                  },
                  "ServiceAccountCredentials": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ServiceAccountCredentials"
                      },
                      {
                        "description": "The credentials for the service account used by the fleet or image builder to connect to the directory."
                      }
                    ]
                  },
                  "CreatedTime": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Timestamp"
                      },
                      {
                        "description": "The time the directory configuration was created."
                      }
                    ]
                  },
                  "CertificateBasedAuthProperties": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/CertificateBasedAuthProperties"
                      },
                      {
                        "description": "The certificate-based authentication properties used to authenticate SAML 2.0 Identity Provider (IdP) user identities to Active Directory domain-joined streaming instances. Fallback is turned on by default when certificate-based authentication is <b>Enabled</b> . Fallback allows users to log in using their AD domain password if certificate-based authentication is unsuccessful, or to unlock a desktop lock screen. <b>Enabled_no_directory_login_fallback</b> enables certificate-based authentication, but does not allow users to log in using their AD domain password. Users will be disconnected to re-authenticate using certificates."
                      }
                    ]
                  }
                },
                "description": "Describes the configuration information required to join fleets and image builders to Microsoft Active Directory domains."
              },
              "EntitlementAttributeList": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/EntitlementAttribute"
                },
                "minItems": 1
              },
              "Entitlement": {
                "type": "object",
                "required": [
                  "Name",
                  "StackName",
                  "AppVisibility",
                  "Attributes"
                ],
                "properties": {
                  "Name": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Name"
                      },
                      {
                        "description": "The name of the entitlement."
                      }
                    ]
                  },
                  "StackName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Name"
                      },
                      {
                        "description": "The name of the stack with which the entitlement is associated."
                      }
                    ]
                  },
                  "Description": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Description"
                      },
                      {
                        "description": "The description of the entitlement."
                      }
                    ]
                  },
                  "AppVisibility": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/AppVisibility"
                      },
                      {
                        "description": "Specifies whether all or selected apps are entitled."
                      }
                    ]
                  },
                  "Attributes": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/EntitlementAttributeList"
                      },
                      {
                        "description": "The attributes of the entitlement."
                      }
                    ]
                  },
                  "CreatedTime": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Timestamp"
                      },
                      {
                        "description": "The time when the entitlement was created."
                      }
                    ]
                  },
                  "LastModifiedTime": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Timestamp"
                      },
                      {
                        "description": "The time when the entitlement was last modified."
                      }
                    ]
                  }
                },
                "description": "Specifies an entitlement. Entitlements control access to specific applications within a stack, based on user attributes. Entitlements apply to SAML 2.0 federated user identities. Amazon AppStream 2.0 user pool and streaming URL users are entitled to all applications in a stack. Entitlements don't apply to the desktop stream view application, or to applications managed by a dynamic app provider using the Dynamic Application Framework."
              },
              "FleetType": {
                "type": "string",
                "enum": [
                  "ALWAYS_ON",
                  "ON_DEMAND",
                  "ELASTIC"
                ]
              },
              "VpcConfig": {
                "type": "object",
                "properties": {
                  "SubnetIds": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/SubnetIdList"
                      },
                      {
                        "description": "The identifiers of the subnets to which a network interface is attached from the fleet instance or image builder instance. Fleet instances use one or more subnets. Image builder instances use one subnet."
                      }
                    ]
                  },
                  "SecurityGroupIds": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/SecurityGroupIdList"
                      },
                      {
                        "description": "The identifiers of the security groups for the fleet or image builder."
                      }
                    ]
                  }
                },
                "description": "Describes VPC configuration information for fleets and image builders."
              },
              "DomainJoinInfo": {
                "type": "object",
                "properties": {
                  "DirectoryName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/DirectoryName"
                      },
                      {
                        "description": "The fully qualified name of the directory (for example, corp.example.com)."
                      }
                    ]
                  },
                  "OrganizationalUnitDistinguishedName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/OrganizationalUnitDistinguishedName"
                      },
                      {
                        "description": "The distinguished name of the organizational unit for computer accounts."
                      }
                    ]
                  }
                },
                "description": "Describes the configuration information required to join fleets and image builders to Microsoft Active Directory domains."
              },
              "StreamView": {
                "type": "string",
                "enum": [
                  "APP",
                  "DESKTOP"
                ]
              },
              "PlatformType": {
                "type": "string",
                "enum": [
                  "WINDOWS",
                  "WINDOWS_SERVER_2016",
                  "WINDOWS_SERVER_2019",
                  "AMAZON_LINUX2"
                ]
              },
              "UsbDeviceFilterStrings": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/UsbDeviceFilterString"
                }
              },
              "Fleet": {
                "type": "object",
                "required": [
                  "Arn",
                  "Name",
                  "InstanceType",
                  "ComputeCapacityStatus",
                  "State"
                ],
                "properties": {
                  "Arn": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Arn"
                      },
                      {
                        "description": "The Amazon Resource Name (ARN) for the fleet."
                      }
                    ]
                  },
                  "Name": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/String"
                      },
                      {
                        "description": "The name of the fleet."
                      }
                    ]
                  },
                  "DisplayName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/String"
                      },
                      {
                        "description": "The fleet name to display."
                      }
                    ]
                  },
                  "Description": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/String"
                      },
                      {
                        "description": "The description to display."
                      }
                    ]
                  },
                  "ImageName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/String"
                      },
                      {
                        "description": "The name of the image used to create the fleet."
                      }
                    ]
                  },
                  "ImageArn": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Arn"
                      },
                      {
                        "description": "The ARN for the public, private, or shared image."
                      }
                    ]
                  },
                  "InstanceType": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/String"
                      },
                      {
                        "description": "<p>The instance type to use when launching fleet instances. The following instance types are available:</p> <ul> <li> <p>stream.standard.small</p> </li> <li> <p>stream.standard.medium</p> </li> <li> <p>stream.standard.large</p> </li> <li> <p>stream.compute.large</p> </li> <li> <p>stream.compute.xlarge</p> </li> <li> <p>stream.compute.2xlarge</p> </li> <li> <p>stream.compute.4xlarge</p> </li> <li> <p>stream.compute.8xlarge</p> </li> <li> <p>stream.memory.large</p> </li> <li> <p>stream.memory.xlarge</p> </li> <li> <p>stream.memory.2xlarge</p> </li> <li> <p>stream.memory.4xlarge</p> </li> <li> <p>stream.memory.8xlarge</p> </li> <li> <p>stream.memory.z1d.large</p> </li> <li> <p>stream.memory.z1d.xlarge</p> </li> <li> <p>stream.memory.z1d.2xlarge</p> </li> <li> <p>stream.memory.z1d.3xlarge</p> </li> <li> <p>stream.memory.z1d.6xlarge</p> </li> <li> <p>stream.memory.z1d.12xlarge</p> </li> <li> <p>stream.graphics-design.large</p> </li> <li> <p>stream.graphics-design.xlarge</p> </li> <li> <p>stream.graphics-design.2xlarge</p> </li> <li> <p>stream.graphics-design.4xlarge</p> </li> <li> <p>stream.graphics-desktop.2xlarge</p> </li> <li> <p>stream.graphics.g4dn.xlarge</p> </li> <li> <p>stream.graphics.g4dn.2xlarge</p> </li> <li> <p>stream.graphics.g4dn.4xlarge</p> </li> <li> <p>stream.graphics.g4dn.8xlarge</p> </li> <li> <p>stream.graphics.g4dn.12xlarge</p> </li> <li> <p>stream.graphics.g4dn.16xlarge</p> </li> <li> <p>stream.graphics-pro.4xlarge</p> </li> <li> <p>stream.graphics-pro.8xlarge</p> </li> <li> <p>stream.graphics-pro.16xlarge</p> </li> </ul>"
                      }
                    ]
                  },
                  "FleetType": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/FleetType"
                      },
                      {
                        "description": "<p>The fleet type.</p> <dl> <dt>ALWAYS_ON</dt> <dd> <p>Provides users with instant-on access to their apps. You are charged for all running instances in your fleet, even if no users are streaming apps.</p> </dd> <dt>ON_DEMAND</dt> <dd> <p>Provide users with access to applications after they connect, which takes one to two minutes. You are charged for instance streaming when users are connected and a small hourly fee for instances that are not streaming apps.</p> </dd> </dl>"
                      }
                    ]
                  },
                  "ComputeCapacityStatus": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ComputeCapacityStatus"
                      },
                      {
                        "description": "The capacity status for the fleet."
                      }
                    ]
                  },
                  "MaxUserDurationInSeconds": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Integer"
                      },
                      {
                        "description": "<p>The maximum amount of time that a streaming session can remain active, in seconds. If users are still connected to a streaming instance five minutes before this limit is reached, they are prompted to save any open documents before being disconnected. After this time elapses, the instance is terminated and replaced by a new instance. </p> <p>Specify a value between 600 and 360000.</p>"
                      }
                    ]
                  },
                  "DisconnectTimeoutInSeconds": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Integer"
                      },
                      {
                        "description": "<p>The amount of time that a streaming session remains active after users disconnect. If they try to reconnect to the streaming session after a disconnection or network interruption within this time interval, they are connected to their previous session. Otherwise, they are connected to a new session with a new streaming instance.</p> <p>Specify a value between 60 and 360000.</p>"
                      }
                    ]
                  },
                  "State": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/FleetState"
                      },
                      {
                        "description": "The current state for the fleet."
                      }
                    ]
                  },
                  "VpcConfig": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/VpcConfig"
                      },
                      {
                        "description": "The VPC configuration for the fleet."
                      }
                    ]
                  },
                  "CreatedTime": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Timestamp"
                      },
                      {
                        "description": "The time the fleet was created."
                      }
                    ]
                  },
                  "FleetErrors": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/FleetErrors"
                      },
                      {
                        "description": "The fleet errors."
                      }
                    ]
                  },
                  "EnableDefaultInternetAccess": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/BooleanObject"
                      },
                      {
                        "description": "Indicates whether default internet access is enabled for the fleet."
                      }
                    ]
                  },
                  "DomainJoinInfo": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/DomainJoinInfo"
                      },
                      {
                        "description": "The name of the directory and organizational unit (OU) to use to join the fleet to a Microsoft Active Directory domain. "
                      }
                    ]
                  },
                  "IdleDisconnectTimeoutInSeconds": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Integer"
                      },
                      {
                        "description": "<p>The amount of time that users can be idle (inactive) before they are disconnected from their streaming session and the <code>DisconnectTimeoutInSeconds</code> time interval begins. Users are notified before they are disconnected due to inactivity. If users try to reconnect to the streaming session before the time interval specified in <code>DisconnectTimeoutInSeconds</code> elapses, they are connected to their previous session. Users are considered idle when they stop providing keyboard or mouse input during their streaming session. File uploads and downloads, audio in, audio out, and pixels changing do not qualify as user activity. If users continue to be idle after the time interval in <code>IdleDisconnectTimeoutInSeconds</code> elapses, they are disconnected.</p> <p>To prevent users from being disconnected due to inactivity, specify a value of 0. Otherwise, specify a value between 60 and 3600. The default value is 0.</p> <note> <p>If you enable this feature, we recommend that you specify a value that corresponds exactly to a whole number of minutes (for example, 60, 120, and 180). If you don't do this, the value is rounded to the nearest minute. For example, if you specify a value of 70, users are disconnected after 1 minute of inactivity. If you specify a value that is at the midpoint between two different minutes, the value is rounded up. For example, if you specify a value of 90, users are disconnected after 2 minutes of inactivity. </p> </note>"
                      }
                    ]
                  },
                  "IamRoleArn": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Arn"
                      },
                      {
                        "description": "<p>The ARN of the IAM role that is applied to the fleet. To assume a role, the fleet instance calls the AWS Security Token Service (STS) <code>AssumeRole</code> API operation and passes the ARN of the role to use. The operation creates a new session with temporary credentials. AppStream 2.0 retrieves the temporary credentials and creates the <b>appstream_machine_role</b> credential profile on the instance.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/appstream2/latest/developerguide/using-iam-roles-to-grant-permissions-to-applications-scripts-streaming-instances.html\">Using an IAM Role to Grant Permissions to Applications and Scripts Running on AppStream 2.0 Streaming Instances</a> in the <i>Amazon AppStream 2.0 Administration Guide</i>.</p>"
                      }
                    ]
                  },
                  "StreamView": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/StreamView"
                      },
                      {
                        "description": "<p>The AppStream 2.0 view that is displayed to your users when they stream from the fleet. When <code>APP</code> is specified, only the windows of applications opened by users display. When <code>DESKTOP</code> is specified, the standard desktop that is provided by the operating system displays.</p> <p>The default value is <code>APP</code>.</p>"
                      }
                    ]
                  },
                  "Platform": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/PlatformType"
                      },
                      {
                        "description": "The platform of the fleet."
                      }
                    ]
                  },
                  "MaxConcurrentSessions": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Integer"
                      },
                      {
                        "description": "The maximum number of concurrent sessions for the fleet."
                      }
                    ]
                  },
                  "UsbDeviceFilterStrings": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/UsbDeviceFilterStrings"
                      },
                      {
                        "description": "The USB device filter strings associated with the fleet."
                      }
                    ]
                  },
                  "SessionScriptS3Location": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/S3Location"
                      },
                      {
                        "description": "The S3 location of the session scripts configuration zip file. This only applies to Elastic fleets."
                      }
                    ]
                  }
                },
                "description": "Describes a fleet."
              },
              "ImageBuilder": {
                "type": "object",
                "required": [
                  "Name"
                ],
                "properties": {
                  "Name": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/String"
                      },
                      {
                        "description": "The name of the image builder."
                      }
                    ]
                  },
                  "Arn": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Arn"
                      },
                      {
                        "description": "The ARN for the image builder."
                      }
                    ]
                  },
                  "ImageArn": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Arn"
                      },
                      {
                        "description": "The ARN of the image from which this builder was created."
                      }
                    ]
                  },
                  "Description": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/String"
                      },
                      {
                        "description": "The description to display."
                      }
                    ]
                  },
                  "DisplayName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/String"
                      },
                      {
                        "description": "The image builder name to display."
                      }
                    ]
                  },
                  "VpcConfig": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/VpcConfig"
                      },
                      {
                        "description": "The VPC configuration of the image builder."
                      }
                    ]
                  },
                  "InstanceType": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/String"
                      },
                      {
                        "description": "<p>The instance type for the image builder. The following instance types are available:</p> <ul> <li> <p>stream.standard.small</p> </li> <li> <p>stream.standard.medium</p> </li> <li> <p>stream.standard.large</p> </li> <li> <p>stream.compute.large</p> </li> <li> <p>stream.compute.xlarge</p> </li> <li> <p>stream.compute.2xlarge</p> </li> <li> <p>stream.compute.4xlarge</p> </li> <li> <p>stream.compute.8xlarge</p> </li> <li> <p>stream.memory.large</p> </li> <li> <p>stream.memory.xlarge</p> </li> <li> <p>stream.memory.2xlarge</p> </li> <li> <p>stream.memory.4xlarge</p> </li> <li> <p>stream.memory.8xlarge</p> </li> <li> <p>stream.memory.z1d.large</p> </li> <li> <p>stream.memory.z1d.xlarge</p> </li> <li> <p>stream.memory.z1d.2xlarge</p> </li> <li> <p>stream.memory.z1d.3xlarge</p> </li> <li> <p>stream.memory.z1d.6xlarge</p> </li> <li> <p>stream.memory.z1d.12xlarge</p> </li> <li> <p>stream.graphics-design.large</p> </li> <li> <p>stream.graphics-design.xlarge</p> </li> <li> <p>stream.graphics-design.2xlarge</p> </li> <li> <p>stream.graphics-design.4xlarge</p> </li> <li> <p>stream.graphics-desktop.2xlarge</p> </li> <li> <p>stream.graphics.g4dn.xlarge</p> </li> <li> <p>stream.graphics.g4dn.2xlarge</p> </li> <li> <p>stream.graphics.g4dn.4xlarge</p> </li> <li> <p>stream.graphics.g4dn.8xlarge</p> </li> <li> <p>stream.graphics.g4dn.12xlarge</p> </li> <li> <p>stream.graphics.g4dn.16xlarge</p> </li> <li> <p>stream.graphics-pro.4xlarge</p> </li> <li> <p>stream.graphics-pro.8xlarge</p> </li> <li> <p>stream.graphics-pro.16xlarge</p> </li> </ul>"
                      }
                    ]
                  },
                  "Platform": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/PlatformType"
                      },
                      {
                        "description": "The operating system platform of the image builder."
                      }
                    ]
                  },
                  "IamRoleArn": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Arn"
                      },
                      {
                        "description": "<p>The ARN of the IAM role that is applied to the image builder. To assume a role, the image builder calls the AWS Security Token Service (STS) <code>AssumeRole</code> API operation and passes the ARN of the role to use. The operation creates a new session with temporary credentials. AppStream 2.0 retrieves the temporary credentials and creates the <b>appstream_machine_role</b> credential profile on the instance.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/appstream2/latest/developerguide/using-iam-roles-to-grant-permissions-to-applications-scripts-streaming-instances.html\">Using an IAM Role to Grant Permissions to Applications and Scripts Running on AppStream 2.0 Streaming Instances</a> in the <i>Amazon AppStream 2.0 Administration Guide</i>.</p>"
                      }
                    ]
                  },
                  "State": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ImageBuilderState"
                      },
                      {
                        "description": "The state of the image builder."
                      }
                    ]
                  },
                  "StateChangeReason": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ImageBuilderStateChangeReason"
                      },
                      {
                        "description": "The reason why the last state change occurred."
                      }
                    ]
                  },
                  "CreatedTime": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Timestamp"
                      },
                      {
                        "description": "The time stamp when the image builder was created."
                      }
                    ]
                  },
                  "EnableDefaultInternetAccess": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/BooleanObject"
                      },
                      {
                        "description": "Enables or disables default internet access for the image builder."
                      }
                    ]
                  },
                  "DomainJoinInfo": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/DomainJoinInfo"
                      },
                      {
                        "description": "The name of the directory and organizational unit (OU) to use to join the image builder to a Microsoft Active Directory domain. "
                      }
                    ]
                  },
                  "NetworkAccessConfiguration": {
                    "$ref": "#/components/schemas/NetworkAccessConfiguration"
                  },
                  "ImageBuilderErrors": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ResourceErrors"
                      },
                      {
                        "description": "The image builder errors."
                      }
                    ]
                  },
                  "AppstreamAgentVersion": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/AppstreamAgentVersion"
                      },
                      {
                        "description": "The version of the AppStream 2.0 agent that is currently being used by the image builder. "
                      }
                    ]
                  },
                  "AccessEndpoints": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/AccessEndpointList"
                      },
                      {
                        "description": "The list of virtual private cloud (VPC) interface endpoint objects. Administrators can connect to the image builder only through the specified endpoints."
                      }
                    ]
                  }
                },
                "description": "Describes a virtual machine that is used to create an image. "
              },
              "Long": {
                "type": "integer"
              },
              "StorageConnectorList": {
                "type": "array",
                "description": "The storage connectors.",
                "items": {
                  "$ref": "#/components/schemas/StorageConnector"
                }
              },
              "RedirectURL": {
                "type": "string",
                "maxLength": 1000
              },
              "FeedbackURL": {
                "type": "string",
                "maxLength": 1000
              },
              "UserSettingList": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/UserSetting"
                },
                "minItems": 1
              },
              "EmbedHostDomains": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/EmbedHostDomain"
                },
                "minItems": 1,
                "maxItems": 20
              },
              "StreamingExperienceSettings": {
                "type": "object",
                "properties": {
                  "PreferredProtocol": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/PreferredProtocol"
                      },
                      {
                        "description": "The preferred protocol that you want to use while streaming your application."
                      }
                    ]
                  }
                },
                "description": "The streaming protocol you want your stack to prefer. This can be UDP or TCP. Currently, UDP is only supported in the Windows native client."
              },
              "Stack": {
                "type": "object",
                "required": [
                  "Name"
                ],
                "properties": {
                  "Arn": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Arn"
                      },
                      {
                        "description": "The ARN of the stack."
                      }
                    ]
                  },
                  "Name": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/String"
                      },
                      {
                        "description": "The name of the stack."
                      }
                    ]
                  },
                  "Description": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/String"
                      },
                      {
                        "description": "The description to display."
                      }
                    ]
                  },
                  "DisplayName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/String"
                      },
                      {
                        "description": "The stack name to display."
                      }
                    ]
                  },
                  "CreatedTime": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Timestamp"
                      },
                      {
                        "description": "The time the stack was created."
                      }
                    ]
                  },
                  "StorageConnectors": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/StorageConnectorList"
                      },
                      {
                        "description": "The storage connectors to enable."
                      }
                    ]
                  },
                  "RedirectURL": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/RedirectURL"
                      },
                      {
                        "description": "The URL that users are redirected to after their streaming session ends."
                      }
                    ]
                  },
                  "FeedbackURL": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/FeedbackURL"
                      },
                      {
                        "description": "The URL that users are redirected to after they click the Send Feedback link. If no URL is specified, no Send Feedback link is displayed."
                      }
                    ]
                  },
                  "StackErrors": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/StackErrors"
                      },
                      {
                        "description": "The errors for the stack."
                      }
                    ]
                  },
                  "UserSettings": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/UserSettingList"
                      },
                      {
                        "description": "The actions that are enabled or disabled for users during their streaming sessions. By default these actions are enabled."
                      }
                    ]
                  },
                  "ApplicationSettings": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ApplicationSettingsResponse"
                      },
                      {
                        "description": "The persistent application settings for users of the stack."
                      }
                    ]
                  },
                  "AccessEndpoints": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/AccessEndpointList"
                      },
                      {
                        "description": "The list of virtual private cloud (VPC) interface endpoint objects. Users of the stack can connect to AppStream 2.0 only through the specified endpoints. "
                      }
                    ]
                  },
                  "EmbedHostDomains": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/EmbedHostDomains"
                      },
                      {
                        "description": "The domains where AppStream 2.0 streaming sessions can be embedded in an iframe. You must approve the domains that you want to host embedded AppStream 2.0 streaming sessions."
                      }
                    ]
                  },
                  "StreamingExperienceSettings": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/StreamingExperienceSettings"
                      },
                      {
                        "description": "The streaming protocol you want your stack to prefer. This can be UDP or TCP. Currently, UDP is only supported in the Windows native client."
                      }
                    ]
                  }
                },
                "description": "Describes a stack."
              },
              "StreamingUrlUserId": {
                "type": "string",
                "pattern": "[\\w+=,.@-]*",
                "minLength": 2,
                "maxLength": 32
              },
              "Image": {
                "type": "object",
                "required": [
                  "Name"
                ],
                "properties": {
                  "Name": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/String"
                      },
                      {
                        "description": "The name of the image."
                      }
                    ]
                  },
                  "Arn": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Arn"
                      },
                      {
                        "description": "The ARN of the image."
                      }
                    ]
                  },
                  "BaseImageArn": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Arn"
                      },
                      {
                        "description": "The ARN of the image from which this image was created."
                      }
                    ]
                  },
                  "DisplayName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/String"
                      },
                      {
                        "description": "The image name to display."
                      }
                    ]
                  },
                  "State": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ImageState"
                      },
                      {
                        "description": "The image starts in the <code>PENDING</code> state. If image creation succeeds, the state is <code>AVAILABLE</code>. If image creation fails, the state is <code>FAILED</code>."
                      }
                    ]
                  },
                  "Visibility": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/VisibilityType"
                      },
                      {
                        "description": "Indicates whether the image is public or private."
                      }
                    ]
                  },
                  "ImageBuilderSupported": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Boolean"
                      },
                      {
                        "description": "Indicates whether an image builder can be launched from this image."
                      }
                    ]
                  },
                  "ImageBuilderName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/String"
                      },
                      {
                        "description": "The name of the image builder that was used to create the private image. If the image is shared, this value is null."
                      }
                    ]
                  },
                  "Platform": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/PlatformType"
                      },
                      {
                        "description": "The operating system platform of the image."
                      }
                    ]
                  },
                  "Description": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/String"
                      },
                      {
                        "description": "The description to display."
                      }
                    ]
                  },
                  "StateChangeReason": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ImageStateChangeReason"
                      },
                      {
                        "description": "The reason why the last state change occurred."
                      }
                    ]
                  },
                  "Applications": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Applications"
                      },
                      {
                        "description": "The applications associated with the image."
                      }
                    ]
                  },
                  "CreatedTime": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Timestamp"
                      },
                      {
                        "description": "The time the image was created."
                      }
                    ]
                  },
                  "PublicBaseImageReleasedDate": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Timestamp"
                      },
                      {
                        "description": "The release date of the public base image. For private images, this date is the release date of the base image from which the image was created."
                      }
                    ]
                  },
                  "AppstreamAgentVersion": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/AppstreamAgentVersion"
                      },
                      {
                        "description": "The version of the AppStream 2.0 agent to use for instances that are launched from this image. "
                      }
                    ]
                  },
                  "ImagePermissions": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ImagePermissions"
                      },
                      {
                        "description": "The permissions to provide to the destination AWS account for the specified image."
                      }
                    ]
                  },
                  "ImageErrors": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ResourceErrors"
                      },
                      {
                        "description": "Describes the errors that are returned when a new image can't be created."
                      }
                    ]
                  }
                },
                "description": "Describes an image."
              },
              "UsageReportSchedule": {
                "type": "string",
                "enum": [
                  "DAILY"
                ]
              },
              "Username": {
                "type": "string",
                "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                "minLength": 1,
                "maxLength": 128,
                "format": "password"
              },
              "MessageAction": {
                "type": "string",
                "enum": [
                  "SUPPRESS",
                  "RESEND"
                ]
              },
              "UserAttributeValue": {
                "type": "string",
                "pattern": "^[A-Za-z0-9_\\-\\s]+$",
                "maxLength": 2048,
                "format": "password"
              },
              "DirectoryNameList": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/DirectoryName"
                }
              },
              "DirectoryConfigList": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/DirectoryConfig"
                }
              },
              "EntitlementList": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Entitlement"
                }
              },
              "FleetList": {
                "type": "array",
                "description": "The fleets.",
                "items": {
                  "$ref": "#/components/schemas/Fleet"
                }
              },
              "ImageBuilderList": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ImageBuilder"
                }
              },
              "MaxResults": {
                "type": "integer",
                "minimum": 0,
                "maximum": 500
              },
              "SharedImagePermissionsList": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SharedImagePermissions"
                }
              },
              "DescribeImagesMaxResults": {
                "type": "integer",
                "minimum": 0,
                "maximum": 25
              },
              "VisibilityType": {
                "type": "string",
                "enum": [
                  "PUBLIC",
                  "PRIVATE",
                  "SHARED"
                ]
              },
              "ImageList": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Image"
                }
              },
              "UserId": {
                "type": "string",
                "minLength": 2,
                "maxLength": 128
              },
              "SessionList": {
                "type": "array",
                "description": "List of sessions.",
                "items": {
                  "$ref": "#/components/schemas/Session"
                }
              },
              "StackList": {
                "type": "array",
                "description": "The stacks.",
                "items": {
                  "$ref": "#/components/schemas/Stack"
                }
              },
              "UsageReportSubscriptionList": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/UsageReportSubscription"
                }
              },
              "UserList": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/User"
                }
              },
              "Domain": {
                "type": "string",
                "description": "GSuite domain for GDrive integration.",
                "minLength": 1,
                "maxLength": 64
              },
              "OrganizationalUnitDistinguishedName": {
                "type": "string",
                "maxLength": 2000
              },
              "DomainList": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Domain"
                },
                "maxItems": 50
              },
              "EmbedHostDomain": {
                "type": "string",
                "pattern": "(?:[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?\\.)+[a-z0-9][a-z0-9-]{0,61}[a-z0-9]",
                "description": "Specifies a valid domain that can embed AppStream. Valid examples include: [\"testorigin.tt--com\", \"testingorigin.com.us\", \"test.com.us\"] Invalid examples include: [\"test,com\", \".com\", \"h*llo.com\". \"\"]",
                "maxLength": 128
              },
              "EntitledApplication": {
                "type": "object",
                "required": [
                  "ApplicationIdentifier"
                ],
                "properties": {
                  "ApplicationIdentifier": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/String"
                      },
                      {
                        "description": "The identifier of the application."
                      }
                    ]
                  }
                },
                "description": "The application associated to an entitlement. Access is controlled based on user attributes."
              },
              "EntitledApplicationList": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/EntitledApplication"
                }
              },
              "EntitlementAttribute": {
                "type": "object",
                "required": [
                  "Name",
                  "Value"
                ],
                "properties": {
                  "Name": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/String"
                      },
                      {
                        "description": "<p>A supported AWS IAM SAML <code>PrincipalTag</code> attribute that is matched to the associated value when a user identity federates into an Amazon AppStream 2.0 SAML application.</p> <p>The following are valid values:</p> <ul> <li> <p>roles</p> </li> <li> <p>department </p> </li> <li> <p>organization </p> </li> <li> <p>groups </p> </li> <li> <p>title </p> </li> <li> <p>costCenter </p> </li> <li> <p>userType</p> </li> </ul> <p> </p>"
                      }
                    ]
                  },
                  "Value": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/String"
                      },
                      {
                        "description": "A value that is matched to a supported SAML attribute name when a user identity federates into an Amazon AppStream 2.0 SAML application. "
                      }
                    ]
                  }
                },
                "description": "An attribute associated with an entitlement. Application entitlements work by matching a supported SAML 2.0 attribute name to a value when a user identity federates to an Amazon AppStream 2.0 SAML application."
              },
              "FleetState": {
                "type": "string",
                "enum": [
                  "STARTING",
                  "RUNNING",
                  "STOPPING",
                  "STOPPED"
                ]
              },
              "FleetErrors": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/FleetError"
                }
              },
              "FleetAttribute": {
                "type": "string",
                "enum": [
                  "VPC_CONFIGURATION",
                  "VPC_CONFIGURATION_SECURITY_GROUP_IDS",
                  "DOMAIN_JOIN_INFO",
                  "IAM_ROLE_ARN",
                  "USB_DEVICE_FILTER_STRINGS",
                  "SESSION_SCRIPT_S3_LOCATION"
                ],
                "description": "The fleet attribute."
              },
              "FleetAttributes": {
                "type": "array",
                "description": "The fleet attributes.",
                "items": {
                  "$ref": "#/components/schemas/FleetAttribute"
                }
              },
              "FleetErrorCode": {
                "type": "string",
                "enum": [
                  "IAM_SERVICE_ROLE_MISSING_ENI_DESCRIBE_ACTION",
                  "IAM_SERVICE_ROLE_MISSING_ENI_CREATE_ACTION",
                  "IAM_SERVICE_ROLE_MISSING_ENI_DELETE_ACTION",
                  "NETWORK_INTERFACE_LIMIT_EXCEEDED",
                  "INTERNAL_SERVICE_ERROR",
                  "IAM_SERVICE_ROLE_IS_MISSING",
                  "MACHINE_ROLE_IS_MISSING",
                  "STS_DISABLED_IN_REGION",
                  "SUBNET_HAS_INSUFFICIENT_IP_ADDRESSES",
                  "IAM_SERVICE_ROLE_MISSING_DESCRIBE_SUBNET_ACTION",
                  "SUBNET_NOT_FOUND",
                  "IMAGE_NOT_FOUND",
                  "INVALID_SUBNET_CONFIGURATION",
                  "SECURITY_GROUPS_NOT_FOUND",
                  "IGW_NOT_ATTACHED",
                  "IAM_SERVICE_ROLE_MISSING_DESCRIBE_SECURITY_GROUPS_ACTION",
                  "FLEET_STOPPED",
                  "FLEET_INSTANCE_PROVISIONING_FAILURE",
                  "DOMAIN_JOIN_ERROR_FILE_NOT_FOUND",
                  "DOMAIN_JOIN_ERROR_ACCESS_DENIED",
                  "DOMAIN_JOIN_ERROR_LOGON_FAILURE",
                  "DOMAIN_JOIN_ERROR_INVALID_PARAMETER",
                  "DOMAIN_JOIN_ERROR_MORE_DATA",
                  "DOMAIN_JOIN_ERROR_NO_SUCH_DOMAIN",
                  "DOMAIN_JOIN_ERROR_NOT_SUPPORTED",
                  "DOMAIN_JOIN_NERR_INVALID_WORKGROUP_NAME",
                  "DOMAIN_JOIN_NERR_WORKSTATION_NOT_STARTED",
                  "DOMAIN_JOIN_ERROR_DS_MACHINE_ACCOUNT_QUOTA_EXCEEDED",
                  "DOMAIN_JOIN_NERR_PASSWORD_EXPIRED",
                  "DOMAIN_JOIN_INTERNAL_SERVICE_ERROR"
                ]
              },
              "FleetError": {
                "type": "object",
                "properties": {
                  "ErrorCode": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/FleetErrorCode"
                      },
                      {
                        "description": "The error code."
                      }
                    ]
                  },
                  "ErrorMessage": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/String"
                      },
                      {
                        "description": "The error message."
                      }
                    ]
                  }
                },
                "description": "Describes a fleet error."
              },
              "ImageState": {
                "type": "string",
                "enum": [
                  "PENDING",
                  "AVAILABLE",
                  "FAILED",
                  "COPYING",
                  "DELETING",
                  "CREATING",
                  "IMPORTING"
                ]
              },
              "ImageStateChangeReason": {
                "type": "object",
                "properties": {
                  "Code": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ImageStateChangeReasonCode"
                      },
                      {
                        "description": "The state change reason code."
                      }
                    ]
                  },
                  "Message": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/String"
                      },
                      {
                        "description": "The state change reason message."
                      }
                    ]
                  }
                },
                "description": "Describes the reason why the last image state change occurred."
              },
              "ImagePermissions": {
                "type": "object",
                "properties": {
                  "allowFleet": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/BooleanObject"
                      },
                      {
                        "description": "Indicates whether the image can be used for a fleet."
                      }
                    ]
                  },
                  "allowImageBuilder": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/BooleanObject"
                      },
                      {
                        "description": "Indicates whether the image can be used for an image builder."
                      }
                    ]
                  }
                },
                "description": "Describes the permissions for an image. "
              },
              "ResourceErrors": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ResourceError"
                }
              },
              "ImageBuilderState": {
                "type": "string",
                "enum": [
                  "PENDING",
                  "UPDATING_AGENT",
                  "RUNNING",
                  "STOPPING",
                  "STOPPED",
                  "REBOOTING",
                  "SNAPSHOTTING",
                  "DELETING",
                  "FAILED",
                  "UPDATING",
                  "PENDING_QUALIFICATION"
                ]
              },
              "ImageBuilderStateChangeReason": {
                "type": "object",
                "properties": {
                  "Code": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ImageBuilderStateChangeReasonCode"
                      },
                      {
                        "description": "The state change reason code."
                      }
                    ]
                  },
                  "Message": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/String"
                      },
                      {
                        "description": "The state change reason message."
                      }
                    ]
                  }
                },
                "description": "Describes the reason why the last image builder state change occurred."
              },
              "NetworkAccessConfiguration": {
                "type": "object",
                "properties": {
                  "EniPrivateIpAddress": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/String"
                      },
                      {
                        "description": "The private IP address of the elastic network interface that is attached to instances in your VPC."
                      }
                    ]
                  },
                  "EniId": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/String"
                      },
                      {
                        "description": "The resource identifier of the elastic network interface that is attached to instances in your VPC. All network interfaces have the eni-xxxxxxxx resource identifier."
                      }
                    ]
                  }
                },
                "description": "Describes the network details of the fleet or image builder instance."
              },
              "ImageBuilderStateChangeReasonCode": {
                "type": "string",
                "enum": [
                  "INTERNAL_ERROR",
                  "IMAGE_UNAVAILABLE"
                ]
              },
              "ImageStateChangeReasonCode": {
                "type": "string",
                "enum": [
                  "INTERNAL_ERROR",
                  "IMAGE_BUILDER_NOT_AVAILABLE",
                  "IMAGE_COPY_FAILURE"
                ]
              },
              "UsageReportExecutionErrorCode": {
                "type": "string",
                "enum": [
                  "RESOURCE_NOT_FOUND",
                  "ACCESS_DENIED",
                  "INTERNAL_SERVICE_ERROR"
                ]
              },
              "LastReportGenerationExecutionError": {
                "type": "object",
                "properties": {
                  "ErrorCode": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/UsageReportExecutionErrorCode"
                      },
                      {
                        "description": "The error code for the error that is returned when a usage report can't be generated."
                      }
                    ]
                  },
                  "ErrorMessage": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/String"
                      },
                      {
                        "description": "The error message for the error that is returned when a usage report can't be generated."
                      }
                    ]
                  }
                },
                "description": "Describes the error that is returned when a usage report can't be generated."
              },
              "LastReportGenerationExecutionErrors": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/LastReportGenerationExecutionError"
                }
              },
              "Permission": {
                "type": "string",
                "enum": [
                  "ENABLED",
                  "DISABLED"
                ]
              },
              "PreferredProtocol": {
                "type": "string",
                "enum": [
                  "TCP",
                  "UDP"
                ]
              },
              "ResourceError": {
                "type": "object",
                "properties": {
                  "ErrorCode": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/FleetErrorCode"
                      },
                      {
                        "description": "The error code."
                      }
                    ]
                  },
                  "ErrorMessage": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/String"
                      },
                      {
                        "description": "The error message."
                      }
                    ]
                  },
                  "ErrorTimestamp": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Timestamp"
                      },
                      {
                        "description": "The time the error occurred."
                      }
                    ]
                  }
                },
                "description": "Describes a resource error."
              },
              "ResourceIdentifier": {
                "type": "string",
                "description": "The ARN of the resource.",
                "minLength": 1,
                "maxLength": 2048
              },
              "S3Bucket": {
                "type": "string",
                "pattern": "^[0-9a-z\\.\\-]*(?<!\\.)$",
                "minLength": 3,
                "maxLength": 63
              },
              "S3Key": {
                "type": "string",
                "minLength": 1,
                "maxLength": 1024
              },
              "SecurityGroupIdList": {
                "type": "array",
                "description": "The security group identifiers.",
                "items": {
                  "$ref": "#/components/schemas/String"
                },
                "maxItems": 5
              },
              "SessionState": {
                "type": "string",
                "enum": [
                  "ACTIVE",
                  "PENDING",
                  "EXPIRED"
                ],
                "description": "Possible values for the state of a streaming session."
              },
              "SessionConnectionState": {
                "type": "string",
                "enum": [
                  "CONNECTED",
                  "NOT_CONNECTED"
                ]
              },
              "Session": {
                "type": "object",
                "required": [
                  "Id",
                  "UserId",
                  "StackName",
                  "FleetName",
                  "State"
                ],
                "properties": {
                  "Id": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/String"
                      },
                      {
                        "description": "The identifier of the streaming session."
                      }
                    ]
                  },
                  "UserId": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/UserId"
                      },
                      {
                        "description": "The identifier of the user for whom the session was created."
                      }
                    ]
                  },
                  "StackName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/String"
                      },
                      {
                        "description": "The name of the stack for the streaming session."
                      }
                    ]
                  },
                  "FleetName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/String"
                      },
                      {
                        "description": "The name of the fleet for the streaming session."
                      }
                    ]
                  },
                  "State": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/SessionState"
                      },
                      {
                        "description": "The current state of the streaming session."
                      }
                    ]
                  },
                  "ConnectionState": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/SessionConnectionState"
                      },
                      {
                        "description": "Specifies whether a user is connected to the streaming session."
                      }
                    ]
                  },
                  "StartTime": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Timestamp"
                      },
                      {
                        "description": "The time when a streaming instance is dedicated for the user."
                      }
                    ]
                  },
                  "MaxExpirationTime": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Timestamp"
                      },
                      {
                        "description": "The time when the streaming session is set to expire. This time is based on the <code>MaxUserDurationinSeconds</code> value, which determines the maximum length of time that a streaming session can run. A streaming session might end earlier than the time specified in <code>SessionMaxExpirationTime</code>, when the <code>DisconnectTimeOutInSeconds</code> elapses or the user chooses to end his or her session. If the <code>DisconnectTimeOutInSeconds</code> elapses, or the user chooses to end his or her session, the streaming instance is terminated and the streaming session ends."
                      }
                    ]
                  },
                  "AuthenticationType": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/AuthenticationType"
                      },
                      {
                        "description": "The authentication method. The user is authenticated using a streaming URL (<code>API</code>) or SAML 2.0 federation (<code>SAML</code>)."
                      }
                    ]
                  },
                  "NetworkAccessConfiguration": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/NetworkAccessConfiguration"
                      },
                      {
                        "description": "The network details for the streaming session."
                      }
                    ]
                  }
                },
                "description": "Describes a streaming session."
              },
              "SharedImagePermissions": {
                "type": "object",
                "required": [
                  "sharedAccountId",
                  "imagePermissions"
                ],
                "properties": {
                  "sharedAccountId": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/AwsAccountId"
                      },
                      {
                        "description": "The 12-digit identifier of the AWS account with which the image is shared."
                      }
                    ]
                  },
                  "imagePermissions": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ImagePermissions"
                      },
                      {
                        "description": "Describes the permissions for a shared image."
                      }
                    ]
                  }
                },
                "description": "Describes the permissions that are available to the specified AWS account for a shared image."
              },
              "StackErrors": {
                "type": "array",
                "description": "The stack errors.",
                "items": {
                  "$ref": "#/components/schemas/StackError"
                }
              },
              "StackAttribute": {
                "type": "string",
                "enum": [
                  "STORAGE_CONNECTORS",
                  "STORAGE_CONNECTOR_HOMEFOLDERS",
                  "STORAGE_CONNECTOR_GOOGLE_DRIVE",
                  "STORAGE_CONNECTOR_ONE_DRIVE",
                  "REDIRECT_URL",
                  "FEEDBACK_URL",
                  "THEME_NAME",
                  "USER_SETTINGS",
                  "EMBED_HOST_DOMAINS",
                  "IAM_ROLE_ARN",
                  "ACCESS_ENDPOINTS",
                  "STREAMING_EXPERIENCE_SETTINGS"
                ]
              },
              "StackAttributes": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/StackAttribute"
                }
              },
              "StackErrorCode": {
                "type": "string",
                "enum": [
                  "STORAGE_CONNECTOR_ERROR",
                  "INTERNAL_SERVICE_ERROR"
                ]
              },
              "StackError": {
                "type": "object",
                "properties": {
                  "ErrorCode": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/StackErrorCode"
                      },
                      {
                        "description": "The error code."
                      }
                    ]
                  },
                  "ErrorMessage": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/String"
                      },
                      {
                        "description": "The error message."
                      }
                    ]
                  }
                },
                "description": "Describes a stack error."
              },
              "StorageConnectorType": {
                "type": "string",
                "enum": [
                  "HOMEFOLDERS",
                  "GOOGLE_DRIVE",
                  "ONE_DRIVE"
                ],
                "description": "The type of storage connector."
              },
              "StorageConnector": {
                "type": "object",
                "required": [
                  "ConnectorType"
                ],
                "properties": {
                  "ConnectorType": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/StorageConnectorType"
                      },
                      {
                        "description": "The type of storage connector."
                      }
                    ]
                  },
                  "ResourceIdentifier": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ResourceIdentifier"
                      },
                      {
                        "description": "The ARN of the storage connector."
                      }
                    ]
                  },
                  "Domains": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/DomainList"
                      },
                      {
                        "description": "The names of the domains for the account."
                      }
                    ]
                  }
                },
                "description": "Describes a connector that enables persistent storage for users."
              },
              "SubnetIdList": {
                "type": "array",
                "description": "The subnet identifiers.",
                "items": {
                  "$ref": "#/components/schemas/String"
                }
              },
              "TagKey": {
                "type": "string",
                "pattern": "^(^(?!aws:).[\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*)$",
                "minLength": 1,
                "maxLength": 128
              },
              "TagKeyList": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/TagKey"
                },
                "minItems": 1,
                "maxItems": 50
              },
              "TagValue": {
                "type": "string",
                "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*)$",
                "minLength": 0,
                "maxLength": 256
              },
              "UsageReportSubscription": {
                "type": "object",
                "properties": {
                  "S3BucketName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/String"
                      },
                      {
                        "description": "<p>The Amazon S3 bucket where generated reports are stored.</p> <p>If you enabled on-instance session scripts and Amazon S3 logging for your session script configuration, AppStream 2.0 created an S3 bucket to store the script output. The bucket is unique to your account and Region. When you enable usage reporting in this case, AppStream 2.0 uses the same bucket to store your usage reports. If you haven't already enabled on-instance session scripts, when you enable usage reports, AppStream 2.0 creates a new S3 bucket.</p>"
                      }
                    ]
                  },
                  "Schedule": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/UsageReportSchedule"
                      },
                      {
                        "description": "The schedule for generating usage reports."
                      }
                    ]
                  },
                  "LastGeneratedReportDate": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Timestamp"
                      },
                      {
                        "description": "The time when the last usage report was generated."
                      }
                    ]
                  },
                  "SubscriptionErrors": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/LastReportGenerationExecutionErrors"
                      },
                      {
                        "description": "The errors that were returned if usage reports couldn't be generated."
                      }
                    ]
                  }
                },
                "description": "Describes information about the usage report subscription."
              },
              "UsbDeviceFilterString": {
                "type": "string",
                "pattern": "^((\\w*)\\s*(\\w*)\\s*\\,\\s*(\\w*)\\s*\\,\\s*\\*?(\\w*)\\s*\\,\\s*\\*?(\\w*)\\s*\\,\\s*\\*?\\d*\\s*\\,\\s*\\*?\\d*\\s*\\,\\s*[0-1]\\s*\\,\\s*[0-1]\\s*)$",
                "minLength": 0,
                "maxLength": 100
              },
              "User": {
                "type": "object",
                "required": [
                  "AuthenticationType"
                ],
                "properties": {
                  "Arn": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Arn"
                      },
                      {
                        "description": "The ARN of the user."
                      }
                    ]
                  },
                  "UserName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Username"
                      },
                      {
                        "description": "<p>The email address of the user.</p> <note> <p>Users' email addresses are case-sensitive.</p> </note>"
                      }
                    ]
                  },
                  "Enabled": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Boolean"
                      },
                      {
                        "description": "Specifies whether the user in the user pool is enabled."
                      }
                    ]
                  },
                  "Status": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/String"
                      },
                      {
                        "description": "<p>The status of the user in the user pool. The status can be one of the following:</p> <ul> <li> <p>UNCONFIRMED – The user is created but not confirmed.</p> </li> <li> <p>CONFIRMED – The user is confirmed.</p> </li> <li> <p>ARCHIVED – The user is no longer active.</p> </li> <li> <p>COMPROMISED – The user is disabled because of a potential security threat.</p> </li> <li> <p>UNKNOWN – The user status is not known.</p> </li> </ul>"
                      }
                    ]
                  },
                  "FirstName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/UserAttributeValue"
                      },
                      {
                        "description": "The first name, or given name, of the user."
                      }
                    ]
                  },
                  "LastName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/UserAttributeValue"
                      },
                      {
                        "description": "The last name, or surname, of the user."
                      }
                    ]
                  },
                  "CreatedTime": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Timestamp"
                      },
                      {
                        "description": "The date and time the user was created in the user pool."
                      }
                    ]
                  },
                  "AuthenticationType": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/AuthenticationType"
                      },
                      {
                        "description": "The authentication type for the user."
                      }
                    ]
                  }
                },
                "description": "Describes a user in the user pool."
              },
              "UserSetting": {
                "type": "object",
                "required": [
                  "Action",
                  "Permission"
                ],
                "properties": {
                  "Action": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Action"
                      },
                      {
                        "description": "The action that is enabled or disabled."
                      }
                    ]
                  },
                  "Permission": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Permission"
                      },
                      {
                        "description": "Indicates whether the action is enabled or disabled."
                      }
                    ]
                  }
                },
                "description": "Describes an action and whether the action is enabled or disabled for users during their streaming sessions."
              },
              "UserStackAssociation": {
                "type": "object",
                "required": [
                  "StackName",
                  "UserName",
                  "AuthenticationType"
                ],
                "properties": {
                  "StackName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/String"
                      },
                      {
                        "description": "The name of the stack that is associated with the user."
                      }
                    ]
                  },
                  "UserName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Username"
                      },
                      {
                        "description": "<p>The email address of the user who is associated with the stack.</p> <note> <p>Users' email addresses are case-sensitive.</p> </note>"
                      }
                    ]
                  },
                  "AuthenticationType": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/AuthenticationType"
                      },
                      {
                        "description": "The authentication type for the user."
                      }
                    ]
                  },
                  "SendEmailNotification": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Boolean"
                      },
                      {
                        "description": "Specifies whether a welcome email is sent to a user after the user is created in the user pool."
                      }
                    ]
                  }
                },
                "description": "Describes a user in the user pool and the associated stack."
              },
              "UserStackAssociationErrorCode": {
                "type": "string",
                "enum": [
                  "STACK_NOT_FOUND",
                  "USER_NAME_NOT_FOUND",
                  "DIRECTORY_NOT_FOUND",
                  "INTERNAL_ERROR"
                ]
              },
              "UserStackAssociationError": {
                "type": "object",
                "properties": {
                  "UserStackAssociation": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/UserStackAssociation"
                      },
                      {
                        "description": "Information about the user and associated stack."
                      }
                    ]
                  },
                  "ErrorCode": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/UserStackAssociationErrorCode"
                      },
                      {
                        "description": "The error code for the error that is returned when a user can’t be associated with or disassociated from a stack."
                      }
                    ]
                  },
                  "ErrorMessage": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/String"
                      },
                      {
                        "description": "The error message for the error that is returned when a user can’t be associated with or disassociated from a stack."
                      }
                    ]
                  }
                },
                "description": "Describes the error that is returned when a user can’t be associated with or disassociated from a stack. "
              }
            }
          },
          "security": [
            {
              "hmac": []
            }
          ]
        }
        // Exercise and evaluate
        assert.ok(typeof schema === 'object')
    })
    it('should match schema4', () => {
        // Setup
        const schema: OpenAPI = {
          "openapi": "3.0.0",
          "info": {
            "version": "2019-01-25",
            "x-release": "v4",
            "title": "AWS App Mesh",
            "description": "<p>App Mesh is a service mesh based on the Envoy proxy that makes it easy to monitor and control microservices. App Mesh standardizes how your microservices communicate, giving you end-to-end visibility and helping to ensure high availability for your applications.</p> <p>App Mesh gives you consistent visibility and network traffic controls for every microservice in an application. You can use App Mesh with Amazon Web Services Fargate, Amazon ECS, Amazon EKS, Kubernetes on Amazon Web Services, and Amazon EC2.</p> <note> <p>App Mesh supports microservice applications that use service discovery naming for their components. For more information about service discovery on Amazon ECS, see <a href=\"https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-discovery.html\">Service Discovery</a> in the <i>Amazon Elastic Container Service Developer Guide</i>. Kubernetes <code>kube-dns</code> and <code>coredns</code> are supported. For more information, see <a href=\"https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/\">DNS for Services and Pods</a> in the Kubernetes documentation.</p> </note>",
            "x-logo": {
              "url": "https://api.apis.guru/v2/cache/logo/https_twitter.com_awscloud_profile_image.png",
              "backgroundColor": "#FFFFFF"
            },
            "termsOfService": "https://aws.amazon.com/service-terms/",
            "contact": {
              "name": "Mike Ralphson",
              "email": "mike.ralphson@gmail.com",
              "url": "https://github.com/mermade/aws2openapi",
              "x-twitter": "PermittedSoc"
            },
            "license": {
              "name": "Apache 2.0 License",
              "url": "http://www.apache.org/licenses/"
            },
            "x-providerName": "amazonaws.com",
            "x-serviceName": "appmesh",
            "x-aws-signingName": "appmesh",
            "x-origin": [
              {
                "contentType": "application/json",
                "url": "https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/appmesh-2019-01-25.normal.json",
                "converter": {
                  "url": "https://github.com/mermade/aws2openapi",
                  "version": "1.0.0"
                },
                "x-apisguru-driver": "external"
              }
            ],
            "x-apiClientRegistration": {
              "url": "https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct"
            },
            "x-apisguru-categories": [
              "cloud"
            ],
            "x-preferred": true
          },
          "externalDocs": {
            "description": "Amazon Web Services documentation",
            "url": "https://docs.aws.amazon.com/appmesh/"
          },
          "servers": [
            {
              "url": "http://appmesh.{region}.amazonaws.com",
              "variables": {
                "region": {
                  "description": "The AWS region",
                  "enum": [
                    "us-east-1",
                    "us-east-2",
                    "us-west-1",
                    "us-west-2",
                    "us-gov-west-1",
                    "us-gov-east-1",
                    "ca-central-1",
                    "eu-north-1",
                    "eu-west-1",
                    "eu-west-2",
                    "eu-west-3",
                    "eu-central-1",
                    "eu-south-1",
                    "af-south-1",
                    "ap-northeast-1",
                    "ap-northeast-2",
                    "ap-northeast-3",
                    "ap-southeast-1",
                    "ap-southeast-2",
                    "ap-east-1",
                    "ap-south-1",
                    "sa-east-1",
                    "me-south-1"
                  ],
                  "default": "us-east-1"
                }
              },
              "description": "The AWS App Mesh multi-region endpoint"
            },
            {
              "url": "https://appmesh.{region}.amazonaws.com",
              "variables": {
                "region": {
                  "description": "The AWS region",
                  "enum": [
                    "us-east-1",
                    "us-east-2",
                    "us-west-1",
                    "us-west-2",
                    "us-gov-west-1",
                    "us-gov-east-1",
                    "ca-central-1",
                    "eu-north-1",
                    "eu-west-1",
                    "eu-west-2",
                    "eu-west-3",
                    "eu-central-1",
                    "eu-south-1",
                    "af-south-1",
                    "ap-northeast-1",
                    "ap-northeast-2",
                    "ap-northeast-3",
                    "ap-southeast-1",
                    "ap-southeast-2",
                    "ap-east-1",
                    "ap-south-1",
                    "sa-east-1",
                    "me-south-1"
                  ],
                  "default": "us-east-1"
                }
              },
              "description": "The AWS App Mesh multi-region endpoint"
            },
            {
              "url": "http://appmesh.{region}.amazonaws.com.cn",
              "variables": {
                "region": {
                  "description": "The AWS region",
                  "enum": [
                    "cn-north-1",
                    "cn-northwest-1"
                  ],
                  "default": "cn-north-1"
                }
              },
              "description": "The AWS App Mesh endpoint for China (Beijing) and China (Ningxia)"
            },
            {
              "url": "https://appmesh.{region}.amazonaws.com.cn",
              "variables": {
                "region": {
                  "description": "The AWS region",
                  "enum": [
                    "cn-north-1",
                    "cn-northwest-1"
                  ],
                  "default": "cn-north-1"
                }
              },
              "description": "The AWS App Mesh endpoint for China (Beijing) and China (Ningxia)"
            }
          ],
          "paths": {
            "/v20190125/meshes/{meshName}/virtualGateway/{virtualGatewayName}/gatewayRoutes": {
              "put": {
                "operationId": "CreateGatewayRoute",
                "description": "<p>Creates a gateway route.</p> <p>A gateway route is attached to a virtual gateway and routes traffic to an existing virtual service. If a route matches a request, it can distribute traffic to a target virtual service.</p> <p>For more information about gateway routes, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/gateway-routes.html\">Gateway routes</a>.</p>",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/CreateGatewayRouteOutput"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "NotFoundException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/NotFoundException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "BadRequestException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/BadRequestException"
                        }
                      }
                    }
                  },
                  "482": {
                    "description": "ConflictException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ConflictException"
                        }
                      }
                    }
                  },
                  "483": {
                    "description": "TooManyRequestsException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/TooManyRequestsException"
                        }
                      }
                    }
                  },
                  "484": {
                    "description": "ForbiddenException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ForbiddenException"
                        }
                      }
                    }
                  },
                  "485": {
                    "description": "ServiceUnavailableException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ServiceUnavailableException"
                        }
                      }
                    }
                  },
                  "486": {
                    "description": "InternalServerErrorException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InternalServerErrorException"
                        }
                      }
                    }
                  },
                  "487": {
                    "description": "LimitExceededException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/LimitExceededException"
                        }
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "meshName",
                    "in": "path",
                    "required": true,
                    "description": "The name of the service mesh to create the gateway route in.",
                    "schema": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 255
                    }
                  },
                  {
                    "name": "meshOwner",
                    "in": "query",
                    "required": false,
                    "description": "The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then the account that you specify must share the mesh with your account before you can create the resource in the service mesh. For more information about mesh sharing, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\">Working with shared meshes</a>.",
                    "schema": {
                      "type": "string",
                      "minLength": 12,
                      "maxLength": 12
                    }
                  },
                  {
                    "name": "virtualGatewayName",
                    "in": "path",
                    "required": true,
                    "description": "The name of the virtual gateway to associate the gateway route with. If the virtual gateway is in a shared mesh, then you must be the owner of the virtual gateway resource.",
                    "schema": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 255
                    }
                  }
                ],
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "required": [
                          "gatewayRouteName",
                          "spec"
                        ],
                        "properties": {
                          "clientToken": {
                            "description": "Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Up to 36 letters, numbers, hyphens, and underscores are allowed.",
                            "type": "string"
                          },
                          "gatewayRouteName": {
                            "description": "The name to use for the gateway route.",
                            "type": "string",
                            "minLength": 1,
                            "maxLength": 255
                          },
                          "spec": {
                            "description": "An object that represents a gateway route specification. Specify one gateway route type.",
                            "type": "object",
                            "properties": {
                              "grpcRoute": {
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/GrpcGatewayRoute"
                                  },
                                  {
                                    "description": "An object that represents the specification of a gRPC gateway route."
                                  }
                                ]
                              },
                              "http2Route": {
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/HttpGatewayRoute"
                                  },
                                  {
                                    "description": "An object that represents the specification of an HTTP/2 gateway route."
                                  }
                                ]
                              },
                              "httpRoute": {
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/HttpGatewayRoute"
                                  },
                                  {
                                    "description": "An object that represents the specification of an HTTP gateway route."
                                  }
                                ]
                              },
                              "priority": {
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/GatewayRoutePriority"
                                  },
                                  {
                                    "description": "The ordering of the gateway routes spec."
                                  }
                                ]
                              }
                            }
                          },
                          "tags": {
                            "description": "Optional metadata that you can apply to the gateway route to assist with categorization and organization. Each tag consists of a key and an optional value, both of which you define. Tag keys can have a maximum character length of 128 characters, and tag values can have a maximum length of 256 characters.",
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/TagRef"
                            },
                            "minItems": 0,
                            "maxItems": 50
                          }
                        }
                      }
                    }
                  }
                }
              },
              "parameters": [
                {
                  "$ref": "#/components/parameters/X-Amz-Content-Sha256"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Date"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Algorithm"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Credential"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Security-Token"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Signature"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-SignedHeaders"
                }
              ],
              "get": {
                "operationId": "ListGatewayRoutes",
                "description": "Returns a list of existing gateway routes that are associated to a virtual gateway.",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ListGatewayRoutesOutput"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "NotFoundException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/NotFoundException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "BadRequestException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/BadRequestException"
                        }
                      }
                    }
                  },
                  "482": {
                    "description": "TooManyRequestsException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/TooManyRequestsException"
                        }
                      }
                    }
                  },
                  "483": {
                    "description": "ForbiddenException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ForbiddenException"
                        }
                      }
                    }
                  },
                  "484": {
                    "description": "ServiceUnavailableException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ServiceUnavailableException"
                        }
                      }
                    }
                  },
                  "485": {
                    "description": "InternalServerErrorException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InternalServerErrorException"
                        }
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "limit",
                    "in": "query",
                    "required": false,
                    "description": "The maximum number of results returned by <code>ListGatewayRoutes</code> in paginated output. When you use this parameter, <code>ListGatewayRoutes</code> returns only <code>limit</code> results in a single page along with a <code>nextToken</code> response element. You can see the remaining results of the initial request by sending another <code>ListGatewayRoutes</code> request with the returned <code>nextToken</code> value. This value can be between 1 and 100. If you don't use this parameter, <code>ListGatewayRoutes</code> returns up to 100 results and a <code>nextToken</code> value if applicable.",
                    "schema": {
                      "type": "integer",
                      "minimum": 1,
                      "maximum": 100
                    }
                  },
                  {
                    "name": "meshName",
                    "in": "path",
                    "required": true,
                    "description": "The name of the service mesh to list gateway routes in.",
                    "schema": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 255
                    }
                  },
                  {
                    "name": "meshOwner",
                    "in": "query",
                    "required": false,
                    "description": "The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\">Working with shared meshes</a>.",
                    "schema": {
                      "type": "string",
                      "minLength": 12,
                      "maxLength": 12
                    }
                  },
                  {
                    "name": "nextToken",
                    "in": "query",
                    "required": false,
                    "description": "The <code>nextToken</code> value returned from a previous paginated <code>ListGatewayRoutes</code> request where <code>limit</code> was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the <code>nextToken</code> value.",
                    "schema": {
                      "type": "string"
                    }
                  },
                  {
                    "name": "virtualGatewayName",
                    "in": "path",
                    "required": true,
                    "description": "The name of the virtual gateway to list gateway routes in.",
                    "schema": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 255
                    }
                  }
                ]
              }
            },
            "/v20190125/meshes": {
              "put": {
                "operationId": "CreateMesh",
                "description": "<p>Creates a service mesh.</p> <p> A service mesh is a logical boundary for network traffic between services that are represented by resources within the mesh. After you create your service mesh, you can create virtual services, virtual nodes, virtual routers, and routes to distribute traffic between the applications in your mesh.</p> <p>For more information about service meshes, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/meshes.html\">Service meshes</a>.</p>",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/CreateMeshOutput"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "NotFoundException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/NotFoundException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "BadRequestException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/BadRequestException"
                        }
                      }
                    }
                  },
                  "482": {
                    "description": "ConflictException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ConflictException"
                        }
                      }
                    }
                  },
                  "483": {
                    "description": "TooManyRequestsException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/TooManyRequestsException"
                        }
                      }
                    }
                  },
                  "484": {
                    "description": "ForbiddenException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ForbiddenException"
                        }
                      }
                    }
                  },
                  "485": {
                    "description": "ServiceUnavailableException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ServiceUnavailableException"
                        }
                      }
                    }
                  },
                  "486": {
                    "description": "InternalServerErrorException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InternalServerErrorException"
                        }
                      }
                    }
                  },
                  "487": {
                    "description": "LimitExceededException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/LimitExceededException"
                        }
                      }
                    }
                  }
                },
                "parameters": [],
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "required": [
                          "meshName"
                        ],
                        "properties": {
                          "clientToken": {
                            "description": "Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Up to 36 letters, numbers, hyphens, and underscores are allowed.",
                            "type": "string"
                          },
                          "meshName": {
                            "description": "The name to use for the service mesh.",
                            "type": "string",
                            "minLength": 1,
                            "maxLength": 255
                          },
                          "spec": {
                            "description": "An object that represents the specification of a service mesh.",
                            "type": "object",
                            "properties": {
                              "egressFilter": {
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/EgressFilter"
                                  },
                                  {
                                    "description": "The egress filter rules for the service mesh."
                                  }
                                ]
                              },
                              "serviceDiscovery": {
                                "$ref": "#/components/schemas/MeshServiceDiscovery"
                              }
                            }
                          },
                          "tags": {
                            "description": "Optional metadata that you can apply to the service mesh to assist with categorization and organization. Each tag consists of a key and an optional value, both of which you define. Tag keys can have a maximum character length of 128 characters, and tag values can have a maximum length of 256 characters.",
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/TagRef"
                            },
                            "minItems": 0,
                            "maxItems": 50
                          }
                        }
                      }
                    }
                  }
                }
              },
              "parameters": [
                {
                  "$ref": "#/components/parameters/X-Amz-Content-Sha256"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Date"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Algorithm"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Credential"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Security-Token"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Signature"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-SignedHeaders"
                }
              ],
              "get": {
                "operationId": "ListMeshes",
                "description": "Returns a list of existing service meshes.",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ListMeshesOutput"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "NotFoundException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/NotFoundException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "BadRequestException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/BadRequestException"
                        }
                      }
                    }
                  },
                  "482": {
                    "description": "TooManyRequestsException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/TooManyRequestsException"
                        }
                      }
                    }
                  },
                  "483": {
                    "description": "ForbiddenException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ForbiddenException"
                        }
                      }
                    }
                  },
                  "484": {
                    "description": "ServiceUnavailableException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ServiceUnavailableException"
                        }
                      }
                    }
                  },
                  "485": {
                    "description": "InternalServerErrorException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InternalServerErrorException"
                        }
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "limit",
                    "in": "query",
                    "required": false,
                    "description": "The maximum number of results returned by <code>ListMeshes</code> in paginated output. When you use this parameter, <code>ListMeshes</code> returns only <code>limit</code> results in a single page along with a <code>nextToken</code> response element. You can see the remaining results of the initial request by sending another <code>ListMeshes</code> request with the returned <code>nextToken</code> value. This value can be between 1 and 100. If you don't use this parameter, <code>ListMeshes</code> returns up to 100 results and a <code>nextToken</code> value if applicable.",
                    "schema": {
                      "type": "integer",
                      "minimum": 1,
                      "maximum": 100
                    }
                  },
                  {
                    "name": "nextToken",
                    "in": "query",
                    "required": false,
                    "description": "<p>The <code>nextToken</code> value returned from a previous paginated <code>ListMeshes</code> request where <code>limit</code> was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the <code>nextToken</code> value.</p> <note> <p>This token should be treated as an opaque identifier that is used only to retrieve the next items in a list and not for other programmatic purposes.</p> </note>",
                    "schema": {
                      "type": "string"
                    }
                  }
                ]
              }
            },
            "/v20190125/meshes/{meshName}/virtualRouter/{virtualRouterName}/routes": {
              "put": {
                "operationId": "CreateRoute",
                "description": "<p>Creates a route that is associated with a virtual router.</p> <p> You can route several different protocols and define a retry policy for a route. Traffic can be routed to one or more virtual nodes.</p> <p>For more information about routes, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/routes.html\">Routes</a>.</p>",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/CreateRouteOutput"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "NotFoundException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/NotFoundException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "BadRequestException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/BadRequestException"
                        }
                      }
                    }
                  },
                  "482": {
                    "description": "ConflictException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ConflictException"
                        }
                      }
                    }
                  },
                  "483": {
                    "description": "TooManyRequestsException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/TooManyRequestsException"
                        }
                      }
                    }
                  },
                  "484": {
                    "description": "ForbiddenException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ForbiddenException"
                        }
                      }
                    }
                  },
                  "485": {
                    "description": "ServiceUnavailableException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ServiceUnavailableException"
                        }
                      }
                    }
                  },
                  "486": {
                    "description": "InternalServerErrorException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InternalServerErrorException"
                        }
                      }
                    }
                  },
                  "487": {
                    "description": "LimitExceededException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/LimitExceededException"
                        }
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "meshName",
                    "in": "path",
                    "required": true,
                    "description": "The name of the service mesh to create the route in.",
                    "schema": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 255
                    }
                  },
                  {
                    "name": "meshOwner",
                    "in": "query",
                    "required": false,
                    "description": "The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then the account that you specify must share the mesh with your account before you can create the resource in the service mesh. For more information about mesh sharing, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\">Working with shared meshes</a>.",
                    "schema": {
                      "type": "string",
                      "minLength": 12,
                      "maxLength": 12
                    }
                  },
                  {
                    "name": "virtualRouterName",
                    "in": "path",
                    "required": true,
                    "description": "The name of the virtual router in which to create the route. If the virtual router is in a shared mesh, then you must be the owner of the virtual router resource.",
                    "schema": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 255
                    }
                  }
                ],
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "required": [
                          "routeName",
                          "spec"
                        ],
                        "properties": {
                          "clientToken": {
                            "description": "Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Up to 36 letters, numbers, hyphens, and underscores are allowed.",
                            "type": "string"
                          },
                          "routeName": {
                            "description": "The name to use for the route.",
                            "type": "string",
                            "minLength": 1,
                            "maxLength": 255
                          },
                          "spec": {
                            "description": "An object that represents a route specification. Specify one route type.",
                            "type": "object",
                            "properties": {
                              "grpcRoute": {
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/GrpcRoute"
                                  },
                                  {
                                    "description": "An object that represents the specification of a gRPC route."
                                  }
                                ]
                              },
                              "http2Route": {
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/HttpRoute"
                                  },
                                  {
                                    "description": "An object that represents the specification of an HTTP/2 route."
                                  }
                                ]
                              },
                              "httpRoute": {
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/HttpRoute"
                                  },
                                  {
                                    "description": "An object that represents the specification of an HTTP route."
                                  }
                                ]
                              },
                              "priority": {
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/RoutePriority"
                                  },
                                  {
                                    "description": "The priority for the route. Routes are matched based on the specified value, where 0 is the highest priority."
                                  }
                                ]
                              },
                              "tcpRoute": {
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/TcpRoute"
                                  },
                                  {
                                    "description": "An object that represents the specification of a TCP route."
                                  }
                                ]
                              }
                            }
                          },
                          "tags": {
                            "description": "Optional metadata that you can apply to the route to assist with categorization and organization. Each tag consists of a key and an optional value, both of which you define. Tag keys can have a maximum character length of 128 characters, and tag values can have a maximum length of 256 characters.",
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/TagRef"
                            },
                            "minItems": 0,
                            "maxItems": 50
                          }
                        }
                      }
                    }
                  }
                }
              },
              "parameters": [
                {
                  "$ref": "#/components/parameters/X-Amz-Content-Sha256"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Date"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Algorithm"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Credential"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Security-Token"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Signature"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-SignedHeaders"
                }
              ],
              "get": {
                "operationId": "ListRoutes",
                "description": "Returns a list of existing routes in a service mesh.",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ListRoutesOutput"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "NotFoundException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/NotFoundException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "BadRequestException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/BadRequestException"
                        }
                      }
                    }
                  },
                  "482": {
                    "description": "TooManyRequestsException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/TooManyRequestsException"
                        }
                      }
                    }
                  },
                  "483": {
                    "description": "ForbiddenException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ForbiddenException"
                        }
                      }
                    }
                  },
                  "484": {
                    "description": "ServiceUnavailableException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ServiceUnavailableException"
                        }
                      }
                    }
                  },
                  "485": {
                    "description": "InternalServerErrorException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InternalServerErrorException"
                        }
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "limit",
                    "in": "query",
                    "required": false,
                    "description": "The maximum number of results returned by <code>ListRoutes</code> in paginated output. When you use this parameter, <code>ListRoutes</code> returns only <code>limit</code> results in a single page along with a <code>nextToken</code> response element. You can see the remaining results of the initial request by sending another <code>ListRoutes</code> request with the returned <code>nextToken</code> value. This value can be between 1 and 100. If you don't use this parameter, <code>ListRoutes</code> returns up to 100 results and a <code>nextToken</code> value if applicable.",
                    "schema": {
                      "type": "integer",
                      "minimum": 1,
                      "maximum": 100
                    }
                  },
                  {
                    "name": "meshName",
                    "in": "path",
                    "required": true,
                    "description": "The name of the service mesh to list routes in.",
                    "schema": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 255
                    }
                  },
                  {
                    "name": "meshOwner",
                    "in": "query",
                    "required": false,
                    "description": "The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\">Working with shared meshes</a>.",
                    "schema": {
                      "type": "string",
                      "minLength": 12,
                      "maxLength": 12
                    }
                  },
                  {
                    "name": "nextToken",
                    "in": "query",
                    "required": false,
                    "description": "The <code>nextToken</code> value returned from a previous paginated <code>ListRoutes</code> request where <code>limit</code> was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the <code>nextToken</code> value.",
                    "schema": {
                      "type": "string"
                    }
                  },
                  {
                    "name": "virtualRouterName",
                    "in": "path",
                    "required": true,
                    "description": "The name of the virtual router to list routes in.",
                    "schema": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 255
                    }
                  }
                ]
              }
            },
            "/v20190125/meshes/{meshName}/virtualGateways": {
              "put": {
                "operationId": "CreateVirtualGateway",
                "description": "<p>Creates a virtual gateway.</p> <p>A virtual gateway allows resources outside your mesh to communicate to resources that are inside your mesh. The virtual gateway represents an Envoy proxy running in an Amazon ECS task, in a Kubernetes service, or on an Amazon EC2 instance. Unlike a virtual node, which represents an Envoy running with an application, a virtual gateway represents Envoy deployed by itself.</p> <p>For more information about virtual gateways, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/virtual_gateways.html\">Virtual gateways</a>. </p>",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/CreateVirtualGatewayOutput"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "NotFoundException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/NotFoundException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "BadRequestException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/BadRequestException"
                        }
                      }
                    }
                  },
                  "482": {
                    "description": "ConflictException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ConflictException"
                        }
                      }
                    }
                  },
                  "483": {
                    "description": "TooManyRequestsException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/TooManyRequestsException"
                        }
                      }
                    }
                  },
                  "484": {
                    "description": "ForbiddenException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ForbiddenException"
                        }
                      }
                    }
                  },
                  "485": {
                    "description": "ServiceUnavailableException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ServiceUnavailableException"
                        }
                      }
                    }
                  },
                  "486": {
                    "description": "InternalServerErrorException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InternalServerErrorException"
                        }
                      }
                    }
                  },
                  "487": {
                    "description": "LimitExceededException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/LimitExceededException"
                        }
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "meshName",
                    "in": "path",
                    "required": true,
                    "description": "The name of the service mesh to create the virtual gateway in.",
                    "schema": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 255
                    }
                  },
                  {
                    "name": "meshOwner",
                    "in": "query",
                    "required": false,
                    "description": "The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then the account that you specify must share the mesh with your account before you can create the resource in the service mesh. For more information about mesh sharing, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\">Working with shared meshes</a>.",
                    "schema": {
                      "type": "string",
                      "minLength": 12,
                      "maxLength": 12
                    }
                  }
                ],
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "required": [
                          "spec",
                          "virtualGatewayName"
                        ],
                        "properties": {
                          "clientToken": {
                            "description": "Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Up to 36 letters, numbers, hyphens, and underscores are allowed.",
                            "type": "string"
                          },
                          "spec": {
                            "description": "An object that represents the specification of a service mesh resource.",
                            "type": "object",
                            "properties": {
                              "backendDefaults": {
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/VirtualGatewayBackendDefaults"
                                  },
                                  {
                                    "description": "A reference to an object that represents the defaults for backends."
                                  }
                                ]
                              },
                              "listeners": {
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/VirtualGatewayListeners"
                                  },
                                  {
                                    "description": "The listeners that the mesh endpoint is expected to receive inbound traffic from. You can specify one listener."
                                  }
                                ]
                              },
                              "logging": {
                                "$ref": "#/components/schemas/VirtualGatewayLogging"
                              }
                            }
                          },
                          "tags": {
                            "description": "Optional metadata that you can apply to the virtual gateway to assist with categorization and organization. Each tag consists of a key and an optional value, both of which you define. Tag keys can have a maximum character length of 128 characters, and tag values can have a maximum length of 256 characters.",
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/TagRef"
                            },
                            "minItems": 0,
                            "maxItems": 50
                          },
                          "virtualGatewayName": {
                            "description": "The name to use for the virtual gateway.",
                            "type": "string",
                            "minLength": 1,
                            "maxLength": 255
                          }
                        }
                      }
                    }
                  }
                }
              },
              "parameters": [
                {
                  "$ref": "#/components/parameters/X-Amz-Content-Sha256"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Date"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Algorithm"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Credential"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Security-Token"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Signature"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-SignedHeaders"
                }
              ],
              "get": {
                "operationId": "ListVirtualGateways",
                "description": "Returns a list of existing virtual gateways in a service mesh.",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ListVirtualGatewaysOutput"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "NotFoundException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/NotFoundException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "BadRequestException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/BadRequestException"
                        }
                      }
                    }
                  },
                  "482": {
                    "description": "TooManyRequestsException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/TooManyRequestsException"
                        }
                      }
                    }
                  },
                  "483": {
                    "description": "ForbiddenException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ForbiddenException"
                        }
                      }
                    }
                  },
                  "484": {
                    "description": "ServiceUnavailableException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ServiceUnavailableException"
                        }
                      }
                    }
                  },
                  "485": {
                    "description": "InternalServerErrorException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InternalServerErrorException"
                        }
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "limit",
                    "in": "query",
                    "required": false,
                    "description": "The maximum number of results returned by <code>ListVirtualGateways</code> in paginated output. When you use this parameter, <code>ListVirtualGateways</code> returns only <code>limit</code> results in a single page along with a <code>nextToken</code> response element. You can see the remaining results of the initial request by sending another <code>ListVirtualGateways</code> request with the returned <code>nextToken</code> value. This value can be between 1 and 100. If you don't use this parameter, <code>ListVirtualGateways</code> returns up to 100 results and a <code>nextToken</code> value if applicable.",
                    "schema": {
                      "type": "integer",
                      "minimum": 1,
                      "maximum": 100
                    }
                  },
                  {
                    "name": "meshName",
                    "in": "path",
                    "required": true,
                    "description": "The name of the service mesh to list virtual gateways in.",
                    "schema": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 255
                    }
                  },
                  {
                    "name": "meshOwner",
                    "in": "query",
                    "required": false,
                    "description": "The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\">Working with shared meshes</a>.",
                    "schema": {
                      "type": "string",
                      "minLength": 12,
                      "maxLength": 12
                    }
                  },
                  {
                    "name": "nextToken",
                    "in": "query",
                    "required": false,
                    "description": "The <code>nextToken</code> value returned from a previous paginated <code>ListVirtualGateways</code> request where <code>limit</code> was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the <code>nextToken</code> value.",
                    "schema": {
                      "type": "string"
                    }
                  }
                ]
              }
            },
            "/v20190125/meshes/{meshName}/virtualNodes": {
              "put": {
                "operationId": "CreateVirtualNode",
                "description": "<p>Creates a virtual node within a service mesh.</p> <p> A virtual node acts as a logical pointer to a particular task group, such as an Amazon ECS service or a Kubernetes deployment. When you create a virtual node, you can specify the service discovery information for your task group, and whether the proxy running in a task group will communicate with other proxies using Transport Layer Security (TLS).</p> <p>You define a <code>listener</code> for any inbound traffic that your virtual node expects. Any virtual service that your virtual node expects to communicate to is specified as a <code>backend</code>.</p> <p>The response metadata for your new virtual node contains the <code>arn</code> that is associated with the virtual node. Set this value to the full ARN; for example, <code>arn:aws:appmesh:us-west-2:123456789012:myMesh/default/virtualNode/myApp</code>) as the <code>APPMESH_RESOURCE_ARN</code> environment variable for your task group's Envoy proxy container in your task definition or pod spec. This is then mapped to the <code>node.id</code> and <code>node.cluster</code> Envoy parameters.</p> <note> <p>By default, App Mesh uses the name of the resource you specified in <code>APPMESH_RESOURCE_ARN</code> when Envoy is referring to itself in metrics and traces. You can override this behavior by setting the <code>APPMESH_RESOURCE_CLUSTER</code> environment variable with your own name.</p> </note> <p>For more information about virtual nodes, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/virtual_nodes.html\">Virtual nodes</a>. You must be using <code>1.15.0</code> or later of the Envoy image when setting these variables. For more information aboutApp Mesh Envoy variables, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/envoy.html\">Envoy image</a> in the App Mesh User Guide.</p>",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/CreateVirtualNodeOutput"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "NotFoundException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/NotFoundException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "BadRequestException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/BadRequestException"
                        }
                      }
                    }
                  },
                  "482": {
                    "description": "ConflictException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ConflictException"
                        }
                      }
                    }
                  },
                  "483": {
                    "description": "TooManyRequestsException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/TooManyRequestsException"
                        }
                      }
                    }
                  },
                  "484": {
                    "description": "ForbiddenException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ForbiddenException"
                        }
                      }
                    }
                  },
                  "485": {
                    "description": "ServiceUnavailableException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ServiceUnavailableException"
                        }
                      }
                    }
                  },
                  "486": {
                    "description": "InternalServerErrorException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InternalServerErrorException"
                        }
                      }
                    }
                  },
                  "487": {
                    "description": "LimitExceededException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/LimitExceededException"
                        }
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "meshName",
                    "in": "path",
                    "required": true,
                    "description": "The name of the service mesh to create the virtual node in.",
                    "schema": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 255
                    }
                  },
                  {
                    "name": "meshOwner",
                    "in": "query",
                    "required": false,
                    "description": "The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then the account that you specify must share the mesh with your account before you can create the resource in the service mesh. For more information about mesh sharing, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\">Working with shared meshes</a>.",
                    "schema": {
                      "type": "string",
                      "minLength": 12,
                      "maxLength": 12
                    }
                  }
                ],
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "required": [
                          "spec",
                          "virtualNodeName"
                        ],
                        "properties": {
                          "clientToken": {
                            "description": "Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Up to 36 letters, numbers, hyphens, and underscores are allowed.",
                            "type": "string"
                          },
                          "spec": {
                            "description": "An object that represents the specification of a virtual node.",
                            "type": "object",
                            "properties": {
                              "backendDefaults": {
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/BackendDefaults"
                                  },
                                  {
                                    "description": "A reference to an object that represents the defaults for backends."
                                  }
                                ]
                              },
                              "backends": {
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/Backends"
                                  },
                                  {
                                    "description": "The backends that the virtual node is expected to send outbound traffic to."
                                  }
                                ]
                              },
                              "listeners": {
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/Listeners"
                                  },
                                  {
                                    "description": "The listener that the virtual node is expected to receive inbound traffic from. You can specify one listener."
                                  }
                                ]
                              },
                              "logging": {
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/Logging"
                                  },
                                  {
                                    "description": "The inbound and outbound access logging information for the virtual node."
                                  }
                                ]
                              },
                              "serviceDiscovery": {
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/ServiceDiscovery"
                                  },
                                  {
                                    "description": "The service discovery information for the virtual node. If your virtual node does not expect ingress traffic, you can omit this parameter. If you specify a <code>listener</code>, then you must specify service discovery information."
                                  }
                                ]
                              }
                            }
                          },
                          "tags": {
                            "description": "Optional metadata that you can apply to the virtual node to assist with categorization and organization. Each tag consists of a key and an optional value, both of which you define. Tag keys can have a maximum character length of 128 characters, and tag values can have a maximum length of 256 characters.",
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/TagRef"
                            },
                            "minItems": 0,
                            "maxItems": 50
                          },
                          "virtualNodeName": {
                            "description": "The name to use for the virtual node.",
                            "type": "string",
                            "minLength": 1,
                            "maxLength": 255
                          }
                        }
                      }
                    }
                  }
                }
              },
              "parameters": [
                {
                  "$ref": "#/components/parameters/X-Amz-Content-Sha256"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Date"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Algorithm"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Credential"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Security-Token"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Signature"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-SignedHeaders"
                }
              ],
              "get": {
                "operationId": "ListVirtualNodes",
                "description": "Returns a list of existing virtual nodes.",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ListVirtualNodesOutput"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "NotFoundException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/NotFoundException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "BadRequestException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/BadRequestException"
                        }
                      }
                    }
                  },
                  "482": {
                    "description": "TooManyRequestsException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/TooManyRequestsException"
                        }
                      }
                    }
                  },
                  "483": {
                    "description": "ForbiddenException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ForbiddenException"
                        }
                      }
                    }
                  },
                  "484": {
                    "description": "ServiceUnavailableException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ServiceUnavailableException"
                        }
                      }
                    }
                  },
                  "485": {
                    "description": "InternalServerErrorException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InternalServerErrorException"
                        }
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "limit",
                    "in": "query",
                    "required": false,
                    "description": "The maximum number of results returned by <code>ListVirtualNodes</code> in paginated output. When you use this parameter, <code>ListVirtualNodes</code> returns only <code>limit</code> results in a single page along with a <code>nextToken</code> response element. You can see the remaining results of the initial request by sending another <code>ListVirtualNodes</code> request with the returned <code>nextToken</code> value. This value can be between 1 and 100. If you don't use this parameter, <code>ListVirtualNodes</code> returns up to 100 results and a <code>nextToken</code> value if applicable.",
                    "schema": {
                      "type": "integer",
                      "minimum": 1,
                      "maximum": 100
                    }
                  },
                  {
                    "name": "meshName",
                    "in": "path",
                    "required": true,
                    "description": "The name of the service mesh to list virtual nodes in.",
                    "schema": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 255
                    }
                  },
                  {
                    "name": "meshOwner",
                    "in": "query",
                    "required": false,
                    "description": "The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\">Working with shared meshes</a>.",
                    "schema": {
                      "type": "string",
                      "minLength": 12,
                      "maxLength": 12
                    }
                  },
                  {
                    "name": "nextToken",
                    "in": "query",
                    "required": false,
                    "description": "The <code>nextToken</code> value returned from a previous paginated <code>ListVirtualNodes</code> request where <code>limit</code> was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the <code>nextToken</code> value.",
                    "schema": {
                      "type": "string"
                    }
                  }
                ]
              }
            },
            "/v20190125/meshes/{meshName}/virtualRouters": {
              "put": {
                "operationId": "CreateVirtualRouter",
                "description": "<p>Creates a virtual router within a service mesh.</p> <p>Specify a <code>listener</code> for any inbound traffic that your virtual router receives. Create a virtual router for each protocol and port that you need to route. Virtual routers handle traffic for one or more virtual services within your mesh. After you create your virtual router, create and associate routes for your virtual router that direct incoming requests to different virtual nodes.</p> <p>For more information about virtual routers, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/virtual_routers.html\">Virtual routers</a>.</p>",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/CreateVirtualRouterOutput"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "NotFoundException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/NotFoundException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "BadRequestException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/BadRequestException"
                        }
                      }
                    }
                  },
                  "482": {
                    "description": "ConflictException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ConflictException"
                        }
                      }
                    }
                  },
                  "483": {
                    "description": "TooManyRequestsException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/TooManyRequestsException"
                        }
                      }
                    }
                  },
                  "484": {
                    "description": "ForbiddenException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ForbiddenException"
                        }
                      }
                    }
                  },
                  "485": {
                    "description": "ServiceUnavailableException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ServiceUnavailableException"
                        }
                      }
                    }
                  },
                  "486": {
                    "description": "InternalServerErrorException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InternalServerErrorException"
                        }
                      }
                    }
                  },
                  "487": {
                    "description": "LimitExceededException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/LimitExceededException"
                        }
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "meshName",
                    "in": "path",
                    "required": true,
                    "description": "The name of the service mesh to create the virtual router in.",
                    "schema": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 255
                    }
                  },
                  {
                    "name": "meshOwner",
                    "in": "query",
                    "required": false,
                    "description": "The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then the account that you specify must share the mesh with your account before you can create the resource in the service mesh. For more information about mesh sharing, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\">Working with shared meshes</a>.",
                    "schema": {
                      "type": "string",
                      "minLength": 12,
                      "maxLength": 12
                    }
                  }
                ],
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "required": [
                          "spec",
                          "virtualRouterName"
                        ],
                        "properties": {
                          "clientToken": {
                            "description": "Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Up to 36 letters, numbers, hyphens, and underscores are allowed.",
                            "type": "string"
                          },
                          "spec": {
                            "description": "An object that represents the specification of a virtual router.",
                            "type": "object",
                            "properties": {
                              "listeners": {
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/VirtualRouterListeners"
                                  },
                                  {
                                    "description": "The listeners that the virtual router is expected to receive inbound traffic from. You can specify one listener."
                                  }
                                ]
                              }
                            }
                          },
                          "tags": {
                            "description": "Optional metadata that you can apply to the virtual router to assist with categorization and organization. Each tag consists of a key and an optional value, both of which you define. Tag keys can have a maximum character length of 128 characters, and tag values can have a maximum length of 256 characters.",
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/TagRef"
                            },
                            "minItems": 0,
                            "maxItems": 50
                          },
                          "virtualRouterName": {
                            "description": "The name to use for the virtual router.",
                            "type": "string",
                            "minLength": 1,
                            "maxLength": 255
                          }
                        }
                      }
                    }
                  }
                }
              },
              "parameters": [
                {
                  "$ref": "#/components/parameters/X-Amz-Content-Sha256"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Date"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Algorithm"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Credential"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Security-Token"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Signature"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-SignedHeaders"
                }
              ],
              "get": {
                "operationId": "ListVirtualRouters",
                "description": "Returns a list of existing virtual routers in a service mesh.",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ListVirtualRoutersOutput"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "NotFoundException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/NotFoundException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "BadRequestException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/BadRequestException"
                        }
                      }
                    }
                  },
                  "482": {
                    "description": "TooManyRequestsException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/TooManyRequestsException"
                        }
                      }
                    }
                  },
                  "483": {
                    "description": "ForbiddenException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ForbiddenException"
                        }
                      }
                    }
                  },
                  "484": {
                    "description": "ServiceUnavailableException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ServiceUnavailableException"
                        }
                      }
                    }
                  },
                  "485": {
                    "description": "InternalServerErrorException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InternalServerErrorException"
                        }
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "limit",
                    "in": "query",
                    "required": false,
                    "description": "The maximum number of results returned by <code>ListVirtualRouters</code> in paginated output. When you use this parameter, <code>ListVirtualRouters</code> returns only <code>limit</code> results in a single page along with a <code>nextToken</code> response element. You can see the remaining results of the initial request by sending another <code>ListVirtualRouters</code> request with the returned <code>nextToken</code> value. This value can be between 1 and 100. If you don't use this parameter, <code>ListVirtualRouters</code> returns up to 100 results and a <code>nextToken</code> value if applicable.",
                    "schema": {
                      "type": "integer",
                      "minimum": 1,
                      "maximum": 100
                    }
                  },
                  {
                    "name": "meshName",
                    "in": "path",
                    "required": true,
                    "description": "The name of the service mesh to list virtual routers in.",
                    "schema": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 255
                    }
                  },
                  {
                    "name": "meshOwner",
                    "in": "query",
                    "required": false,
                    "description": "The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\">Working with shared meshes</a>.",
                    "schema": {
                      "type": "string",
                      "minLength": 12,
                      "maxLength": 12
                    }
                  },
                  {
                    "name": "nextToken",
                    "in": "query",
                    "required": false,
                    "description": "The <code>nextToken</code> value returned from a previous paginated <code>ListVirtualRouters</code> request where <code>limit</code> was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the <code>nextToken</code> value.",
                    "schema": {
                      "type": "string"
                    }
                  }
                ]
              }
            },
            "/v20190125/meshes/{meshName}/virtualServices": {
              "put": {
                "operationId": "CreateVirtualService",
                "description": "<p>Creates a virtual service within a service mesh.</p> <p>A virtual service is an abstraction of a real service that is provided by a virtual node directly or indirectly by means of a virtual router. Dependent services call your virtual service by its <code>virtualServiceName</code>, and those requests are routed to the virtual node or virtual router that is specified as the provider for the virtual service.</p> <p>For more information about virtual services, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/virtual_services.html\">Virtual services</a>.</p>",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/CreateVirtualServiceOutput"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "NotFoundException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/NotFoundException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "BadRequestException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/BadRequestException"
                        }
                      }
                    }
                  },
                  "482": {
                    "description": "ConflictException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ConflictException"
                        }
                      }
                    }
                  },
                  "483": {
                    "description": "TooManyRequestsException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/TooManyRequestsException"
                        }
                      }
                    }
                  },
                  "484": {
                    "description": "ForbiddenException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ForbiddenException"
                        }
                      }
                    }
                  },
                  "485": {
                    "description": "ServiceUnavailableException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ServiceUnavailableException"
                        }
                      }
                    }
                  },
                  "486": {
                    "description": "InternalServerErrorException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InternalServerErrorException"
                        }
                      }
                    }
                  },
                  "487": {
                    "description": "LimitExceededException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/LimitExceededException"
                        }
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "meshName",
                    "in": "path",
                    "required": true,
                    "description": "The name of the service mesh to create the virtual service in.",
                    "schema": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 255
                    }
                  },
                  {
                    "name": "meshOwner",
                    "in": "query",
                    "required": false,
                    "description": "The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then the account that you specify must share the mesh with your account before you can create the resource in the service mesh. For more information about mesh sharing, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\">Working with shared meshes</a>.",
                    "schema": {
                      "type": "string",
                      "minLength": 12,
                      "maxLength": 12
                    }
                  }
                ],
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "required": [
                          "spec",
                          "virtualServiceName"
                        ],
                        "properties": {
                          "clientToken": {
                            "description": "Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Up to 36 letters, numbers, hyphens, and underscores are allowed.",
                            "type": "string"
                          },
                          "spec": {
                            "description": "An object that represents the specification of a virtual service.",
                            "type": "object",
                            "properties": {
                              "provider": {
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/VirtualServiceProvider"
                                  },
                                  {
                                    "description": "The App Mesh object that is acting as the provider for a virtual service. You can specify a single virtual node or virtual router."
                                  }
                                ]
                              }
                            }
                          },
                          "tags": {
                            "description": "Optional metadata that you can apply to the virtual service to assist with categorization and organization. Each tag consists of a key and an optional value, both of which you define. Tag keys can have a maximum character length of 128 characters, and tag values can have a maximum length of 256 characters.",
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/TagRef"
                            },
                            "minItems": 0,
                            "maxItems": 50
                          },
                          "virtualServiceName": {
                            "description": "The name to use for the virtual service.",
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              },
              "parameters": [
                {
                  "$ref": "#/components/parameters/X-Amz-Content-Sha256"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Date"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Algorithm"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Credential"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Security-Token"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Signature"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-SignedHeaders"
                }
              ],
              "get": {
                "operationId": "ListVirtualServices",
                "description": "Returns a list of existing virtual services in a service mesh.",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ListVirtualServicesOutput"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "NotFoundException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/NotFoundException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "BadRequestException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/BadRequestException"
                        }
                      }
                    }
                  },
                  "482": {
                    "description": "TooManyRequestsException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/TooManyRequestsException"
                        }
                      }
                    }
                  },
                  "483": {
                    "description": "ForbiddenException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ForbiddenException"
                        }
                      }
                    }
                  },
                  "484": {
                    "description": "ServiceUnavailableException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ServiceUnavailableException"
                        }
                      }
                    }
                  },
                  "485": {
                    "description": "InternalServerErrorException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InternalServerErrorException"
                        }
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "limit",
                    "in": "query",
                    "required": false,
                    "description": "The maximum number of results returned by <code>ListVirtualServices</code> in paginated output. When you use this parameter, <code>ListVirtualServices</code> returns only <code>limit</code> results in a single page along with a <code>nextToken</code> response element. You can see the remaining results of the initial request by sending another <code>ListVirtualServices</code> request with the returned <code>nextToken</code> value. This value can be between 1 and 100. If you don't use this parameter, <code>ListVirtualServices</code> returns up to 100 results and a <code>nextToken</code> value if applicable.",
                    "schema": {
                      "type": "integer",
                      "minimum": 1,
                      "maximum": 100
                    }
                  },
                  {
                    "name": "meshName",
                    "in": "path",
                    "required": true,
                    "description": "The name of the service mesh to list virtual services in.",
                    "schema": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 255
                    }
                  },
                  {
                    "name": "meshOwner",
                    "in": "query",
                    "required": false,
                    "description": "The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\">Working with shared meshes</a>.",
                    "schema": {
                      "type": "string",
                      "minLength": 12,
                      "maxLength": 12
                    }
                  },
                  {
                    "name": "nextToken",
                    "in": "query",
                    "required": false,
                    "description": "The <code>nextToken</code> value returned from a previous paginated <code>ListVirtualServices</code> request where <code>limit</code> was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the <code>nextToken</code> value.",
                    "schema": {
                      "type": "string"
                    }
                  }
                ]
              }
            },
            "/v20190125/meshes/{meshName}/virtualGateway/{virtualGatewayName}/gatewayRoutes/{gatewayRouteName}": {
              "delete": {
                "operationId": "DeleteGatewayRoute",
                "description": "Deletes an existing gateway route.",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/DeleteGatewayRouteOutput"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "NotFoundException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/NotFoundException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "BadRequestException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/BadRequestException"
                        }
                      }
                    }
                  },
                  "482": {
                    "description": "TooManyRequestsException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/TooManyRequestsException"
                        }
                      }
                    }
                  },
                  "483": {
                    "description": "ForbiddenException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ForbiddenException"
                        }
                      }
                    }
                  },
                  "484": {
                    "description": "ResourceInUseException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ResourceInUseException"
                        }
                      }
                    }
                  },
                  "485": {
                    "description": "ServiceUnavailableException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ServiceUnavailableException"
                        }
                      }
                    }
                  },
                  "486": {
                    "description": "InternalServerErrorException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InternalServerErrorException"
                        }
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "gatewayRouteName",
                    "in": "path",
                    "required": true,
                    "description": "The name of the gateway route to delete.",
                    "schema": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 255
                    }
                  },
                  {
                    "name": "meshName",
                    "in": "path",
                    "required": true,
                    "description": "The name of the service mesh to delete the gateway route from.",
                    "schema": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 255
                    }
                  },
                  {
                    "name": "meshOwner",
                    "in": "query",
                    "required": false,
                    "description": "The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\">Working with shared meshes</a>.",
                    "schema": {
                      "type": "string",
                      "minLength": 12,
                      "maxLength": 12
                    }
                  },
                  {
                    "name": "virtualGatewayName",
                    "in": "path",
                    "required": true,
                    "description": "The name of the virtual gateway to delete the route from.",
                    "schema": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 255
                    }
                  }
                ]
              },
              "parameters": [
                {
                  "$ref": "#/components/parameters/X-Amz-Content-Sha256"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Date"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Algorithm"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Credential"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Security-Token"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Signature"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-SignedHeaders"
                }
              ],
              "get": {
                "operationId": "DescribeGatewayRoute",
                "description": "Describes an existing gateway route.",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/DescribeGatewayRouteOutput"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "NotFoundException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/NotFoundException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "BadRequestException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/BadRequestException"
                        }
                      }
                    }
                  },
                  "482": {
                    "description": "TooManyRequestsException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/TooManyRequestsException"
                        }
                      }
                    }
                  },
                  "483": {
                    "description": "ForbiddenException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ForbiddenException"
                        }
                      }
                    }
                  },
                  "484": {
                    "description": "ServiceUnavailableException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ServiceUnavailableException"
                        }
                      }
                    }
                  },
                  "485": {
                    "description": "InternalServerErrorException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InternalServerErrorException"
                        }
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "gatewayRouteName",
                    "in": "path",
                    "required": true,
                    "description": "The name of the gateway route to describe.",
                    "schema": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 255
                    }
                  },
                  {
                    "name": "meshName",
                    "in": "path",
                    "required": true,
                    "description": "The name of the service mesh that the gateway route resides in.",
                    "schema": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 255
                    }
                  },
                  {
                    "name": "meshOwner",
                    "in": "query",
                    "required": false,
                    "description": "The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\">Working with shared meshes</a>.",
                    "schema": {
                      "type": "string",
                      "minLength": 12,
                      "maxLength": 12
                    }
                  },
                  {
                    "name": "virtualGatewayName",
                    "in": "path",
                    "required": true,
                    "description": "The name of the virtual gateway that the gateway route is associated with.",
                    "schema": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 255
                    }
                  }
                ]
              },
              "put": {
                "operationId": "UpdateGatewayRoute",
                "description": "Updates an existing gateway route that is associated to a specified virtual gateway in a service mesh.",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/UpdateGatewayRouteOutput"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "NotFoundException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/NotFoundException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "BadRequestException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/BadRequestException"
                        }
                      }
                    }
                  },
                  "482": {
                    "description": "ConflictException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ConflictException"
                        }
                      }
                    }
                  },
                  "483": {
                    "description": "TooManyRequestsException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/TooManyRequestsException"
                        }
                      }
                    }
                  },
                  "484": {
                    "description": "ForbiddenException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ForbiddenException"
                        }
                      }
                    }
                  },
                  "485": {
                    "description": "ServiceUnavailableException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ServiceUnavailableException"
                        }
                      }
                    }
                  },
                  "486": {
                    "description": "InternalServerErrorException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InternalServerErrorException"
                        }
                      }
                    }
                  },
                  "487": {
                    "description": "LimitExceededException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/LimitExceededException"
                        }
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "gatewayRouteName",
                    "in": "path",
                    "required": true,
                    "description": "The name of the gateway route to update.",
                    "schema": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 255
                    }
                  },
                  {
                    "name": "meshName",
                    "in": "path",
                    "required": true,
                    "description": "The name of the service mesh that the gateway route resides in.",
                    "schema": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 255
                    }
                  },
                  {
                    "name": "meshOwner",
                    "in": "query",
                    "required": false,
                    "description": "The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\">Working with shared meshes</a>.",
                    "schema": {
                      "type": "string",
                      "minLength": 12,
                      "maxLength": 12
                    }
                  },
                  {
                    "name": "virtualGatewayName",
                    "in": "path",
                    "required": true,
                    "description": "The name of the virtual gateway that the gateway route is associated with.",
                    "schema": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 255
                    }
                  }
                ],
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "required": [
                          "spec"
                        ],
                        "properties": {
                          "clientToken": {
                            "description": "Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Up to 36 letters, numbers, hyphens, and underscores are allowed.",
                            "type": "string"
                          },
                          "spec": {
                            "description": "An object that represents a gateway route specification. Specify one gateway route type.",
                            "type": "object",
                            "properties": {
                              "grpcRoute": {
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/GrpcGatewayRoute"
                                  },
                                  {
                                    "description": "An object that represents the specification of a gRPC gateway route."
                                  }
                                ]
                              },
                              "http2Route": {
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/HttpGatewayRoute"
                                  },
                                  {
                                    "description": "An object that represents the specification of an HTTP/2 gateway route."
                                  }
                                ]
                              },
                              "httpRoute": {
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/HttpGatewayRoute"
                                  },
                                  {
                                    "description": "An object that represents the specification of an HTTP gateway route."
                                  }
                                ]
                              },
                              "priority": {
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/GatewayRoutePriority"
                                  },
                                  {
                                    "description": "The ordering of the gateway routes spec."
                                  }
                                ]
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "/v20190125/meshes/{meshName}": {
              "delete": {
                "operationId": "DeleteMesh",
                "description": "<p>Deletes an existing service mesh.</p> <p>You must delete all resources (virtual services, routes, virtual routers, and virtual nodes) in the service mesh before you can delete the mesh itself.</p>",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/DeleteMeshOutput"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "NotFoundException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/NotFoundException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "BadRequestException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/BadRequestException"
                        }
                      }
                    }
                  },
                  "482": {
                    "description": "TooManyRequestsException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/TooManyRequestsException"
                        }
                      }
                    }
                  },
                  "483": {
                    "description": "ForbiddenException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ForbiddenException"
                        }
                      }
                    }
                  },
                  "484": {
                    "description": "ResourceInUseException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ResourceInUseException"
                        }
                      }
                    }
                  },
                  "485": {
                    "description": "ServiceUnavailableException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ServiceUnavailableException"
                        }
                      }
                    }
                  },
                  "486": {
                    "description": "InternalServerErrorException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InternalServerErrorException"
                        }
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "meshName",
                    "in": "path",
                    "required": true,
                    "description": "The name of the service mesh to delete.",
                    "schema": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 255
                    }
                  }
                ]
              },
              "parameters": [
                {
                  "$ref": "#/components/parameters/X-Amz-Content-Sha256"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Date"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Algorithm"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Credential"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Security-Token"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Signature"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-SignedHeaders"
                }
              ],
              "get": {
                "operationId": "DescribeMesh",
                "description": "Describes an existing service mesh.",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/DescribeMeshOutput"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "NotFoundException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/NotFoundException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "BadRequestException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/BadRequestException"
                        }
                      }
                    }
                  },
                  "482": {
                    "description": "TooManyRequestsException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/TooManyRequestsException"
                        }
                      }
                    }
                  },
                  "483": {
                    "description": "ForbiddenException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ForbiddenException"
                        }
                      }
                    }
                  },
                  "484": {
                    "description": "ServiceUnavailableException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ServiceUnavailableException"
                        }
                      }
                    }
                  },
                  "485": {
                    "description": "InternalServerErrorException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InternalServerErrorException"
                        }
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "meshName",
                    "in": "path",
                    "required": true,
                    "description": "The name of the service mesh to describe.",
                    "schema": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 255
                    }
                  },
                  {
                    "name": "meshOwner",
                    "in": "query",
                    "required": false,
                    "description": "The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\">Working with shared meshes</a>.",
                    "schema": {
                      "type": "string",
                      "minLength": 12,
                      "maxLength": 12
                    }
                  }
                ]
              },
              "put": {
                "operationId": "UpdateMesh",
                "description": "Updates an existing service mesh.",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/UpdateMeshOutput"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "NotFoundException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/NotFoundException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "BadRequestException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/BadRequestException"
                        }
                      }
                    }
                  },
                  "482": {
                    "description": "ConflictException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ConflictException"
                        }
                      }
                    }
                  },
                  "483": {
                    "description": "TooManyRequestsException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/TooManyRequestsException"
                        }
                      }
                    }
                  },
                  "484": {
                    "description": "ForbiddenException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ForbiddenException"
                        }
                      }
                    }
                  },
                  "485": {
                    "description": "ServiceUnavailableException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ServiceUnavailableException"
                        }
                      }
                    }
                  },
                  "486": {
                    "description": "InternalServerErrorException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InternalServerErrorException"
                        }
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "meshName",
                    "in": "path",
                    "required": true,
                    "description": "The name of the service mesh to update.",
                    "schema": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 255
                    }
                  }
                ],
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "clientToken": {
                            "description": "Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Up to 36 letters, numbers, hyphens, and underscores are allowed.",
                            "type": "string"
                          },
                          "spec": {
                            "description": "An object that represents the specification of a service mesh.",
                            "type": "object",
                            "properties": {
                              "egressFilter": {
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/EgressFilter"
                                  },
                                  {
                                    "description": "The egress filter rules for the service mesh."
                                  }
                                ]
                              },
                              "serviceDiscovery": {
                                "$ref": "#/components/schemas/MeshServiceDiscovery"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "/v20190125/meshes/{meshName}/virtualRouter/{virtualRouterName}/routes/{routeName}": {
              "delete": {
                "operationId": "DeleteRoute",
                "description": "Deletes an existing route.",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/DeleteRouteOutput"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "NotFoundException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/NotFoundException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "BadRequestException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/BadRequestException"
                        }
                      }
                    }
                  },
                  "482": {
                    "description": "TooManyRequestsException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/TooManyRequestsException"
                        }
                      }
                    }
                  },
                  "483": {
                    "description": "ForbiddenException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ForbiddenException"
                        }
                      }
                    }
                  },
                  "484": {
                    "description": "ResourceInUseException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ResourceInUseException"
                        }
                      }
                    }
                  },
                  "485": {
                    "description": "ServiceUnavailableException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ServiceUnavailableException"
                        }
                      }
                    }
                  },
                  "486": {
                    "description": "InternalServerErrorException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InternalServerErrorException"
                        }
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "meshName",
                    "in": "path",
                    "required": true,
                    "description": "The name of the service mesh to delete the route in.",
                    "schema": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 255
                    }
                  },
                  {
                    "name": "meshOwner",
                    "in": "query",
                    "required": false,
                    "description": "The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\">Working with shared meshes</a>.",
                    "schema": {
                      "type": "string",
                      "minLength": 12,
                      "maxLength": 12
                    }
                  },
                  {
                    "name": "routeName",
                    "in": "path",
                    "required": true,
                    "description": "The name of the route to delete.",
                    "schema": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 255
                    }
                  },
                  {
                    "name": "virtualRouterName",
                    "in": "path",
                    "required": true,
                    "description": "The name of the virtual router to delete the route in.",
                    "schema": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 255
                    }
                  }
                ]
              },
              "parameters": [
                {
                  "$ref": "#/components/parameters/X-Amz-Content-Sha256"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Date"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Algorithm"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Credential"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Security-Token"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Signature"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-SignedHeaders"
                }
              ],
              "get": {
                "operationId": "DescribeRoute",
                "description": "Describes an existing route.",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/DescribeRouteOutput"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "NotFoundException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/NotFoundException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "BadRequestException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/BadRequestException"
                        }
                      }
                    }
                  },
                  "482": {
                    "description": "TooManyRequestsException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/TooManyRequestsException"
                        }
                      }
                    }
                  },
                  "483": {
                    "description": "ForbiddenException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ForbiddenException"
                        }
                      }
                    }
                  },
                  "484": {
                    "description": "ServiceUnavailableException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ServiceUnavailableException"
                        }
                      }
                    }
                  },
                  "485": {
                    "description": "InternalServerErrorException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InternalServerErrorException"
                        }
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "meshName",
                    "in": "path",
                    "required": true,
                    "description": "The name of the service mesh that the route resides in.",
                    "schema": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 255
                    }
                  },
                  {
                    "name": "meshOwner",
                    "in": "query",
                    "required": false,
                    "description": "The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\">Working with shared meshes</a>.",
                    "schema": {
                      "type": "string",
                      "minLength": 12,
                      "maxLength": 12
                    }
                  },
                  {
                    "name": "routeName",
                    "in": "path",
                    "required": true,
                    "description": "The name of the route to describe.",
                    "schema": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 255
                    }
                  },
                  {
                    "name": "virtualRouterName",
                    "in": "path",
                    "required": true,
                    "description": "The name of the virtual router that the route is associated with.",
                    "schema": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 255
                    }
                  }
                ]
              },
              "put": {
                "operationId": "UpdateRoute",
                "description": "Updates an existing route for a specified service mesh and virtual router.",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/UpdateRouteOutput"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "NotFoundException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/NotFoundException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "BadRequestException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/BadRequestException"
                        }
                      }
                    }
                  },
                  "482": {
                    "description": "ConflictException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ConflictException"
                        }
                      }
                    }
                  },
                  "483": {
                    "description": "TooManyRequestsException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/TooManyRequestsException"
                        }
                      }
                    }
                  },
                  "484": {
                    "description": "ForbiddenException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ForbiddenException"
                        }
                      }
                    }
                  },
                  "485": {
                    "description": "ServiceUnavailableException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ServiceUnavailableException"
                        }
                      }
                    }
                  },
                  "486": {
                    "description": "InternalServerErrorException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InternalServerErrorException"
                        }
                      }
                    }
                  },
                  "487": {
                    "description": "LimitExceededException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/LimitExceededException"
                        }
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "meshName",
                    "in": "path",
                    "required": true,
                    "description": "The name of the service mesh that the route resides in.",
                    "schema": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 255
                    }
                  },
                  {
                    "name": "meshOwner",
                    "in": "query",
                    "required": false,
                    "description": "The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\">Working with shared meshes</a>.",
                    "schema": {
                      "type": "string",
                      "minLength": 12,
                      "maxLength": 12
                    }
                  },
                  {
                    "name": "routeName",
                    "in": "path",
                    "required": true,
                    "description": "The name of the route to update.",
                    "schema": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 255
                    }
                  },
                  {
                    "name": "virtualRouterName",
                    "in": "path",
                    "required": true,
                    "description": "The name of the virtual router that the route is associated with.",
                    "schema": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 255
                    }
                  }
                ],
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "required": [
                          "spec"
                        ],
                        "properties": {
                          "clientToken": {
                            "description": "Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Up to 36 letters, numbers, hyphens, and underscores are allowed.",
                            "type": "string"
                          },
                          "spec": {
                            "description": "An object that represents a route specification. Specify one route type.",
                            "type": "object",
                            "properties": {
                              "grpcRoute": {
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/GrpcRoute"
                                  },
                                  {
                                    "description": "An object that represents the specification of a gRPC route."
                                  }
                                ]
                              },
                              "http2Route": {
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/HttpRoute"
                                  },
                                  {
                                    "description": "An object that represents the specification of an HTTP/2 route."
                                  }
                                ]
                              },
                              "httpRoute": {
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/HttpRoute"
                                  },
                                  {
                                    "description": "An object that represents the specification of an HTTP route."
                                  }
                                ]
                              },
                              "priority": {
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/RoutePriority"
                                  },
                                  {
                                    "description": "The priority for the route. Routes are matched based on the specified value, where 0 is the highest priority."
                                  }
                                ]
                              },
                              "tcpRoute": {
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/TcpRoute"
                                  },
                                  {
                                    "description": "An object that represents the specification of a TCP route."
                                  }
                                ]
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "/v20190125/meshes/{meshName}/virtualGateways/{virtualGatewayName}": {
              "delete": {
                "operationId": "DeleteVirtualGateway",
                "description": "Deletes an existing virtual gateway. You cannot delete a virtual gateway if any gateway routes are associated to it.",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/DeleteVirtualGatewayOutput"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "NotFoundException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/NotFoundException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "BadRequestException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/BadRequestException"
                        }
                      }
                    }
                  },
                  "482": {
                    "description": "TooManyRequestsException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/TooManyRequestsException"
                        }
                      }
                    }
                  },
                  "483": {
                    "description": "ForbiddenException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ForbiddenException"
                        }
                      }
                    }
                  },
                  "484": {
                    "description": "ResourceInUseException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ResourceInUseException"
                        }
                      }
                    }
                  },
                  "485": {
                    "description": "ServiceUnavailableException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ServiceUnavailableException"
                        }
                      }
                    }
                  },
                  "486": {
                    "description": "InternalServerErrorException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InternalServerErrorException"
                        }
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "meshName",
                    "in": "path",
                    "required": true,
                    "description": "The name of the service mesh to delete the virtual gateway from.",
                    "schema": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 255
                    }
                  },
                  {
                    "name": "meshOwner",
                    "in": "query",
                    "required": false,
                    "description": "The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\">Working with shared meshes</a>.",
                    "schema": {
                      "type": "string",
                      "minLength": 12,
                      "maxLength": 12
                    }
                  },
                  {
                    "name": "virtualGatewayName",
                    "in": "path",
                    "required": true,
                    "description": "The name of the virtual gateway to delete.",
                    "schema": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 255
                    }
                  }
                ]
              },
              "parameters": [
                {
                  "$ref": "#/components/parameters/X-Amz-Content-Sha256"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Date"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Algorithm"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Credential"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Security-Token"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Signature"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-SignedHeaders"
                }
              ],
              "get": {
                "operationId": "DescribeVirtualGateway",
                "description": "Describes an existing virtual gateway.",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/DescribeVirtualGatewayOutput"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "NotFoundException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/NotFoundException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "BadRequestException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/BadRequestException"
                        }
                      }
                    }
                  },
                  "482": {
                    "description": "TooManyRequestsException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/TooManyRequestsException"
                        }
                      }
                    }
                  },
                  "483": {
                    "description": "ForbiddenException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ForbiddenException"
                        }
                      }
                    }
                  },
                  "484": {
                    "description": "ServiceUnavailableException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ServiceUnavailableException"
                        }
                      }
                    }
                  },
                  "485": {
                    "description": "InternalServerErrorException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InternalServerErrorException"
                        }
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "meshName",
                    "in": "path",
                    "required": true,
                    "description": "The name of the service mesh that the gateway route resides in.",
                    "schema": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 255
                    }
                  },
                  {
                    "name": "meshOwner",
                    "in": "query",
                    "required": false,
                    "description": "The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\">Working with shared meshes</a>.",
                    "schema": {
                      "type": "string",
                      "minLength": 12,
                      "maxLength": 12
                    }
                  },
                  {
                    "name": "virtualGatewayName",
                    "in": "path",
                    "required": true,
                    "description": "The name of the virtual gateway to describe.",
                    "schema": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 255
                    }
                  }
                ]
              },
              "put": {
                "operationId": "UpdateVirtualGateway",
                "description": "Updates an existing virtual gateway in a specified service mesh.",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/UpdateVirtualGatewayOutput"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "NotFoundException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/NotFoundException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "BadRequestException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/BadRequestException"
                        }
                      }
                    }
                  },
                  "482": {
                    "description": "ConflictException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ConflictException"
                        }
                      }
                    }
                  },
                  "483": {
                    "description": "TooManyRequestsException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/TooManyRequestsException"
                        }
                      }
                    }
                  },
                  "484": {
                    "description": "ForbiddenException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ForbiddenException"
                        }
                      }
                    }
                  },
                  "485": {
                    "description": "ServiceUnavailableException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ServiceUnavailableException"
                        }
                      }
                    }
                  },
                  "486": {
                    "description": "InternalServerErrorException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InternalServerErrorException"
                        }
                      }
                    }
                  },
                  "487": {
                    "description": "LimitExceededException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/LimitExceededException"
                        }
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "meshName",
                    "in": "path",
                    "required": true,
                    "description": "The name of the service mesh that the virtual gateway resides in.",
                    "schema": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 255
                    }
                  },
                  {
                    "name": "meshOwner",
                    "in": "query",
                    "required": false,
                    "description": "The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\">Working with shared meshes</a>.",
                    "schema": {
                      "type": "string",
                      "minLength": 12,
                      "maxLength": 12
                    }
                  },
                  {
                    "name": "virtualGatewayName",
                    "in": "path",
                    "required": true,
                    "description": "The name of the virtual gateway to update.",
                    "schema": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 255
                    }
                  }
                ],
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "required": [
                          "spec"
                        ],
                        "properties": {
                          "clientToken": {
                            "description": "Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Up to 36 letters, numbers, hyphens, and underscores are allowed.",
                            "type": "string"
                          },
                          "spec": {
                            "description": "An object that represents the specification of a service mesh resource.",
                            "type": "object",
                            "properties": {
                              "backendDefaults": {
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/VirtualGatewayBackendDefaults"
                                  },
                                  {
                                    "description": "A reference to an object that represents the defaults for backends."
                                  }
                                ]
                              },
                              "listeners": {
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/VirtualGatewayListeners"
                                  },
                                  {
                                    "description": "The listeners that the mesh endpoint is expected to receive inbound traffic from. You can specify one listener."
                                  }
                                ]
                              },
                              "logging": {
                                "$ref": "#/components/schemas/VirtualGatewayLogging"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "/v20190125/meshes/{meshName}/virtualNodes/{virtualNodeName}": {
              "delete": {
                "operationId": "DeleteVirtualNode",
                "description": "<p>Deletes an existing virtual node.</p> <p>You must delete any virtual services that list a virtual node as a service provider before you can delete the virtual node itself.</p>",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/DeleteVirtualNodeOutput"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "NotFoundException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/NotFoundException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "BadRequestException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/BadRequestException"
                        }
                      }
                    }
                  },
                  "482": {
                    "description": "TooManyRequestsException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/TooManyRequestsException"
                        }
                      }
                    }
                  },
                  "483": {
                    "description": "ForbiddenException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ForbiddenException"
                        }
                      }
                    }
                  },
                  "484": {
                    "description": "ResourceInUseException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ResourceInUseException"
                        }
                      }
                    }
                  },
                  "485": {
                    "description": "ServiceUnavailableException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ServiceUnavailableException"
                        }
                      }
                    }
                  },
                  "486": {
                    "description": "InternalServerErrorException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InternalServerErrorException"
                        }
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "meshName",
                    "in": "path",
                    "required": true,
                    "description": "The name of the service mesh to delete the virtual node in.",
                    "schema": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 255
                    }
                  },
                  {
                    "name": "meshOwner",
                    "in": "query",
                    "required": false,
                    "description": "The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\">Working with shared meshes</a>.",
                    "schema": {
                      "type": "string",
                      "minLength": 12,
                      "maxLength": 12
                    }
                  },
                  {
                    "name": "virtualNodeName",
                    "in": "path",
                    "required": true,
                    "description": "The name of the virtual node to delete.",
                    "schema": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 255
                    }
                  }
                ]
              },
              "parameters": [
                {
                  "$ref": "#/components/parameters/X-Amz-Content-Sha256"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Date"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Algorithm"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Credential"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Security-Token"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Signature"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-SignedHeaders"
                }
              ],
              "get": {
                "operationId": "DescribeVirtualNode",
                "description": "Describes an existing virtual node.",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/DescribeVirtualNodeOutput"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "NotFoundException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/NotFoundException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "BadRequestException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/BadRequestException"
                        }
                      }
                    }
                  },
                  "482": {
                    "description": "TooManyRequestsException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/TooManyRequestsException"
                        }
                      }
                    }
                  },
                  "483": {
                    "description": "ForbiddenException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ForbiddenException"
                        }
                      }
                    }
                  },
                  "484": {
                    "description": "ServiceUnavailableException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ServiceUnavailableException"
                        }
                      }
                    }
                  },
                  "485": {
                    "description": "InternalServerErrorException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InternalServerErrorException"
                        }
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "meshName",
                    "in": "path",
                    "required": true,
                    "description": "The name of the service mesh that the virtual node resides in.",
                    "schema": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 255
                    }
                  },
                  {
                    "name": "meshOwner",
                    "in": "query",
                    "required": false,
                    "description": "The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\">Working with shared meshes</a>.",
                    "schema": {
                      "type": "string",
                      "minLength": 12,
                      "maxLength": 12
                    }
                  },
                  {
                    "name": "virtualNodeName",
                    "in": "path",
                    "required": true,
                    "description": "The name of the virtual node to describe.",
                    "schema": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 255
                    }
                  }
                ]
              },
              "put": {
                "operationId": "UpdateVirtualNode",
                "description": "Updates an existing virtual node in a specified service mesh.",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/UpdateVirtualNodeOutput"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "NotFoundException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/NotFoundException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "BadRequestException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/BadRequestException"
                        }
                      }
                    }
                  },
                  "482": {
                    "description": "ConflictException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ConflictException"
                        }
                      }
                    }
                  },
                  "483": {
                    "description": "TooManyRequestsException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/TooManyRequestsException"
                        }
                      }
                    }
                  },
                  "484": {
                    "description": "ForbiddenException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ForbiddenException"
                        }
                      }
                    }
                  },
                  "485": {
                    "description": "ServiceUnavailableException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ServiceUnavailableException"
                        }
                      }
                    }
                  },
                  "486": {
                    "description": "InternalServerErrorException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InternalServerErrorException"
                        }
                      }
                    }
                  },
                  "487": {
                    "description": "LimitExceededException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/LimitExceededException"
                        }
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "meshName",
                    "in": "path",
                    "required": true,
                    "description": "The name of the service mesh that the virtual node resides in.",
                    "schema": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 255
                    }
                  },
                  {
                    "name": "meshOwner",
                    "in": "query",
                    "required": false,
                    "description": "The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\">Working with shared meshes</a>.",
                    "schema": {
                      "type": "string",
                      "minLength": 12,
                      "maxLength": 12
                    }
                  },
                  {
                    "name": "virtualNodeName",
                    "in": "path",
                    "required": true,
                    "description": "The name of the virtual node to update.",
                    "schema": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 255
                    }
                  }
                ],
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "required": [
                          "spec"
                        ],
                        "properties": {
                          "clientToken": {
                            "description": "Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Up to 36 letters, numbers, hyphens, and underscores are allowed.",
                            "type": "string"
                          },
                          "spec": {
                            "description": "An object that represents the specification of a virtual node.",
                            "type": "object",
                            "properties": {
                              "backendDefaults": {
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/BackendDefaults"
                                  },
                                  {
                                    "description": "A reference to an object that represents the defaults for backends."
                                  }
                                ]
                              },
                              "backends": {
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/Backends"
                                  },
                                  {
                                    "description": "The backends that the virtual node is expected to send outbound traffic to."
                                  }
                                ]
                              },
                              "listeners": {
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/Listeners"
                                  },
                                  {
                                    "description": "The listener that the virtual node is expected to receive inbound traffic from. You can specify one listener."
                                  }
                                ]
                              },
                              "logging": {
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/Logging"
                                  },
                                  {
                                    "description": "The inbound and outbound access logging information for the virtual node."
                                  }
                                ]
                              },
                              "serviceDiscovery": {
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/ServiceDiscovery"
                                  },
                                  {
                                    "description": "The service discovery information for the virtual node. If your virtual node does not expect ingress traffic, you can omit this parameter. If you specify a <code>listener</code>, then you must specify service discovery information."
                                  }
                                ]
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "/v20190125/meshes/{meshName}/virtualRouters/{virtualRouterName}": {
              "delete": {
                "operationId": "DeleteVirtualRouter",
                "description": "<p>Deletes an existing virtual router.</p> <p>You must delete any routes associated with the virtual router before you can delete the router itself.</p>",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/DeleteVirtualRouterOutput"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "NotFoundException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/NotFoundException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "BadRequestException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/BadRequestException"
                        }
                      }
                    }
                  },
                  "482": {
                    "description": "TooManyRequestsException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/TooManyRequestsException"
                        }
                      }
                    }
                  },
                  "483": {
                    "description": "ForbiddenException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ForbiddenException"
                        }
                      }
                    }
                  },
                  "484": {
                    "description": "ResourceInUseException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ResourceInUseException"
                        }
                      }
                    }
                  },
                  "485": {
                    "description": "ServiceUnavailableException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ServiceUnavailableException"
                        }
                      }
                    }
                  },
                  "486": {
                    "description": "InternalServerErrorException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InternalServerErrorException"
                        }
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "meshName",
                    "in": "path",
                    "required": true,
                    "description": "The name of the service mesh to delete the virtual router in.",
                    "schema": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 255
                    }
                  },
                  {
                    "name": "meshOwner",
                    "in": "query",
                    "required": false,
                    "description": "The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\">Working with shared meshes</a>.",
                    "schema": {
                      "type": "string",
                      "minLength": 12,
                      "maxLength": 12
                    }
                  },
                  {
                    "name": "virtualRouterName",
                    "in": "path",
                    "required": true,
                    "description": "The name of the virtual router to delete.",
                    "schema": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 255
                    }
                  }
                ]
              },
              "parameters": [
                {
                  "$ref": "#/components/parameters/X-Amz-Content-Sha256"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Date"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Algorithm"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Credential"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Security-Token"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Signature"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-SignedHeaders"
                }
              ],
              "get": {
                "operationId": "DescribeVirtualRouter",
                "description": "Describes an existing virtual router.",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/DescribeVirtualRouterOutput"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "NotFoundException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/NotFoundException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "BadRequestException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/BadRequestException"
                        }
                      }
                    }
                  },
                  "482": {
                    "description": "TooManyRequestsException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/TooManyRequestsException"
                        }
                      }
                    }
                  },
                  "483": {
                    "description": "ForbiddenException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ForbiddenException"
                        }
                      }
                    }
                  },
                  "484": {
                    "description": "ServiceUnavailableException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ServiceUnavailableException"
                        }
                      }
                    }
                  },
                  "485": {
                    "description": "InternalServerErrorException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InternalServerErrorException"
                        }
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "meshName",
                    "in": "path",
                    "required": true,
                    "description": "The name of the service mesh that the virtual router resides in.",
                    "schema": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 255
                    }
                  },
                  {
                    "name": "meshOwner",
                    "in": "query",
                    "required": false,
                    "description": "The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\">Working with shared meshes</a>.",
                    "schema": {
                      "type": "string",
                      "minLength": 12,
                      "maxLength": 12
                    }
                  },
                  {
                    "name": "virtualRouterName",
                    "in": "path",
                    "required": true,
                    "description": "The name of the virtual router to describe.",
                    "schema": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 255
                    }
                  }
                ]
              },
              "put": {
                "operationId": "UpdateVirtualRouter",
                "description": "Updates an existing virtual router in a specified service mesh.",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/UpdateVirtualRouterOutput"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "NotFoundException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/NotFoundException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "BadRequestException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/BadRequestException"
                        }
                      }
                    }
                  },
                  "482": {
                    "description": "ConflictException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ConflictException"
                        }
                      }
                    }
                  },
                  "483": {
                    "description": "TooManyRequestsException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/TooManyRequestsException"
                        }
                      }
                    }
                  },
                  "484": {
                    "description": "ForbiddenException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ForbiddenException"
                        }
                      }
                    }
                  },
                  "485": {
                    "description": "ServiceUnavailableException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ServiceUnavailableException"
                        }
                      }
                    }
                  },
                  "486": {
                    "description": "InternalServerErrorException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InternalServerErrorException"
                        }
                      }
                    }
                  },
                  "487": {
                    "description": "LimitExceededException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/LimitExceededException"
                        }
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "meshName",
                    "in": "path",
                    "required": true,
                    "description": "The name of the service mesh that the virtual router resides in.",
                    "schema": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 255
                    }
                  },
                  {
                    "name": "meshOwner",
                    "in": "query",
                    "required": false,
                    "description": "The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\">Working with shared meshes</a>.",
                    "schema": {
                      "type": "string",
                      "minLength": 12,
                      "maxLength": 12
                    }
                  },
                  {
                    "name": "virtualRouterName",
                    "in": "path",
                    "required": true,
                    "description": "The name of the virtual router to update.",
                    "schema": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 255
                    }
                  }
                ],
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "required": [
                          "spec"
                        ],
                        "properties": {
                          "clientToken": {
                            "description": "Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Up to 36 letters, numbers, hyphens, and underscores are allowed.",
                            "type": "string"
                          },
                          "spec": {
                            "description": "An object that represents the specification of a virtual router.",
                            "type": "object",
                            "properties": {
                              "listeners": {
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/VirtualRouterListeners"
                                  },
                                  {
                                    "description": "The listeners that the virtual router is expected to receive inbound traffic from. You can specify one listener."
                                  }
                                ]
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "/v20190125/meshes/{meshName}/virtualServices/{virtualServiceName}": {
              "delete": {
                "operationId": "DeleteVirtualService",
                "description": "Deletes an existing virtual service.",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/DeleteVirtualServiceOutput"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "NotFoundException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/NotFoundException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "BadRequestException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/BadRequestException"
                        }
                      }
                    }
                  },
                  "482": {
                    "description": "TooManyRequestsException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/TooManyRequestsException"
                        }
                      }
                    }
                  },
                  "483": {
                    "description": "ForbiddenException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ForbiddenException"
                        }
                      }
                    }
                  },
                  "484": {
                    "description": "ResourceInUseException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ResourceInUseException"
                        }
                      }
                    }
                  },
                  "485": {
                    "description": "ServiceUnavailableException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ServiceUnavailableException"
                        }
                      }
                    }
                  },
                  "486": {
                    "description": "InternalServerErrorException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InternalServerErrorException"
                        }
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "meshName",
                    "in": "path",
                    "required": true,
                    "description": "The name of the service mesh to delete the virtual service in.",
                    "schema": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 255
                    }
                  },
                  {
                    "name": "meshOwner",
                    "in": "query",
                    "required": false,
                    "description": "The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\">Working with shared meshes</a>.",
                    "schema": {
                      "type": "string",
                      "minLength": 12,
                      "maxLength": 12
                    }
                  },
                  {
                    "name": "virtualServiceName",
                    "in": "path",
                    "required": true,
                    "description": "The name of the virtual service to delete.",
                    "schema": {
                      "type": "string"
                    }
                  }
                ]
              },
              "parameters": [
                {
                  "$ref": "#/components/parameters/X-Amz-Content-Sha256"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Date"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Algorithm"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Credential"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Security-Token"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Signature"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-SignedHeaders"
                }
              ],
              "get": {
                "operationId": "DescribeVirtualService",
                "description": "Describes an existing virtual service.",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/DescribeVirtualServiceOutput"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "NotFoundException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/NotFoundException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "BadRequestException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/BadRequestException"
                        }
                      }
                    }
                  },
                  "482": {
                    "description": "TooManyRequestsException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/TooManyRequestsException"
                        }
                      }
                    }
                  },
                  "483": {
                    "description": "ForbiddenException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ForbiddenException"
                        }
                      }
                    }
                  },
                  "484": {
                    "description": "ServiceUnavailableException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ServiceUnavailableException"
                        }
                      }
                    }
                  },
                  "485": {
                    "description": "InternalServerErrorException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InternalServerErrorException"
                        }
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "meshName",
                    "in": "path",
                    "required": true,
                    "description": "The name of the service mesh that the virtual service resides in.",
                    "schema": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 255
                    }
                  },
                  {
                    "name": "meshOwner",
                    "in": "query",
                    "required": false,
                    "description": "The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\">Working with shared meshes</a>.",
                    "schema": {
                      "type": "string",
                      "minLength": 12,
                      "maxLength": 12
                    }
                  },
                  {
                    "name": "virtualServiceName",
                    "in": "path",
                    "required": true,
                    "description": "The name of the virtual service to describe.",
                    "schema": {
                      "type": "string"
                    }
                  }
                ]
              },
              "put": {
                "operationId": "UpdateVirtualService",
                "description": "Updates an existing virtual service in a specified service mesh.",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/UpdateVirtualServiceOutput"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "NotFoundException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/NotFoundException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "BadRequestException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/BadRequestException"
                        }
                      }
                    }
                  },
                  "482": {
                    "description": "ConflictException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ConflictException"
                        }
                      }
                    }
                  },
                  "483": {
                    "description": "TooManyRequestsException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/TooManyRequestsException"
                        }
                      }
                    }
                  },
                  "484": {
                    "description": "ForbiddenException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ForbiddenException"
                        }
                      }
                    }
                  },
                  "485": {
                    "description": "ServiceUnavailableException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ServiceUnavailableException"
                        }
                      }
                    }
                  },
                  "486": {
                    "description": "InternalServerErrorException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InternalServerErrorException"
                        }
                      }
                    }
                  },
                  "487": {
                    "description": "LimitExceededException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/LimitExceededException"
                        }
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "meshName",
                    "in": "path",
                    "required": true,
                    "description": "The name of the service mesh that the virtual service resides in.",
                    "schema": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 255
                    }
                  },
                  {
                    "name": "meshOwner",
                    "in": "query",
                    "required": false,
                    "description": "The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\">Working with shared meshes</a>.",
                    "schema": {
                      "type": "string",
                      "minLength": 12,
                      "maxLength": 12
                    }
                  },
                  {
                    "name": "virtualServiceName",
                    "in": "path",
                    "required": true,
                    "description": "The name of the virtual service to update.",
                    "schema": {
                      "type": "string"
                    }
                  }
                ],
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "required": [
                          "spec"
                        ],
                        "properties": {
                          "clientToken": {
                            "description": "Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Up to 36 letters, numbers, hyphens, and underscores are allowed.",
                            "type": "string"
                          },
                          "spec": {
                            "description": "An object that represents the specification of a virtual service.",
                            "type": "object",
                            "properties": {
                              "provider": {
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/VirtualServiceProvider"
                                  },
                                  {
                                    "description": "The App Mesh object that is acting as the provider for a virtual service. You can specify a single virtual node or virtual router."
                                  }
                                ]
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "/v20190125/tags#resourceArn": {
              "get": {
                "operationId": "ListTagsForResource",
                "description": "List the tags for an App Mesh resource.",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ListTagsForResourceOutput"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "NotFoundException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/NotFoundException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "BadRequestException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/BadRequestException"
                        }
                      }
                    }
                  },
                  "482": {
                    "description": "TooManyRequestsException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/TooManyRequestsException"
                        }
                      }
                    }
                  },
                  "483": {
                    "description": "ForbiddenException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ForbiddenException"
                        }
                      }
                    }
                  },
                  "484": {
                    "description": "ServiceUnavailableException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ServiceUnavailableException"
                        }
                      }
                    }
                  },
                  "485": {
                    "description": "InternalServerErrorException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InternalServerErrorException"
                        }
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "limit",
                    "in": "query",
                    "required": false,
                    "description": "The maximum number of tag results returned by <code>ListTagsForResource</code> in paginated output. When this parameter is used, <code>ListTagsForResource</code> returns only <code>limit</code> results in a single page along with a <code>nextToken</code> response element. You can see the remaining results of the initial request by sending another <code>ListTagsForResource</code> request with the returned <code>nextToken</code> value. This value can be between 1 and 100. If you don't use this parameter, <code>ListTagsForResource</code> returns up to 100 results and a <code>nextToken</code> value if applicable.",
                    "schema": {
                      "type": "integer",
                      "minimum": 1,
                      "maximum": 50
                    }
                  },
                  {
                    "name": "nextToken",
                    "in": "query",
                    "required": false,
                    "description": "The <code>nextToken</code> value returned from a previous paginated <code>ListTagsForResource</code> request where <code>limit</code> was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the <code>nextToken</code> value.",
                    "schema": {
                      "type": "string"
                    }
                  },
                  {
                    "name": "resourceArn",
                    "in": "query",
                    "required": true,
                    "description": "The Amazon Resource Name (ARN) that identifies the resource to list the tags for.",
                    "schema": {
                      "type": "string"
                    }
                  }
                ]
              },
              "parameters": [
                {
                  "$ref": "#/components/parameters/X-Amz-Content-Sha256"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Date"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Algorithm"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Credential"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Security-Token"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Signature"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-SignedHeaders"
                }
              ]
            },
            "/v20190125/tag#resourceArn": {
              "put": {
                "operationId": "TagResource",
                "description": "Associates the specified tags to a resource with the specified <code>resourceArn</code>. If existing tags on a resource aren't specified in the request parameters, they aren't changed. When a resource is deleted, the tags associated with that resource are also deleted.",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/TagResourceOutput"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "NotFoundException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/NotFoundException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "BadRequestException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/BadRequestException"
                        }
                      }
                    }
                  },
                  "482": {
                    "description": "TooManyTagsException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/TooManyTagsException"
                        }
                      }
                    }
                  },
                  "483": {
                    "description": "TooManyRequestsException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/TooManyRequestsException"
                        }
                      }
                    }
                  },
                  "484": {
                    "description": "ForbiddenException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ForbiddenException"
                        }
                      }
                    }
                  },
                  "485": {
                    "description": "ServiceUnavailableException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ServiceUnavailableException"
                        }
                      }
                    }
                  },
                  "486": {
                    "description": "InternalServerErrorException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InternalServerErrorException"
                        }
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "resourceArn",
                    "in": "query",
                    "required": true,
                    "description": "The Amazon Resource Name (ARN) of the resource to add tags to.",
                    "schema": {
                      "type": "string"
                    }
                  }
                ],
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "required": [
                          "tags"
                        ],
                        "properties": {
                          "tags": {
                            "description": "The tags to add to the resource. A tag is an array of key-value pairs. Tag keys can have a maximum character length of 128 characters, and tag values can have a maximum length of 256 characters.",
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/TagRef"
                            },
                            "minItems": 0,
                            "maxItems": 50
                          }
                        }
                      }
                    }
                  }
                }
              },
              "parameters": [
                {
                  "$ref": "#/components/parameters/X-Amz-Content-Sha256"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Date"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Algorithm"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Credential"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Security-Token"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Signature"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-SignedHeaders"
                }
              ]
            },
            "/v20190125/untag#resourceArn": {
              "put": {
                "operationId": "UntagResource",
                "description": "Deletes specified tags from a resource.",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/UntagResourceOutput"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "NotFoundException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/NotFoundException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "BadRequestException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/BadRequestException"
                        }
                      }
                    }
                  },
                  "482": {
                    "description": "TooManyRequestsException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/TooManyRequestsException"
                        }
                      }
                    }
                  },
                  "483": {
                    "description": "ForbiddenException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ForbiddenException"
                        }
                      }
                    }
                  },
                  "484": {
                    "description": "ServiceUnavailableException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ServiceUnavailableException"
                        }
                      }
                    }
                  },
                  "485": {
                    "description": "InternalServerErrorException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InternalServerErrorException"
                        }
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "resourceArn",
                    "in": "query",
                    "required": true,
                    "description": "The Amazon Resource Name (ARN) of the resource to delete tags from.",
                    "schema": {
                      "type": "string"
                    }
                  }
                ],
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "required": [
                          "tagKeys"
                        ],
                        "properties": {
                          "tagKeys": {
                            "description": "The keys of the tags to be removed.",
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/TagKey"
                            },
                            "minItems": 0,
                            "maxItems": 50
                          }
                        }
                      }
                    }
                  }
                }
              },
              "parameters": [
                {
                  "$ref": "#/components/parameters/X-Amz-Content-Sha256"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Date"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Algorithm"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Credential"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Security-Token"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Signature"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-SignedHeaders"
                }
              ]
            }
          },
          "components": {
            "parameters": {
              "X-Amz-Content-Sha256": {
                "name": "X-Amz-Content-Sha256",
                "in": "header",
                "schema": {
                  "type": "string"
                },
                "required": false
              },
              "X-Amz-Date": {
                "name": "X-Amz-Date",
                "in": "header",
                "schema": {
                  "type": "string"
                },
                "required": false
              },
              "X-Amz-Algorithm": {
                "name": "X-Amz-Algorithm",
                "in": "header",
                "schema": {
                  "type": "string"
                },
                "required": false
              },
              "X-Amz-Credential": {
                "name": "X-Amz-Credential",
                "in": "header",
                "schema": {
                  "type": "string"
                },
                "required": false
              },
              "X-Amz-Security-Token": {
                "name": "X-Amz-Security-Token",
                "in": "header",
                "schema": {
                  "type": "string"
                },
                "required": false
              },
              "X-Amz-Signature": {
                "name": "X-Amz-Signature",
                "in": "header",
                "schema": {
                  "type": "string"
                },
                "required": false
              },
              "X-Amz-SignedHeaders": {
                "name": "X-Amz-SignedHeaders",
                "in": "header",
                "schema": {
                  "type": "string"
                },
                "required": false
              }
            },
            "securitySchemes": {
              "hmac": {
                "type": "apiKey",
                "name": "Authorization",
                "in": "header",
                "description": "Amazon Signature authorization v4",
                "x-amazon-apigateway-authtype": "awsSigv4"
              }
            },
            "schemas": {
              "CreateGatewayRouteOutput": {
                "type": "object",
                "required": [
                  "gatewayRoute"
                ],
                "properties": {
                  "gatewayRoute": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/GatewayRouteData"
                      },
                      {
                        "description": "The full description of your gateway route following the create call."
                      }
                    ]
                  }
                }
              },
              "GrpcGatewayRoute": {
                "type": "object",
                "required": [
                  "action",
                  "match"
                ],
                "properties": {
                  "action": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/GrpcGatewayRouteAction"
                      },
                      {
                        "description": "An object that represents the action to take if a match is determined."
                      }
                    ]
                  },
                  "match": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/GrpcGatewayRouteMatch"
                      },
                      {
                        "description": "An object that represents the criteria for determining a request match."
                      }
                    ]
                  }
                },
                "description": "An object that represents a gRPC gateway route."
              },
              "HttpGatewayRoute": {
                "type": "object",
                "required": [
                  "action",
                  "match"
                ],
                "properties": {
                  "action": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/HttpGatewayRouteAction"
                      },
                      {
                        "description": "An object that represents the action to take if a match is determined."
                      }
                    ]
                  },
                  "match": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/HttpGatewayRouteMatch"
                      },
                      {
                        "description": "An object that represents the criteria for determining a request match."
                      }
                    ]
                  }
                },
                "description": "An object that represents an HTTP gateway route."
              },
              "GatewayRoutePriority": {
                "type": "integer",
                "minimum": 0,
                "maximum": 1000
              },
              "TagRef": {
                "type": "object",
                "required": [
                  "key",
                  "value"
                ],
                "properties": {
                  "key": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/TagKey"
                      },
                      {
                        "description": "One part of a key-value pair that make up a tag. A <code>key</code> is a general label that acts like a category for more specific tag values."
                      }
                    ]
                  },
                  "value": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/TagValue"
                      },
                      {
                        "description": "The optional part of a key-value pair that make up a tag. A <code>value</code> acts as a descriptor within a tag category (key)."
                      }
                    ]
                  }
                },
                "description": "Optional metadata that you apply to a resource to assist with categorization and organization. Each tag consists of a key and an optional value, both of which you define. Tag keys can have a maximum character length of 128 characters, and tag values can have a maximum length of 256 characters."
              },
              "NotFoundException": {},
              "BadRequestException": {},
              "ConflictException": {},
              "TooManyRequestsException": {},
              "ForbiddenException": {},
              "ServiceUnavailableException": {},
              "InternalServerErrorException": {},
              "LimitExceededException": {},
              "CreateMeshOutput": {
                "type": "object",
                "required": [
                  "mesh"
                ],
                "properties": {
                  "mesh": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/MeshData"
                      },
                      {
                        "description": "The full description of your service mesh following the create call."
                      }
                    ]
                  }
                },
                "description": "<zonbook></zonbook><xhtml></xhtml>"
              },
              "EgressFilter": {
                "type": "object",
                "required": [
                  "type"
                ],
                "properties": {
                  "type": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/EgressFilterType"
                      },
                      {
                        "description": "The egress filter type. By default, the type is <code>DROP_ALL</code>, which allows egress only from virtual nodes to other defined resources in the service mesh (and any traffic to <code>*.amazonaws.com</code> for Amazon Web Services API calls). You can set the egress filter type to <code>ALLOW_ALL</code> to allow egress to any endpoint inside or outside of the service mesh."
                      }
                    ]
                  }
                },
                "description": "An object that represents the egress filter rules for a service mesh."
              },
              "MeshServiceDiscovery": {
                "type": "object",
                "properties": {
                  "ipPreference": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/IpPreference"
                      },
                      {
                        "description": "The IP version to use to control traffic within the mesh."
                      }
                    ]
                  }
                },
                "description": "An object that represents the service discovery information for a service mesh."
              },
              "CreateRouteOutput": {
                "type": "object",
                "required": [
                  "route"
                ],
                "properties": {
                  "route": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/RouteData"
                      },
                      {
                        "description": "The full description of your mesh following the create call."
                      }
                    ]
                  }
                },
                "description": "<zonbook></zonbook><xhtml></xhtml>"
              },
              "GrpcRoute": {
                "type": "object",
                "required": [
                  "action",
                  "match"
                ],
                "properties": {
                  "action": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/GrpcRouteAction"
                      },
                      {
                        "description": "An object that represents the action to take if a match is determined."
                      }
                    ]
                  },
                  "match": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/GrpcRouteMatch"
                      },
                      {
                        "description": "An object that represents the criteria for determining a request match."
                      }
                    ]
                  },
                  "retryPolicy": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/GrpcRetryPolicy"
                      },
                      {
                        "description": "An object that represents a retry policy."
                      }
                    ]
                  },
                  "timeout": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/GrpcTimeout"
                      },
                      {
                        "description": "An object that represents types of timeouts. "
                      }
                    ]
                  }
                },
                "description": "An object that represents a gRPC route type."
              },
              "HttpRoute": {
                "type": "object",
                "required": [
                  "action",
                  "match"
                ],
                "properties": {
                  "action": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/HttpRouteAction"
                      },
                      {
                        "description": "An object that represents the action to take if a match is determined."
                      }
                    ]
                  },
                  "match": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/HttpRouteMatch"
                      },
                      {
                        "description": "An object that represents the criteria for determining a request match."
                      }
                    ]
                  },
                  "retryPolicy": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/HttpRetryPolicy"
                      },
                      {
                        "description": "An object that represents a retry policy."
                      }
                    ]
                  },
                  "timeout": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/HttpTimeout"
                      },
                      {
                        "description": "An object that represents types of timeouts. "
                      }
                    ]
                  }
                },
                "description": "An object that represents an HTTP or HTTP/2 route type."
              },
              "RoutePriority": {
                "type": "integer",
                "minimum": 0,
                "maximum": 1000
              },
              "TcpRoute": {
                "type": "object",
                "required": [
                  "action"
                ],
                "properties": {
                  "action": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/TcpRouteAction"
                      },
                      {
                        "description": "The action to take if a match is determined."
                      }
                    ]
                  },
                  "match": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/TcpRouteMatch"
                      },
                      {
                        "description": "An object that represents the criteria for determining a request match."
                      }
                    ]
                  },
                  "timeout": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/TcpTimeout"
                      },
                      {
                        "description": "An object that represents types of timeouts. "
                      }
                    ]
                  }
                },
                "description": "An object that represents a TCP route type."
              },
              "CreateVirtualGatewayOutput": {
                "type": "object",
                "required": [
                  "virtualGateway"
                ],
                "properties": {
                  "virtualGateway": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/VirtualGatewayData"
                      },
                      {
                        "description": "The full description of your virtual gateway following the create call."
                      }
                    ]
                  }
                }
              },
              "VirtualGatewayBackendDefaults": {
                "type": "object",
                "properties": {
                  "clientPolicy": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/VirtualGatewayClientPolicy"
                      },
                      {
                        "description": "A reference to an object that represents a client policy."
                      }
                    ]
                  }
                },
                "description": "An object that represents the default properties for a backend."
              },
              "VirtualGatewayListeners": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/VirtualGatewayListener"
                }
              },
              "VirtualGatewayLogging": {
                "type": "object",
                "properties": {
                  "accessLog": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/VirtualGatewayAccessLog"
                      },
                      {
                        "description": "The access log configuration."
                      }
                    ]
                  }
                },
                "description": "An object that represents logging information."
              },
              "CreateVirtualNodeOutput": {
                "type": "object",
                "required": [
                  "virtualNode"
                ],
                "properties": {
                  "virtualNode": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/VirtualNodeData"
                      },
                      {
                        "description": "The full description of your virtual node following the create call."
                      }
                    ]
                  }
                },
                "description": "<zonbook></zonbook><xhtml></xhtml>"
              },
              "BackendDefaults": {
                "type": "object",
                "properties": {
                  "clientPolicy": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ClientPolicy"
                      },
                      {
                        "description": "A reference to an object that represents a client policy."
                      }
                    ]
                  }
                },
                "description": "An object that represents the default properties for a backend."
              },
              "Backends": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Backend"
                }
              },
              "Listeners": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Listener"
                }
              },
              "Logging": {
                "type": "object",
                "properties": {
                  "accessLog": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/AccessLog"
                      },
                      {
                        "description": "The access log configuration for a virtual node."
                      }
                    ]
                  }
                },
                "description": "An object that represents the logging information for a virtual node."
              },
              "ServiceDiscovery": {
                "type": "object",
                "properties": {
                  "awsCloudMap": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/AwsCloudMapServiceDiscovery"
                      },
                      {
                        "description": "Specifies any Cloud Map information for the virtual node."
                      }
                    ]
                  },
                  "dns": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/DnsServiceDiscovery"
                      },
                      {
                        "description": "Specifies the DNS information for the virtual node."
                      }
                    ]
                  }
                },
                "description": "An object that represents the service discovery information for a virtual node."
              },
              "CreateVirtualRouterOutput": {
                "type": "object",
                "required": [
                  "virtualRouter"
                ],
                "properties": {
                  "virtualRouter": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/VirtualRouterData"
                      },
                      {
                        "description": "The full description of your virtual router following the create call."
                      }
                    ]
                  }
                },
                "description": "<zonbook></zonbook><xhtml></xhtml>"
              },
              "VirtualRouterListeners": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/VirtualRouterListener"
                }
              },
              "CreateVirtualServiceOutput": {
                "type": "object",
                "required": [
                  "virtualService"
                ],
                "properties": {
                  "virtualService": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/VirtualServiceData"
                      },
                      {
                        "description": "The full description of your virtual service following the create call."
                      }
                    ]
                  }
                },
                "description": "<zonbook></zonbook><xhtml></xhtml>"
              },
              "VirtualServiceProvider": {
                "type": "object",
                "properties": {
                  "virtualNode": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/VirtualNodeServiceProvider"
                      },
                      {
                        "description": "The virtual node associated with a virtual service."
                      }
                    ]
                  },
                  "virtualRouter": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/VirtualRouterServiceProvider"
                      },
                      {
                        "description": "The virtual router associated with a virtual service."
                      }
                    ]
                  }
                },
                "description": "An object that represents the provider for a virtual service."
              },
              "DeleteGatewayRouteOutput": {
                "type": "object",
                "required": [
                  "gatewayRoute"
                ],
                "properties": {
                  "gatewayRoute": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/GatewayRouteData"
                      },
                      {
                        "description": "The gateway route that was deleted."
                      }
                    ]
                  }
                }
              },
              "ResourceInUseException": {},
              "DeleteMeshOutput": {
                "type": "object",
                "required": [
                  "mesh"
                ],
                "properties": {
                  "mesh": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/MeshData"
                      },
                      {
                        "description": "The service mesh that was deleted."
                      }
                    ]
                  }
                },
                "description": "<zonbook></zonbook><xhtml></xhtml>"
              },
              "DeleteRouteOutput": {
                "type": "object",
                "required": [
                  "route"
                ],
                "properties": {
                  "route": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/RouteData"
                      },
                      {
                        "description": "The route that was deleted."
                      }
                    ]
                  }
                },
                "description": "<zonbook></zonbook><xhtml></xhtml>"
              },
              "DeleteVirtualGatewayOutput": {
                "type": "object",
                "required": [
                  "virtualGateway"
                ],
                "properties": {
                  "virtualGateway": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/VirtualGatewayData"
                      },
                      {
                        "description": "The virtual gateway that was deleted."
                      }
                    ]
                  }
                }
              },
              "DeleteVirtualNodeOutput": {
                "type": "object",
                "required": [
                  "virtualNode"
                ],
                "properties": {
                  "virtualNode": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/VirtualNodeData"
                      },
                      {
                        "description": "The virtual node that was deleted."
                      }
                    ]
                  }
                },
                "description": "<zonbook></zonbook><xhtml></xhtml>"
              },
              "DeleteVirtualRouterOutput": {
                "type": "object",
                "required": [
                  "virtualRouter"
                ],
                "properties": {
                  "virtualRouter": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/VirtualRouterData"
                      },
                      {
                        "description": "The virtual router that was deleted."
                      }
                    ]
                  }
                },
                "description": "<zonbook></zonbook><xhtml></xhtml>"
              },
              "DeleteVirtualServiceOutput": {
                "type": "object",
                "required": [
                  "virtualService"
                ],
                "properties": {
                  "virtualService": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/VirtualServiceData"
                      },
                      {
                        "description": "The virtual service that was deleted."
                      }
                    ]
                  }
                },
                "description": "<zonbook></zonbook><xhtml></xhtml>"
              },
              "DescribeGatewayRouteOutput": {
                "type": "object",
                "required": [
                  "gatewayRoute"
                ],
                "properties": {
                  "gatewayRoute": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/GatewayRouteData"
                      },
                      {
                        "description": "The full description of your gateway route."
                      }
                    ]
                  }
                }
              },
              "DescribeMeshOutput": {
                "type": "object",
                "required": [
                  "mesh"
                ],
                "properties": {
                  "mesh": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/MeshData"
                      },
                      {
                        "description": "The full description of your service mesh."
                      }
                    ]
                  }
                },
                "description": "<zonbook></zonbook><xhtml></xhtml>"
              },
              "DescribeRouteOutput": {
                "type": "object",
                "required": [
                  "route"
                ],
                "properties": {
                  "route": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/RouteData"
                      },
                      {
                        "description": "The full description of your route."
                      }
                    ]
                  }
                },
                "description": "<zonbook></zonbook><xhtml></xhtml>"
              },
              "DescribeVirtualGatewayOutput": {
                "type": "object",
                "required": [
                  "virtualGateway"
                ],
                "properties": {
                  "virtualGateway": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/VirtualGatewayData"
                      },
                      {
                        "description": "The full description of your virtual gateway."
                      }
                    ]
                  }
                }
              },
              "DescribeVirtualNodeOutput": {
                "type": "object",
                "required": [
                  "virtualNode"
                ],
                "properties": {
                  "virtualNode": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/VirtualNodeData"
                      },
                      {
                        "description": "The full description of your virtual node."
                      }
                    ]
                  }
                },
                "description": "<zonbook></zonbook><xhtml></xhtml>"
              },
              "DescribeVirtualRouterOutput": {
                "type": "object",
                "required": [
                  "virtualRouter"
                ],
                "properties": {
                  "virtualRouter": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/VirtualRouterData"
                      },
                      {
                        "description": "The full description of your virtual router."
                      }
                    ]
                  }
                },
                "description": "<zonbook></zonbook><xhtml></xhtml>"
              },
              "DescribeVirtualServiceOutput": {
                "type": "object",
                "required": [
                  "virtualService"
                ],
                "properties": {
                  "virtualService": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/VirtualServiceData"
                      },
                      {
                        "description": "The full description of your virtual service."
                      }
                    ]
                  }
                },
                "description": "<zonbook></zonbook><xhtml></xhtml>"
              },
              "ListGatewayRoutesOutput": {
                "type": "object",
                "required": [
                  "gatewayRoutes"
                ],
                "properties": {
                  "gatewayRoutes": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/GatewayRouteList"
                      },
                      {
                        "description": "The list of existing gateway routes for the specified service mesh and virtual gateway."
                      }
                    ]
                  },
                  "nextToken": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/String"
                      },
                      {
                        "description": "The <code>nextToken</code> value to include in a future <code>ListGatewayRoutes</code> request. When the results of a <code>ListGatewayRoutes</code> request exceed <code>limit</code>, you can use this value to retrieve the next page of results. This value is <code>null</code> when there are no more results to return."
                      }
                    ]
                  }
                }
              },
              "ListMeshesOutput": {
                "type": "object",
                "required": [
                  "meshes"
                ],
                "properties": {
                  "meshes": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/MeshList"
                      },
                      {
                        "description": "The list of existing service meshes."
                      }
                    ]
                  },
                  "nextToken": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/String"
                      },
                      {
                        "description": "The <code>nextToken</code> value to include in a future <code>ListMeshes</code> request. When the results of a <code>ListMeshes</code> request exceed <code>limit</code>, you can use this value to retrieve the next page of results. This value is <code>null</code> when there are no more results to return."
                      }
                    ]
                  }
                },
                "description": "<zonbook></zonbook><xhtml></xhtml>"
              },
              "ListRoutesOutput": {
                "type": "object",
                "required": [
                  "routes"
                ],
                "properties": {
                  "nextToken": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/String"
                      },
                      {
                        "description": "The <code>nextToken</code> value to include in a future <code>ListRoutes</code> request. When the results of a <code>ListRoutes</code> request exceed <code>limit</code>, you can use this value to retrieve the next page of results. This value is <code>null</code> when there are no more results to return."
                      }
                    ]
                  },
                  "routes": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/RouteList"
                      },
                      {
                        "description": "The list of existing routes for the specified service mesh and virtual router."
                      }
                    ]
                  }
                },
                "description": "<zonbook></zonbook><xhtml></xhtml>"
              },
              "ListTagsForResourceOutput": {
                "type": "object",
                "required": [
                  "tags"
                ],
                "properties": {
                  "nextToken": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/String"
                      },
                      {
                        "description": "The <code>nextToken</code> value to include in a future <code>ListTagsForResource</code> request. When the results of a <code>ListTagsForResource</code> request exceed <code>limit</code>, you can use this value to retrieve the next page of results. This value is <code>null</code> when there are no more results to return."
                      }
                    ]
                  },
                  "tags": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/TagList"
                      },
                      {
                        "description": "The tags for the resource."
                      }
                    ]
                  }
                },
                "description": "<zonbook></zonbook><xhtml></xhtml>"
              },
              "ListVirtualGatewaysOutput": {
                "type": "object",
                "required": [
                  "virtualGateways"
                ],
                "properties": {
                  "nextToken": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/String"
                      },
                      {
                        "description": "The <code>nextToken</code> value to include in a future <code>ListVirtualGateways</code> request. When the results of a <code>ListVirtualGateways</code> request exceed <code>limit</code>, you can use this value to retrieve the next page of results. This value is <code>null</code> when there are no more results to return."
                      }
                    ]
                  },
                  "virtualGateways": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/VirtualGatewayList"
                      },
                      {
                        "description": "The list of existing virtual gateways for the specified service mesh."
                      }
                    ]
                  }
                }
              },
              "ListVirtualNodesOutput": {
                "type": "object",
                "required": [
                  "virtualNodes"
                ],
                "properties": {
                  "nextToken": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/String"
                      },
                      {
                        "description": "The <code>nextToken</code> value to include in a future <code>ListVirtualNodes</code> request. When the results of a <code>ListVirtualNodes</code> request exceed <code>limit</code>, you can use this value to retrieve the next page of results. This value is <code>null</code> when there are no more results to return."
                      }
                    ]
                  },
                  "virtualNodes": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/VirtualNodeList"
                      },
                      {
                        "description": "The list of existing virtual nodes for the specified service mesh."
                      }
                    ]
                  }
                },
                "description": "<zonbook></zonbook><xhtml></xhtml>"
              },
              "ListVirtualRoutersOutput": {
                "type": "object",
                "required": [
                  "virtualRouters"
                ],
                "properties": {
                  "nextToken": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/String"
                      },
                      {
                        "description": "The <code>nextToken</code> value to include in a future <code>ListVirtualRouters</code> request. When the results of a <code>ListVirtualRouters</code> request exceed <code>limit</code>, you can use this value to retrieve the next page of results. This value is <code>null</code> when there are no more results to return."
                      }
                    ]
                  },
                  "virtualRouters": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/VirtualRouterList"
                      },
                      {
                        "description": "The list of existing virtual routers for the specified service mesh."
                      }
                    ]
                  }
                },
                "description": "<zonbook></zonbook><xhtml></xhtml>"
              },
              "ListVirtualServicesOutput": {
                "type": "object",
                "required": [
                  "virtualServices"
                ],
                "properties": {
                  "nextToken": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/String"
                      },
                      {
                        "description": "The <code>nextToken</code> value to include in a future <code>ListVirtualServices</code> request. When the results of a <code>ListVirtualServices</code> request exceed <code>limit</code>, you can use this value to retrieve the next page of results. This value is <code>null</code> when there are no more results to return."
                      }
                    ]
                  },
                  "virtualServices": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/VirtualServiceList"
                      },
                      {
                        "description": "The list of existing virtual services for the specified service mesh."
                      }
                    ]
                  }
                },
                "description": "<zonbook></zonbook><xhtml></xhtml>"
              },
              "TagResourceOutput": {
                "type": "object",
                "properties": {},
                "description": "<zonbook></zonbook><xhtml></xhtml>"
              },
              "TooManyTagsException": {},
              "UntagResourceOutput": {
                "type": "object",
                "properties": {},
                "description": "<zonbook></zonbook><xhtml></xhtml>"
              },
              "TagKey": {
                "type": "string",
                "minLength": 1,
                "maxLength": 128
              },
              "UpdateGatewayRouteOutput": {
                "type": "object",
                "required": [
                  "gatewayRoute"
                ],
                "properties": {
                  "gatewayRoute": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/GatewayRouteData"
                      },
                      {
                        "description": "A full description of the gateway route that was updated."
                      }
                    ]
                  }
                }
              },
              "UpdateMeshOutput": {
                "type": "object",
                "required": [
                  "mesh"
                ],
                "properties": {
                  "mesh": {
                    "$ref": "#/components/schemas/MeshData"
                  }
                },
                "description": "<zonbook></zonbook><xhtml></xhtml>"
              },
              "UpdateRouteOutput": {
                "type": "object",
                "required": [
                  "route"
                ],
                "properties": {
                  "route": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/RouteData"
                      },
                      {
                        "description": "A full description of the route that was updated."
                      }
                    ]
                  }
                },
                "description": "<zonbook></zonbook><xhtml></xhtml>"
              },
              "UpdateVirtualGatewayOutput": {
                "type": "object",
                "required": [
                  "virtualGateway"
                ],
                "properties": {
                  "virtualGateway": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/VirtualGatewayData"
                      },
                      {
                        "description": "A full description of the virtual gateway that was updated."
                      }
                    ]
                  }
                }
              },
              "UpdateVirtualNodeOutput": {
                "type": "object",
                "required": [
                  "virtualNode"
                ],
                "properties": {
                  "virtualNode": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/VirtualNodeData"
                      },
                      {
                        "description": "A full description of the virtual node that was updated."
                      }
                    ]
                  }
                },
                "description": "<zonbook></zonbook><xhtml></xhtml>"
              },
              "UpdateVirtualRouterOutput": {
                "type": "object",
                "required": [
                  "virtualRouter"
                ],
                "properties": {
                  "virtualRouter": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/VirtualRouterData"
                      },
                      {
                        "description": "A full description of the virtual router that was updated."
                      }
                    ]
                  }
                },
                "description": "<zonbook></zonbook><xhtml></xhtml>"
              },
              "UpdateVirtualServiceOutput": {
                "type": "object",
                "required": [
                  "virtualService"
                ],
                "properties": {
                  "virtualService": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/VirtualServiceData"
                      },
                      {
                        "description": "A full description of the virtual service that was updated."
                      }
                    ]
                  }
                },
                "description": "<zonbook></zonbook><xhtml></xhtml>"
              },
              "FileAccessLog": {
                "type": "object",
                "required": [
                  "path"
                ],
                "properties": {
                  "format": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/LoggingFormat"
                      },
                      {
                        "description": "The specified format for the logs. The format is either <code>json_format</code> or <code>text_format</code>."
                      }
                    ]
                  },
                  "path": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/FilePath"
                      },
                      {
                        "description": "<p>The file path to write access logs to. You can use <code>/dev/stdout</code> to send access logs to standard out and configure your Envoy container to use a log driver, such as <code>awslogs</code>, to export the access logs to a log storage service such as Amazon CloudWatch Logs. You can also specify a path in the Envoy container's file system to write the files to disk.</p> <pre><code> &lt;note&gt; &lt;p&gt;The Envoy process must have write permissions to the path that you specify here. Otherwise, Envoy fails to bootstrap properly.&lt;/p&gt; &lt;/note&gt; </code></pre>"
                      }
                    ]
                  }
                },
                "description": "An object that represents an access log file."
              },
              "AccessLog": {
                "type": "object",
                "properties": {
                  "file": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/FileAccessLog"
                      },
                      {
                        "description": "The file object to send virtual node access logs to."
                      }
                    ]
                  }
                },
                "description": "An object that represents the access logging information for a virtual node."
              },
              "AccountId": {
                "type": "string",
                "minLength": 12,
                "maxLength": 12
              },
              "Arn": {
                "type": "string"
              },
              "AwsCloudMapInstanceAttributeKey": {
                "type": "string",
                "pattern": "^[a-zA-Z0-9!-~]+$",
                "minLength": 1,
                "maxLength": 255
              },
              "AwsCloudMapInstanceAttributeValue": {
                "type": "string",
                "pattern": "^([a-zA-Z0-9!-~][  a-zA-Z0-9!-~]*){0,1}[a-zA-Z0-9!-~]{0,1}$",
                "minLength": 1,
                "maxLength": 1024
              },
              "AwsCloudMapInstanceAttribute": {
                "type": "object",
                "required": [
                  "key",
                  "value"
                ],
                "properties": {
                  "key": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/AwsCloudMapInstanceAttributeKey"
                      },
                      {
                        "description": "The name of an Cloud Map service instance attribute key. Any Cloud Map service instance that contains the specified key and value is returned."
                      }
                    ]
                  },
                  "value": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/AwsCloudMapInstanceAttributeValue"
                      },
                      {
                        "description": "The value of an Cloud Map service instance attribute key. Any Cloud Map service instance that contains the specified key and value is returned."
                      }
                    ]
                  }
                },
                "description": "<p>An object that represents the Cloud Map attribute information for your virtual node.</p> <note> <p>Cloud Map is not available in the eu-south-1 Region.</p> </note>"
              },
              "AwsCloudMapInstanceAttributes": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AwsCloudMapInstanceAttribute"
                }
              },
              "AwsCloudMapName": {
                "type": "string",
                "minLength": 1,
                "maxLength": 1024
              },
              "IpPreference": {
                "type": "string",
                "enum": [
                  "IPv6_PREFERRED",
                  "IPv4_PREFERRED",
                  "IPv4_ONLY",
                  "IPv6_ONLY"
                ]
              },
              "AwsCloudMapServiceDiscovery": {
                "type": "object",
                "required": [
                  "namespaceName",
                  "serviceName"
                ],
                "properties": {
                  "attributes": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/AwsCloudMapInstanceAttributes"
                      },
                      {
                        "description": "A string map that contains attributes with values that you can use to filter instances by any custom attribute that you specified when you registered the instance. Only instances that match all of the specified key/value pairs will be returned."
                      }
                    ]
                  },
                  "ipPreference": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/IpPreference"
                      },
                      {
                        "description": "The preferred IP version that this virtual node uses. Setting the IP preference on the virtual node only overrides the IP preference set for the mesh on this specific node."
                      }
                    ]
                  },
                  "namespaceName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/AwsCloudMapName"
                      },
                      {
                        "description": "The name of the Cloud Map namespace to use."
                      }
                    ]
                  },
                  "serviceName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/AwsCloudMapName"
                      },
                      {
                        "description": "The name of the Cloud Map service to use."
                      }
                    ]
                  }
                },
                "description": "<p>An object that represents the Cloud Map service discovery information for your virtual node.</p> <note> <p>Cloud Map is not available in the eu-south-1 Region.</p> </note>"
              },
              "VirtualServiceBackend": {
                "type": "object",
                "required": [
                  "virtualServiceName"
                ],
                "properties": {
                  "clientPolicy": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ClientPolicy"
                      },
                      {
                        "description": "A reference to an object that represents the client policy for a backend."
                      }
                    ]
                  },
                  "virtualServiceName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ServiceName"
                      },
                      {
                        "description": "The name of the virtual service that is acting as a virtual node backend."
                      }
                    ]
                  }
                },
                "description": "An object that represents a virtual service backend for a virtual node."
              },
              "Backend": {
                "type": "object",
                "properties": {
                  "virtualService": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/VirtualServiceBackend"
                      },
                      {
                        "description": "Specifies a virtual service to use as a backend. "
                      }
                    ]
                  }
                },
                "description": "An object that represents the backends that a virtual node is expected to send outbound traffic to."
              },
              "ClientPolicy": {
                "type": "object",
                "properties": {
                  "tls": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ClientPolicyTls"
                      },
                      {
                        "description": "A reference to an object that represents a Transport Layer Security (TLS) client policy."
                      }
                    ]
                  }
                },
                "description": "An object that represents a client policy."
              },
              "Boolean": {
                "type": "boolean"
              },
              "CertificateAuthorityArns": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Arn"
                },
                "minItems": 1,
                "maxItems": 3
              },
              "ClientPolicyTls": {
                "type": "object",
                "required": [
                  "validation"
                ],
                "properties": {
                  "certificate": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ClientTlsCertificate"
                      },
                      {
                        "description": "A reference to an object that represents a client's TLS certificate."
                      }
                    ]
                  },
                  "enforce": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Boolean"
                      },
                      {
                        "description": "Whether the policy is enforced. The default is <code>True</code>, if a value isn't specified."
                      }
                    ]
                  },
                  "ports": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/PortSet"
                      },
                      {
                        "description": "One or more ports that the policy is enforced for."
                      }
                    ]
                  },
                  "validation": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/TlsValidationContext"
                      },
                      {
                        "description": "A reference to an object that represents a TLS validation context."
                      }
                    ]
                  }
                },
                "description": "A reference to an object that represents a Transport Layer Security (TLS) client policy."
              },
              "ClientTlsCertificate": {
                "type": "object",
                "properties": {
                  "file": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ListenerTlsFileCertificate"
                      },
                      {
                        "description": "An object that represents a local file certificate. The certificate must meet specific requirements and you must have proxy authorization enabled. For more information, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/tls.html\">Transport Layer Security (TLS)</a>."
                      }
                    ]
                  },
                  "sds": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ListenerTlsSdsCertificate"
                      },
                      {
                        "description": "A reference to an object that represents a client's TLS Secret Discovery Service certificate."
                      }
                    ]
                  }
                },
                "description": "An object that represents the client's certificate."
              },
              "PortSet": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PortNumber"
                }
              },
              "TlsValidationContext": {
                "type": "object",
                "required": [
                  "trust"
                ],
                "properties": {
                  "subjectAlternativeNames": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/SubjectAlternativeNames"
                      },
                      {
                        "description": "A reference to an object that represents the SANs for a Transport Layer Security (TLS) validation context. If you don't specify SANs on the <i>terminating</i> mesh endpoint, the Envoy proxy for that node doesn't verify the SAN on a peer client certificate. If you don't specify SANs on the <i>originating</i> mesh endpoint, the SAN on the certificate provided by the terminating endpoint must match the mesh endpoint service discovery configuration. Since SPIRE vended certificates have a SPIFFE ID as a name, you must set the SAN since the name doesn't match the service discovery name."
                      }
                    ]
                  },
                  "trust": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/TlsValidationContextTrust"
                      },
                      {
                        "description": "A reference to where to retrieve the trust chain when validating a peer’s Transport Layer Security (TLS) certificate."
                      }
                    ]
                  }
                },
                "description": "An object that represents how the proxy will validate its peer during Transport Layer Security (TLS) negotiation."
              },
              "ListenerTlsFileCertificate": {
                "type": "object",
                "required": [
                  "certificateChain",
                  "privateKey"
                ],
                "properties": {
                  "certificateChain": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/FilePath"
                      },
                      {
                        "description": "The certificate chain for the certificate."
                      }
                    ]
                  },
                  "privateKey": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/FilePath"
                      },
                      {
                        "description": "The private key for a certificate stored on the file system of the virtual node that the proxy is running on."
                      }
                    ]
                  }
                },
                "description": "An object that represents a local file certificate. The certificate must meet specific requirements and you must have proxy authorization enabled. For more information, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/tls.html#virtual-node-tls-prerequisites\">Transport Layer Security (TLS)</a>."
              },
              "ListenerTlsSdsCertificate": {
                "type": "object",
                "required": [
                  "secretName"
                ],
                "properties": {
                  "secretName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/SdsSecretName"
                      },
                      {
                        "description": "A reference to an object that represents the name of the secret requested from the Secret Discovery Service provider representing Transport Layer Security (TLS) materials like a certificate or certificate chain."
                      }
                    ]
                  }
                },
                "description": "An object that represents the listener's Secret Discovery Service certificate. The proxy must be configured with a local SDS provider via a Unix Domain Socket. See App Mesh <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/tls.html\">TLS documentation</a> for more info."
              },
              "String": {
                "type": "string"
              },
              "ResourceName": {
                "type": "string",
                "minLength": 1,
                "maxLength": 255
              },
              "GatewayRouteSpec": {
                "type": "object",
                "properties": {
                  "grpcRoute": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/GrpcGatewayRoute"
                      },
                      {
                        "description": "An object that represents the specification of a gRPC gateway route."
                      }
                    ]
                  },
                  "http2Route": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/HttpGatewayRoute"
                      },
                      {
                        "description": "An object that represents the specification of an HTTP/2 gateway route."
                      }
                    ]
                  },
                  "httpRoute": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/HttpGatewayRoute"
                      },
                      {
                        "description": "An object that represents the specification of an HTTP gateway route."
                      }
                    ]
                  },
                  "priority": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/GatewayRoutePriority"
                      },
                      {
                        "description": "The ordering of the gateway routes spec."
                      }
                    ]
                  }
                },
                "description": "An object that represents a gateway route specification. Specify one gateway route type."
              },
              "TagList": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/TagRef"
                },
                "minItems": 0,
                "maxItems": 50
              },
              "CreateGatewayRouteInput": {
                "type": "object",
                "required": [
                  "gatewayRouteName",
                  "spec"
                ],
                "title": "CreateGatewayRouteInput",
                "properties": {
                  "clientToken": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/String"
                      },
                      {
                        "description": "Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Up to 36 letters, numbers, hyphens, and underscores are allowed."
                      }
                    ]
                  },
                  "gatewayRouteName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ResourceName"
                      },
                      {
                        "description": "The name to use for the gateway route."
                      }
                    ]
                  },
                  "spec": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/GatewayRouteSpec"
                      },
                      {
                        "description": "The gateway route specification to apply."
                      }
                    ]
                  },
                  "tags": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/TagList"
                      },
                      {
                        "description": "Optional metadata that you can apply to the gateway route to assist with categorization and organization. Each tag consists of a key and an optional value, both of which you define. Tag keys can have a maximum character length of 128 characters, and tag values can have a maximum length of 256 characters."
                      }
                    ]
                  }
                }
              },
              "GatewayRouteData": {
                "type": "object",
                "required": [
                  "gatewayRouteName",
                  "meshName",
                  "metadata",
                  "spec",
                  "status",
                  "virtualGatewayName"
                ],
                "properties": {
                  "gatewayRouteName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ResourceName"
                      },
                      {
                        "description": "The name of the gateway route."
                      }
                    ]
                  },
                  "meshName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ResourceName"
                      },
                      {
                        "description": "The name of the service mesh that the resource resides in. "
                      }
                    ]
                  },
                  "metadata": {
                    "$ref": "#/components/schemas/ResourceMetadata"
                  },
                  "spec": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/GatewayRouteSpec"
                      },
                      {
                        "description": "The specifications of the gateway route."
                      }
                    ]
                  },
                  "status": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/GatewayRouteStatus"
                      },
                      {
                        "description": "The status of the gateway route."
                      }
                    ]
                  },
                  "virtualGatewayName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ResourceName"
                      },
                      {
                        "description": "The virtual gateway that the gateway route is associated with."
                      }
                    ]
                  }
                },
                "description": "An object that represents a gateway route returned by a describe operation."
              },
              "MeshSpec": {
                "type": "object",
                "properties": {
                  "egressFilter": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/EgressFilter"
                      },
                      {
                        "description": "The egress filter rules for the service mesh."
                      }
                    ]
                  },
                  "serviceDiscovery": {
                    "$ref": "#/components/schemas/MeshServiceDiscovery"
                  }
                },
                "description": "An object that represents the specification of a service mesh."
              },
              "CreateMeshInput": {
                "type": "object",
                "required": [
                  "meshName"
                ],
                "title": "CreateMeshInput",
                "properties": {
                  "clientToken": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/String"
                      },
                      {
                        "description": "Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Up to 36 letters, numbers, hyphens, and underscores are allowed."
                      }
                    ]
                  },
                  "meshName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ResourceName"
                      },
                      {
                        "description": "The name to use for the service mesh."
                      }
                    ]
                  },
                  "spec": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/MeshSpec"
                      },
                      {
                        "description": "The service mesh specification to apply."
                      }
                    ]
                  },
                  "tags": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/TagList"
                      },
                      {
                        "description": "Optional metadata that you can apply to the service mesh to assist with categorization and organization. Each tag consists of a key and an optional value, both of which you define. Tag keys can have a maximum character length of 128 characters, and tag values can have a maximum length of 256 characters."
                      }
                    ]
                  }
                },
                "description": "<zonbook></zonbook><xhtml></xhtml>"
              },
              "MeshData": {
                "type": "object",
                "required": [
                  "meshName",
                  "metadata",
                  "spec",
                  "status"
                ],
                "properties": {
                  "meshName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ResourceName"
                      },
                      {
                        "description": "The name of the service mesh."
                      }
                    ]
                  },
                  "metadata": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ResourceMetadata"
                      },
                      {
                        "description": "The associated metadata for the service mesh."
                      }
                    ]
                  },
                  "spec": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/MeshSpec"
                      },
                      {
                        "description": "The associated specification for the service mesh."
                      }
                    ]
                  },
                  "status": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/MeshStatus"
                      },
                      {
                        "description": "The status of the service mesh."
                      }
                    ]
                  }
                },
                "description": "An object that represents a service mesh returned by a describe operation."
              },
              "RouteSpec": {
                "type": "object",
                "properties": {
                  "grpcRoute": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/GrpcRoute"
                      },
                      {
                        "description": "An object that represents the specification of a gRPC route."
                      }
                    ]
                  },
                  "http2Route": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/HttpRoute"
                      },
                      {
                        "description": "An object that represents the specification of an HTTP/2 route."
                      }
                    ]
                  },
                  "httpRoute": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/HttpRoute"
                      },
                      {
                        "description": "An object that represents the specification of an HTTP route."
                      }
                    ]
                  },
                  "priority": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/RoutePriority"
                      },
                      {
                        "description": "The priority for the route. Routes are matched based on the specified value, where 0 is the highest priority."
                      }
                    ]
                  },
                  "tcpRoute": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/TcpRoute"
                      },
                      {
                        "description": "An object that represents the specification of a TCP route."
                      }
                    ]
                  }
                },
                "description": "An object that represents a route specification. Specify one route type."
              },
              "CreateRouteInput": {
                "type": "object",
                "required": [
                  "routeName",
                  "spec"
                ],
                "title": "CreateRouteInput",
                "properties": {
                  "clientToken": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/String"
                      },
                      {
                        "description": "Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Up to 36 letters, numbers, hyphens, and underscores are allowed."
                      }
                    ]
                  },
                  "routeName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ResourceName"
                      },
                      {
                        "description": "The name to use for the route."
                      }
                    ]
                  },
                  "spec": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/RouteSpec"
                      },
                      {
                        "description": "The route specification to apply."
                      }
                    ]
                  },
                  "tags": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/TagList"
                      },
                      {
                        "description": "Optional metadata that you can apply to the route to assist with categorization and organization. Each tag consists of a key and an optional value, both of which you define. Tag keys can have a maximum character length of 128 characters, and tag values can have a maximum length of 256 characters."
                      }
                    ]
                  }
                },
                "description": "<zonbook></zonbook><xhtml></xhtml>"
              },
              "RouteData": {
                "type": "object",
                "required": [
                  "meshName",
                  "metadata",
                  "routeName",
                  "spec",
                  "status",
                  "virtualRouterName"
                ],
                "properties": {
                  "meshName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ResourceName"
                      },
                      {
                        "description": "The name of the service mesh that the route resides in."
                      }
                    ]
                  },
                  "metadata": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ResourceMetadata"
                      },
                      {
                        "description": "The associated metadata for the route."
                      }
                    ]
                  },
                  "routeName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ResourceName"
                      },
                      {
                        "description": "The name of the route."
                      }
                    ]
                  },
                  "spec": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/RouteSpec"
                      },
                      {
                        "description": "The specifications of the route."
                      }
                    ]
                  },
                  "status": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/RouteStatus"
                      },
                      {
                        "description": "The status of the route."
                      }
                    ]
                  },
                  "virtualRouterName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ResourceName"
                      },
                      {
                        "description": "The virtual router that the route is associated with."
                      }
                    ]
                  }
                },
                "description": "An object that represents a route returned by a describe operation."
              },
              "VirtualGatewaySpec": {
                "type": "object",
                "required": [
                  "listeners"
                ],
                "properties": {
                  "backendDefaults": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/VirtualGatewayBackendDefaults"
                      },
                      {
                        "description": "A reference to an object that represents the defaults for backends."
                      }
                    ]
                  },
                  "listeners": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/VirtualGatewayListeners"
                      },
                      {
                        "description": "The listeners that the mesh endpoint is expected to receive inbound traffic from. You can specify one listener."
                      }
                    ]
                  },
                  "logging": {
                    "$ref": "#/components/schemas/VirtualGatewayLogging"
                  }
                },
                "description": "An object that represents the specification of a service mesh resource."
              },
              "CreateVirtualGatewayInput": {
                "type": "object",
                "required": [
                  "spec",
                  "virtualGatewayName"
                ],
                "title": "CreateVirtualGatewayInput",
                "properties": {
                  "clientToken": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/String"
                      },
                      {
                        "description": "Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Up to 36 letters, numbers, hyphens, and underscores are allowed."
                      }
                    ]
                  },
                  "spec": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/VirtualGatewaySpec"
                      },
                      {
                        "description": "The virtual gateway specification to apply."
                      }
                    ]
                  },
                  "tags": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/TagList"
                      },
                      {
                        "description": "Optional metadata that you can apply to the virtual gateway to assist with categorization and organization. Each tag consists of a key and an optional value, both of which you define. Tag keys can have a maximum character length of 128 characters, and tag values can have a maximum length of 256 characters."
                      }
                    ]
                  },
                  "virtualGatewayName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ResourceName"
                      },
                      {
                        "description": "The name to use for the virtual gateway."
                      }
                    ]
                  }
                }
              },
              "VirtualGatewayData": {
                "type": "object",
                "required": [
                  "meshName",
                  "metadata",
                  "spec",
                  "status",
                  "virtualGatewayName"
                ],
                "properties": {
                  "meshName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ResourceName"
                      },
                      {
                        "description": "The name of the service mesh that the virtual gateway resides in."
                      }
                    ]
                  },
                  "metadata": {
                    "$ref": "#/components/schemas/ResourceMetadata"
                  },
                  "spec": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/VirtualGatewaySpec"
                      },
                      {
                        "description": "The specifications of the virtual gateway."
                      }
                    ]
                  },
                  "status": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/VirtualGatewayStatus"
                      },
                      {
                        "description": "The current status of the virtual gateway."
                      }
                    ]
                  },
                  "virtualGatewayName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ResourceName"
                      },
                      {
                        "description": "The name of the virtual gateway."
                      }
                    ]
                  }
                },
                "description": "An object that represents a virtual gateway returned by a describe operation."
              },
              "VirtualNodeSpec": {
                "type": "object",
                "properties": {
                  "backendDefaults": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/BackendDefaults"
                      },
                      {
                        "description": "A reference to an object that represents the defaults for backends."
                      }
                    ]
                  },
                  "backends": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Backends"
                      },
                      {
                        "description": "The backends that the virtual node is expected to send outbound traffic to."
                      }
                    ]
                  },
                  "listeners": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Listeners"
                      },
                      {
                        "description": "The listener that the virtual node is expected to receive inbound traffic from. You can specify one listener."
                      }
                    ]
                  },
                  "logging": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Logging"
                      },
                      {
                        "description": "The inbound and outbound access logging information for the virtual node."
                      }
                    ]
                  },
                  "serviceDiscovery": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ServiceDiscovery"
                      },
                      {
                        "description": "The service discovery information for the virtual node. If your virtual node does not expect ingress traffic, you can omit this parameter. If you specify a <code>listener</code>, then you must specify service discovery information."
                      }
                    ]
                  }
                },
                "description": "An object that represents the specification of a virtual node."
              },
              "CreateVirtualNodeInput": {
                "type": "object",
                "required": [
                  "spec",
                  "virtualNodeName"
                ],
                "title": "CreateVirtualNodeInput",
                "properties": {
                  "clientToken": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/String"
                      },
                      {
                        "description": "Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Up to 36 letters, numbers, hyphens, and underscores are allowed."
                      }
                    ]
                  },
                  "spec": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/VirtualNodeSpec"
                      },
                      {
                        "description": "The virtual node specification to apply."
                      }
                    ]
                  },
                  "tags": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/TagList"
                      },
                      {
                        "description": "Optional metadata that you can apply to the virtual node to assist with categorization and organization. Each tag consists of a key and an optional value, both of which you define. Tag keys can have a maximum character length of 128 characters, and tag values can have a maximum length of 256 characters."
                      }
                    ]
                  },
                  "virtualNodeName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ResourceName"
                      },
                      {
                        "description": "The name to use for the virtual node."
                      }
                    ]
                  }
                },
                "description": "<zonbook></zonbook><xhtml></xhtml>"
              },
              "VirtualNodeData": {
                "type": "object",
                "required": [
                  "meshName",
                  "metadata",
                  "spec",
                  "status",
                  "virtualNodeName"
                ],
                "properties": {
                  "meshName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ResourceName"
                      },
                      {
                        "description": "The name of the service mesh that the virtual node resides in."
                      }
                    ]
                  },
                  "metadata": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ResourceMetadata"
                      },
                      {
                        "description": "The associated metadata for the virtual node."
                      }
                    ]
                  },
                  "spec": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/VirtualNodeSpec"
                      },
                      {
                        "description": "The specifications of the virtual node."
                      }
                    ]
                  },
                  "status": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/VirtualNodeStatus"
                      },
                      {
                        "description": "The current status for the virtual node."
                      }
                    ]
                  },
                  "virtualNodeName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ResourceName"
                      },
                      {
                        "description": "The name of the virtual node."
                      }
                    ]
                  }
                },
                "description": "An object that represents a virtual node returned by a describe operation."
              },
              "VirtualRouterSpec": {
                "type": "object",
                "properties": {
                  "listeners": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/VirtualRouterListeners"
                      },
                      {
                        "description": "The listeners that the virtual router is expected to receive inbound traffic from. You can specify one listener."
                      }
                    ]
                  }
                },
                "description": "An object that represents the specification of a virtual router."
              },
              "CreateVirtualRouterInput": {
                "type": "object",
                "required": [
                  "spec",
                  "virtualRouterName"
                ],
                "title": "CreateVirtualRouterInput",
                "properties": {
                  "clientToken": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/String"
                      },
                      {
                        "description": "Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Up to 36 letters, numbers, hyphens, and underscores are allowed."
                      }
                    ]
                  },
                  "spec": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/VirtualRouterSpec"
                      },
                      {
                        "description": "The virtual router specification to apply."
                      }
                    ]
                  },
                  "tags": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/TagList"
                      },
                      {
                        "description": "Optional metadata that you can apply to the virtual router to assist with categorization and organization. Each tag consists of a key and an optional value, both of which you define. Tag keys can have a maximum character length of 128 characters, and tag values can have a maximum length of 256 characters."
                      }
                    ]
                  },
                  "virtualRouterName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ResourceName"
                      },
                      {
                        "description": "The name to use for the virtual router."
                      }
                    ]
                  }
                },
                "description": "<zonbook></zonbook><xhtml></xhtml>"
              },
              "VirtualRouterData": {
                "type": "object",
                "required": [
                  "meshName",
                  "metadata",
                  "spec",
                  "status",
                  "virtualRouterName"
                ],
                "properties": {
                  "meshName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ResourceName"
                      },
                      {
                        "description": "The name of the service mesh that the virtual router resides in."
                      }
                    ]
                  },
                  "metadata": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ResourceMetadata"
                      },
                      {
                        "description": "The associated metadata for the virtual router."
                      }
                    ]
                  },
                  "spec": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/VirtualRouterSpec"
                      },
                      {
                        "description": "The specifications of the virtual router."
                      }
                    ]
                  },
                  "status": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/VirtualRouterStatus"
                      },
                      {
                        "description": "The current status of the virtual router."
                      }
                    ]
                  },
                  "virtualRouterName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ResourceName"
                      },
                      {
                        "description": "The name of the virtual router."
                      }
                    ]
                  }
                },
                "description": "An object that represents a virtual router returned by a describe operation."
              },
              "VirtualServiceSpec": {
                "type": "object",
                "properties": {
                  "provider": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/VirtualServiceProvider"
                      },
                      {
                        "description": "The App Mesh object that is acting as the provider for a virtual service. You can specify a single virtual node or virtual router."
                      }
                    ]
                  }
                },
                "description": "An object that represents the specification of a virtual service."
              },
              "ServiceName": {
                "type": "string"
              },
              "CreateVirtualServiceInput": {
                "type": "object",
                "required": [
                  "spec",
                  "virtualServiceName"
                ],
                "title": "CreateVirtualServiceInput",
                "properties": {
                  "clientToken": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/String"
                      },
                      {
                        "description": "Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Up to 36 letters, numbers, hyphens, and underscores are allowed."
                      }
                    ]
                  },
                  "spec": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/VirtualServiceSpec"
                      },
                      {
                        "description": "The virtual service specification to apply."
                      }
                    ]
                  },
                  "tags": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/TagList"
                      },
                      {
                        "description": "Optional metadata that you can apply to the virtual service to assist with categorization and organization. Each tag consists of a key and an optional value, both of which you define. Tag keys can have a maximum character length of 128 characters, and tag values can have a maximum length of 256 characters."
                      }
                    ]
                  },
                  "virtualServiceName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ServiceName"
                      },
                      {
                        "description": "The name to use for the virtual service."
                      }
                    ]
                  }
                },
                "description": "<zonbook></zonbook><xhtml></xhtml>"
              },
              "VirtualServiceData": {
                "type": "object",
                "required": [
                  "meshName",
                  "metadata",
                  "spec",
                  "status",
                  "virtualServiceName"
                ],
                "properties": {
                  "meshName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ResourceName"
                      },
                      {
                        "description": "The name of the service mesh that the virtual service resides in."
                      }
                    ]
                  },
                  "metadata": {
                    "$ref": "#/components/schemas/ResourceMetadata"
                  },
                  "spec": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/VirtualServiceSpec"
                      },
                      {
                        "description": "The specifications of the virtual service."
                      }
                    ]
                  },
                  "status": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/VirtualServiceStatus"
                      },
                      {
                        "description": "The current status of the virtual service."
                      }
                    ]
                  },
                  "virtualServiceName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ServiceName"
                      },
                      {
                        "description": "The name of the virtual service."
                      }
                    ]
                  }
                },
                "description": "An object that represents a virtual service returned by a describe operation."
              },
              "DefaultGatewayRouteRewrite": {
                "type": "string",
                "enum": [
                  "ENABLED",
                  "DISABLED"
                ]
              },
              "DeleteGatewayRouteInput": {
                "type": "object",
                "title": "DeleteGatewayRouteInput",
                "properties": {}
              },
              "DeleteMeshInput": {
                "type": "object",
                "title": "DeleteMeshInput",
                "properties": {},
                "description": "<zonbook></zonbook><xhtml></xhtml>"
              },
              "DeleteRouteInput": {
                "type": "object",
                "title": "DeleteRouteInput",
                "properties": {},
                "description": "<zonbook></zonbook><xhtml></xhtml>"
              },
              "DeleteVirtualGatewayInput": {
                "type": "object",
                "title": "DeleteVirtualGatewayInput",
                "properties": {}
              },
              "DeleteVirtualNodeInput": {
                "type": "object",
                "title": "DeleteVirtualNodeInput",
                "properties": {},
                "description": "Deletes a virtual node input."
              },
              "DeleteVirtualRouterInput": {
                "type": "object",
                "title": "DeleteVirtualRouterInput",
                "properties": {},
                "description": "<zonbook></zonbook><xhtml></xhtml>"
              },
              "DeleteVirtualServiceInput": {
                "type": "object",
                "title": "DeleteVirtualServiceInput",
                "properties": {},
                "description": "<zonbook></zonbook><xhtml></xhtml>"
              },
              "DescribeGatewayRouteInput": {
                "type": "object",
                "title": "DescribeGatewayRouteInput",
                "properties": {}
              },
              "DescribeMeshInput": {
                "type": "object",
                "title": "DescribeMeshInput",
                "properties": {},
                "description": "<zonbook></zonbook><xhtml></xhtml>"
              },
              "DescribeRouteInput": {
                "type": "object",
                "title": "DescribeRouteInput",
                "properties": {},
                "description": "<zonbook></zonbook><xhtml></xhtml>"
              },
              "DescribeVirtualGatewayInput": {
                "type": "object",
                "title": "DescribeVirtualGatewayInput",
                "properties": {}
              },
              "DescribeVirtualNodeInput": {
                "type": "object",
                "title": "DescribeVirtualNodeInput",
                "properties": {},
                "description": "<zonbook></zonbook><xhtml></xhtml>"
              },
              "DescribeVirtualRouterInput": {
                "type": "object",
                "title": "DescribeVirtualRouterInput",
                "properties": {},
                "description": "<zonbook></zonbook><xhtml></xhtml>"
              },
              "DescribeVirtualServiceInput": {
                "type": "object",
                "title": "DescribeVirtualServiceInput",
                "properties": {},
                "description": "<zonbook></zonbook><xhtml></xhtml>"
              },
              "DnsResponseType": {
                "type": "string",
                "enum": [
                  "LOADBALANCER",
                  "ENDPOINTS"
                ]
              },
              "Hostname": {
                "type": "string"
              },
              "DnsServiceDiscovery": {
                "type": "object",
                "required": [
                  "hostname"
                ],
                "properties": {
                  "hostname": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Hostname"
                      },
                      {
                        "description": "Specifies the DNS service discovery hostname for the virtual node. "
                      }
                    ]
                  },
                  "ipPreference": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/IpPreference"
                      },
                      {
                        "description": "The preferred IP version that this virtual node uses. Setting the IP preference on the virtual node only overrides the IP preference set for the mesh on this specific node."
                      }
                    ]
                  },
                  "responseType": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/DnsResponseType"
                      },
                      {
                        "description": "Specifies the DNS response type for the virtual node."
                      }
                    ]
                  }
                },
                "description": "An object that represents the DNS service discovery information for your virtual node."
              },
              "DurationUnit": {
                "type": "string",
                "enum": [
                  "s",
                  "ms"
                ]
              },
              "DurationValue": {
                "type": "integer",
                "minimum": 0
              },
              "Duration": {
                "type": "object",
                "properties": {
                  "unit": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/DurationUnit"
                      },
                      {
                        "description": "A unit of time."
                      }
                    ]
                  },
                  "value": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/DurationValue"
                      },
                      {
                        "description": "A number of time units."
                      }
                    ]
                  }
                },
                "description": "An object that represents a duration of time."
              },
              "EgressFilterType": {
                "type": "string",
                "enum": [
                  "ALLOW_ALL",
                  "DROP_ALL"
                ]
              },
              "ExactHostName": {
                "type": "string",
                "minLength": 1,
                "maxLength": 253
              },
              "LoggingFormat": {
                "type": "object",
                "properties": {
                  "json": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/JsonFormat"
                      },
                      {
                        "description": "<p/>"
                      }
                    ]
                  },
                  "text": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/TextFormat"
                      },
                      {
                        "description": "<p/>"
                      }
                    ]
                  }
                },
                "description": "An object that represents the format for the logs."
              },
              "FilePath": {
                "type": "string",
                "minLength": 1,
                "maxLength": 255
              },
              "ResourceMetadata": {
                "type": "object",
                "required": [
                  "arn",
                  "createdAt",
                  "lastUpdatedAt",
                  "meshOwner",
                  "resourceOwner",
                  "uid",
                  "version"
                ],
                "properties": {
                  "arn": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Arn"
                      },
                      {
                        "description": "The full Amazon Resource Name (ARN) for the resource."
                      }
                    ]
                  },
                  "createdAt": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Timestamp"
                      },
                      {
                        "description": "The Unix epoch timestamp in seconds for when the resource was created."
                      }
                    ]
                  },
                  "lastUpdatedAt": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Timestamp"
                      },
                      {
                        "description": "The Unix epoch timestamp in seconds for when the resource was last updated."
                      }
                    ]
                  },
                  "meshOwner": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/AccountId"
                      },
                      {
                        "description": "The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\">Working with shared meshes</a>."
                      }
                    ]
                  },
                  "resourceOwner": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/AccountId"
                      },
                      {
                        "description": "The Amazon Web Services IAM account ID of the resource owner. If the account ID is not your own, then it's the ID of the mesh owner or of another account that the mesh is shared with. For more information about mesh sharing, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\">Working with shared meshes</a>."
                      }
                    ]
                  },
                  "uid": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/String"
                      },
                      {
                        "description": "The unique identifier for the resource."
                      }
                    ]
                  },
                  "version": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Long"
                      },
                      {
                        "description": "The version of the resource. Resources are created at version 1, and this version is incremented each time that they're updated."
                      }
                    ]
                  }
                },
                "description": "An object that represents metadata for a resource."
              },
              "GatewayRouteStatus": {
                "type": "object",
                "required": [
                  "status"
                ],
                "properties": {
                  "status": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/GatewayRouteStatusCode"
                      },
                      {
                        "description": "The current status for the gateway route."
                      }
                    ]
                  }
                },
                "description": "An object that represents the current status of a gateway route."
              },
              "SuffixHostname": {
                "type": "string",
                "minLength": 1,
                "maxLength": 253
              },
              "GatewayRouteHostnameMatch": {
                "type": "object",
                "properties": {
                  "exact": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ExactHostName"
                      },
                      {
                        "description": "The exact host name to match on."
                      }
                    ]
                  },
                  "suffix": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/SuffixHostname"
                      },
                      {
                        "description": "The specified ending characters of the host name to match on."
                      }
                    ]
                  }
                },
                "description": "An object representing the gateway route host name to match."
              },
              "GatewayRouteHostnameRewrite": {
                "type": "object",
                "properties": {
                  "defaultTargetHostname": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/DefaultGatewayRouteRewrite"
                      },
                      {
                        "description": "The default target host name to write to."
                      }
                    ]
                  }
                },
                "description": "An object representing the gateway route host name to rewrite."
              },
              "GatewayRouteRef": {
                "type": "object",
                "required": [
                  "arn",
                  "createdAt",
                  "gatewayRouteName",
                  "lastUpdatedAt",
                  "meshName",
                  "meshOwner",
                  "resourceOwner",
                  "version",
                  "virtualGatewayName"
                ],
                "properties": {
                  "arn": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Arn"
                      },
                      {
                        "description": "The full Amazon Resource Name (ARN) for the gateway route."
                      }
                    ]
                  },
                  "createdAt": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Timestamp"
                      },
                      {
                        "description": "The Unix epoch timestamp in seconds for when the resource was created."
                      }
                    ]
                  },
                  "gatewayRouteName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ResourceName"
                      },
                      {
                        "description": "The name of the gateway route."
                      }
                    ]
                  },
                  "lastUpdatedAt": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Timestamp"
                      },
                      {
                        "description": "The Unix epoch timestamp in seconds for when the resource was last updated."
                      }
                    ]
                  },
                  "meshName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ResourceName"
                      },
                      {
                        "description": "The name of the service mesh that the resource resides in. "
                      }
                    ]
                  },
                  "meshOwner": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/AccountId"
                      },
                      {
                        "description": "The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\">Working with shared meshes</a>."
                      }
                    ]
                  },
                  "resourceOwner": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/AccountId"
                      },
                      {
                        "description": "The Amazon Web Services IAM account ID of the resource owner. If the account ID is not your own, then it's the ID of the mesh owner or of another account that the mesh is shared with. For more information about mesh sharing, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\">Working with shared meshes</a>."
                      }
                    ]
                  },
                  "version": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Long"
                      },
                      {
                        "description": "The version of the resource. Resources are created at version 1, and this version is incremented each time that they're updated."
                      }
                    ]
                  },
                  "virtualGatewayName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ResourceName"
                      },
                      {
                        "description": "The virtual gateway that the gateway route is associated with."
                      }
                    ]
                  }
                },
                "description": "An object that represents a gateway route returned by a list operation."
              },
              "GatewayRouteList": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GatewayRouteRef"
                }
              },
              "Timestamp": {
                "type": "string",
                "format": "date-time"
              },
              "Long": {
                "type": "integer"
              },
              "GatewayRouteStatusCode": {
                "type": "string",
                "enum": [
                  "ACTIVE",
                  "INACTIVE",
                  "DELETED"
                ]
              },
              "ListenerPort": {
                "type": "integer",
                "minimum": 1,
                "maximum": 65535
              },
              "GatewayRouteVirtualService": {
                "type": "object",
                "required": [
                  "virtualServiceName"
                ],
                "properties": {
                  "virtualServiceName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ResourceName"
                      },
                      {
                        "description": "The name of the virtual service that traffic is routed to."
                      }
                    ]
                  }
                },
                "description": "An object that represents the virtual service that traffic is routed to."
              },
              "GatewayRouteTarget": {
                "type": "object",
                "required": [
                  "virtualService"
                ],
                "properties": {
                  "port": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ListenerPort"
                      },
                      {
                        "description": "The port number of the gateway route target."
                      }
                    ]
                  },
                  "virtualService": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/GatewayRouteVirtualService"
                      },
                      {
                        "description": "An object that represents a virtual service gateway route target."
                      }
                    ]
                  }
                },
                "description": "An object that represents a gateway route target."
              },
              "GrpcGatewayRouteAction": {
                "type": "object",
                "required": [
                  "target"
                ],
                "properties": {
                  "rewrite": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/GrpcGatewayRouteRewrite"
                      },
                      {
                        "description": "The gateway route action to rewrite."
                      }
                    ]
                  },
                  "target": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/GatewayRouteTarget"
                      },
                      {
                        "description": "An object that represents the target that traffic is routed to when a request matches the gateway route."
                      }
                    ]
                  }
                },
                "description": "An object that represents the action to take if a match is determined."
              },
              "GrpcGatewayRouteMatch": {
                "type": "object",
                "properties": {
                  "hostname": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/GatewayRouteHostnameMatch"
                      },
                      {
                        "description": "The gateway route host name to be matched on."
                      }
                    ]
                  },
                  "metadata": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/GrpcGatewayRouteMetadataList"
                      },
                      {
                        "description": "The gateway route metadata to be matched on."
                      }
                    ]
                  },
                  "port": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ListenerPort"
                      },
                      {
                        "description": "The port number to match from the request."
                      }
                    ]
                  },
                  "serviceName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ServiceName"
                      },
                      {
                        "description": "The fully qualified domain name for the service to match from the request."
                      }
                    ]
                  }
                },
                "description": "An object that represents the criteria for determining a request match."
              },
              "GrpcGatewayRouteRewrite": {
                "type": "object",
                "properties": {
                  "hostname": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/GatewayRouteHostnameRewrite"
                      },
                      {
                        "description": "The host name of the gateway route to rewrite."
                      }
                    ]
                  }
                },
                "description": "An object that represents the gateway route to rewrite."
              },
              "GrpcGatewayRouteMetadataList": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GrpcGatewayRouteMetadata"
                },
                "minItems": 1,
                "maxItems": 10
              },
              "GrpcMetadataMatchMethod": {
                "type": "object",
                "properties": {
                  "exact": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/HeaderMatch"
                      },
                      {
                        "description": "The exact method header to be matched on."
                      }
                    ]
                  },
                  "prefix": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/HeaderMatch"
                      },
                      {
                        "description": "The specified beginning characters of the method header to be matched on."
                      }
                    ]
                  },
                  "range": {
                    "$ref": "#/components/schemas/MatchRange"
                  },
                  "regex": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/HeaderMatch"
                      },
                      {
                        "description": "The regex used to match the method header."
                      }
                    ]
                  },
                  "suffix": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/HeaderMatch"
                      },
                      {
                        "description": "The specified ending characters of the method header to match on."
                      }
                    ]
                  }
                },
                "description": "An object representing the method header to be matched."
              },
              "HeaderName": {
                "type": "string",
                "minLength": 1,
                "maxLength": 50
              },
              "GrpcGatewayRouteMetadata": {
                "type": "object",
                "required": [
                  "name"
                ],
                "properties": {
                  "invert": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Boolean"
                      },
                      {
                        "description": "Specify <code>True</code> to match anything except the match criteria. The default value is <code>False</code>."
                      }
                    ]
                  },
                  "match": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/GrpcMetadataMatchMethod"
                      },
                      {
                        "description": "The criteria for determining a metadata match."
                      }
                    ]
                  },
                  "name": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/HeaderName"
                      },
                      {
                        "description": "A name for the gateway route metadata."
                      }
                    ]
                  }
                },
                "description": "An object representing the metadata of the gateway route."
              },
              "HeaderMatch": {
                "type": "string",
                "minLength": 1,
                "maxLength": 255
              },
              "MatchRange": {
                "type": "object",
                "required": [
                  "end",
                  "start"
                ],
                "properties": {
                  "end": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Long"
                      },
                      {
                        "description": "The end of the range."
                      }
                    ]
                  },
                  "start": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Long"
                      },
                      {
                        "description": "The start of the range."
                      }
                    ]
                  }
                },
                "description": "An object that represents the range of values to match on. The first character of the range is included in the range, though the last character is not. For example, if the range specified were 1-100, only values 1-99 would be matched."
              },
              "GrpcRetryPolicyEvents": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GrpcRetryPolicyEvent"
                },
                "minItems": 1,
                "maxItems": 5
              },
              "HttpRetryPolicyEvents": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/HttpRetryPolicyEvent"
                },
                "minItems": 1,
                "maxItems": 25
              },
              "MaxRetries": {
                "type": "integer",
                "minimum": 0
              },
              "TcpRetryPolicyEvents": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/TcpRetryPolicyEvent"
                },
                "minItems": 1,
                "maxItems": 1
              },
              "GrpcRetryPolicy": {
                "type": "object",
                "required": [
                  "maxRetries",
                  "perRetryTimeout"
                ],
                "properties": {
                  "grpcRetryEvents": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/GrpcRetryPolicyEvents"
                      },
                      {
                        "description": "Specify at least one of the valid values."
                      }
                    ]
                  },
                  "httpRetryEvents": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/HttpRetryPolicyEvents"
                      },
                      {
                        "description": "<p>Specify at least one of the following values.</p> <ul> <li> <p> <b>server-error</b> – HTTP status codes 500, 501, 502, 503, 504, 505, 506, 507, 508, 510, and 511</p> </li> <li> <p> <b>gateway-error</b> – HTTP status codes 502, 503, and 504</p> </li> <li> <p> <b>client-error</b> – HTTP status code 409</p> </li> <li> <p> <b>stream-error</b> – Retry on refused stream</p> </li> </ul>"
                      }
                    ]
                  },
                  "maxRetries": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/MaxRetries"
                      },
                      {
                        "description": "The maximum number of retry attempts."
                      }
                    ]
                  },
                  "perRetryTimeout": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Duration"
                      },
                      {
                        "description": "The timeout for each retry attempt."
                      }
                    ]
                  },
                  "tcpRetryEvents": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/TcpRetryPolicyEvents"
                      },
                      {
                        "description": "Specify a valid value. The event occurs before any processing of a request has started and is encountered when the upstream is temporarily or permanently unavailable."
                      }
                    ]
                  }
                },
                "description": "An object that represents a retry policy. Specify at least one value for at least one of the types of <code>RetryEvents</code>, a value for <code>maxRetries</code>, and a value for <code>perRetryTimeout</code>. Both <code>server-error</code> and <code>gateway-error</code> under <code>httpRetryEvents</code> include the Envoy <code>reset</code> policy. For more information on the <code>reset</code> policy, see the <a href=\"https://www.envoyproxy.io/docs/envoy/latest/configuration/http/http_filters/router_filter#x-envoy-retry-on\">Envoy documentation</a>."
              },
              "GrpcRetryPolicyEvent": {
                "type": "string",
                "enum": [
                  "cancelled",
                  "deadline-exceeded",
                  "internal",
                  "resource-exhausted",
                  "unavailable"
                ]
              },
              "GrpcRouteAction": {
                "type": "object",
                "required": [
                  "weightedTargets"
                ],
                "properties": {
                  "weightedTargets": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/WeightedTargets"
                      },
                      {
                        "description": "An object that represents the targets that traffic is routed to when a request matches the route."
                      }
                    ]
                  }
                },
                "description": "An object that represents the action to take if a match is determined."
              },
              "GrpcRouteMatch": {
                "type": "object",
                "properties": {
                  "metadata": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/GrpcRouteMetadataList"
                      },
                      {
                        "description": "An object that represents the data to match from the request."
                      }
                    ]
                  },
                  "methodName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/MethodName"
                      },
                      {
                        "description": "The method name to match from the request. If you specify a name, you must also specify a <code>serviceName</code>."
                      }
                    ]
                  },
                  "port": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ListenerPort"
                      },
                      {
                        "description": "The port number to match on."
                      }
                    ]
                  },
                  "serviceName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ServiceName"
                      },
                      {
                        "description": "The fully qualified domain name for the service to match from the request."
                      }
                    ]
                  }
                },
                "description": "An object that represents the criteria for determining a request match."
              },
              "GrpcTimeout": {
                "type": "object",
                "properties": {
                  "idle": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Duration"
                      },
                      {
                        "description": "An object that represents an idle timeout. An idle timeout bounds the amount of time that a connection may be idle. The default value is none."
                      }
                    ]
                  },
                  "perRequest": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Duration"
                      },
                      {
                        "description": "An object that represents a per request timeout. The default value is 15 seconds. If you set a higher timeout, then make sure that the higher value is set for each App Mesh resource in a conversation. For example, if a virtual node backend uses a virtual router provider to route to another virtual node, then the timeout should be greater than 15 seconds for the source and destination virtual node and the route."
                      }
                    ]
                  }
                },
                "description": "An object that represents types of timeouts. "
              },
              "WeightedTargets": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/WeightedTarget"
                },
                "minItems": 1,
                "maxItems": 10
              },
              "GrpcRouteMetadataList": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GrpcRouteMetadata"
                },
                "minItems": 1,
                "maxItems": 10
              },
              "MethodName": {
                "type": "string",
                "minLength": 1,
                "maxLength": 50
              },
              "GrpcRouteMetadataMatchMethod": {
                "type": "object",
                "properties": {
                  "exact": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/HeaderMatch"
                      },
                      {
                        "description": "The value sent by the client must match the specified value exactly."
                      }
                    ]
                  },
                  "prefix": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/HeaderMatch"
                      },
                      {
                        "description": "The value sent by the client must begin with the specified characters."
                      }
                    ]
                  },
                  "range": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/MatchRange"
                      },
                      {
                        "description": "An object that represents the range of values to match on."
                      }
                    ]
                  },
                  "regex": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/HeaderMatch"
                      },
                      {
                        "description": "The value sent by the client must include the specified characters."
                      }
                    ]
                  },
                  "suffix": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/HeaderMatch"
                      },
                      {
                        "description": "The value sent by the client must end with the specified characters."
                      }
                    ]
                  }
                },
                "description": "An object that represents the match method. Specify one of the match values."
              },
              "GrpcRouteMetadata": {
                "type": "object",
                "required": [
                  "name"
                ],
                "properties": {
                  "invert": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Boolean"
                      },
                      {
                        "description": "Specify <code>True</code> to match anything except the match criteria. The default value is <code>False</code>."
                      }
                    ]
                  },
                  "match": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/GrpcRouteMetadataMatchMethod"
                      },
                      {
                        "description": "An object that represents the data to match from the request."
                      }
                    ]
                  },
                  "name": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/HeaderName"
                      },
                      {
                        "description": "The name of the route."
                      }
                    ]
                  }
                },
                "description": "An object that represents the match metadata for the route."
              },
              "HeaderMatchMethod": {
                "type": "object",
                "properties": {
                  "exact": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/HeaderMatch"
                      },
                      {
                        "description": "The value sent by the client must match the specified value exactly."
                      }
                    ]
                  },
                  "prefix": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/HeaderMatch"
                      },
                      {
                        "description": "The value sent by the client must begin with the specified characters."
                      }
                    ]
                  },
                  "range": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/MatchRange"
                      },
                      {
                        "description": "An object that represents the range of values to match on."
                      }
                    ]
                  },
                  "regex": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/HeaderMatch"
                      },
                      {
                        "description": "The value sent by the client must include the specified characters."
                      }
                    ]
                  },
                  "suffix": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/HeaderMatch"
                      },
                      {
                        "description": "The value sent by the client must end with the specified characters."
                      }
                    ]
                  }
                },
                "description": "An object that represents the method and value to match with the header value sent in a request. Specify one match method."
              },
              "HealthCheckIntervalMillis": {
                "type": "integer",
                "minimum": 5000,
                "maximum": 300000
              },
              "HealthCheckThreshold": {
                "type": "integer",
                "minimum": 2,
                "maximum": 10
              },
              "PortNumber": {
                "type": "integer",
                "minimum": 1,
                "maximum": 65535
              },
              "PortProtocol": {
                "type": "string",
                "enum": [
                  "http",
                  "tcp",
                  "http2",
                  "grpc"
                ]
              },
              "HealthCheckTimeoutMillis": {
                "type": "integer",
                "minimum": 2000,
                "maximum": 60000
              },
              "HealthCheckPolicy": {
                "type": "object",
                "required": [
                  "healthyThreshold",
                  "intervalMillis",
                  "protocol",
                  "timeoutMillis",
                  "unhealthyThreshold"
                ],
                "properties": {
                  "healthyThreshold": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/HealthCheckThreshold"
                      },
                      {
                        "description": "The number of consecutive successful health checks that must occur before declaring listener healthy."
                      }
                    ]
                  },
                  "intervalMillis": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/HealthCheckIntervalMillis"
                      },
                      {
                        "description": "The time period in milliseconds between each health check execution."
                      }
                    ]
                  },
                  "path": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/String"
                      },
                      {
                        "description": "The destination path for the health check request. This value is only used if the specified protocol is HTTP or HTTP/2. For any other protocol, this value is ignored."
                      }
                    ]
                  },
                  "port": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/PortNumber"
                      },
                      {
                        "description": "The destination port for the health check request. This port must match the port defined in the <a>PortMapping</a> for the listener."
                      }
                    ]
                  },
                  "protocol": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/PortProtocol"
                      },
                      {
                        "description": "The protocol for the health check request. If you specify <code>grpc</code>, then your service must conform to the <a href=\"https://github.com/grpc/grpc/blob/master/doc/health-checking.md\">GRPC Health Checking Protocol</a>."
                      }
                    ]
                  },
                  "timeoutMillis": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/HealthCheckTimeoutMillis"
                      },
                      {
                        "description": "The amount of time to wait when receiving a response from the health check, in milliseconds."
                      }
                    ]
                  },
                  "unhealthyThreshold": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/HealthCheckThreshold"
                      },
                      {
                        "description": "The number of consecutive failed health checks that must occur before declaring a virtual node unhealthy. "
                      }
                    ]
                  }
                },
                "description": "An object that represents the health check policy for a virtual node's listener."
              },
              "HttpGatewayRouteAction": {
                "type": "object",
                "required": [
                  "target"
                ],
                "properties": {
                  "rewrite": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/HttpGatewayRouteRewrite"
                      },
                      {
                        "description": "The gateway route action to rewrite."
                      }
                    ]
                  },
                  "target": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/GatewayRouteTarget"
                      },
                      {
                        "description": "An object that represents the target that traffic is routed to when a request matches the gateway route."
                      }
                    ]
                  }
                },
                "description": "An object that represents the action to take if a match is determined."
              },
              "HttpGatewayRouteMatch": {
                "type": "object",
                "properties": {
                  "headers": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/HttpGatewayRouteHeaders"
                      },
                      {
                        "description": "The client request headers to match on."
                      }
                    ]
                  },
                  "hostname": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/GatewayRouteHostnameMatch"
                      },
                      {
                        "description": "The host name to match on."
                      }
                    ]
                  },
                  "method": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/HttpMethod"
                      },
                      {
                        "description": "The method to match on."
                      }
                    ]
                  },
                  "path": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/HttpPathMatch"
                      },
                      {
                        "description": "The path to match on."
                      }
                    ]
                  },
                  "port": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ListenerPort"
                      },
                      {
                        "description": "The port number to match on."
                      }
                    ]
                  },
                  "prefix": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/String"
                      },
                      {
                        "description": "Specifies the path to match requests with. This parameter must always start with <code>/</code>, which by itself matches all requests to the virtual service name. You can also match for path-based routing of requests. For example, if your virtual service name is <code>my-service.local</code> and you want the route to match requests to <code>my-service.local/metrics</code>, your prefix should be <code>/metrics</code>."
                      }
                    ]
                  },
                  "queryParameters": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/HttpQueryParameters"
                      },
                      {
                        "description": "The query parameter to match on."
                      }
                    ]
                  }
                },
                "description": "An object that represents the criteria for determining a request match."
              },
              "HttpGatewayRouteRewrite": {
                "type": "object",
                "properties": {
                  "hostname": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/GatewayRouteHostnameRewrite"
                      },
                      {
                        "description": "The host name to rewrite."
                      }
                    ]
                  },
                  "path": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/HttpGatewayRoutePathRewrite"
                      },
                      {
                        "description": "The path to rewrite."
                      }
                    ]
                  },
                  "prefix": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/HttpGatewayRoutePrefixRewrite"
                      },
                      {
                        "description": "The specified beginning characters to rewrite."
                      }
                    ]
                  }
                },
                "description": "An object representing the gateway route to rewrite."
              },
              "HttpGatewayRouteHeader": {
                "type": "object",
                "required": [
                  "name"
                ],
                "properties": {
                  "invert": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Boolean"
                      },
                      {
                        "description": "Specify <code>True</code> to match anything except the match criteria. The default value is <code>False</code>."
                      }
                    ]
                  },
                  "match": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/HeaderMatchMethod"
                      },
                      {
                        "description": "An object that represents the method and value to match with the header value sent in a request. Specify one match method."
                      }
                    ]
                  },
                  "name": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/HeaderName"
                      },
                      {
                        "description": "A name for the HTTP header in the gateway route that will be matched on."
                      }
                    ]
                  }
                },
                "description": "An object that represents the HTTP header in the gateway route."
              },
              "HttpGatewayRouteHeaders": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/HttpGatewayRouteHeader"
                },
                "minItems": 1,
                "maxItems": 10
              },
              "HttpMethod": {
                "type": "string",
                "enum": [
                  "GET",
                  "HEAD",
                  "POST",
                  "PUT",
                  "DELETE",
                  "CONNECT",
                  "OPTIONS",
                  "TRACE",
                  "PATCH"
                ]
              },
              "HttpPathMatch": {
                "type": "object",
                "properties": {
                  "exact": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/HttpPathExact"
                      },
                      {
                        "description": "The exact path to match on."
                      }
                    ]
                  },
                  "regex": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/HttpPathRegex"
                      },
                      {
                        "description": "The regex used to match the path."
                      }
                    ]
                  }
                },
                "description": "An object representing the path to match in the request."
              },
              "HttpQueryParameters": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/HttpQueryParameter"
                },
                "minItems": 1,
                "maxItems": 10
              },
              "HttpPathExact": {
                "type": "string",
                "minLength": 1,
                "maxLength": 255
              },
              "HttpGatewayRoutePathRewrite": {
                "type": "object",
                "properties": {
                  "exact": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/HttpPathExact"
                      },
                      {
                        "description": "The exact path to rewrite."
                      }
                    ]
                  }
                },
                "description": "An object that represents the path to rewrite."
              },
              "HttpGatewayRoutePrefix": {
                "type": "string",
                "minLength": 1,
                "maxLength": 255
              },
              "HttpGatewayRoutePrefixRewrite": {
                "type": "object",
                "properties": {
                  "defaultPrefix": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/DefaultGatewayRouteRewrite"
                      },
                      {
                        "description": "The default prefix used to replace the incoming route prefix when rewritten."
                      }
                    ]
                  },
                  "value": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/HttpGatewayRoutePrefix"
                      },
                      {
                        "description": "The value used to replace the incoming route prefix when rewritten."
                      }
                    ]
                  }
                },
                "description": "An object representing the beginning characters of the route to rewrite."
              },
              "HttpPathRegex": {
                "type": "string",
                "minLength": 1,
                "maxLength": 255
              },
              "QueryParameterMatch": {
                "type": "object",
                "properties": {
                  "exact": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/String"
                      },
                      {
                        "description": "The exact query parameter to match on."
                      }
                    ]
                  }
                },
                "description": "An object representing the query parameter to match."
              },
              "QueryParameterName": {
                "type": "string"
              },
              "HttpQueryParameter": {
                "type": "object",
                "required": [
                  "name"
                ],
                "properties": {
                  "match": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/QueryParameterMatch"
                      },
                      {
                        "description": "The query parameter to match on."
                      }
                    ]
                  },
                  "name": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/QueryParameterName"
                      },
                      {
                        "description": "A name for the query parameter that will be matched on."
                      }
                    ]
                  }
                },
                "description": "An object that represents the query parameter in the request."
              },
              "HttpRetryPolicy": {
                "type": "object",
                "required": [
                  "maxRetries",
                  "perRetryTimeout"
                ],
                "properties": {
                  "httpRetryEvents": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/HttpRetryPolicyEvents"
                      },
                      {
                        "description": "<p>Specify at least one of the following values.</p> <ul> <li> <p> <b>server-error</b> – HTTP status codes 500, 501, 502, 503, 504, 505, 506, 507, 508, 510, and 511</p> </li> <li> <p> <b>gateway-error</b> – HTTP status codes 502, 503, and 504</p> </li> <li> <p> <b>client-error</b> – HTTP status code 409</p> </li> <li> <p> <b>stream-error</b> – Retry on refused stream</p> </li> </ul>"
                      }
                    ]
                  },
                  "maxRetries": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/MaxRetries"
                      },
                      {
                        "description": "The maximum number of retry attempts."
                      }
                    ]
                  },
                  "perRetryTimeout": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Duration"
                      },
                      {
                        "description": "The timeout for each retry attempt."
                      }
                    ]
                  },
                  "tcpRetryEvents": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/TcpRetryPolicyEvents"
                      },
                      {
                        "description": "Specify a valid value. The event occurs before any processing of a request has started and is encountered when the upstream is temporarily or permanently unavailable."
                      }
                    ]
                  }
                },
                "description": "An object that represents a retry policy. Specify at least one value for at least one of the types of <code>RetryEvents</code>, a value for <code>maxRetries</code>, and a value for <code>perRetryTimeout</code>. Both <code>server-error</code> and <code>gateway-error</code> under <code>httpRetryEvents</code> include the Envoy <code>reset</code> policy. For more information on the <code>reset</code> policy, see the <a href=\"https://www.envoyproxy.io/docs/envoy/latest/configuration/http/http_filters/router_filter#x-envoy-retry-on\">Envoy documentation</a>."
              },
              "HttpRetryPolicyEvent": {
                "type": "string",
                "minLength": 1,
                "maxLength": 25
              },
              "HttpRouteAction": {
                "type": "object",
                "required": [
                  "weightedTargets"
                ],
                "properties": {
                  "weightedTargets": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/WeightedTargets"
                      },
                      {
                        "description": "An object that represents the targets that traffic is routed to when a request matches the route."
                      }
                    ]
                  }
                },
                "description": "An object that represents the action to take if a match is determined."
              },
              "HttpRouteMatch": {
                "type": "object",
                "properties": {
                  "headers": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/HttpRouteHeaders"
                      },
                      {
                        "description": "The client request headers to match on."
                      }
                    ]
                  },
                  "method": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/HttpMethod"
                      },
                      {
                        "description": "The client request method to match on. Specify only one."
                      }
                    ]
                  },
                  "path": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/HttpPathMatch"
                      },
                      {
                        "description": "The client request path to match on."
                      }
                    ]
                  },
                  "port": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ListenerPort"
                      },
                      {
                        "description": "The port number to match on."
                      }
                    ]
                  },
                  "prefix": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/String"
                      },
                      {
                        "description": "Specifies the path to match requests with. This parameter must always start with <code>/</code>, which by itself matches all requests to the virtual service name. You can also match for path-based routing of requests. For example, if your virtual service name is <code>my-service.local</code> and you want the route to match requests to <code>my-service.local/metrics</code>, your prefix should be <code>/metrics</code>."
                      }
                    ]
                  },
                  "queryParameters": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/HttpQueryParameters"
                      },
                      {
                        "description": "The client request query parameters to match on."
                      }
                    ]
                  },
                  "scheme": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/HttpScheme"
                      },
                      {
                        "description": "The client request scheme to match on. Specify only one. Applicable only for HTTP2 routes."
                      }
                    ]
                  }
                },
                "description": "An object that represents the requirements for a route to match HTTP requests for a virtual router."
              },
              "HttpTimeout": {
                "type": "object",
                "properties": {
                  "idle": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Duration"
                      },
                      {
                        "description": "An object that represents an idle timeout. An idle timeout bounds the amount of time that a connection may be idle. The default value is none."
                      }
                    ]
                  },
                  "perRequest": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Duration"
                      },
                      {
                        "description": "An object that represents a per request timeout. The default value is 15 seconds. If you set a higher timeout, then make sure that the higher value is set for each App Mesh resource in a conversation. For example, if a virtual node backend uses a virtual router provider to route to another virtual node, then the timeout should be greater than 15 seconds for the source and destination virtual node and the route."
                      }
                    ]
                  }
                },
                "description": "An object that represents types of timeouts. "
              },
              "HttpRouteHeader": {
                "type": "object",
                "required": [
                  "name"
                ],
                "properties": {
                  "invert": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Boolean"
                      },
                      {
                        "description": "Specify <code>True</code> to match anything except the match criteria. The default value is <code>False</code>."
                      }
                    ]
                  },
                  "match": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/HeaderMatchMethod"
                      },
                      {
                        "description": "The <code>HeaderMatchMethod</code> object."
                      }
                    ]
                  },
                  "name": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/HeaderName"
                      },
                      {
                        "description": "A name for the HTTP header in the client request that will be matched on."
                      }
                    ]
                  }
                },
                "description": "An object that represents the HTTP header in the request."
              },
              "HttpRouteHeaders": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/HttpRouteHeader"
                },
                "minItems": 1,
                "maxItems": 10
              },
              "HttpScheme": {
                "type": "string",
                "enum": [
                  "http",
                  "https"
                ]
              },
              "JsonFormatRef": {
                "type": "object",
                "required": [
                  "key",
                  "value"
                ],
                "properties": {
                  "key": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/JsonKey"
                      },
                      {
                        "description": "The specified key for the JSON."
                      }
                    ]
                  },
                  "value": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/JsonValue"
                      },
                      {
                        "description": "The specified value for the JSON."
                      }
                    ]
                  }
                },
                "description": "An object that represents the key value pairs for the JSON."
              },
              "JsonFormat": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/JsonFormatRef"
                }
              },
              "JsonKey": {
                "type": "string",
                "minLength": 1,
                "maxLength": 100
              },
              "JsonValue": {
                "type": "string",
                "minLength": 1,
                "maxLength": 100
              },
              "ListGatewayRoutesLimit": {
                "type": "integer",
                "minimum": 1,
                "maximum": 100
              },
              "ListGatewayRoutesInput": {
                "type": "object",
                "title": "ListGatewayRoutesInput",
                "properties": {}
              },
              "ListMeshesLimit": {
                "type": "integer",
                "minimum": 1,
                "maximum": 100
              },
              "ListMeshesInput": {
                "type": "object",
                "title": "ListMeshesInput",
                "properties": {},
                "description": "<zonbook></zonbook><xhtml></xhtml>"
              },
              "MeshList": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/MeshRef"
                }
              },
              "ListRoutesLimit": {
                "type": "integer",
                "minimum": 1,
                "maximum": 100
              },
              "ListRoutesInput": {
                "type": "object",
                "title": "ListRoutesInput",
                "properties": {},
                "description": "<zonbook></zonbook><xhtml></xhtml>"
              },
              "RouteList": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RouteRef"
                }
              },
              "TagsLimit": {
                "type": "integer",
                "minimum": 1,
                "maximum": 50
              },
              "ListTagsForResourceInput": {
                "type": "object",
                "title": "ListTagsForResourceInput",
                "properties": {},
                "description": "<zonbook></zonbook><xhtml></xhtml>"
              },
              "ListVirtualGatewaysLimit": {
                "type": "integer",
                "minimum": 1,
                "maximum": 100
              },
              "ListVirtualGatewaysInput": {
                "type": "object",
                "title": "ListVirtualGatewaysInput",
                "properties": {}
              },
              "VirtualGatewayList": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/VirtualGatewayRef"
                }
              },
              "ListVirtualNodesLimit": {
                "type": "integer",
                "minimum": 1,
                "maximum": 100
              },
              "ListVirtualNodesInput": {
                "type": "object",
                "title": "ListVirtualNodesInput",
                "properties": {},
                "description": "<zonbook></zonbook><xhtml></xhtml>"
              },
              "VirtualNodeList": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/VirtualNodeRef"
                }
              },
              "ListVirtualRoutersLimit": {
                "type": "integer",
                "minimum": 1,
                "maximum": 100
              },
              "ListVirtualRoutersInput": {
                "type": "object",
                "title": "ListVirtualRoutersInput",
                "properties": {},
                "description": "<zonbook></zonbook><xhtml></xhtml>"
              },
              "VirtualRouterList": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/VirtualRouterRef"
                }
              },
              "ListVirtualServicesLimit": {
                "type": "integer",
                "minimum": 1,
                "maximum": 100
              },
              "ListVirtualServicesInput": {
                "type": "object",
                "title": "ListVirtualServicesInput",
                "properties": {},
                "description": "<zonbook></zonbook><xhtml></xhtml>"
              },
              "VirtualServiceList": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/VirtualServiceRef"
                }
              },
              "VirtualNodeConnectionPool": {
                "type": "object",
                "properties": {
                  "grpc": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/VirtualNodeGrpcConnectionPool"
                      },
                      {
                        "description": "An object that represents a type of connection pool."
                      }
                    ]
                  },
                  "http": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/VirtualNodeHttpConnectionPool"
                      },
                      {
                        "description": "An object that represents a type of connection pool."
                      }
                    ]
                  },
                  "http2": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/VirtualNodeHttp2ConnectionPool"
                      },
                      {
                        "description": "An object that represents a type of connection pool."
                      }
                    ]
                  },
                  "tcp": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/VirtualNodeTcpConnectionPool"
                      },
                      {
                        "description": "An object that represents a type of connection pool."
                      }
                    ]
                  }
                },
                "description": "<p>An object that represents the type of virtual node connection pool.</p> <p>Only one protocol is used at a time and should be the same protocol as the one chosen under port mapping.</p> <p>If not present the default value for <code>maxPendingRequests</code> is <code>2147483647</code>.</p> <p/>"
              },
              "OutlierDetection": {
                "type": "object",
                "required": [
                  "baseEjectionDuration",
                  "interval",
                  "maxEjectionPercent",
                  "maxServerErrors"
                ],
                "properties": {
                  "baseEjectionDuration": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Duration"
                      },
                      {
                        "description": "The base amount of time for which a host is ejected."
                      }
                    ]
                  },
                  "interval": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Duration"
                      },
                      {
                        "description": "The time interval between ejection sweep analysis."
                      }
                    ]
                  },
                  "maxEjectionPercent": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/OutlierDetectionMaxEjectionPercent"
                      },
                      {
                        "description": "Maximum percentage of hosts in load balancing pool for upstream service that can be ejected. Will eject at least one host regardless of the value."
                      }
                    ]
                  },
                  "maxServerErrors": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/OutlierDetectionMaxServerErrors"
                      },
                      {
                        "description": "Number of consecutive <code>5xx</code> errors required for ejection. "
                      }
                    ]
                  }
                },
                "description": "An object that represents the outlier detection for a virtual node's listener."
              },
              "PortMapping": {
                "type": "object",
                "required": [
                  "port",
                  "protocol"
                ],
                "properties": {
                  "port": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/PortNumber"
                      },
                      {
                        "description": "The port used for the port mapping."
                      }
                    ]
                  },
                  "protocol": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/PortProtocol"
                      },
                      {
                        "description": "The protocol used for the port mapping. Specify one protocol."
                      }
                    ]
                  }
                },
                "description": "An object that represents a port mapping."
              },
              "ListenerTimeout": {
                "type": "object",
                "properties": {
                  "grpc": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/GrpcTimeout"
                      },
                      {
                        "description": "An object that represents types of timeouts. "
                      }
                    ]
                  },
                  "http": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/HttpTimeout"
                      },
                      {
                        "description": "An object that represents types of timeouts. "
                      }
                    ]
                  },
                  "http2": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/HttpTimeout"
                      },
                      {
                        "description": "An object that represents types of timeouts. "
                      }
                    ]
                  },
                  "tcp": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/TcpTimeout"
                      },
                      {
                        "description": "An object that represents types of timeouts. "
                      }
                    ]
                  }
                },
                "description": "An object that represents timeouts for different protocols."
              },
              "ListenerTls": {
                "type": "object",
                "required": [
                  "certificate",
                  "mode"
                ],
                "properties": {
                  "certificate": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ListenerTlsCertificate"
                      },
                      {
                        "description": "A reference to an object that represents a listener's Transport Layer Security (TLS) certificate."
                      }
                    ]
                  },
                  "mode": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ListenerTlsMode"
                      },
                      {
                        "description": "<p>Specify one of the following modes.</p> <ul> <li> <p> <b/>STRICT – Listener only accepts connections with TLS enabled. </p> </li> <li> <p> <b/>PERMISSIVE – Listener accepts connections with or without TLS enabled.</p> </li> <li> <p> <b/>DISABLED – Listener only accepts connections without TLS. </p> </li> </ul>"
                      }
                    ]
                  },
                  "validation": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ListenerTlsValidationContext"
                      },
                      {
                        "description": "A reference to an object that represents a listener's Transport Layer Security (TLS) validation context."
                      }
                    ]
                  }
                },
                "description": "An object that represents the Transport Layer Security (TLS) properties for a listener."
              },
              "Listener": {
                "type": "object",
                "required": [
                  "portMapping"
                ],
                "properties": {
                  "connectionPool": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/VirtualNodeConnectionPool"
                      },
                      {
                        "description": "The connection pool information for the listener."
                      }
                    ]
                  },
                  "healthCheck": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/HealthCheckPolicy"
                      },
                      {
                        "description": "The health check information for the listener."
                      }
                    ]
                  },
                  "outlierDetection": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/OutlierDetection"
                      },
                      {
                        "description": "The outlier detection information for the listener."
                      }
                    ]
                  },
                  "portMapping": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/PortMapping"
                      },
                      {
                        "description": "The port mapping information for the listener."
                      }
                    ]
                  },
                  "timeout": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ListenerTimeout"
                      },
                      {
                        "description": "An object that represents timeouts for different protocols."
                      }
                    ]
                  },
                  "tls": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ListenerTls"
                      },
                      {
                        "description": "A reference to an object that represents the Transport Layer Security (TLS) properties for a listener."
                      }
                    ]
                  }
                },
                "description": "An object that represents a listener for a virtual node."
              },
              "TcpTimeout": {
                "type": "object",
                "properties": {
                  "idle": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Duration"
                      },
                      {
                        "description": "An object that represents an idle timeout. An idle timeout bounds the amount of time that a connection may be idle. The default value is none."
                      }
                    ]
                  }
                },
                "description": "An object that represents types of timeouts. "
              },
              "ListenerTlsCertificate": {
                "type": "object",
                "properties": {
                  "acm": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ListenerTlsAcmCertificate"
                      },
                      {
                        "description": "A reference to an object that represents an Certificate Manager certificate."
                      }
                    ]
                  },
                  "file": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ListenerTlsFileCertificate"
                      },
                      {
                        "description": "A reference to an object that represents a local file certificate."
                      }
                    ]
                  },
                  "sds": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ListenerTlsSdsCertificate"
                      },
                      {
                        "description": "A reference to an object that represents a listener's Secret Discovery Service certificate."
                      }
                    ]
                  }
                },
                "description": "An object that represents a listener's Transport Layer Security (TLS) certificate."
              },
              "ListenerTlsMode": {
                "type": "string",
                "enum": [
                  "STRICT",
                  "PERMISSIVE",
                  "DISABLED"
                ]
              },
              "ListenerTlsValidationContext": {
                "type": "object",
                "required": [
                  "trust"
                ],
                "properties": {
                  "subjectAlternativeNames": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/SubjectAlternativeNames"
                      },
                      {
                        "description": "A reference to an object that represents the SANs for a listener's Transport Layer Security (TLS) validation context."
                      }
                    ]
                  },
                  "trust": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ListenerTlsValidationContextTrust"
                      },
                      {
                        "description": "A reference to where to retrieve the trust chain when validating a peer’s Transport Layer Security (TLS) certificate."
                      }
                    ]
                  }
                },
                "description": "An object that represents a listener's Transport Layer Security (TLS) validation context."
              },
              "ListenerTlsAcmCertificate": {
                "type": "object",
                "required": [
                  "certificateArn"
                ],
                "properties": {
                  "certificateArn": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Arn"
                      },
                      {
                        "description": "The Amazon Resource Name (ARN) for the certificate. The certificate must meet specific requirements and you must have proxy authorization enabled. For more information, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/tls.html#virtual-node-tls-prerequisites\">Transport Layer Security (TLS)</a>."
                      }
                    ]
                  }
                },
                "description": "An object that represents an Certificate Manager certificate."
              },
              "SdsSecretName": {
                "type": "string"
              },
              "SubjectAlternativeNames": {
                "type": "object",
                "required": [
                  "match"
                ],
                "properties": {
                  "match": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/SubjectAlternativeNameMatchers"
                      },
                      {
                        "description": "An object that represents the criteria for determining a SANs match."
                      }
                    ]
                  }
                },
                "description": "An object that represents the subject alternative names secured by the certificate."
              },
              "ListenerTlsValidationContextTrust": {
                "type": "object",
                "properties": {
                  "file": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/TlsValidationContextFileTrust"
                      },
                      {
                        "description": "An object that represents a Transport Layer Security (TLS) validation context trust for a local file."
                      }
                    ]
                  },
                  "sds": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/TlsValidationContextSdsTrust"
                      },
                      {
                        "description": "A reference to an object that represents a listener's Transport Layer Security (TLS) Secret Discovery Service validation context trust."
                      }
                    ]
                  }
                },
                "description": "An object that represents a listener's Transport Layer Security (TLS) validation context trust."
              },
              "TlsValidationContextFileTrust": {
                "type": "object",
                "required": [
                  "certificateChain"
                ],
                "properties": {
                  "certificateChain": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/FilePath"
                      },
                      {
                        "description": "The certificate trust chain for a certificate stored on the file system of the virtual node that the proxy is running on."
                      }
                    ]
                  }
                },
                "description": "An object that represents a Transport Layer Security (TLS) validation context trust for a local file."
              },
              "TlsValidationContextSdsTrust": {
                "type": "object",
                "required": [
                  "secretName"
                ],
                "properties": {
                  "secretName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/SdsSecretName"
                      },
                      {
                        "description": "A reference to an object that represents the name of the secret for a Transport Layer Security (TLS) Secret Discovery Service validation context trust."
                      }
                    ]
                  }
                },
                "description": "An object that represents a Transport Layer Security (TLS) Secret Discovery Service validation context trust. The proxy must be configured with a local SDS provider via a Unix Domain Socket. See App Mesh <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/tls.html\">TLS documentation</a> for more info."
              },
              "TextFormat": {
                "type": "string",
                "minLength": 1,
                "maxLength": 1000
              },
              "MaxConnections": {
                "type": "integer",
                "minimum": 1
              },
              "MaxPendingRequests": {
                "type": "integer",
                "minimum": 1
              },
              "MaxRequests": {
                "type": "integer",
                "minimum": 1
              },
              "MeshStatus": {
                "type": "object",
                "properties": {
                  "status": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/MeshStatusCode"
                      },
                      {
                        "description": "The current mesh status."
                      }
                    ]
                  }
                },
                "description": "An object that represents the status of a service mesh."
              },
              "MeshRef": {
                "type": "object",
                "required": [
                  "arn",
                  "createdAt",
                  "lastUpdatedAt",
                  "meshName",
                  "meshOwner",
                  "resourceOwner",
                  "version"
                ],
                "properties": {
                  "arn": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Arn"
                      },
                      {
                        "description": "The full Amazon Resource Name (ARN) of the service mesh."
                      }
                    ]
                  },
                  "createdAt": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Timestamp"
                      },
                      {
                        "description": "The Unix epoch timestamp in seconds for when the resource was created."
                      }
                    ]
                  },
                  "lastUpdatedAt": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Timestamp"
                      },
                      {
                        "description": "The Unix epoch timestamp in seconds for when the resource was last updated."
                      }
                    ]
                  },
                  "meshName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ResourceName"
                      },
                      {
                        "description": "The name of the service mesh."
                      }
                    ]
                  },
                  "meshOwner": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/AccountId"
                      },
                      {
                        "description": "The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\">Working with shared meshes</a>."
                      }
                    ]
                  },
                  "resourceOwner": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/AccountId"
                      },
                      {
                        "description": "The Amazon Web Services IAM account ID of the resource owner. If the account ID is not your own, then it's the ID of the mesh owner or of another account that the mesh is shared with. For more information about mesh sharing, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\">Working with shared meshes</a>."
                      }
                    ]
                  },
                  "version": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Long"
                      },
                      {
                        "description": "The version of the resource. Resources are created at version 1, and this version is incremented each time that they're updated."
                      }
                    ]
                  }
                },
                "description": "An object that represents a service mesh returned by a list operation."
              },
              "MeshStatusCode": {
                "type": "string",
                "enum": [
                  "ACTIVE",
                  "INACTIVE",
                  "DELETED"
                ]
              },
              "OutlierDetectionMaxEjectionPercent": {
                "type": "integer",
                "minimum": 0,
                "maximum": 100
              },
              "OutlierDetectionMaxServerErrors": {
                "type": "integer",
                "minimum": 1
              },
              "PercentInt": {
                "type": "integer",
                "minimum": 0,
                "maximum": 100
              },
              "RouteStatus": {
                "type": "object",
                "required": [
                  "status"
                ],
                "properties": {
                  "status": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/RouteStatusCode"
                      },
                      {
                        "description": "The current status for the route."
                      }
                    ]
                  }
                },
                "description": "An object that represents the current status of a route."
              },
              "RouteRef": {
                "type": "object",
                "required": [
                  "arn",
                  "createdAt",
                  "lastUpdatedAt",
                  "meshName",
                  "meshOwner",
                  "resourceOwner",
                  "routeName",
                  "version",
                  "virtualRouterName"
                ],
                "properties": {
                  "arn": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Arn"
                      },
                      {
                        "description": "The full Amazon Resource Name (ARN) for the route."
                      }
                    ]
                  },
                  "createdAt": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Timestamp"
                      },
                      {
                        "description": "The Unix epoch timestamp in seconds for when the resource was created."
                      }
                    ]
                  },
                  "lastUpdatedAt": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Timestamp"
                      },
                      {
                        "description": "The Unix epoch timestamp in seconds for when the resource was last updated."
                      }
                    ]
                  },
                  "meshName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ResourceName"
                      },
                      {
                        "description": "The name of the service mesh that the route resides in."
                      }
                    ]
                  },
                  "meshOwner": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/AccountId"
                      },
                      {
                        "description": "The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\">Working with shared meshes</a>."
                      }
                    ]
                  },
                  "resourceOwner": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/AccountId"
                      },
                      {
                        "description": "The Amazon Web Services IAM account ID of the resource owner. If the account ID is not your own, then it's the ID of the mesh owner or of another account that the mesh is shared with. For more information about mesh sharing, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\">Working with shared meshes</a>."
                      }
                    ]
                  },
                  "routeName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ResourceName"
                      },
                      {
                        "description": "The name of the route."
                      }
                    ]
                  },
                  "version": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Long"
                      },
                      {
                        "description": "The version of the resource. Resources are created at version 1, and this version is incremented each time that they're updated."
                      }
                    ]
                  },
                  "virtualRouterName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ResourceName"
                      },
                      {
                        "description": "The virtual router that the route is associated with."
                      }
                    ]
                  }
                },
                "description": "An object that represents a route returned by a list operation."
              },
              "RouteStatusCode": {
                "type": "string",
                "enum": [
                  "ACTIVE",
                  "INACTIVE",
                  "DELETED"
                ]
              },
              "SubjectAlternativeName": {
                "type": "string",
                "minLength": 1,
                "maxLength": 254
              },
              "SubjectAlternativeNameList": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SubjectAlternativeName"
                }
              },
              "SubjectAlternativeNameMatchers": {
                "type": "object",
                "required": [
                  "exact"
                ],
                "properties": {
                  "exact": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/SubjectAlternativeNameList"
                      },
                      {
                        "description": "The values sent must match the specified values exactly."
                      }
                    ]
                  }
                },
                "description": "An object that represents the methods by which a subject alternative name on a peer Transport Layer Security (TLS) certificate can be matched."
              },
              "TagKeyList": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/TagKey"
                },
                "minItems": 0,
                "maxItems": 50
              },
              "TagValue": {
                "type": "string",
                "minLength": 0,
                "maxLength": 256
              },
              "TagResourceInput": {
                "type": "object",
                "required": [
                  "tags"
                ],
                "title": "TagResourceInput",
                "properties": {
                  "tags": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/TagList"
                      },
                      {
                        "description": "The tags to add to the resource. A tag is an array of key-value pairs. Tag keys can have a maximum character length of 128 characters, and tag values can have a maximum length of 256 characters."
                      }
                    ]
                  }
                },
                "description": "<zonbook></zonbook><xhtml></xhtml>"
              },
              "TcpRetryPolicyEvent": {
                "type": "string",
                "enum": [
                  "connection-error"
                ]
              },
              "TcpRouteAction": {
                "type": "object",
                "required": [
                  "weightedTargets"
                ],
                "properties": {
                  "weightedTargets": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/WeightedTargets"
                      },
                      {
                        "description": "An object that represents the targets that traffic is routed to when a request matches the route."
                      }
                    ]
                  }
                },
                "description": "An object that represents the action to take if a match is determined."
              },
              "TcpRouteMatch": {
                "type": "object",
                "properties": {
                  "port": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ListenerPort"
                      },
                      {
                        "description": "The port number to match on."
                      }
                    ]
                  }
                },
                "description": "An object representing the TCP route to match."
              },
              "TlsValidationContextTrust": {
                "type": "object",
                "properties": {
                  "acm": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/TlsValidationContextAcmTrust"
                      },
                      {
                        "description": "A reference to an object that represents a Transport Layer Security (TLS) validation context trust for an Certificate Manager certificate."
                      }
                    ]
                  },
                  "file": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/TlsValidationContextFileTrust"
                      },
                      {
                        "description": "An object that represents a Transport Layer Security (TLS) validation context trust for a local file."
                      }
                    ]
                  },
                  "sds": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/TlsValidationContextSdsTrust"
                      },
                      {
                        "description": "A reference to an object that represents a Transport Layer Security (TLS) Secret Discovery Service validation context trust."
                      }
                    ]
                  }
                },
                "description": "An object that represents a Transport Layer Security (TLS) validation context trust."
              },
              "TlsValidationContextAcmTrust": {
                "type": "object",
                "required": [
                  "certificateAuthorityArns"
                ],
                "properties": {
                  "certificateAuthorityArns": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/CertificateAuthorityArns"
                      },
                      {
                        "description": "One or more ACM Amazon Resource Name (ARN)s."
                      }
                    ]
                  }
                },
                "description": "An object that represents a Transport Layer Security (TLS) validation context trust for an Certificate Manager certificate."
              },
              "UntagResourceInput": {
                "type": "object",
                "required": [
                  "tagKeys"
                ],
                "title": "UntagResourceInput",
                "properties": {
                  "tagKeys": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/TagKeyList"
                      },
                      {
                        "description": "The keys of the tags to be removed."
                      }
                    ]
                  }
                },
                "description": "<zonbook></zonbook><xhtml></xhtml>"
              },
              "UpdateGatewayRouteInput": {
                "type": "object",
                "required": [
                  "spec"
                ],
                "title": "UpdateGatewayRouteInput",
                "properties": {
                  "clientToken": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/String"
                      },
                      {
                        "description": "Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Up to 36 letters, numbers, hyphens, and underscores are allowed."
                      }
                    ]
                  },
                  "spec": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/GatewayRouteSpec"
                      },
                      {
                        "description": "The new gateway route specification to apply. This overwrites the existing data."
                      }
                    ]
                  }
                }
              },
              "UpdateMeshInput": {
                "type": "object",
                "title": "UpdateMeshInput",
                "properties": {
                  "clientToken": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/String"
                      },
                      {
                        "description": "Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Up to 36 letters, numbers, hyphens, and underscores are allowed."
                      }
                    ]
                  },
                  "spec": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/MeshSpec"
                      },
                      {
                        "description": "The service mesh specification to apply."
                      }
                    ]
                  }
                },
                "description": "<zonbook></zonbook><xhtml></xhtml>"
              },
              "UpdateRouteInput": {
                "type": "object",
                "required": [
                  "spec"
                ],
                "title": "UpdateRouteInput",
                "properties": {
                  "clientToken": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/String"
                      },
                      {
                        "description": "Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Up to 36 letters, numbers, hyphens, and underscores are allowed."
                      }
                    ]
                  },
                  "spec": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/RouteSpec"
                      },
                      {
                        "description": "The new route specification to apply. This overwrites the existing data."
                      }
                    ]
                  }
                },
                "description": "<zonbook></zonbook><xhtml></xhtml>"
              },
              "UpdateVirtualGatewayInput": {
                "type": "object",
                "required": [
                  "spec"
                ],
                "title": "UpdateVirtualGatewayInput",
                "properties": {
                  "clientToken": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/String"
                      },
                      {
                        "description": "Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Up to 36 letters, numbers, hyphens, and underscores are allowed."
                      }
                    ]
                  },
                  "spec": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/VirtualGatewaySpec"
                      },
                      {
                        "description": "The new virtual gateway specification to apply. This overwrites the existing data."
                      }
                    ]
                  }
                }
              },
              "UpdateVirtualNodeInput": {
                "type": "object",
                "required": [
                  "spec"
                ],
                "title": "UpdateVirtualNodeInput",
                "properties": {
                  "clientToken": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/String"
                      },
                      {
                        "description": "Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Up to 36 letters, numbers, hyphens, and underscores are allowed."
                      }
                    ]
                  },
                  "spec": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/VirtualNodeSpec"
                      },
                      {
                        "description": "The new virtual node specification to apply. This overwrites the existing data."
                      }
                    ]
                  }
                },
                "description": "<zonbook></zonbook><xhtml></xhtml>"
              },
              "UpdateVirtualRouterInput": {
                "type": "object",
                "required": [
                  "spec"
                ],
                "title": "UpdateVirtualRouterInput",
                "properties": {
                  "clientToken": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/String"
                      },
                      {
                        "description": "Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Up to 36 letters, numbers, hyphens, and underscores are allowed."
                      }
                    ]
                  },
                  "spec": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/VirtualRouterSpec"
                      },
                      {
                        "description": "The new virtual router specification to apply. This overwrites the existing data."
                      }
                    ]
                  }
                },
                "description": "<zonbook></zonbook><xhtml></xhtml>"
              },
              "UpdateVirtualServiceInput": {
                "type": "object",
                "required": [
                  "spec"
                ],
                "title": "UpdateVirtualServiceInput",
                "properties": {
                  "clientToken": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/String"
                      },
                      {
                        "description": "Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Up to 36 letters, numbers, hyphens, and underscores are allowed."
                      }
                    ]
                  },
                  "spec": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/VirtualServiceSpec"
                      },
                      {
                        "description": "The new virtual service specification to apply. This overwrites the existing data."
                      }
                    ]
                  }
                },
                "description": "<zonbook></zonbook><xhtml></xhtml>"
              },
              "VirtualGatewayFileAccessLog": {
                "type": "object",
                "required": [
                  "path"
                ],
                "properties": {
                  "format": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/LoggingFormat"
                      },
                      {
                        "description": "The specified format for the virtual gateway access logs. It can be either <code>json_format</code> or <code>text_format</code>."
                      }
                    ]
                  },
                  "path": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/FilePath"
                      },
                      {
                        "description": "The file path to write access logs to. You can use <code>/dev/stdout</code> to send access logs to standard out and configure your Envoy container to use a log driver, such as <code>awslogs</code>, to export the access logs to a log storage service such as Amazon CloudWatch Logs. You can also specify a path in the Envoy container's file system to write the files to disk."
                      }
                    ]
                  }
                },
                "description": "An object that represents an access log file."
              },
              "VirtualGatewayAccessLog": {
                "type": "object",
                "properties": {
                  "file": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/VirtualGatewayFileAccessLog"
                      },
                      {
                        "description": "The file object to send virtual gateway access logs to."
                      }
                    ]
                  }
                },
                "description": "The access log configuration for a virtual gateway."
              },
              "VirtualGatewayClientPolicy": {
                "type": "object",
                "properties": {
                  "tls": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/VirtualGatewayClientPolicyTls"
                      },
                      {
                        "description": "A reference to an object that represents a Transport Layer Security (TLS) client policy."
                      }
                    ]
                  }
                },
                "description": "An object that represents a client policy."
              },
              "VirtualGatewayCertificateAuthorityArns": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Arn"
                },
                "minItems": 1,
                "maxItems": 3
              },
              "VirtualGatewayClientPolicyTls": {
                "type": "object",
                "required": [
                  "validation"
                ],
                "properties": {
                  "certificate": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/VirtualGatewayClientTlsCertificate"
                      },
                      {
                        "description": "A reference to an object that represents a virtual gateway's client's Transport Layer Security (TLS) certificate."
                      }
                    ]
                  },
                  "enforce": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Boolean"
                      },
                      {
                        "description": "Whether the policy is enforced. The default is <code>True</code>, if a value isn't specified."
                      }
                    ]
                  },
                  "ports": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/PortSet"
                      },
                      {
                        "description": "One or more ports that the policy is enforced for."
                      }
                    ]
                  },
                  "validation": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/VirtualGatewayTlsValidationContext"
                      },
                      {
                        "description": "A reference to an object that represents a Transport Layer Security (TLS) validation context."
                      }
                    ]
                  }
                },
                "description": "An object that represents a Transport Layer Security (TLS) client policy."
              },
              "VirtualGatewayClientTlsCertificate": {
                "type": "object",
                "properties": {
                  "file": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/VirtualGatewayListenerTlsFileCertificate"
                      },
                      {
                        "description": "An object that represents a local file certificate. The certificate must meet specific requirements and you must have proxy authorization enabled. For more information, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/tls.html\"> Transport Layer Security (TLS) </a>."
                      }
                    ]
                  },
                  "sds": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/VirtualGatewayListenerTlsSdsCertificate"
                      },
                      {
                        "description": "A reference to an object that represents a virtual gateway's client's Secret Discovery Service certificate."
                      }
                    ]
                  }
                },
                "description": "An object that represents the virtual gateway's client's Transport Layer Security (TLS) certificate."
              },
              "VirtualGatewayTlsValidationContext": {
                "type": "object",
                "required": [
                  "trust"
                ],
                "properties": {
                  "subjectAlternativeNames": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/SubjectAlternativeNames"
                      },
                      {
                        "description": "A reference to an object that represents the SANs for a virtual gateway's listener's Transport Layer Security (TLS) validation context."
                      }
                    ]
                  },
                  "trust": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/VirtualGatewayTlsValidationContextTrust"
                      },
                      {
                        "description": "A reference to where to retrieve the trust chain when validating a peer’s Transport Layer Security (TLS) certificate."
                      }
                    ]
                  }
                },
                "description": "An object that represents a Transport Layer Security (TLS) validation context."
              },
              "VirtualGatewayListenerTlsFileCertificate": {
                "type": "object",
                "required": [
                  "certificateChain",
                  "privateKey"
                ],
                "properties": {
                  "certificateChain": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/FilePath"
                      },
                      {
                        "description": "The certificate chain for the certificate."
                      }
                    ]
                  },
                  "privateKey": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/FilePath"
                      },
                      {
                        "description": "The private key for a certificate stored on the file system of the mesh endpoint that the proxy is running on."
                      }
                    ]
                  }
                },
                "description": "An object that represents a local file certificate. The certificate must meet specific requirements and you must have proxy authorization enabled. For more information, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/tls.html#virtual-node-tls-prerequisites\">Transport Layer Security (TLS)</a>."
              },
              "VirtualGatewayListenerTlsSdsCertificate": {
                "type": "object",
                "required": [
                  "secretName"
                ],
                "properties": {
                  "secretName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/VirtualGatewaySdsSecretName"
                      },
                      {
                        "description": "A reference to an object that represents the name of the secret secret requested from the Secret Discovery Service provider representing Transport Layer Security (TLS) materials like a certificate or certificate chain."
                      }
                    ]
                  }
                },
                "description": "An object that represents the virtual gateway's listener's Secret Discovery Service certificate.The proxy must be configured with a local SDS provider via a Unix Domain Socket. See App Mesh<a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/tls.html\">TLS documentation</a> for more info. "
              },
              "VirtualGatewayGrpcConnectionPool": {
                "type": "object",
                "required": [
                  "maxRequests"
                ],
                "properties": {
                  "maxRequests": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/MaxRequests"
                      },
                      {
                        "description": "Maximum number of inflight requests Envoy can concurrently support across hosts in upstream cluster."
                      }
                    ]
                  }
                },
                "description": "An object that represents a type of connection pool."
              },
              "VirtualGatewayHttpConnectionPool": {
                "type": "object",
                "required": [
                  "maxConnections"
                ],
                "properties": {
                  "maxConnections": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/MaxConnections"
                      },
                      {
                        "description": "Maximum number of outbound TCP connections Envoy can establish concurrently with all hosts in upstream cluster."
                      }
                    ]
                  },
                  "maxPendingRequests": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/MaxPendingRequests"
                      },
                      {
                        "description": "Number of overflowing requests after <code>max_connections</code> Envoy will queue to upstream cluster."
                      }
                    ]
                  }
                },
                "description": "An object that represents a type of connection pool."
              },
              "VirtualGatewayHttp2ConnectionPool": {
                "type": "object",
                "required": [
                  "maxRequests"
                ],
                "properties": {
                  "maxRequests": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/MaxRequests"
                      },
                      {
                        "description": "Maximum number of inflight requests Envoy can concurrently support across hosts in upstream cluster."
                      }
                    ]
                  }
                },
                "description": "An object that represents a type of connection pool."
              },
              "VirtualGatewayConnectionPool": {
                "type": "object",
                "properties": {
                  "grpc": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/VirtualGatewayGrpcConnectionPool"
                      },
                      {
                        "description": "An object that represents a type of connection pool. "
                      }
                    ]
                  },
                  "http": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/VirtualGatewayHttpConnectionPool"
                      },
                      {
                        "description": "An object that represents a type of connection pool."
                      }
                    ]
                  },
                  "http2": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/VirtualGatewayHttp2ConnectionPool"
                      },
                      {
                        "description": "An object that represents a type of connection pool."
                      }
                    ]
                  }
                },
                "description": "<p>An object that represents the type of virtual gateway connection pool.</p> <p>Only one protocol is used at a time and should be the same protocol as the one chosen under port mapping.</p> <p>If not present the default value for <code>maxPendingRequests</code> is <code>2147483647</code>.</p>"
              },
              "VirtualGatewayStatus": {
                "type": "object",
                "required": [
                  "status"
                ],
                "properties": {
                  "status": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/VirtualGatewayStatusCode"
                      },
                      {
                        "description": "The current status."
                      }
                    ]
                  }
                },
                "description": "An object that represents the status of the mesh resource."
              },
              "VirtualGatewayHealthCheckIntervalMillis": {
                "type": "integer",
                "minimum": 5000,
                "maximum": 300000
              },
              "VirtualGatewayHealthCheckThreshold": {
                "type": "integer",
                "minimum": 2,
                "maximum": 10
              },
              "VirtualGatewayPortProtocol": {
                "type": "string",
                "enum": [
                  "http",
                  "http2",
                  "grpc"
                ]
              },
              "VirtualGatewayHealthCheckTimeoutMillis": {
                "type": "integer",
                "minimum": 2000,
                "maximum": 60000
              },
              "VirtualGatewayHealthCheckPolicy": {
                "type": "object",
                "required": [
                  "healthyThreshold",
                  "intervalMillis",
                  "protocol",
                  "timeoutMillis",
                  "unhealthyThreshold"
                ],
                "properties": {
                  "healthyThreshold": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/VirtualGatewayHealthCheckThreshold"
                      },
                      {
                        "description": "The number of consecutive successful health checks that must occur before declaring the listener healthy."
                      }
                    ]
                  },
                  "intervalMillis": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/VirtualGatewayHealthCheckIntervalMillis"
                      },
                      {
                        "description": "The time period in milliseconds between each health check execution."
                      }
                    ]
                  },
                  "path": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/String"
                      },
                      {
                        "description": "The destination path for the health check request. This value is only used if the specified protocol is HTTP or HTTP/2. For any other protocol, this value is ignored."
                      }
                    ]
                  },
                  "port": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/PortNumber"
                      },
                      {
                        "description": "The destination port for the health check request. This port must match the port defined in the <a>PortMapping</a> for the listener."
                      }
                    ]
                  },
                  "protocol": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/VirtualGatewayPortProtocol"
                      },
                      {
                        "description": "The protocol for the health check request. If you specify <code>grpc</code>, then your service must conform to the <a href=\"https://github.com/grpc/grpc/blob/master/doc/health-checking.md\">GRPC Health Checking Protocol</a>."
                      }
                    ]
                  },
                  "timeoutMillis": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/VirtualGatewayHealthCheckTimeoutMillis"
                      },
                      {
                        "description": "The amount of time to wait when receiving a response from the health check, in milliseconds."
                      }
                    ]
                  },
                  "unhealthyThreshold": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/VirtualGatewayHealthCheckThreshold"
                      },
                      {
                        "description": "The number of consecutive failed health checks that must occur before declaring a virtual gateway unhealthy."
                      }
                    ]
                  }
                },
                "description": "An object that represents the health check policy for a virtual gateway's listener."
              },
              "VirtualGatewayRef": {
                "type": "object",
                "required": [
                  "arn",
                  "createdAt",
                  "lastUpdatedAt",
                  "meshName",
                  "meshOwner",
                  "resourceOwner",
                  "version",
                  "virtualGatewayName"
                ],
                "properties": {
                  "arn": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Arn"
                      },
                      {
                        "description": "The full Amazon Resource Name (ARN) for the resource."
                      }
                    ]
                  },
                  "createdAt": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Timestamp"
                      },
                      {
                        "description": "The Unix epoch timestamp in seconds for when the resource was created."
                      }
                    ]
                  },
                  "lastUpdatedAt": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Timestamp"
                      },
                      {
                        "description": "The Unix epoch timestamp in seconds for when the resource was last updated."
                      }
                    ]
                  },
                  "meshName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ResourceName"
                      },
                      {
                        "description": "The name of the service mesh that the resource resides in."
                      }
                    ]
                  },
                  "meshOwner": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/AccountId"
                      },
                      {
                        "description": "The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\">Working with shared meshes</a>."
                      }
                    ]
                  },
                  "resourceOwner": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/AccountId"
                      },
                      {
                        "description": "The Amazon Web Services IAM account ID of the resource owner. If the account ID is not your own, then it's the ID of the mesh owner or of another account that the mesh is shared with. For more information about mesh sharing, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\">Working with shared meshes</a>."
                      }
                    ]
                  },
                  "version": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Long"
                      },
                      {
                        "description": "The version of the resource. Resources are created at version 1, and this version is incremented each time that they're updated."
                      }
                    ]
                  },
                  "virtualGatewayName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ResourceName"
                      },
                      {
                        "description": "The name of the resource."
                      }
                    ]
                  }
                },
                "description": "An object that represents a virtual gateway returned by a list operation."
              },
              "VirtualGatewayPortMapping": {
                "type": "object",
                "required": [
                  "port",
                  "protocol"
                ],
                "properties": {
                  "port": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/PortNumber"
                      },
                      {
                        "description": "The port used for the port mapping. Specify one protocol."
                      }
                    ]
                  },
                  "protocol": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/VirtualGatewayPortProtocol"
                      },
                      {
                        "description": "The protocol used for the port mapping."
                      }
                    ]
                  }
                },
                "description": "An object that represents a port mapping."
              },
              "VirtualGatewayListenerTls": {
                "type": "object",
                "required": [
                  "certificate",
                  "mode"
                ],
                "properties": {
                  "certificate": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/VirtualGatewayListenerTlsCertificate"
                      },
                      {
                        "description": "An object that represents a Transport Layer Security (TLS) certificate."
                      }
                    ]
                  },
                  "mode": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/VirtualGatewayListenerTlsMode"
                      },
                      {
                        "description": "<p>Specify one of the following modes.</p> <ul> <li> <p> <b/>STRICT – Listener only accepts connections with TLS enabled. </p> </li> <li> <p> <b/>PERMISSIVE – Listener accepts connections with or without TLS enabled.</p> </li> <li> <p> <b/>DISABLED – Listener only accepts connections without TLS. </p> </li> </ul>"
                      }
                    ]
                  },
                  "validation": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/VirtualGatewayListenerTlsValidationContext"
                      },
                      {
                        "description": "A reference to an object that represents a virtual gateway's listener's Transport Layer Security (TLS) validation context."
                      }
                    ]
                  }
                },
                "description": "An object that represents the Transport Layer Security (TLS) properties for a listener."
              },
              "VirtualGatewayListener": {
                "type": "object",
                "required": [
                  "portMapping"
                ],
                "properties": {
                  "connectionPool": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/VirtualGatewayConnectionPool"
                      },
                      {
                        "description": "The connection pool information for the virtual gateway listener."
                      }
                    ]
                  },
                  "healthCheck": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/VirtualGatewayHealthCheckPolicy"
                      },
                      {
                        "description": "The health check information for the listener."
                      }
                    ]
                  },
                  "portMapping": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/VirtualGatewayPortMapping"
                      },
                      {
                        "description": "The port mapping information for the listener."
                      }
                    ]
                  },
                  "tls": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/VirtualGatewayListenerTls"
                      },
                      {
                        "description": "A reference to an object that represents the Transport Layer Security (TLS) properties for the listener."
                      }
                    ]
                  }
                },
                "description": "An object that represents a listener for a virtual gateway."
              },
              "VirtualGatewayListenerTlsCertificate": {
                "type": "object",
                "properties": {
                  "acm": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/VirtualGatewayListenerTlsAcmCertificate"
                      },
                      {
                        "description": "A reference to an object that represents an Certificate Manager certificate."
                      }
                    ]
                  },
                  "file": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/VirtualGatewayListenerTlsFileCertificate"
                      },
                      {
                        "description": "A reference to an object that represents a local file certificate."
                      }
                    ]
                  },
                  "sds": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/VirtualGatewayListenerTlsSdsCertificate"
                      },
                      {
                        "description": "A reference to an object that represents a virtual gateway's listener's Secret Discovery Service certificate."
                      }
                    ]
                  }
                },
                "description": "An object that represents a listener's Transport Layer Security (TLS) certificate."
              },
              "VirtualGatewayListenerTlsMode": {
                "type": "string",
                "enum": [
                  "STRICT",
                  "PERMISSIVE",
                  "DISABLED"
                ]
              },
              "VirtualGatewayListenerTlsValidationContext": {
                "type": "object",
                "required": [
                  "trust"
                ],
                "properties": {
                  "subjectAlternativeNames": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/SubjectAlternativeNames"
                      },
                      {
                        "description": "A reference to an object that represents the SANs for a virtual gateway listener's Transport Layer Security (TLS) validation context."
                      }
                    ]
                  },
                  "trust": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/VirtualGatewayListenerTlsValidationContextTrust"
                      },
                      {
                        "description": "A reference to where to retrieve the trust chain when validating a peer’s Transport Layer Security (TLS) certificate."
                      }
                    ]
                  }
                },
                "description": "An object that represents a virtual gateway's listener's Transport Layer Security (TLS) validation context."
              },
              "VirtualGatewayListenerTlsAcmCertificate": {
                "type": "object",
                "required": [
                  "certificateArn"
                ],
                "properties": {
                  "certificateArn": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Arn"
                      },
                      {
                        "description": "The Amazon Resource Name (ARN) for the certificate. The certificate must meet specific requirements and you must have proxy authorization enabled. For more information, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/tls.html#virtual-node-tls-prerequisites\">Transport Layer Security (TLS)</a>."
                      }
                    ]
                  }
                },
                "description": "An object that represents an Certificate Manager certificate."
              },
              "VirtualGatewaySdsSecretName": {
                "type": "string"
              },
              "VirtualGatewayListenerTlsValidationContextTrust": {
                "type": "object",
                "properties": {
                  "file": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/VirtualGatewayTlsValidationContextFileTrust"
                      },
                      {
                        "description": "An object that represents a Transport Layer Security (TLS) validation context trust for a local file."
                      }
                    ]
                  },
                  "sds": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/VirtualGatewayTlsValidationContextSdsTrust"
                      },
                      {
                        "description": "A reference to an object that represents a virtual gateway's listener's Transport Layer Security (TLS) Secret Discovery Service validation context trust."
                      }
                    ]
                  }
                },
                "description": "An object that represents a virtual gateway's listener's Transport Layer Security (TLS) validation context trust."
              },
              "VirtualGatewayTlsValidationContextFileTrust": {
                "type": "object",
                "required": [
                  "certificateChain"
                ],
                "properties": {
                  "certificateChain": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/FilePath"
                      },
                      {
                        "description": "The certificate trust chain for a certificate stored on the file system of the virtual node that the proxy is running on."
                      }
                    ]
                  }
                },
                "description": "An object that represents a Transport Layer Security (TLS) validation context trust for a local file."
              },
              "VirtualGatewayTlsValidationContextSdsTrust": {
                "type": "object",
                "required": [
                  "secretName"
                ],
                "properties": {
                  "secretName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/VirtualGatewaySdsSecretName"
                      },
                      {
                        "description": "A reference to an object that represents the name of the secret for a virtual gateway's Transport Layer Security (TLS) Secret Discovery Service validation context trust."
                      }
                    ]
                  }
                },
                "description": "An object that represents a virtual gateway's listener's Transport Layer Security (TLS) Secret Discovery Service validation context trust. The proxy must be configured with a local SDS provider via a Unix Domain Socket. See App Mesh <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/tls.html\">TLS documentation</a> for more info."
              },
              "VirtualGatewayStatusCode": {
                "type": "string",
                "enum": [
                  "ACTIVE",
                  "INACTIVE",
                  "DELETED"
                ]
              },
              "VirtualGatewayTlsValidationContextTrust": {
                "type": "object",
                "properties": {
                  "acm": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/VirtualGatewayTlsValidationContextAcmTrust"
                      },
                      {
                        "description": "A reference to an object that represents a Transport Layer Security (TLS) validation context trust for an Certificate Manager certificate."
                      }
                    ]
                  },
                  "file": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/VirtualGatewayTlsValidationContextFileTrust"
                      },
                      {
                        "description": "An object that represents a Transport Layer Security (TLS) validation context trust for a local file."
                      }
                    ]
                  },
                  "sds": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/VirtualGatewayTlsValidationContextSdsTrust"
                      },
                      {
                        "description": "A reference to an object that represents a virtual gateway's Transport Layer Security (TLS) Secret Discovery Service validation context trust."
                      }
                    ]
                  }
                },
                "description": "An object that represents a Transport Layer Security (TLS) validation context trust."
              },
              "VirtualGatewayTlsValidationContextAcmTrust": {
                "type": "object",
                "required": [
                  "certificateAuthorityArns"
                ],
                "properties": {
                  "certificateAuthorityArns": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/VirtualGatewayCertificateAuthorityArns"
                      },
                      {
                        "description": "One or more ACM Amazon Resource Name (ARN)s."
                      }
                    ]
                  }
                },
                "description": "An object that represents a Transport Layer Security (TLS) validation context trust for an Certificate Manager certificate."
              },
              "VirtualNodeGrpcConnectionPool": {
                "type": "object",
                "required": [
                  "maxRequests"
                ],
                "properties": {
                  "maxRequests": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/MaxRequests"
                      },
                      {
                        "description": "Maximum number of inflight requests Envoy can concurrently support across hosts in upstream cluster."
                      }
                    ]
                  }
                },
                "description": "An object that represents a type of connection pool."
              },
              "VirtualNodeHttpConnectionPool": {
                "type": "object",
                "required": [
                  "maxConnections"
                ],
                "properties": {
                  "maxConnections": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/MaxConnections"
                      },
                      {
                        "description": "Maximum number of outbound TCP connections Envoy can establish concurrently with all hosts in upstream cluster."
                      }
                    ]
                  },
                  "maxPendingRequests": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/MaxPendingRequests"
                      },
                      {
                        "description": "Number of overflowing requests after <code>max_connections</code> Envoy will queue to upstream cluster."
                      }
                    ]
                  }
                },
                "description": "An object that represents a type of connection pool."
              },
              "VirtualNodeHttp2ConnectionPool": {
                "type": "object",
                "required": [
                  "maxRequests"
                ],
                "properties": {
                  "maxRequests": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/MaxRequests"
                      },
                      {
                        "description": "Maximum number of inflight requests Envoy can concurrently support across hosts in upstream cluster."
                      }
                    ]
                  }
                },
                "description": "An object that represents a type of connection pool."
              },
              "VirtualNodeTcpConnectionPool": {
                "type": "object",
                "required": [
                  "maxConnections"
                ],
                "properties": {
                  "maxConnections": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/MaxConnections"
                      },
                      {
                        "description": "Maximum number of outbound TCP connections Envoy can establish concurrently with all hosts in upstream cluster."
                      }
                    ]
                  }
                },
                "description": "An object that represents a type of connection pool."
              },
              "VirtualNodeStatus": {
                "type": "object",
                "required": [
                  "status"
                ],
                "properties": {
                  "status": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/VirtualNodeStatusCode"
                      },
                      {
                        "description": "The current status of the virtual node."
                      }
                    ]
                  }
                },
                "description": "An object that represents the current status of the virtual node."
              },
              "VirtualNodeRef": {
                "type": "object",
                "required": [
                  "arn",
                  "createdAt",
                  "lastUpdatedAt",
                  "meshName",
                  "meshOwner",
                  "resourceOwner",
                  "version",
                  "virtualNodeName"
                ],
                "properties": {
                  "arn": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Arn"
                      },
                      {
                        "description": "The full Amazon Resource Name (ARN) for the virtual node."
                      }
                    ]
                  },
                  "createdAt": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Timestamp"
                      },
                      {
                        "description": "The Unix epoch timestamp in seconds for when the resource was created."
                      }
                    ]
                  },
                  "lastUpdatedAt": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Timestamp"
                      },
                      {
                        "description": "The Unix epoch timestamp in seconds for when the resource was last updated."
                      }
                    ]
                  },
                  "meshName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ResourceName"
                      },
                      {
                        "description": "The name of the service mesh that the virtual node resides in."
                      }
                    ]
                  },
                  "meshOwner": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/AccountId"
                      },
                      {
                        "description": "The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\">Working with shared meshes</a>."
                      }
                    ]
                  },
                  "resourceOwner": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/AccountId"
                      },
                      {
                        "description": "The Amazon Web Services IAM account ID of the resource owner. If the account ID is not your own, then it's the ID of the mesh owner or of another account that the mesh is shared with. For more information about mesh sharing, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\">Working with shared meshes</a>."
                      }
                    ]
                  },
                  "version": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Long"
                      },
                      {
                        "description": "The version of the resource. Resources are created at version 1, and this version is incremented each time that they're updated."
                      }
                    ]
                  },
                  "virtualNodeName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ResourceName"
                      },
                      {
                        "description": "The name of the virtual node."
                      }
                    ]
                  }
                },
                "description": "An object that represents a virtual node returned by a list operation."
              },
              "VirtualNodeServiceProvider": {
                "type": "object",
                "required": [
                  "virtualNodeName"
                ],
                "properties": {
                  "virtualNodeName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ResourceName"
                      },
                      {
                        "description": "The name of the virtual node that is acting as a service provider."
                      }
                    ]
                  }
                },
                "description": "An object that represents a virtual node service provider."
              },
              "VirtualNodeStatusCode": {
                "type": "string",
                "enum": [
                  "ACTIVE",
                  "INACTIVE",
                  "DELETED"
                ]
              },
              "VirtualRouterStatus": {
                "type": "object",
                "required": [
                  "status"
                ],
                "properties": {
                  "status": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/VirtualRouterStatusCode"
                      },
                      {
                        "description": "The current status of the virtual router."
                      }
                    ]
                  }
                },
                "description": "An object that represents the status of a virtual router. "
              },
              "VirtualRouterRef": {
                "type": "object",
                "required": [
                  "arn",
                  "createdAt",
                  "lastUpdatedAt",
                  "meshName",
                  "meshOwner",
                  "resourceOwner",
                  "version",
                  "virtualRouterName"
                ],
                "properties": {
                  "arn": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Arn"
                      },
                      {
                        "description": "The full Amazon Resource Name (ARN) for the virtual router."
                      }
                    ]
                  },
                  "createdAt": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Timestamp"
                      },
                      {
                        "description": "The Unix epoch timestamp in seconds for when the resource was created."
                      }
                    ]
                  },
                  "lastUpdatedAt": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Timestamp"
                      },
                      {
                        "description": "The Unix epoch timestamp in seconds for when the resource was last updated."
                      }
                    ]
                  },
                  "meshName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ResourceName"
                      },
                      {
                        "description": "The name of the service mesh that the virtual router resides in."
                      }
                    ]
                  },
                  "meshOwner": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/AccountId"
                      },
                      {
                        "description": "The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\">Working with shared meshes</a>."
                      }
                    ]
                  },
                  "resourceOwner": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/AccountId"
                      },
                      {
                        "description": "The Amazon Web Services IAM account ID of the resource owner. If the account ID is not your own, then it's the ID of the mesh owner or of another account that the mesh is shared with. For more information about mesh sharing, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\">Working with shared meshes</a>."
                      }
                    ]
                  },
                  "version": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Long"
                      },
                      {
                        "description": "The version of the resource. Resources are created at version 1, and this version is incremented each time that they're updated."
                      }
                    ]
                  },
                  "virtualRouterName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ResourceName"
                      },
                      {
                        "description": "The name of the virtual router."
                      }
                    ]
                  }
                },
                "description": "An object that represents a virtual router returned by a list operation."
              },
              "VirtualRouterListener": {
                "type": "object",
                "required": [
                  "portMapping"
                ],
                "properties": {
                  "portMapping": {
                    "$ref": "#/components/schemas/PortMapping"
                  }
                },
                "description": "An object that represents a virtual router listener."
              },
              "VirtualRouterServiceProvider": {
                "type": "object",
                "required": [
                  "virtualRouterName"
                ],
                "properties": {
                  "virtualRouterName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ResourceName"
                      },
                      {
                        "description": "The name of the virtual router that is acting as a service provider."
                      }
                    ]
                  }
                },
                "description": "An object that represents a virtual node service provider."
              },
              "VirtualRouterStatusCode": {
                "type": "string",
                "enum": [
                  "ACTIVE",
                  "INACTIVE",
                  "DELETED"
                ]
              },
              "VirtualServiceStatus": {
                "type": "object",
                "required": [
                  "status"
                ],
                "properties": {
                  "status": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/VirtualServiceStatusCode"
                      },
                      {
                        "description": "The current status of the virtual service."
                      }
                    ]
                  }
                },
                "description": "An object that represents the status of a virtual service."
              },
              "VirtualServiceRef": {
                "type": "object",
                "required": [
                  "arn",
                  "createdAt",
                  "lastUpdatedAt",
                  "meshName",
                  "meshOwner",
                  "resourceOwner",
                  "version",
                  "virtualServiceName"
                ],
                "properties": {
                  "arn": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Arn"
                      },
                      {
                        "description": "The full Amazon Resource Name (ARN) for the virtual service."
                      }
                    ]
                  },
                  "createdAt": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Timestamp"
                      },
                      {
                        "description": "The Unix epoch timestamp in seconds for when the resource was created."
                      }
                    ]
                  },
                  "lastUpdatedAt": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Timestamp"
                      },
                      {
                        "description": "The Unix epoch timestamp in seconds for when the resource was last updated."
                      }
                    ]
                  },
                  "meshName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ResourceName"
                      },
                      {
                        "description": "The name of the service mesh that the virtual service resides in."
                      }
                    ]
                  },
                  "meshOwner": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/AccountId"
                      },
                      {
                        "description": "The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\">Working with shared meshes</a>."
                      }
                    ]
                  },
                  "resourceOwner": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/AccountId"
                      },
                      {
                        "description": "The Amazon Web Services IAM account ID of the resource owner. If the account ID is not your own, then it's the ID of the mesh owner or of another account that the mesh is shared with. For more information about mesh sharing, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\">Working with shared meshes</a>."
                      }
                    ]
                  },
                  "version": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Long"
                      },
                      {
                        "description": "The version of the resource. Resources are created at version 1, and this version is incremented each time that they're updated."
                      }
                    ]
                  },
                  "virtualServiceName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ServiceName"
                      },
                      {
                        "description": "The name of the virtual service."
                      }
                    ]
                  }
                },
                "description": "An object that represents a virtual service returned by a list operation."
              },
              "VirtualServiceStatusCode": {
                "type": "string",
                "enum": [
                  "ACTIVE",
                  "INACTIVE",
                  "DELETED"
                ]
              },
              "WeightedTarget": {
                "type": "object",
                "required": [
                  "virtualNode",
                  "weight"
                ],
                "properties": {
                  "port": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ListenerPort"
                      },
                      {
                        "description": "The targeted port of the weighted object."
                      }
                    ]
                  },
                  "virtualNode": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ResourceName"
                      },
                      {
                        "description": "The virtual node to associate with the weighted target."
                      }
                    ]
                  },
                  "weight": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/PercentInt"
                      },
                      {
                        "description": "The relative weight of the weighted target."
                      }
                    ]
                  }
                },
                "description": "An object that represents a target and its relative weight. Traffic is distributed across targets according to their relative weight. For example, a weighted target with a relative weight of 50 receives five times as much traffic as one with a relative weight of 10. The total weight for all targets combined must be less than or equal to 100."
              }
            }
          },
          "security": [
            {
              "hmac": []
            }
          ]
        }
        // Exercise and evaluate
        assert.ok(typeof schema === 'object')
    })
    it('should match schema5', () => {
        // Setup
        const schema: OpenAPI = {
          "openapi": "3.0.0",
          "info": {
            "version": "2017-05-18",
            "x-release": "v4",
            "title": "Amazon Athena",
            "description": "<p>Amazon Athena is an interactive query service that lets you use standard SQL to analyze data directly in Amazon S3. You can point Athena at your data in Amazon S3 and run ad-hoc queries and get results in seconds. Athena is serverless, so there is no infrastructure to set up or manage. You pay only for the queries you run. Athena scales automatically—executing queries in parallel—so results are fast, even with large datasets and complex queries. For more information, see <a href=\"http://docs.aws.amazon.com/athena/latest/ug/what-is.html\">What is Amazon Athena</a> in the <i>Amazon Athena User Guide</i>.</p> <p>If you connect to Athena using the JDBC driver, use version 1.1.0 of the driver or later with the Amazon Athena API. Earlier version drivers do not support the API. For more information and to download the driver, see <a href=\"https://docs.aws.amazon.com/athena/latest/ug/connect-with-jdbc.html\">Accessing Amazon Athena with JDBC</a>.</p> <p>For code samples using the Amazon Web Services SDK for Java, see <a href=\"https://docs.aws.amazon.com/athena/latest/ug/code-samples.html\">Examples and Code Samples</a> in the <i>Amazon Athena User Guide</i>.</p>",
            "x-logo": {
              "url": "https://api.apis.guru/v2/cache/logo/https_twitter.com_awscloud_profile_image.png",
              "backgroundColor": "#FFFFFF"
            },
            "termsOfService": "https://aws.amazon.com/service-terms/",
            "contact": {
              "name": "Mike Ralphson",
              "email": "mike.ralphson@gmail.com",
              "url": "https://github.com/mermade/aws2openapi",
              "x-twitter": "PermittedSoc"
            },
            "license": {
              "name": "Apache 2.0 License",
              "url": "http://www.apache.org/licenses/"
            },
            "x-providerName": "amazonaws.com",
            "x-serviceName": "athena",
            "x-origin": [
              {
                "contentType": "application/json",
                "url": "https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/athena-2017-05-18.normal.json",
                "converter": {
                  "url": "https://github.com/mermade/aws2openapi",
                  "version": "1.0.0"
                },
                "x-apisguru-driver": "external"
              }
            ],
            "x-apiClientRegistration": {
              "url": "https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct"
            },
            "x-apisguru-categories": [
              "cloud"
            ],
            "x-preferred": true
          },
          "externalDocs": {
            "description": "Amazon Web Services documentation",
            "url": "https://docs.aws.amazon.com/athena/"
          },
          "servers": [
            {
              "url": "http://athena.{region}.amazonaws.com",
              "variables": {
                "region": {
                  "description": "The AWS region",
                  "enum": [
                    "us-east-1",
                    "us-east-2",
                    "us-west-1",
                    "us-west-2",
                    "us-gov-west-1",
                    "us-gov-east-1",
                    "ca-central-1",
                    "eu-north-1",
                    "eu-west-1",
                    "eu-west-2",
                    "eu-west-3",
                    "eu-central-1",
                    "eu-south-1",
                    "af-south-1",
                    "ap-northeast-1",
                    "ap-northeast-2",
                    "ap-northeast-3",
                    "ap-southeast-1",
                    "ap-southeast-2",
                    "ap-east-1",
                    "ap-south-1",
                    "sa-east-1",
                    "me-south-1"
                  ],
                  "default": "us-east-1"
                }
              },
              "description": "The Amazon Athena multi-region endpoint"
            },
            {
              "url": "https://athena.{region}.amazonaws.com",
              "variables": {
                "region": {
                  "description": "The AWS region",
                  "enum": [
                    "us-east-1",
                    "us-east-2",
                    "us-west-1",
                    "us-west-2",
                    "us-gov-west-1",
                    "us-gov-east-1",
                    "ca-central-1",
                    "eu-north-1",
                    "eu-west-1",
                    "eu-west-2",
                    "eu-west-3",
                    "eu-central-1",
                    "eu-south-1",
                    "af-south-1",
                    "ap-northeast-1",
                    "ap-northeast-2",
                    "ap-northeast-3",
                    "ap-southeast-1",
                    "ap-southeast-2",
                    "ap-east-1",
                    "ap-south-1",
                    "sa-east-1",
                    "me-south-1"
                  ],
                  "default": "us-east-1"
                }
              },
              "description": "The Amazon Athena multi-region endpoint"
            },
            {
              "url": "http://athena.{region}.amazonaws.com.cn",
              "variables": {
                "region": {
                  "description": "The AWS region",
                  "enum": [
                    "cn-north-1",
                    "cn-northwest-1"
                  ],
                  "default": "cn-north-1"
                }
              },
              "description": "The Amazon Athena endpoint for China (Beijing) and China (Ningxia)"
            },
            {
              "url": "https://athena.{region}.amazonaws.com.cn",
              "variables": {
                "region": {
                  "description": "The AWS region",
                  "enum": [
                    "cn-north-1",
                    "cn-northwest-1"
                  ],
                  "default": "cn-north-1"
                }
              },
              "description": "The Amazon Athena endpoint for China (Beijing) and China (Ningxia)"
            }
          ],
          "x-hasEquivalentPaths": true,
          "paths": {
            "/#X-Amz-Target=AmazonAthena.BatchGetNamedQuery": {
              "post": {
                "operationId": "BatchGetNamedQuery",
                "description": "Returns the details of a single named query or a list of up to 50 queries, which you provide as an array of query ID strings. Requires you to have access to the workgroup in which the queries were saved. Use <a>ListNamedQueriesInput</a> to get the list of named query IDs in the specified workgroup. If information could not be retrieved for a submitted query ID, information about the query ID submitted is listed under <a>UnprocessedNamedQueryId</a>. Named queries differ from executed queries. Use <a>BatchGetQueryExecutionInput</a> to get details about each unique query execution, and <a>ListQueryExecutionsInput</a> to get a list of query execution IDs.",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/BatchGetNamedQueryOutput"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "InternalServerException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InternalServerException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "InvalidRequestException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InvalidRequestException"
                        }
                      }
                    }
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/BatchGetNamedQueryInput"
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "X-Amz-Target",
                    "in": "header",
                    "required": true,
                    "schema": {
                      "type": "string",
                      "enum": [
                        "AmazonAthena.BatchGetNamedQuery"
                      ]
                    }
                  }
                ]
              },
              "parameters": [
                {
                  "$ref": "#/components/parameters/X-Amz-Content-Sha256"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Date"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Algorithm"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Credential"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Security-Token"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Signature"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-SignedHeaders"
                }
              ]
            },
            "/#X-Amz-Target=AmazonAthena.BatchGetPreparedStatement": {
              "post": {
                "operationId": "BatchGetPreparedStatement",
                "description": "Returns the details of a single prepared statement or a list of up to 256 prepared statements for the array of prepared statement names that you provide. Requires you to have access to the workgroup to which the prepared statements belong. If a prepared statement cannot be retrieved for the name specified, the statement is listed in <code>UnprocessedPreparedStatementNames</code>.",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/BatchGetPreparedStatementOutput"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "InternalServerException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InternalServerException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "InvalidRequestException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InvalidRequestException"
                        }
                      }
                    }
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/BatchGetPreparedStatementInput"
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "X-Amz-Target",
                    "in": "header",
                    "required": true,
                    "schema": {
                      "type": "string",
                      "enum": [
                        "AmazonAthena.BatchGetPreparedStatement"
                      ]
                    }
                  }
                ]
              },
              "parameters": [
                {
                  "$ref": "#/components/parameters/X-Amz-Content-Sha256"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Date"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Algorithm"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Credential"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Security-Token"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Signature"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-SignedHeaders"
                }
              ]
            },
            "/#X-Amz-Target=AmazonAthena.BatchGetQueryExecution": {
              "post": {
                "operationId": "BatchGetQueryExecution",
                "description": "Returns the details of a single query execution or a list of up to 50 query executions, which you provide as an array of query execution ID strings. Requires you to have access to the workgroup in which the queries ran. To get a list of query execution IDs, use <a>ListQueryExecutionsInput$WorkGroup</a>. Query executions differ from named (saved) queries. Use <a>BatchGetNamedQueryInput</a> to get details about named queries.",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/BatchGetQueryExecutionOutput"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "InternalServerException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InternalServerException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "InvalidRequestException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InvalidRequestException"
                        }
                      }
                    }
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/BatchGetQueryExecutionInput"
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "X-Amz-Target",
                    "in": "header",
                    "required": true,
                    "schema": {
                      "type": "string",
                      "enum": [
                        "AmazonAthena.BatchGetQueryExecution"
                      ]
                    }
                  }
                ]
              },
              "parameters": [
                {
                  "$ref": "#/components/parameters/X-Amz-Content-Sha256"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Date"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Algorithm"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Credential"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Security-Token"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Signature"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-SignedHeaders"
                }
              ]
            },
            "/#X-Amz-Target=AmazonAthena.CreateDataCatalog": {
              "post": {
                "operationId": "CreateDataCatalog",
                "description": "Creates (registers) a data catalog with the specified name and properties. Catalogs created are visible to all users of the same Amazon Web Services account.",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/CreateDataCatalogOutput"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "InternalServerException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InternalServerException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "InvalidRequestException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InvalidRequestException"
                        }
                      }
                    }
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CreateDataCatalogInput"
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "X-Amz-Target",
                    "in": "header",
                    "required": true,
                    "schema": {
                      "type": "string",
                      "enum": [
                        "AmazonAthena.CreateDataCatalog"
                      ]
                    }
                  }
                ]
              },
              "parameters": [
                {
                  "$ref": "#/components/parameters/X-Amz-Content-Sha256"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Date"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Algorithm"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Credential"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Security-Token"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Signature"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-SignedHeaders"
                }
              ]
            },
            "/#X-Amz-Target=AmazonAthena.CreateNamedQuery": {
              "post": {
                "operationId": "CreateNamedQuery",
                "description": "<p>Creates a named query in the specified workgroup. Requires that you have access to the workgroup.</p> <p>For code samples using the Amazon Web Services SDK for Java, see <a href=\"http://docs.aws.amazon.com/athena/latest/ug/code-samples.html\">Examples and Code Samples</a> in the <i>Amazon Athena User Guide</i>.</p>",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/CreateNamedQueryOutput"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "InternalServerException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InternalServerException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "InvalidRequestException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InvalidRequestException"
                        }
                      }
                    }
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CreateNamedQueryInput"
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "X-Amz-Target",
                    "in": "header",
                    "required": true,
                    "schema": {
                      "type": "string",
                      "enum": [
                        "AmazonAthena.CreateNamedQuery"
                      ]
                    }
                  }
                ]
              },
              "parameters": [
                {
                  "$ref": "#/components/parameters/X-Amz-Content-Sha256"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Date"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Algorithm"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Credential"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Security-Token"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Signature"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-SignedHeaders"
                }
              ]
            },
            "/#X-Amz-Target=AmazonAthena.CreateNotebook": {
              "post": {
                "operationId": "CreateNotebook",
                "description": "Creates an empty <code>ipynb</code> file in the specified Apache Spark enabled workgroup. Throws an error if a file in the workgroup with the same name already exists.",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/CreateNotebookOutput"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "InternalServerException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InternalServerException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "InvalidRequestException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InvalidRequestException"
                        }
                      }
                    }
                  },
                  "482": {
                    "description": "TooManyRequestsException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/TooManyRequestsException"
                        }
                      }
                    }
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CreateNotebookInput"
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "X-Amz-Target",
                    "in": "header",
                    "required": true,
                    "schema": {
                      "type": "string",
                      "enum": [
                        "AmazonAthena.CreateNotebook"
                      ]
                    }
                  }
                ]
              },
              "parameters": [
                {
                  "$ref": "#/components/parameters/X-Amz-Content-Sha256"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Date"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Algorithm"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Credential"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Security-Token"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Signature"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-SignedHeaders"
                }
              ]
            },
            "/#X-Amz-Target=AmazonAthena.CreatePreparedStatement": {
              "post": {
                "operationId": "CreatePreparedStatement",
                "description": "Creates a prepared statement for use with SQL queries in Athena.",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/CreatePreparedStatementOutput"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "InternalServerException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InternalServerException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "InvalidRequestException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InvalidRequestException"
                        }
                      }
                    }
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CreatePreparedStatementInput"
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "X-Amz-Target",
                    "in": "header",
                    "required": true,
                    "schema": {
                      "type": "string",
                      "enum": [
                        "AmazonAthena.CreatePreparedStatement"
                      ]
                    }
                  }
                ]
              },
              "parameters": [
                {
                  "$ref": "#/components/parameters/X-Amz-Content-Sha256"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Date"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Algorithm"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Credential"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Security-Token"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Signature"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-SignedHeaders"
                }
              ]
            },
            "/#X-Amz-Target=AmazonAthena.CreatePresignedNotebookUrl": {
              "post": {
                "operationId": "CreatePresignedNotebookUrl",
                "description": "Gets an authentication token and the URL at which the notebook can be accessed. During programmatic access, <code>CreatePresignedNotebookUrl</code> must be called every 10 minutes to refresh the authentication token. For information about granting programmatic access, see <a href=\"https://docs.aws.amazon.com/athena/latest/ug/setting-up.html#setting-up-grant-programmatic-access\">Grant programmatic access</a>.",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/CreatePresignedNotebookUrlResponse"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "InternalServerException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InternalServerException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "InvalidRequestException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InvalidRequestException"
                        }
                      }
                    }
                  },
                  "482": {
                    "description": "ResourceNotFoundException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ResourceNotFoundException"
                        }
                      }
                    }
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CreatePresignedNotebookUrlRequest"
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "X-Amz-Target",
                    "in": "header",
                    "required": true,
                    "schema": {
                      "type": "string",
                      "enum": [
                        "AmazonAthena.CreatePresignedNotebookUrl"
                      ]
                    }
                  }
                ]
              },
              "parameters": [
                {
                  "$ref": "#/components/parameters/X-Amz-Content-Sha256"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Date"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Algorithm"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Credential"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Security-Token"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Signature"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-SignedHeaders"
                }
              ]
            },
            "/#X-Amz-Target=AmazonAthena.CreateWorkGroup": {
              "post": {
                "operationId": "CreateWorkGroup",
                "description": "Creates a workgroup with the specified name. A workgroup can be an Apache Spark enabled workgroup or an Athena SQL workgroup.",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/CreateWorkGroupOutput"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "InternalServerException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InternalServerException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "InvalidRequestException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InvalidRequestException"
                        }
                      }
                    }
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CreateWorkGroupInput"
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "X-Amz-Target",
                    "in": "header",
                    "required": true,
                    "schema": {
                      "type": "string",
                      "enum": [
                        "AmazonAthena.CreateWorkGroup"
                      ]
                    }
                  }
                ]
              },
              "parameters": [
                {
                  "$ref": "#/components/parameters/X-Amz-Content-Sha256"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Date"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Algorithm"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Credential"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Security-Token"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Signature"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-SignedHeaders"
                }
              ]
            },
            "/#X-Amz-Target=AmazonAthena.DeleteDataCatalog": {
              "post": {
                "operationId": "DeleteDataCatalog",
                "description": "Deletes a data catalog.",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/DeleteDataCatalogOutput"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "InternalServerException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InternalServerException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "InvalidRequestException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InvalidRequestException"
                        }
                      }
                    }
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/DeleteDataCatalogInput"
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "X-Amz-Target",
                    "in": "header",
                    "required": true,
                    "schema": {
                      "type": "string",
                      "enum": [
                        "AmazonAthena.DeleteDataCatalog"
                      ]
                    }
                  }
                ]
              },
              "parameters": [
                {
                  "$ref": "#/components/parameters/X-Amz-Content-Sha256"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Date"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Algorithm"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Credential"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Security-Token"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Signature"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-SignedHeaders"
                }
              ]
            },
            "/#X-Amz-Target=AmazonAthena.DeleteNamedQuery": {
              "post": {
                "operationId": "DeleteNamedQuery",
                "description": "<p>Deletes the named query if you have access to the workgroup in which the query was saved.</p> <p>For code samples using the Amazon Web Services SDK for Java, see <a href=\"http://docs.aws.amazon.com/athena/latest/ug/code-samples.html\">Examples and Code Samples</a> in the <i>Amazon Athena User Guide</i>.</p>",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/DeleteNamedQueryOutput"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "InternalServerException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InternalServerException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "InvalidRequestException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InvalidRequestException"
                        }
                      }
                    }
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/DeleteNamedQueryInput"
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "X-Amz-Target",
                    "in": "header",
                    "required": true,
                    "schema": {
                      "type": "string",
                      "enum": [
                        "AmazonAthena.DeleteNamedQuery"
                      ]
                    }
                  }
                ]
              },
              "parameters": [
                {
                  "$ref": "#/components/parameters/X-Amz-Content-Sha256"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Date"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Algorithm"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Credential"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Security-Token"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Signature"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-SignedHeaders"
                }
              ]
            },
            "/#X-Amz-Target=AmazonAthena.DeleteNotebook": {
              "post": {
                "operationId": "DeleteNotebook",
                "description": "Deletes the specified notebook.",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/DeleteNotebookOutput"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "InternalServerException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InternalServerException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "InvalidRequestException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InvalidRequestException"
                        }
                      }
                    }
                  },
                  "482": {
                    "description": "TooManyRequestsException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/TooManyRequestsException"
                        }
                      }
                    }
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/DeleteNotebookInput"
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "X-Amz-Target",
                    "in": "header",
                    "required": true,
                    "schema": {
                      "type": "string",
                      "enum": [
                        "AmazonAthena.DeleteNotebook"
                      ]
                    }
                  }
                ]
              },
              "parameters": [
                {
                  "$ref": "#/components/parameters/X-Amz-Content-Sha256"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Date"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Algorithm"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Credential"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Security-Token"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Signature"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-SignedHeaders"
                }
              ]
            },
            "/#X-Amz-Target=AmazonAthena.DeletePreparedStatement": {
              "post": {
                "operationId": "DeletePreparedStatement",
                "description": "Deletes the prepared statement with the specified name from the specified workgroup.",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/DeletePreparedStatementOutput"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "InternalServerException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InternalServerException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "InvalidRequestException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InvalidRequestException"
                        }
                      }
                    }
                  },
                  "482": {
                    "description": "ResourceNotFoundException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ResourceNotFoundException"
                        }
                      }
                    }
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/DeletePreparedStatementInput"
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "X-Amz-Target",
                    "in": "header",
                    "required": true,
                    "schema": {
                      "type": "string",
                      "enum": [
                        "AmazonAthena.DeletePreparedStatement"
                      ]
                    }
                  }
                ]
              },
              "parameters": [
                {
                  "$ref": "#/components/parameters/X-Amz-Content-Sha256"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Date"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Algorithm"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Credential"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Security-Token"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Signature"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-SignedHeaders"
                }
              ]
            },
            "/#X-Amz-Target=AmazonAthena.DeleteWorkGroup": {
              "post": {
                "operationId": "DeleteWorkGroup",
                "description": "Deletes the workgroup with the specified name. The primary workgroup cannot be deleted.",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/DeleteWorkGroupOutput"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "InternalServerException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InternalServerException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "InvalidRequestException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InvalidRequestException"
                        }
                      }
                    }
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/DeleteWorkGroupInput"
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "X-Amz-Target",
                    "in": "header",
                    "required": true,
                    "schema": {
                      "type": "string",
                      "enum": [
                        "AmazonAthena.DeleteWorkGroup"
                      ]
                    }
                  }
                ]
              },
              "parameters": [
                {
                  "$ref": "#/components/parameters/X-Amz-Content-Sha256"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Date"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Algorithm"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Credential"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Security-Token"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Signature"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-SignedHeaders"
                }
              ]
            },
            "/#X-Amz-Target=AmazonAthena.ExportNotebook": {
              "post": {
                "operationId": "ExportNotebook",
                "description": "Exports the specified notebook and its metadata.",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ExportNotebookOutput"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "InternalServerException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InternalServerException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "InvalidRequestException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InvalidRequestException"
                        }
                      }
                    }
                  },
                  "482": {
                    "description": "TooManyRequestsException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/TooManyRequestsException"
                        }
                      }
                    }
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ExportNotebookInput"
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "X-Amz-Target",
                    "in": "header",
                    "required": true,
                    "schema": {
                      "type": "string",
                      "enum": [
                        "AmazonAthena.ExportNotebook"
                      ]
                    }
                  }
                ]
              },
              "parameters": [
                {
                  "$ref": "#/components/parameters/X-Amz-Content-Sha256"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Date"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Algorithm"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Credential"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Security-Token"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Signature"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-SignedHeaders"
                }
              ]
            },
            "/#X-Amz-Target=AmazonAthena.GetCalculationExecution": {
              "post": {
                "operationId": "GetCalculationExecution",
                "description": "Describes a previously submitted calculation execution.",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/GetCalculationExecutionResponse"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "InternalServerException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InternalServerException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "InvalidRequestException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InvalidRequestException"
                        }
                      }
                    }
                  },
                  "482": {
                    "description": "ResourceNotFoundException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ResourceNotFoundException"
                        }
                      }
                    }
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/GetCalculationExecutionRequest"
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "X-Amz-Target",
                    "in": "header",
                    "required": true,
                    "schema": {
                      "type": "string",
                      "enum": [
                        "AmazonAthena.GetCalculationExecution"
                      ]
                    }
                  }
                ]
              },
              "parameters": [
                {
                  "$ref": "#/components/parameters/X-Amz-Content-Sha256"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Date"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Algorithm"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Credential"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Security-Token"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Signature"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-SignedHeaders"
                }
              ]
            },
            "/#X-Amz-Target=AmazonAthena.GetCalculationExecutionCode": {
              "post": {
                "operationId": "GetCalculationExecutionCode",
                "description": "Retrieves the unencrypted code that was executed for the calculation.",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/GetCalculationExecutionCodeResponse"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "InternalServerException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InternalServerException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "InvalidRequestException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InvalidRequestException"
                        }
                      }
                    }
                  },
                  "482": {
                    "description": "ResourceNotFoundException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ResourceNotFoundException"
                        }
                      }
                    }
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/GetCalculationExecutionCodeRequest"
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "X-Amz-Target",
                    "in": "header",
                    "required": true,
                    "schema": {
                      "type": "string",
                      "enum": [
                        "AmazonAthena.GetCalculationExecutionCode"
                      ]
                    }
                  }
                ]
              },
              "parameters": [
                {
                  "$ref": "#/components/parameters/X-Amz-Content-Sha256"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Date"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Algorithm"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Credential"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Security-Token"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Signature"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-SignedHeaders"
                }
              ]
            },
            "/#X-Amz-Target=AmazonAthena.GetCalculationExecutionStatus": {
              "post": {
                "operationId": "GetCalculationExecutionStatus",
                "description": "Gets the status of a current calculation.",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/GetCalculationExecutionStatusResponse"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "InternalServerException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InternalServerException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "InvalidRequestException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InvalidRequestException"
                        }
                      }
                    }
                  },
                  "482": {
                    "description": "ResourceNotFoundException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ResourceNotFoundException"
                        }
                      }
                    }
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/GetCalculationExecutionStatusRequest"
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "X-Amz-Target",
                    "in": "header",
                    "required": true,
                    "schema": {
                      "type": "string",
                      "enum": [
                        "AmazonAthena.GetCalculationExecutionStatus"
                      ]
                    }
                  }
                ]
              },
              "parameters": [
                {
                  "$ref": "#/components/parameters/X-Amz-Content-Sha256"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Date"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Algorithm"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Credential"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Security-Token"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Signature"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-SignedHeaders"
                }
              ]
            },
            "/#X-Amz-Target=AmazonAthena.GetDataCatalog": {
              "post": {
                "operationId": "GetDataCatalog",
                "description": "Returns the specified data catalog.",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/GetDataCatalogOutput"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "InternalServerException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InternalServerException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "InvalidRequestException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InvalidRequestException"
                        }
                      }
                    }
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/GetDataCatalogInput"
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "X-Amz-Target",
                    "in": "header",
                    "required": true,
                    "schema": {
                      "type": "string",
                      "enum": [
                        "AmazonAthena.GetDataCatalog"
                      ]
                    }
                  }
                ]
              },
              "parameters": [
                {
                  "$ref": "#/components/parameters/X-Amz-Content-Sha256"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Date"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Algorithm"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Credential"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Security-Token"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Signature"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-SignedHeaders"
                }
              ]
            },
            "/#X-Amz-Target=AmazonAthena.GetDatabase": {
              "post": {
                "operationId": "GetDatabase",
                "description": "Returns a database object for the specified database and data catalog.",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/GetDatabaseOutput"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "InternalServerException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InternalServerException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "InvalidRequestException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InvalidRequestException"
                        }
                      }
                    }
                  },
                  "482": {
                    "description": "MetadataException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/MetadataException"
                        }
                      }
                    }
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/GetDatabaseInput"
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "X-Amz-Target",
                    "in": "header",
                    "required": true,
                    "schema": {
                      "type": "string",
                      "enum": [
                        "AmazonAthena.GetDatabase"
                      ]
                    }
                  }
                ]
              },
              "parameters": [
                {
                  "$ref": "#/components/parameters/X-Amz-Content-Sha256"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Date"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Algorithm"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Credential"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Security-Token"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Signature"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-SignedHeaders"
                }
              ]
            },
            "/#X-Amz-Target=AmazonAthena.GetNamedQuery": {
              "post": {
                "operationId": "GetNamedQuery",
                "description": "Returns information about a single query. Requires that you have access to the workgroup in which the query was saved.",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/GetNamedQueryOutput"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "InternalServerException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InternalServerException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "InvalidRequestException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InvalidRequestException"
                        }
                      }
                    }
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/GetNamedQueryInput"
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "X-Amz-Target",
                    "in": "header",
                    "required": true,
                    "schema": {
                      "type": "string",
                      "enum": [
                        "AmazonAthena.GetNamedQuery"
                      ]
                    }
                  }
                ]
              },
              "parameters": [
                {
                  "$ref": "#/components/parameters/X-Amz-Content-Sha256"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Date"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Algorithm"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Credential"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Security-Token"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Signature"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-SignedHeaders"
                }
              ]
            },
            "/#X-Amz-Target=AmazonAthena.GetNotebookMetadata": {
              "post": {
                "operationId": "GetNotebookMetadata",
                "description": "Retrieves notebook metadata for the specified notebook ID.",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/GetNotebookMetadataOutput"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "InternalServerException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InternalServerException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "InvalidRequestException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InvalidRequestException"
                        }
                      }
                    }
                  },
                  "482": {
                    "description": "TooManyRequestsException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/TooManyRequestsException"
                        }
                      }
                    }
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/GetNotebookMetadataInput"
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "X-Amz-Target",
                    "in": "header",
                    "required": true,
                    "schema": {
                      "type": "string",
                      "enum": [
                        "AmazonAthena.GetNotebookMetadata"
                      ]
                    }
                  }
                ]
              },
              "parameters": [
                {
                  "$ref": "#/components/parameters/X-Amz-Content-Sha256"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Date"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Algorithm"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Credential"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Security-Token"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Signature"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-SignedHeaders"
                }
              ]
            },
            "/#X-Amz-Target=AmazonAthena.GetPreparedStatement": {
              "post": {
                "operationId": "GetPreparedStatement",
                "description": "Retrieves the prepared statement with the specified name from the specified workgroup.",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/GetPreparedStatementOutput"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "InternalServerException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InternalServerException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "InvalidRequestException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InvalidRequestException"
                        }
                      }
                    }
                  },
                  "482": {
                    "description": "ResourceNotFoundException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ResourceNotFoundException"
                        }
                      }
                    }
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/GetPreparedStatementInput"
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "X-Amz-Target",
                    "in": "header",
                    "required": true,
                    "schema": {
                      "type": "string",
                      "enum": [
                        "AmazonAthena.GetPreparedStatement"
                      ]
                    }
                  }
                ]
              },
              "parameters": [
                {
                  "$ref": "#/components/parameters/X-Amz-Content-Sha256"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Date"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Algorithm"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Credential"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Security-Token"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Signature"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-SignedHeaders"
                }
              ]
            },
            "/#X-Amz-Target=AmazonAthena.GetQueryExecution": {
              "post": {
                "operationId": "GetQueryExecution",
                "description": "Returns information about a single execution of a query if you have access to the workgroup in which the query ran. Each time a query executes, information about the query execution is saved with a unique ID.",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/GetQueryExecutionOutput"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "InternalServerException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InternalServerException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "InvalidRequestException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InvalidRequestException"
                        }
                      }
                    }
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/GetQueryExecutionInput"
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "X-Amz-Target",
                    "in": "header",
                    "required": true,
                    "schema": {
                      "type": "string",
                      "enum": [
                        "AmazonAthena.GetQueryExecution"
                      ]
                    }
                  }
                ]
              },
              "parameters": [
                {
                  "$ref": "#/components/parameters/X-Amz-Content-Sha256"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Date"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Algorithm"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Credential"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Security-Token"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Signature"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-SignedHeaders"
                }
              ]
            },
            "/#X-Amz-Target=AmazonAthena.GetQueryResults": {
              "post": {
                "operationId": "GetQueryResults",
                "description": "<p>Streams the results of a single query execution specified by <code>QueryExecutionId</code> from the Athena query results location in Amazon S3. For more information, see <a href=\"https://docs.aws.amazon.com/athena/latest/ug/querying.html\">Working with query results, recent queries, and output files</a> in the <i>Amazon Athena User Guide</i>. This request does not execute the query but returns results. Use <a>StartQueryExecution</a> to run a query.</p> <p>To stream query results successfully, the IAM principal with permission to call <code>GetQueryResults</code> also must have permissions to the Amazon S3 <code>GetObject</code> action for the Athena query results location.</p> <important> <p>IAM principals with permission to the Amazon S3 <code>GetObject</code> action for the query results location are able to retrieve query results from Amazon S3 even if permission to the <code>GetQueryResults</code> action is denied. To restrict user or role access, ensure that Amazon S3 permissions to the Athena query location are denied.</p> </important>",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/GetQueryResultsOutput"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "InternalServerException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InternalServerException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "InvalidRequestException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InvalidRequestException"
                        }
                      }
                    }
                  },
                  "482": {
                    "description": "TooManyRequestsException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/TooManyRequestsException"
                        }
                      }
                    }
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/GetQueryResultsInput"
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "MaxResults",
                    "in": "query",
                    "schema": {
                      "type": "string"
                    },
                    "description": "Pagination limit",
                    "required": false
                  },
                  {
                    "name": "NextToken",
                    "in": "query",
                    "schema": {
                      "type": "string"
                    },
                    "description": "Pagination token",
                    "required": false
                  },
                  {
                    "name": "X-Amz-Target",
                    "in": "header",
                    "required": true,
                    "schema": {
                      "type": "string",
                      "enum": [
                        "AmazonAthena.GetQueryResults"
                      ]
                    }
                  }
                ]
              },
              "parameters": [
                {
                  "$ref": "#/components/parameters/X-Amz-Content-Sha256"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Date"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Algorithm"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Credential"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Security-Token"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Signature"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-SignedHeaders"
                }
              ]
            },
            "/#X-Amz-Target=AmazonAthena.GetQueryRuntimeStatistics": {
              "post": {
                "operationId": "GetQueryRuntimeStatistics",
                "description": "Returns query execution runtime statistics related to a single execution of a query if you have access to the workgroup in which the query ran. Query execution runtime statistics are returned only when <a>QueryExecutionStatus$State</a> is in a SUCCEEDED or FAILED state. Stage-level input and output row count and data size statistics are not shown when a query has row-level filters defined in Lake Formation.",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/GetQueryRuntimeStatisticsOutput"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "InternalServerException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InternalServerException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "InvalidRequestException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InvalidRequestException"
                        }
                      }
                    }
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/GetQueryRuntimeStatisticsInput"
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "X-Amz-Target",
                    "in": "header",
                    "required": true,
                    "schema": {
                      "type": "string",
                      "enum": [
                        "AmazonAthena.GetQueryRuntimeStatistics"
                      ]
                    }
                  }
                ]
              },
              "parameters": [
                {
                  "$ref": "#/components/parameters/X-Amz-Content-Sha256"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Date"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Algorithm"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Credential"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Security-Token"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Signature"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-SignedHeaders"
                }
              ]
            },
            "/#X-Amz-Target=AmazonAthena.GetSession": {
              "post": {
                "operationId": "GetSession",
                "description": "Gets the full details of a previously created session, including the session status and configuration.",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/GetSessionResponse"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "InternalServerException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InternalServerException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "InvalidRequestException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InvalidRequestException"
                        }
                      }
                    }
                  },
                  "482": {
                    "description": "ResourceNotFoundException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ResourceNotFoundException"
                        }
                      }
                    }
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/GetSessionRequest"
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "X-Amz-Target",
                    "in": "header",
                    "required": true,
                    "schema": {
                      "type": "string",
                      "enum": [
                        "AmazonAthena.GetSession"
                      ]
                    }
                  }
                ]
              },
              "parameters": [
                {
                  "$ref": "#/components/parameters/X-Amz-Content-Sha256"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Date"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Algorithm"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Credential"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Security-Token"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Signature"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-SignedHeaders"
                }
              ]
            },
            "/#X-Amz-Target=AmazonAthena.GetSessionStatus": {
              "post": {
                "operationId": "GetSessionStatus",
                "description": "Gets the current status of a session.",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/GetSessionStatusResponse"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "InternalServerException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InternalServerException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "InvalidRequestException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InvalidRequestException"
                        }
                      }
                    }
                  },
                  "482": {
                    "description": "ResourceNotFoundException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ResourceNotFoundException"
                        }
                      }
                    }
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/GetSessionStatusRequest"
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "X-Amz-Target",
                    "in": "header",
                    "required": true,
                    "schema": {
                      "type": "string",
                      "enum": [
                        "AmazonAthena.GetSessionStatus"
                      ]
                    }
                  }
                ]
              },
              "parameters": [
                {
                  "$ref": "#/components/parameters/X-Amz-Content-Sha256"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Date"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Algorithm"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Credential"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Security-Token"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Signature"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-SignedHeaders"
                }
              ]
            },
            "/#X-Amz-Target=AmazonAthena.GetTableMetadata": {
              "post": {
                "operationId": "GetTableMetadata",
                "description": "Returns table metadata for the specified catalog, database, and table.",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/GetTableMetadataOutput"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "InternalServerException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InternalServerException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "InvalidRequestException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InvalidRequestException"
                        }
                      }
                    }
                  },
                  "482": {
                    "description": "MetadataException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/MetadataException"
                        }
                      }
                    }
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/GetTableMetadataInput"
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "X-Amz-Target",
                    "in": "header",
                    "required": true,
                    "schema": {
                      "type": "string",
                      "enum": [
                        "AmazonAthena.GetTableMetadata"
                      ]
                    }
                  }
                ]
              },
              "parameters": [
                {
                  "$ref": "#/components/parameters/X-Amz-Content-Sha256"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Date"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Algorithm"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Credential"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Security-Token"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Signature"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-SignedHeaders"
                }
              ]
            },
            "/#X-Amz-Target=AmazonAthena.GetWorkGroup": {
              "post": {
                "operationId": "GetWorkGroup",
                "description": "Returns information about the workgroup with the specified name.",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/GetWorkGroupOutput"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "InternalServerException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InternalServerException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "InvalidRequestException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InvalidRequestException"
                        }
                      }
                    }
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/GetWorkGroupInput"
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "X-Amz-Target",
                    "in": "header",
                    "required": true,
                    "schema": {
                      "type": "string",
                      "enum": [
                        "AmazonAthena.GetWorkGroup"
                      ]
                    }
                  }
                ]
              },
              "parameters": [
                {
                  "$ref": "#/components/parameters/X-Amz-Content-Sha256"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Date"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Algorithm"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Credential"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Security-Token"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Signature"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-SignedHeaders"
                }
              ]
            },
            "/#X-Amz-Target=AmazonAthena.ImportNotebook": {
              "post": {
                "operationId": "ImportNotebook",
                "description": "Imports a single <code>ipynb</code> file to a Spark enabled workgroup. The maximum file size that can be imported is 10 megabytes. If an <code>ipynb</code> file with the same name already exists in the workgroup, throws an error.",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ImportNotebookOutput"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "InternalServerException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InternalServerException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "InvalidRequestException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InvalidRequestException"
                        }
                      }
                    }
                  },
                  "482": {
                    "description": "TooManyRequestsException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/TooManyRequestsException"
                        }
                      }
                    }
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ImportNotebookInput"
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "X-Amz-Target",
                    "in": "header",
                    "required": true,
                    "schema": {
                      "type": "string",
                      "enum": [
                        "AmazonAthena.ImportNotebook"
                      ]
                    }
                  }
                ]
              },
              "parameters": [
                {
                  "$ref": "#/components/parameters/X-Amz-Content-Sha256"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Date"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Algorithm"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Credential"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Security-Token"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Signature"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-SignedHeaders"
                }
              ]
            },
            "/#X-Amz-Target=AmazonAthena.ListApplicationDPUSizes": {
              "post": {
                "operationId": "ListApplicationDPUSizes",
                "description": "Returns the supported DPU sizes for the supported application runtimes (for example, <code>Athena notebook version 1</code>). ",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ListApplicationDPUSizesOutput"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "InternalServerException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InternalServerException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "InvalidRequestException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InvalidRequestException"
                        }
                      }
                    }
                  },
                  "482": {
                    "description": "TooManyRequestsException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/TooManyRequestsException"
                        }
                      }
                    }
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ListApplicationDPUSizesInput"
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "MaxResults",
                    "in": "query",
                    "schema": {
                      "type": "string"
                    },
                    "description": "Pagination limit",
                    "required": false
                  },
                  {
                    "name": "NextToken",
                    "in": "query",
                    "schema": {
                      "type": "string"
                    },
                    "description": "Pagination token",
                    "required": false
                  },
                  {
                    "name": "X-Amz-Target",
                    "in": "header",
                    "required": true,
                    "schema": {
                      "type": "string",
                      "enum": [
                        "AmazonAthena.ListApplicationDPUSizes"
                      ]
                    }
                  }
                ]
              },
              "parameters": [
                {
                  "$ref": "#/components/parameters/X-Amz-Content-Sha256"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Date"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Algorithm"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Credential"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Security-Token"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Signature"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-SignedHeaders"
                }
              ]
            },
            "/#X-Amz-Target=AmazonAthena.ListCalculationExecutions": {
              "post": {
                "operationId": "ListCalculationExecutions",
                "description": "Lists the calculations that have been submitted to a session in descending order. Newer calculations are listed first; older calculations are listed later.",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ListCalculationExecutionsResponse"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "InternalServerException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InternalServerException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "InvalidRequestException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InvalidRequestException"
                        }
                      }
                    }
                  },
                  "482": {
                    "description": "ResourceNotFoundException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ResourceNotFoundException"
                        }
                      }
                    }
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ListCalculationExecutionsRequest"
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "MaxResults",
                    "in": "query",
                    "schema": {
                      "type": "string"
                    },
                    "description": "Pagination limit",
                    "required": false
                  },
                  {
                    "name": "NextToken",
                    "in": "query",
                    "schema": {
                      "type": "string"
                    },
                    "description": "Pagination token",
                    "required": false
                  },
                  {
                    "name": "X-Amz-Target",
                    "in": "header",
                    "required": true,
                    "schema": {
                      "type": "string",
                      "enum": [
                        "AmazonAthena.ListCalculationExecutions"
                      ]
                    }
                  }
                ]
              },
              "parameters": [
                {
                  "$ref": "#/components/parameters/X-Amz-Content-Sha256"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Date"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Algorithm"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Credential"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Security-Token"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Signature"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-SignedHeaders"
                }
              ]
            },
            "/#X-Amz-Target=AmazonAthena.ListDataCatalogs": {
              "post": {
                "operationId": "ListDataCatalogs",
                "description": "<p>Lists the data catalogs in the current Amazon Web Services account.</p> <note> <p>In the Athena console, data catalogs are listed as \"data sources\" on the <b>Data sources</b> page under the <b>Data source name</b> column.</p> </note>",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ListDataCatalogsOutput"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "InternalServerException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InternalServerException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "InvalidRequestException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InvalidRequestException"
                        }
                      }
                    }
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ListDataCatalogsInput"
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "MaxResults",
                    "in": "query",
                    "schema": {
                      "type": "string"
                    },
                    "description": "Pagination limit",
                    "required": false
                  },
                  {
                    "name": "NextToken",
                    "in": "query",
                    "schema": {
                      "type": "string"
                    },
                    "description": "Pagination token",
                    "required": false
                  },
                  {
                    "name": "X-Amz-Target",
                    "in": "header",
                    "required": true,
                    "schema": {
                      "type": "string",
                      "enum": [
                        "AmazonAthena.ListDataCatalogs"
                      ]
                    }
                  }
                ]
              },
              "parameters": [
                {
                  "$ref": "#/components/parameters/X-Amz-Content-Sha256"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Date"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Algorithm"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Credential"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Security-Token"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Signature"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-SignedHeaders"
                }
              ]
            },
            "/#X-Amz-Target=AmazonAthena.ListDatabases": {
              "post": {
                "operationId": "ListDatabases",
                "description": "Lists the databases in the specified data catalog.",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ListDatabasesOutput"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "InternalServerException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InternalServerException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "InvalidRequestException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InvalidRequestException"
                        }
                      }
                    }
                  },
                  "482": {
                    "description": "MetadataException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/MetadataException"
                        }
                      }
                    }
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ListDatabasesInput"
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "MaxResults",
                    "in": "query",
                    "schema": {
                      "type": "string"
                    },
                    "description": "Pagination limit",
                    "required": false
                  },
                  {
                    "name": "NextToken",
                    "in": "query",
                    "schema": {
                      "type": "string"
                    },
                    "description": "Pagination token",
                    "required": false
                  },
                  {
                    "name": "X-Amz-Target",
                    "in": "header",
                    "required": true,
                    "schema": {
                      "type": "string",
                      "enum": [
                        "AmazonAthena.ListDatabases"
                      ]
                    }
                  }
                ]
              },
              "parameters": [
                {
                  "$ref": "#/components/parameters/X-Amz-Content-Sha256"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Date"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Algorithm"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Credential"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Security-Token"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Signature"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-SignedHeaders"
                }
              ]
            },
            "/#X-Amz-Target=AmazonAthena.ListEngineVersions": {
              "post": {
                "operationId": "ListEngineVersions",
                "description": "Returns a list of engine versions that are available to choose from, including the Auto option.",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ListEngineVersionsOutput"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "InternalServerException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InternalServerException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "InvalidRequestException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InvalidRequestException"
                        }
                      }
                    }
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ListEngineVersionsInput"
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "MaxResults",
                    "in": "query",
                    "schema": {
                      "type": "string"
                    },
                    "description": "Pagination limit",
                    "required": false
                  },
                  {
                    "name": "NextToken",
                    "in": "query",
                    "schema": {
                      "type": "string"
                    },
                    "description": "Pagination token",
                    "required": false
                  },
                  {
                    "name": "X-Amz-Target",
                    "in": "header",
                    "required": true,
                    "schema": {
                      "type": "string",
                      "enum": [
                        "AmazonAthena.ListEngineVersions"
                      ]
                    }
                  }
                ]
              },
              "parameters": [
                {
                  "$ref": "#/components/parameters/X-Amz-Content-Sha256"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Date"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Algorithm"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Credential"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Security-Token"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Signature"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-SignedHeaders"
                }
              ]
            },
            "/#X-Amz-Target=AmazonAthena.ListExecutors": {
              "post": {
                "operationId": "ListExecutors",
                "description": "Lists, in descending order, the executors that joined a session. Newer executors are listed first; older executors are listed later. The result can be optionally filtered by state.",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ListExecutorsResponse"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "InternalServerException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InternalServerException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "InvalidRequestException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InvalidRequestException"
                        }
                      }
                    }
                  },
                  "482": {
                    "description": "ResourceNotFoundException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ResourceNotFoundException"
                        }
                      }
                    }
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ListExecutorsRequest"
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "MaxResults",
                    "in": "query",
                    "schema": {
                      "type": "string"
                    },
                    "description": "Pagination limit",
                    "required": false
                  },
                  {
                    "name": "NextToken",
                    "in": "query",
                    "schema": {
                      "type": "string"
                    },
                    "description": "Pagination token",
                    "required": false
                  },
                  {
                    "name": "X-Amz-Target",
                    "in": "header",
                    "required": true,
                    "schema": {
                      "type": "string",
                      "enum": [
                        "AmazonAthena.ListExecutors"
                      ]
                    }
                  }
                ]
              },
              "parameters": [
                {
                  "$ref": "#/components/parameters/X-Amz-Content-Sha256"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Date"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Algorithm"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Credential"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Security-Token"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Signature"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-SignedHeaders"
                }
              ]
            },
            "/#X-Amz-Target=AmazonAthena.ListNamedQueries": {
              "post": {
                "operationId": "ListNamedQueries",
                "description": "<p>Provides a list of available query IDs only for queries saved in the specified workgroup. Requires that you have access to the specified workgroup. If a workgroup is not specified, lists the saved queries for the primary workgroup.</p> <p>For code samples using the Amazon Web Services SDK for Java, see <a href=\"http://docs.aws.amazon.com/athena/latest/ug/code-samples.html\">Examples and Code Samples</a> in the <i>Amazon Athena User Guide</i>.</p>",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ListNamedQueriesOutput"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "InternalServerException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InternalServerException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "InvalidRequestException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InvalidRequestException"
                        }
                      }
                    }
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ListNamedQueriesInput"
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "MaxResults",
                    "in": "query",
                    "schema": {
                      "type": "string"
                    },
                    "description": "Pagination limit",
                    "required": false
                  },
                  {
                    "name": "NextToken",
                    "in": "query",
                    "schema": {
                      "type": "string"
                    },
                    "description": "Pagination token",
                    "required": false
                  },
                  {
                    "name": "X-Amz-Target",
                    "in": "header",
                    "required": true,
                    "schema": {
                      "type": "string",
                      "enum": [
                        "AmazonAthena.ListNamedQueries"
                      ]
                    }
                  }
                ]
              },
              "parameters": [
                {
                  "$ref": "#/components/parameters/X-Amz-Content-Sha256"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Date"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Algorithm"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Credential"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Security-Token"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Signature"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-SignedHeaders"
                }
              ]
            },
            "/#X-Amz-Target=AmazonAthena.ListNotebookMetadata": {
              "post": {
                "operationId": "ListNotebookMetadata",
                "description": "Displays the notebook files for the specified workgroup in paginated format.",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ListNotebookMetadataOutput"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "InternalServerException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InternalServerException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "InvalidRequestException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InvalidRequestException"
                        }
                      }
                    }
                  },
                  "482": {
                    "description": "TooManyRequestsException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/TooManyRequestsException"
                        }
                      }
                    }
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ListNotebookMetadataInput"
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "X-Amz-Target",
                    "in": "header",
                    "required": true,
                    "schema": {
                      "type": "string",
                      "enum": [
                        "AmazonAthena.ListNotebookMetadata"
                      ]
                    }
                  }
                ]
              },
              "parameters": [
                {
                  "$ref": "#/components/parameters/X-Amz-Content-Sha256"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Date"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Algorithm"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Credential"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Security-Token"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Signature"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-SignedHeaders"
                }
              ]
            },
            "/#X-Amz-Target=AmazonAthena.ListNotebookSessions": {
              "post": {
                "operationId": "ListNotebookSessions",
                "description": "Lists, in descending order, the sessions that have been created in a notebook that are in an active state like <code>CREATING</code>, <code>CREATED</code>, <code>IDLE</code> or <code>BUSY</code>. Newer sessions are listed first; older sessions are listed later.",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ListNotebookSessionsResponse"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "InternalServerException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InternalServerException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "InvalidRequestException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InvalidRequestException"
                        }
                      }
                    }
                  },
                  "482": {
                    "description": "ResourceNotFoundException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ResourceNotFoundException"
                        }
                      }
                    }
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ListNotebookSessionsRequest"
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "X-Amz-Target",
                    "in": "header",
                    "required": true,
                    "schema": {
                      "type": "string",
                      "enum": [
                        "AmazonAthena.ListNotebookSessions"
                      ]
                    }
                  }
                ]
              },
              "parameters": [
                {
                  "$ref": "#/components/parameters/X-Amz-Content-Sha256"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Date"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Algorithm"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Credential"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Security-Token"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Signature"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-SignedHeaders"
                }
              ]
            },
            "/#X-Amz-Target=AmazonAthena.ListPreparedStatements": {
              "post": {
                "operationId": "ListPreparedStatements",
                "description": "Lists the prepared statements in the specified workgroup.",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ListPreparedStatementsOutput"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "InternalServerException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InternalServerException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "InvalidRequestException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InvalidRequestException"
                        }
                      }
                    }
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ListPreparedStatementsInput"
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "MaxResults",
                    "in": "query",
                    "schema": {
                      "type": "string"
                    },
                    "description": "Pagination limit",
                    "required": false
                  },
                  {
                    "name": "NextToken",
                    "in": "query",
                    "schema": {
                      "type": "string"
                    },
                    "description": "Pagination token",
                    "required": false
                  },
                  {
                    "name": "X-Amz-Target",
                    "in": "header",
                    "required": true,
                    "schema": {
                      "type": "string",
                      "enum": [
                        "AmazonAthena.ListPreparedStatements"
                      ]
                    }
                  }
                ]
              },
              "parameters": [
                {
                  "$ref": "#/components/parameters/X-Amz-Content-Sha256"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Date"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Algorithm"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Credential"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Security-Token"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Signature"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-SignedHeaders"
                }
              ]
            },
            "/#X-Amz-Target=AmazonAthena.ListQueryExecutions": {
              "post": {
                "operationId": "ListQueryExecutions",
                "description": "<p>Provides a list of available query execution IDs for the queries in the specified workgroup. If a workgroup is not specified, returns a list of query execution IDs for the primary workgroup. Requires you to have access to the workgroup in which the queries ran.</p> <p>For code samples using the Amazon Web Services SDK for Java, see <a href=\"http://docs.aws.amazon.com/athena/latest/ug/code-samples.html\">Examples and Code Samples</a> in the <i>Amazon Athena User Guide</i>.</p>",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ListQueryExecutionsOutput"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "InternalServerException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InternalServerException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "InvalidRequestException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InvalidRequestException"
                        }
                      }
                    }
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ListQueryExecutionsInput"
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "MaxResults",
                    "in": "query",
                    "schema": {
                      "type": "string"
                    },
                    "description": "Pagination limit",
                    "required": false
                  },
                  {
                    "name": "NextToken",
                    "in": "query",
                    "schema": {
                      "type": "string"
                    },
                    "description": "Pagination token",
                    "required": false
                  },
                  {
                    "name": "X-Amz-Target",
                    "in": "header",
                    "required": true,
                    "schema": {
                      "type": "string",
                      "enum": [
                        "AmazonAthena.ListQueryExecutions"
                      ]
                    }
                  }
                ]
              },
              "parameters": [
                {
                  "$ref": "#/components/parameters/X-Amz-Content-Sha256"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Date"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Algorithm"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Credential"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Security-Token"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Signature"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-SignedHeaders"
                }
              ]
            },
            "/#X-Amz-Target=AmazonAthena.ListSessions": {
              "post": {
                "operationId": "ListSessions",
                "description": "Lists the sessions in a workgroup that are in an active state like <code>CREATING</code>, <code>CREATED</code>, <code>IDLE</code>, or <code>BUSY</code>. Newer sessions are listed first; older sessions are listed later.",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ListSessionsResponse"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "InternalServerException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InternalServerException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "InvalidRequestException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InvalidRequestException"
                        }
                      }
                    }
                  },
                  "482": {
                    "description": "ResourceNotFoundException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ResourceNotFoundException"
                        }
                      }
                    }
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ListSessionsRequest"
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "MaxResults",
                    "in": "query",
                    "schema": {
                      "type": "string"
                    },
                    "description": "Pagination limit",
                    "required": false
                  },
                  {
                    "name": "NextToken",
                    "in": "query",
                    "schema": {
                      "type": "string"
                    },
                    "description": "Pagination token",
                    "required": false
                  },
                  {
                    "name": "X-Amz-Target",
                    "in": "header",
                    "required": true,
                    "schema": {
                      "type": "string",
                      "enum": [
                        "AmazonAthena.ListSessions"
                      ]
                    }
                  }
                ]
              },
              "parameters": [
                {
                  "$ref": "#/components/parameters/X-Amz-Content-Sha256"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Date"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Algorithm"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Credential"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Security-Token"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Signature"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-SignedHeaders"
                }
              ]
            },
            "/#X-Amz-Target=AmazonAthena.ListTableMetadata": {
              "post": {
                "operationId": "ListTableMetadata",
                "description": "Lists the metadata for the tables in the specified data catalog database.",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ListTableMetadataOutput"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "InternalServerException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InternalServerException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "InvalidRequestException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InvalidRequestException"
                        }
                      }
                    }
                  },
                  "482": {
                    "description": "MetadataException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/MetadataException"
                        }
                      }
                    }
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ListTableMetadataInput"
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "MaxResults",
                    "in": "query",
                    "schema": {
                      "type": "string"
                    },
                    "description": "Pagination limit",
                    "required": false
                  },
                  {
                    "name": "NextToken",
                    "in": "query",
                    "schema": {
                      "type": "string"
                    },
                    "description": "Pagination token",
                    "required": false
                  },
                  {
                    "name": "X-Amz-Target",
                    "in": "header",
                    "required": true,
                    "schema": {
                      "type": "string",
                      "enum": [
                        "AmazonAthena.ListTableMetadata"
                      ]
                    }
                  }
                ]
              },
              "parameters": [
                {
                  "$ref": "#/components/parameters/X-Amz-Content-Sha256"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Date"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Algorithm"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Credential"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Security-Token"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Signature"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-SignedHeaders"
                }
              ]
            },
            "/#X-Amz-Target=AmazonAthena.ListTagsForResource": {
              "post": {
                "operationId": "ListTagsForResource",
                "description": "Lists the tags associated with an Athena workgroup or data catalog resource.",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ListTagsForResourceOutput"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "InternalServerException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InternalServerException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "InvalidRequestException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InvalidRequestException"
                        }
                      }
                    }
                  },
                  "482": {
                    "description": "ResourceNotFoundException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ResourceNotFoundException"
                        }
                      }
                    }
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ListTagsForResourceInput"
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "MaxResults",
                    "in": "query",
                    "schema": {
                      "type": "string"
                    },
                    "description": "Pagination limit",
                    "required": false
                  },
                  {
                    "name": "NextToken",
                    "in": "query",
                    "schema": {
                      "type": "string"
                    },
                    "description": "Pagination token",
                    "required": false
                  },
                  {
                    "name": "X-Amz-Target",
                    "in": "header",
                    "required": true,
                    "schema": {
                      "type": "string",
                      "enum": [
                        "AmazonAthena.ListTagsForResource"
                      ]
                    }
                  }
                ]
              },
              "parameters": [
                {
                  "$ref": "#/components/parameters/X-Amz-Content-Sha256"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Date"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Algorithm"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Credential"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Security-Token"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Signature"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-SignedHeaders"
                }
              ]
            },
            "/#X-Amz-Target=AmazonAthena.ListWorkGroups": {
              "post": {
                "operationId": "ListWorkGroups",
                "description": "Lists available workgroups for the account.",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ListWorkGroupsOutput"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "InternalServerException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InternalServerException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "InvalidRequestException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InvalidRequestException"
                        }
                      }
                    }
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ListWorkGroupsInput"
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "MaxResults",
                    "in": "query",
                    "schema": {
                      "type": "string"
                    },
                    "description": "Pagination limit",
                    "required": false
                  },
                  {
                    "name": "NextToken",
                    "in": "query",
                    "schema": {
                      "type": "string"
                    },
                    "description": "Pagination token",
                    "required": false
                  },
                  {
                    "name": "X-Amz-Target",
                    "in": "header",
                    "required": true,
                    "schema": {
                      "type": "string",
                      "enum": [
                        "AmazonAthena.ListWorkGroups"
                      ]
                    }
                  }
                ]
              },
              "parameters": [
                {
                  "$ref": "#/components/parameters/X-Amz-Content-Sha256"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Date"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Algorithm"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Credential"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Security-Token"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Signature"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-SignedHeaders"
                }
              ]
            },
            "/#X-Amz-Target=AmazonAthena.StartCalculationExecution": {
              "post": {
                "operationId": "StartCalculationExecution",
                "description": "Submits calculations for execution within a session. You can supply the code to run as an inline code block within the request.",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/StartCalculationExecutionResponse"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "InternalServerException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InternalServerException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "InvalidRequestException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InvalidRequestException"
                        }
                      }
                    }
                  },
                  "482": {
                    "description": "ResourceNotFoundException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ResourceNotFoundException"
                        }
                      }
                    }
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/StartCalculationExecutionRequest"
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "X-Amz-Target",
                    "in": "header",
                    "required": true,
                    "schema": {
                      "type": "string",
                      "enum": [
                        "AmazonAthena.StartCalculationExecution"
                      ]
                    }
                  }
                ]
              },
              "parameters": [
                {
                  "$ref": "#/components/parameters/X-Amz-Content-Sha256"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Date"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Algorithm"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Credential"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Security-Token"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Signature"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-SignedHeaders"
                }
              ]
            },
            "/#X-Amz-Target=AmazonAthena.StartQueryExecution": {
              "post": {
                "operationId": "StartQueryExecution",
                "description": "Runs the SQL query statements contained in the <code>Query</code>. Requires you to have access to the workgroup in which the query ran. Running queries against an external catalog requires <a>GetDataCatalog</a> permission to the catalog. For code samples using the Amazon Web Services SDK for Java, see <a href=\"http://docs.aws.amazon.com/athena/latest/ug/code-samples.html\">Examples and Code Samples</a> in the <i>Amazon Athena User Guide</i>.",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/StartQueryExecutionOutput"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "InternalServerException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InternalServerException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "InvalidRequestException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InvalidRequestException"
                        }
                      }
                    }
                  },
                  "482": {
                    "description": "TooManyRequestsException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/TooManyRequestsException"
                        }
                      }
                    }
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/StartQueryExecutionInput"
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "X-Amz-Target",
                    "in": "header",
                    "required": true,
                    "schema": {
                      "type": "string",
                      "enum": [
                        "AmazonAthena.StartQueryExecution"
                      ]
                    }
                  }
                ]
              },
              "parameters": [
                {
                  "$ref": "#/components/parameters/X-Amz-Content-Sha256"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Date"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Algorithm"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Credential"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Security-Token"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Signature"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-SignedHeaders"
                }
              ]
            },
            "/#X-Amz-Target=AmazonAthena.StartSession": {
              "post": {
                "operationId": "StartSession",
                "description": "Creates a session for running calculations within a workgroup. The session is ready when it reaches an <code>IDLE</code> state.",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/StartSessionResponse"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "InternalServerException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InternalServerException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "InvalidRequestException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InvalidRequestException"
                        }
                      }
                    }
                  },
                  "482": {
                    "description": "ResourceNotFoundException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ResourceNotFoundException"
                        }
                      }
                    }
                  },
                  "483": {
                    "description": "SessionAlreadyExistsException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/SessionAlreadyExistsException"
                        }
                      }
                    }
                  },
                  "484": {
                    "description": "TooManyRequestsException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/TooManyRequestsException"
                        }
                      }
                    }
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/StartSessionRequest"
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "X-Amz-Target",
                    "in": "header",
                    "required": true,
                    "schema": {
                      "type": "string",
                      "enum": [
                        "AmazonAthena.StartSession"
                      ]
                    }
                  }
                ]
              },
              "parameters": [
                {
                  "$ref": "#/components/parameters/X-Amz-Content-Sha256"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Date"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Algorithm"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Credential"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Security-Token"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Signature"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-SignedHeaders"
                }
              ]
            },
            "/#X-Amz-Target=AmazonAthena.StopCalculationExecution": {
              "post": {
                "operationId": "StopCalculationExecution",
                "description": "<p>Requests the cancellation of a calculation. A <code>StopCalculationExecution</code> call on a calculation that is already in a terminal state (for example, <code>STOPPED</code>, <code>FAILED</code>, or <code>COMPLETED</code>) succeeds but has no effect.</p> <note> <p>Cancelling a calculation is done on a best effort basis. If a calculation cannot be cancelled, you can be charged for its completion. If you are concerned about being charged for a calculation that cannot be cancelled, consider terminating the session in which the calculation is running.</p> </note>",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/StopCalculationExecutionResponse"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "InternalServerException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InternalServerException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "InvalidRequestException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InvalidRequestException"
                        }
                      }
                    }
                  },
                  "482": {
                    "description": "ResourceNotFoundException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ResourceNotFoundException"
                        }
                      }
                    }
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/StopCalculationExecutionRequest"
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "X-Amz-Target",
                    "in": "header",
                    "required": true,
                    "schema": {
                      "type": "string",
                      "enum": [
                        "AmazonAthena.StopCalculationExecution"
                      ]
                    }
                  }
                ]
              },
              "parameters": [
                {
                  "$ref": "#/components/parameters/X-Amz-Content-Sha256"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Date"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Algorithm"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Credential"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Security-Token"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Signature"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-SignedHeaders"
                }
              ]
            },
            "/#X-Amz-Target=AmazonAthena.StopQueryExecution": {
              "post": {
                "operationId": "StopQueryExecution",
                "description": "<p>Stops a query execution. Requires you to have access to the workgroup in which the query ran.</p> <p>For code samples using the Amazon Web Services SDK for Java, see <a href=\"http://docs.aws.amazon.com/athena/latest/ug/code-samples.html\">Examples and Code Samples</a> in the <i>Amazon Athena User Guide</i>.</p>",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/StopQueryExecutionOutput"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "InternalServerException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InternalServerException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "InvalidRequestException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InvalidRequestException"
                        }
                      }
                    }
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/StopQueryExecutionInput"
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "X-Amz-Target",
                    "in": "header",
                    "required": true,
                    "schema": {
                      "type": "string",
                      "enum": [
                        "AmazonAthena.StopQueryExecution"
                      ]
                    }
                  }
                ]
              },
              "parameters": [
                {
                  "$ref": "#/components/parameters/X-Amz-Content-Sha256"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Date"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Algorithm"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Credential"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Security-Token"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Signature"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-SignedHeaders"
                }
              ]
            },
            "/#X-Amz-Target=AmazonAthena.TagResource": {
              "post": {
                "operationId": "TagResource",
                "description": "Adds one or more tags to an Athena resource. A tag is a label that you assign to a resource. In Athena, a resource can be a workgroup or data catalog. Each tag consists of a key and an optional value, both of which you define. For example, you can use tags to categorize Athena workgroups or data catalogs by purpose, owner, or environment. Use a consistent set of tag keys to make it easier to search and filter workgroups or data catalogs in your account. For best practices, see <a href=\"https://docs.aws.amazon.com/whitepapers/latest/tagging-best-practices/tagging-best-practices.html\">Tagging Best Practices</a>. Tag keys can be from 1 to 128 UTF-8 Unicode characters, and tag values can be from 0 to 256 UTF-8 Unicode characters. Tags can use letters and numbers representable in UTF-8, and the following characters: + - = . _ : / @. Tag keys and values are case-sensitive. Tag keys must be unique per resource. If you specify more than one tag, separate them by commas.",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/TagResourceOutput"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "InternalServerException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InternalServerException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "InvalidRequestException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InvalidRequestException"
                        }
                      }
                    }
                  },
                  "482": {
                    "description": "ResourceNotFoundException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ResourceNotFoundException"
                        }
                      }
                    }
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/TagResourceInput"
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "X-Amz-Target",
                    "in": "header",
                    "required": true,
                    "schema": {
                      "type": "string",
                      "enum": [
                        "AmazonAthena.TagResource"
                      ]
                    }
                  }
                ]
              },
              "parameters": [
                {
                  "$ref": "#/components/parameters/X-Amz-Content-Sha256"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Date"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Algorithm"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Credential"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Security-Token"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Signature"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-SignedHeaders"
                }
              ]
            },
            "/#X-Amz-Target=AmazonAthena.TerminateSession": {
              "post": {
                "operationId": "TerminateSession",
                "description": "Terminates an active session. A <code>TerminateSession</code> call on a session that is already inactive (for example, in a <code>FAILED</code>, <code>TERMINATED</code> or <code>TERMINATING</code> state) succeeds but has no effect. Calculations running in the session when <code>TerminateSession</code> is called are forcefully stopped, but may display as <code>FAILED</code> instead of <code>STOPPED</code>.",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/TerminateSessionResponse"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "InternalServerException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InternalServerException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "InvalidRequestException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InvalidRequestException"
                        }
                      }
                    }
                  },
                  "482": {
                    "description": "ResourceNotFoundException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ResourceNotFoundException"
                        }
                      }
                    }
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/TerminateSessionRequest"
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "X-Amz-Target",
                    "in": "header",
                    "required": true,
                    "schema": {
                      "type": "string",
                      "enum": [
                        "AmazonAthena.TerminateSession"
                      ]
                    }
                  }
                ]
              },
              "parameters": [
                {
                  "$ref": "#/components/parameters/X-Amz-Content-Sha256"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Date"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Algorithm"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Credential"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Security-Token"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Signature"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-SignedHeaders"
                }
              ]
            },
            "/#X-Amz-Target=AmazonAthena.UntagResource": {
              "post": {
                "operationId": "UntagResource",
                "description": "Removes one or more tags from a data catalog or workgroup resource.",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/UntagResourceOutput"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "InternalServerException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InternalServerException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "InvalidRequestException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InvalidRequestException"
                        }
                      }
                    }
                  },
                  "482": {
                    "description": "ResourceNotFoundException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ResourceNotFoundException"
                        }
                      }
                    }
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/UntagResourceInput"
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "X-Amz-Target",
                    "in": "header",
                    "required": true,
                    "schema": {
                      "type": "string",
                      "enum": [
                        "AmazonAthena.UntagResource"
                      ]
                    }
                  }
                ]
              },
              "parameters": [
                {
                  "$ref": "#/components/parameters/X-Amz-Content-Sha256"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Date"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Algorithm"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Credential"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Security-Token"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Signature"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-SignedHeaders"
                }
              ]
            },
            "/#X-Amz-Target=AmazonAthena.UpdateDataCatalog": {
              "post": {
                "operationId": "UpdateDataCatalog",
                "description": "Updates the data catalog that has the specified name.",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/UpdateDataCatalogOutput"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "InternalServerException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InternalServerException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "InvalidRequestException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InvalidRequestException"
                        }
                      }
                    }
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/UpdateDataCatalogInput"
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "X-Amz-Target",
                    "in": "header",
                    "required": true,
                    "schema": {
                      "type": "string",
                      "enum": [
                        "AmazonAthena.UpdateDataCatalog"
                      ]
                    }
                  }
                ]
              },
              "parameters": [
                {
                  "$ref": "#/components/parameters/X-Amz-Content-Sha256"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Date"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Algorithm"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Credential"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Security-Token"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Signature"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-SignedHeaders"
                }
              ]
            },
            "/#X-Amz-Target=AmazonAthena.UpdateNamedQuery": {
              "post": {
                "operationId": "UpdateNamedQuery",
                "description": "Updates a <a>NamedQuery</a> object. The database or workgroup cannot be updated.",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/UpdateNamedQueryOutput"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "InternalServerException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InternalServerException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "InvalidRequestException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InvalidRequestException"
                        }
                      }
                    }
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/UpdateNamedQueryInput"
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "X-Amz-Target",
                    "in": "header",
                    "required": true,
                    "schema": {
                      "type": "string",
                      "enum": [
                        "AmazonAthena.UpdateNamedQuery"
                      ]
                    }
                  }
                ]
              },
              "parameters": [
                {
                  "$ref": "#/components/parameters/X-Amz-Content-Sha256"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Date"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Algorithm"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Credential"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Security-Token"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Signature"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-SignedHeaders"
                }
              ]
            },
            "/#X-Amz-Target=AmazonAthena.UpdateNotebook": {
              "post": {
                "operationId": "UpdateNotebook",
                "description": "Updates the contents of a Spark notebook.",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/UpdateNotebookOutput"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "InternalServerException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InternalServerException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "InvalidRequestException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InvalidRequestException"
                        }
                      }
                    }
                  },
                  "482": {
                    "description": "TooManyRequestsException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/TooManyRequestsException"
                        }
                      }
                    }
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/UpdateNotebookInput"
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "X-Amz-Target",
                    "in": "header",
                    "required": true,
                    "schema": {
                      "type": "string",
                      "enum": [
                        "AmazonAthena.UpdateNotebook"
                      ]
                    }
                  }
                ]
              },
              "parameters": [
                {
                  "$ref": "#/components/parameters/X-Amz-Content-Sha256"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Date"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Algorithm"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Credential"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Security-Token"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Signature"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-SignedHeaders"
                }
              ]
            },
            "/#X-Amz-Target=AmazonAthena.UpdateNotebookMetadata": {
              "post": {
                "operationId": "UpdateNotebookMetadata",
                "description": "Updates the metadata for a notebook.",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/UpdateNotebookMetadataOutput"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "InternalServerException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InternalServerException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "InvalidRequestException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InvalidRequestException"
                        }
                      }
                    }
                  },
                  "482": {
                    "description": "TooManyRequestsException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/TooManyRequestsException"
                        }
                      }
                    }
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/UpdateNotebookMetadataInput"
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "X-Amz-Target",
                    "in": "header",
                    "required": true,
                    "schema": {
                      "type": "string",
                      "enum": [
                        "AmazonAthena.UpdateNotebookMetadata"
                      ]
                    }
                  }
                ]
              },
              "parameters": [
                {
                  "$ref": "#/components/parameters/X-Amz-Content-Sha256"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Date"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Algorithm"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Credential"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Security-Token"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Signature"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-SignedHeaders"
                }
              ]
            },
            "/#X-Amz-Target=AmazonAthena.UpdatePreparedStatement": {
              "post": {
                "operationId": "UpdatePreparedStatement",
                "description": "Updates a prepared statement.",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/UpdatePreparedStatementOutput"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "InternalServerException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InternalServerException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "InvalidRequestException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InvalidRequestException"
                        }
                      }
                    }
                  },
                  "482": {
                    "description": "ResourceNotFoundException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ResourceNotFoundException"
                        }
                      }
                    }
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/UpdatePreparedStatementInput"
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "X-Amz-Target",
                    "in": "header",
                    "required": true,
                    "schema": {
                      "type": "string",
                      "enum": [
                        "AmazonAthena.UpdatePreparedStatement"
                      ]
                    }
                  }
                ]
              },
              "parameters": [
                {
                  "$ref": "#/components/parameters/X-Amz-Content-Sha256"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Date"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Algorithm"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Credential"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Security-Token"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Signature"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-SignedHeaders"
                }
              ]
            },
            "/#X-Amz-Target=AmazonAthena.UpdateWorkGroup": {
              "post": {
                "operationId": "UpdateWorkGroup",
                "description": "Updates the workgroup with the specified name. The workgroup's name cannot be changed. Only <code>ConfigurationUpdates</code> can be specified.",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/UpdateWorkGroupOutput"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "InternalServerException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InternalServerException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "InvalidRequestException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InvalidRequestException"
                        }
                      }
                    }
                  }
                },
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/UpdateWorkGroupInput"
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "X-Amz-Target",
                    "in": "header",
                    "required": true,
                    "schema": {
                      "type": "string",
                      "enum": [
                        "AmazonAthena.UpdateWorkGroup"
                      ]
                    }
                  }
                ]
              },
              "parameters": [
                {
                  "$ref": "#/components/parameters/X-Amz-Content-Sha256"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Date"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Algorithm"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Credential"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Security-Token"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Signature"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-SignedHeaders"
                }
              ]
            }
          },
          "components": {
            "parameters": {
              "X-Amz-Content-Sha256": {
                "name": "X-Amz-Content-Sha256",
                "in": "header",
                "schema": {
                  "type": "string"
                },
                "required": false
              },
              "X-Amz-Date": {
                "name": "X-Amz-Date",
                "in": "header",
                "schema": {
                  "type": "string"
                },
                "required": false
              },
              "X-Amz-Algorithm": {
                "name": "X-Amz-Algorithm",
                "in": "header",
                "schema": {
                  "type": "string"
                },
                "required": false
              },
              "X-Amz-Credential": {
                "name": "X-Amz-Credential",
                "in": "header",
                "schema": {
                  "type": "string"
                },
                "required": false
              },
              "X-Amz-Security-Token": {
                "name": "X-Amz-Security-Token",
                "in": "header",
                "schema": {
                  "type": "string"
                },
                "required": false
              },
              "X-Amz-Signature": {
                "name": "X-Amz-Signature",
                "in": "header",
                "schema": {
                  "type": "string"
                },
                "required": false
              },
              "X-Amz-SignedHeaders": {
                "name": "X-Amz-SignedHeaders",
                "in": "header",
                "schema": {
                  "type": "string"
                },
                "required": false
              }
            },
            "securitySchemes": {
              "hmac": {
                "type": "apiKey",
                "name": "Authorization",
                "in": "header",
                "description": "Amazon Signature authorization v4",
                "x-amazon-apigateway-authtype": "awsSigv4"
              }
            },
            "schemas": {
              "BatchGetNamedQueryOutput": {
                "type": "object",
                "properties": {
                  "NamedQueries": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/NamedQueryList"
                      },
                      {
                        "description": "Information about the named query IDs submitted."
                      }
                    ]
                  },
                  "UnprocessedNamedQueryIds": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/UnprocessedNamedQueryIdList"
                      },
                      {
                        "description": "Information about provided query IDs."
                      }
                    ]
                  }
                }
              },
              "BatchGetNamedQueryInput": {
                "type": "object",
                "required": [
                  "NamedQueryIds"
                ],
                "title": "BatchGetNamedQueryInput",
                "properties": {
                  "NamedQueryIds": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/NamedQueryIdList"
                      },
                      {
                        "description": "An array of query IDs."
                      }
                    ]
                  }
                },
                "description": "Contains an array of named query IDs."
              },
              "InternalServerException": {},
              "InvalidRequestException": {},
              "BatchGetPreparedStatementOutput": {
                "type": "object",
                "properties": {
                  "PreparedStatements": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/PreparedStatementDetailsList"
                      },
                      {
                        "description": "The list of prepared statements returned."
                      }
                    ]
                  },
                  "UnprocessedPreparedStatementNames": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/UnprocessedPreparedStatementNameList"
                      },
                      {
                        "description": "A list of one or more prepared statements that were requested but could not be returned."
                      }
                    ]
                  }
                }
              },
              "BatchGetPreparedStatementInput": {
                "type": "object",
                "required": [
                  "PreparedStatementNames",
                  "WorkGroup"
                ],
                "title": "BatchGetPreparedStatementInput",
                "properties": {
                  "PreparedStatementNames": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/PreparedStatementNameList"
                      },
                      {
                        "description": "A list of prepared statement names to return."
                      }
                    ]
                  },
                  "WorkGroup": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/WorkGroupName"
                      },
                      {
                        "description": "The name of the workgroup to which the prepared statements belong."
                      }
                    ]
                  }
                }
              },
              "BatchGetQueryExecutionOutput": {
                "type": "object",
                "properties": {
                  "QueryExecutions": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/QueryExecutionList"
                      },
                      {
                        "description": "Information about a query execution."
                      }
                    ]
                  },
                  "UnprocessedQueryExecutionIds": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/UnprocessedQueryExecutionIdList"
                      },
                      {
                        "description": "Information about the query executions that failed to run."
                      }
                    ]
                  }
                }
              },
              "BatchGetQueryExecutionInput": {
                "type": "object",
                "required": [
                  "QueryExecutionIds"
                ],
                "title": "BatchGetQueryExecutionInput",
                "properties": {
                  "QueryExecutionIds": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/QueryExecutionIdList"
                      },
                      {
                        "description": "An array of query execution IDs."
                      }
                    ]
                  }
                },
                "description": "Contains an array of query execution IDs."
              },
              "CreateDataCatalogOutput": {
                "type": "object",
                "properties": {}
              },
              "CreateDataCatalogInput": {
                "type": "object",
                "required": [
                  "Name",
                  "Type"
                ],
                "title": "CreateDataCatalogInput",
                "properties": {
                  "Name": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/CatalogNameString"
                      },
                      {
                        "description": "The name of the data catalog to create. The catalog name must be unique for the Amazon Web Services account and can use a maximum of 127 alphanumeric, underscore, at sign, or hyphen characters. The remainder of the length constraint of 256 is reserved for use by Athena."
                      }
                    ]
                  },
                  "Type": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/DataCatalogType"
                      },
                      {
                        "description": "The type of data catalog to create: <code>LAMBDA</code> for a federated catalog, <code>HIVE</code> for an external hive metastore, or <code>GLUE</code> for an Glue Data Catalog."
                      }
                    ]
                  },
                  "Description": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/DescriptionString"
                      },
                      {
                        "description": "A description of the data catalog to be created."
                      }
                    ]
                  },
                  "Parameters": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ParametersMap"
                      },
                      {
                        "description": "<p>Specifies the Lambda function or functions to use for creating the data catalog. This is a mapping whose values depend on the catalog type. </p> <ul> <li> <p>For the <code>HIVE</code> data catalog type, use the following syntax. The <code>metadata-function</code> parameter is required. <code>The sdk-version</code> parameter is optional and defaults to the currently supported version.</p> <p> <code>metadata-function=<i>lambda_arn</i>, sdk-version=<i>version_number</i> </code> </p> </li> <li> <p>For the <code>LAMBDA</code> data catalog type, use one of the following sets of required parameters, but not both.</p> <ul> <li> <p>If you have one Lambda function that processes metadata and another for reading the actual data, use the following syntax. Both parameters are required.</p> <p> <code>metadata-function=<i>lambda_arn</i>, record-function=<i>lambda_arn</i> </code> </p> </li> <li> <p> If you have a composite Lambda function that processes both metadata and data, use the following syntax to specify your Lambda function.</p> <p> <code>function=<i>lambda_arn</i> </code> </p> </li> </ul> </li> <li> <p>The <code>GLUE</code> type takes a catalog ID parameter and is required. The <code> <i>catalog_id</i> </code> is the account ID of the Amazon Web Services account to which the Glue Data Catalog belongs.</p> <p> <code>catalog-id=<i>catalog_id</i> </code> </p> <ul> <li> <p>The <code>GLUE</code> data catalog type also applies to the default <code>AwsDataCatalog</code> that already exists in your account, of which you can have only one and cannot modify.</p> </li> <li> <p>Queries that specify a Glue Data Catalog other than the default <code>AwsDataCatalog</code> must be run on Athena engine version 2.</p> </li> <li> <p>In Regions where Athena engine version 2 is not available, creating new Glue data catalogs results in an <code>INVALID_INPUT</code> error.</p> </li> </ul> </li> </ul>"
                      }
                    ]
                  },
                  "Tags": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/TagList"
                      },
                      {
                        "description": "A list of comma separated tags to add to the data catalog that is created."
                      }
                    ]
                  }
                }
              },
              "CreateNamedQueryOutput": {
                "type": "object",
                "properties": {
                  "NamedQueryId": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/NamedQueryId"
                      },
                      {
                        "description": "The unique ID of the query."
                      }
                    ]
                  }
                }
              },
              "CreateNamedQueryInput": {
                "type": "object",
                "required": [
                  "Name",
                  "Database",
                  "QueryString"
                ],
                "title": "CreateNamedQueryInput",
                "properties": {
                  "Name": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/NameString"
                      },
                      {
                        "description": "The query name."
                      }
                    ]
                  },
                  "Description": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/DescriptionString"
                      },
                      {
                        "description": "The query description."
                      }
                    ]
                  },
                  "Database": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/DatabaseString"
                      },
                      {
                        "description": "The database to which the query belongs."
                      }
                    ]
                  },
                  "QueryString": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/QueryString"
                      },
                      {
                        "description": "The contents of the query with all query statements."
                      }
                    ]
                  },
                  "ClientRequestToken": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/IdempotencyToken"
                      },
                      {
                        "description": "<p>A unique case-sensitive string used to ensure the request to create the query is idempotent (executes only once). If another <code>CreateNamedQuery</code> request is received, the same response is returned and another query is not created. If a parameter has changed, for example, the <code>QueryString</code>, an error is returned.</p> <important> <p>This token is listed as not required because Amazon Web Services SDKs (for example the Amazon Web Services SDK for Java) auto-generate the token for users. If you are not using the Amazon Web Services SDK or the Amazon Web Services CLI, you must provide this token or the action will fail.</p> </important>"
                      }
                    ]
                  },
                  "WorkGroup": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/WorkGroupName"
                      },
                      {
                        "description": "The name of the workgroup in which the named query is being created."
                      }
                    ]
                  }
                }
              },
              "CreateNotebookOutput": {
                "type": "object",
                "properties": {
                  "NotebookId": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/NotebookId"
                      },
                      {
                        "description": "A unique identifier for the notebook."
                      }
                    ]
                  }
                }
              },
              "CreateNotebookInput": {
                "type": "object",
                "required": [
                  "WorkGroup",
                  "Name"
                ],
                "title": "CreateNotebookInput",
                "properties": {
                  "WorkGroup": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/WorkGroupName"
                      },
                      {
                        "description": "The name of the Spark enabled workgroup in which the notebook will be created."
                      }
                    ]
                  },
                  "Name": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/NotebookName"
                      },
                      {
                        "description": "The name of the <code>ipynb</code> file to be created in the Spark workgroup, without the <code>.ipynb</code> extension."
                      }
                    ]
                  },
                  "ClientRequestToken": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ClientRequestToken"
                      },
                      {
                        "description": "<p>A unique case-sensitive string used to ensure the request to create the notebook is idempotent (executes only once).</p> <important> <p>This token is listed as not required because Amazon Web Services SDKs (for example the Amazon Web Services SDK for Java) auto-generate the token for you. If you are not using the Amazon Web Services SDK or the Amazon Web Services CLI, you must provide this token or the action will fail.</p> </important>"
                      }
                    ]
                  }
                }
              },
              "TooManyRequestsException": {},
              "CreatePreparedStatementOutput": {
                "type": "object",
                "properties": {}
              },
              "CreatePreparedStatementInput": {
                "type": "object",
                "required": [
                  "StatementName",
                  "WorkGroup",
                  "QueryStatement"
                ],
                "title": "CreatePreparedStatementInput",
                "properties": {
                  "StatementName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/StatementName"
                      },
                      {
                        "description": "The name of the prepared statement."
                      }
                    ]
                  },
                  "WorkGroup": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/WorkGroupName"
                      },
                      {
                        "description": "The name of the workgroup to which the prepared statement belongs."
                      }
                    ]
                  },
                  "QueryStatement": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/QueryString"
                      },
                      {
                        "description": "The query string for the prepared statement."
                      }
                    ]
                  },
                  "Description": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/DescriptionString"
                      },
                      {
                        "description": "The description of the prepared statement."
                      }
                    ]
                  }
                }
              },
              "CreatePresignedNotebookUrlResponse": {
                "type": "object",
                "required": [
                  "NotebookUrl",
                  "AuthToken",
                  "AuthTokenExpirationTime"
                ],
                "properties": {
                  "NotebookUrl": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/String"
                      },
                      {
                        "description": "The URL of the notebook. The URL includes the authentication token and notebook file name and points directly to the opened notebook."
                      }
                    ]
                  },
                  "AuthToken": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/AuthToken"
                      },
                      {
                        "description": "The authentication token for the notebook."
                      }
                    ]
                  },
                  "AuthTokenExpirationTime": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Long"
                      },
                      {
                        "description": "The UTC epoch time when the authentication token expires."
                      }
                    ]
                  }
                }
              },
              "CreatePresignedNotebookUrlRequest": {
                "type": "object",
                "required": [
                  "SessionId"
                ],
                "title": "CreatePresignedNotebookUrlRequest",
                "properties": {
                  "SessionId": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/SessionId"
                      },
                      {
                        "description": "The session ID."
                      }
                    ]
                  }
                }
              },
              "ResourceNotFoundException": {},
              "CreateWorkGroupOutput": {
                "type": "object",
                "properties": {}
              },
              "CreateWorkGroupInput": {
                "type": "object",
                "required": [
                  "Name"
                ],
                "title": "CreateWorkGroupInput",
                "properties": {
                  "Name": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/WorkGroupName"
                      },
                      {
                        "description": "The workgroup name."
                      }
                    ]
                  },
                  "Configuration": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/WorkGroupConfiguration"
                      },
                      {
                        "description": "Contains configuration information for creating an Athena SQL workgroup or Spark enabled Athena workgroup. Athena SQL workgroup configuration includes the location in Amazon S3 where query and calculation results are stored, the encryption configuration, if any, used for encrypting query results, whether the Amazon CloudWatch Metrics are enabled for the workgroup, the limit for the amount of bytes scanned (cutoff) per query, if it is specified, and whether workgroup's settings (specified with <code>EnforceWorkGroupConfiguration</code>) in the <code>WorkGroupConfiguration</code> override client-side settings. See <a>WorkGroupConfiguration$EnforceWorkGroupConfiguration</a>."
                      }
                    ]
                  },
                  "Description": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/WorkGroupDescriptionString"
                      },
                      {
                        "description": "The workgroup description."
                      }
                    ]
                  },
                  "Tags": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/TagList"
                      },
                      {
                        "description": "A list of comma separated tags to add to the workgroup that is created."
                      }
                    ]
                  }
                }
              },
              "DeleteDataCatalogOutput": {
                "type": "object",
                "properties": {}
              },
              "DeleteDataCatalogInput": {
                "type": "object",
                "required": [
                  "Name"
                ],
                "title": "DeleteDataCatalogInput",
                "properties": {
                  "Name": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/CatalogNameString"
                      },
                      {
                        "description": "The name of the data catalog to delete."
                      }
                    ]
                  }
                }
              },
              "DeleteNamedQueryOutput": {
                "type": "object",
                "properties": {}
              },
              "DeleteNamedQueryInput": {
                "type": "object",
                "required": [
                  "NamedQueryId"
                ],
                "title": "DeleteNamedQueryInput",
                "properties": {
                  "NamedQueryId": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/NamedQueryId"
                      },
                      {
                        "description": "The unique ID of the query to delete."
                      }
                    ]
                  }
                }
              },
              "DeleteNotebookOutput": {
                "type": "object",
                "properties": {}
              },
              "DeleteNotebookInput": {
                "type": "object",
                "required": [
                  "NotebookId"
                ],
                "title": "DeleteNotebookInput",
                "properties": {
                  "NotebookId": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/NotebookId"
                      },
                      {
                        "description": "The ID of the notebook to delete."
                      }
                    ]
                  }
                }
              },
              "DeletePreparedStatementOutput": {
                "type": "object",
                "properties": {}
              },
              "DeletePreparedStatementInput": {
                "type": "object",
                "required": [
                  "StatementName",
                  "WorkGroup"
                ],
                "title": "DeletePreparedStatementInput",
                "properties": {
                  "StatementName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/StatementName"
                      },
                      {
                        "description": "The name of the prepared statement to delete."
                      }
                    ]
                  },
                  "WorkGroup": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/WorkGroupName"
                      },
                      {
                        "description": "The workgroup to which the statement to be deleted belongs."
                      }
                    ]
                  }
                }
              },
              "DeleteWorkGroupOutput": {
                "type": "object",
                "properties": {}
              },
              "DeleteWorkGroupInput": {
                "type": "object",
                "required": [
                  "WorkGroup"
                ],
                "title": "DeleteWorkGroupInput",
                "properties": {
                  "WorkGroup": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/WorkGroupName"
                      },
                      {
                        "description": "The unique name of the workgroup to delete."
                      }
                    ]
                  },
                  "RecursiveDeleteOption": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/BoxedBoolean"
                      },
                      {
                        "description": "The option to delete the workgroup and its contents even if the workgroup contains any named queries, query executions, or notebooks."
                      }
                    ]
                  }
                }
              },
              "ExportNotebookOutput": {
                "type": "object",
                "properties": {
                  "NotebookMetadata": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/NotebookMetadata"
                      },
                      {
                        "description": "The notebook metadata, including notebook ID, notebook name, and workgroup name."
                      }
                    ]
                  },
                  "Payload": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Payload"
                      },
                      {
                        "description": "The content of the exported notebook."
                      }
                    ]
                  }
                }
              },
              "ExportNotebookInput": {
                "type": "object",
                "required": [
                  "NotebookId"
                ],
                "title": "ExportNotebookInput",
                "properties": {
                  "NotebookId": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/NotebookId"
                      },
                      {
                        "description": "The ID of the notebook to export."
                      }
                    ]
                  }
                }
              },
              "GetCalculationExecutionResponse": {
                "type": "object",
                "properties": {
                  "CalculationExecutionId": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/CalculationExecutionId"
                      },
                      {
                        "description": "The calculation execution UUID."
                      }
                    ]
                  },
                  "SessionId": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/SessionId"
                      },
                      {
                        "description": "The session ID that the calculation ran in."
                      }
                    ]
                  },
                  "Description": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/DescriptionString"
                      },
                      {
                        "description": "The description of the calculation execution."
                      }
                    ]
                  },
                  "WorkingDirectory": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/S3Uri"
                      },
                      {
                        "description": "The Amazon S3 location in which calculation results are stored."
                      }
                    ]
                  },
                  "Status": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/CalculationStatus"
                      },
                      {
                        "description": "Contains information about the status of the calculation."
                      }
                    ]
                  },
                  "Statistics": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/CalculationStatistics"
                      },
                      {
                        "description": "Contains information about the data processing unit (DPU) execution time and progress. This field is populated only when statistics are available."
                      }
                    ]
                  },
                  "Result": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/CalculationResult"
                      },
                      {
                        "description": "Contains result information. This field is populated only if the calculation is completed."
                      }
                    ]
                  }
                }
              },
              "GetCalculationExecutionRequest": {
                "type": "object",
                "required": [
                  "CalculationExecutionId"
                ],
                "title": "GetCalculationExecutionRequest",
                "properties": {
                  "CalculationExecutionId": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/CalculationExecutionId"
                      },
                      {
                        "description": "The calculation execution UUID."
                      }
                    ]
                  }
                }
              },
              "GetCalculationExecutionCodeResponse": {
                "type": "object",
                "properties": {
                  "CodeBlock": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/CodeBlock"
                      },
                      {
                        "description": "The unencrypted code that was executed for the calculation."
                      }
                    ]
                  }
                }
              },
              "GetCalculationExecutionCodeRequest": {
                "type": "object",
                "required": [
                  "CalculationExecutionId"
                ],
                "title": "GetCalculationExecutionCodeRequest",
                "properties": {
                  "CalculationExecutionId": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/CalculationExecutionId"
                      },
                      {
                        "description": "The calculation execution UUID."
                      }
                    ]
                  }
                }
              },
              "GetCalculationExecutionStatusResponse": {
                "type": "object",
                "properties": {
                  "Status": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/CalculationStatus"
                      },
                      {
                        "description": "Contains information about the calculation execution status."
                      }
                    ]
                  },
                  "Statistics": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/CalculationStatistics"
                      },
                      {
                        "description": "Contains information about the DPU execution time and progress."
                      }
                    ]
                  }
                }
              },
              "GetCalculationExecutionStatusRequest": {
                "type": "object",
                "required": [
                  "CalculationExecutionId"
                ],
                "title": "GetCalculationExecutionStatusRequest",
                "properties": {
                  "CalculationExecutionId": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/CalculationExecutionId"
                      },
                      {
                        "description": "The calculation execution UUID."
                      }
                    ]
                  }
                }
              },
              "GetDataCatalogOutput": {
                "type": "object",
                "properties": {
                  "DataCatalog": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/DataCatalog"
                      },
                      {
                        "description": "The data catalog returned."
                      }
                    ]
                  }
                }
              },
              "GetDataCatalogInput": {
                "type": "object",
                "required": [
                  "Name"
                ],
                "title": "GetDataCatalogInput",
                "properties": {
                  "Name": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/CatalogNameString"
                      },
                      {
                        "description": "The name of the data catalog to return."
                      }
                    ]
                  }
                }
              },
              "GetDatabaseOutput": {
                "type": "object",
                "properties": {
                  "Database": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Database"
                      },
                      {
                        "description": "The database returned."
                      }
                    ]
                  }
                }
              },
              "GetDatabaseInput": {
                "type": "object",
                "required": [
                  "CatalogName",
                  "DatabaseName"
                ],
                "title": "GetDatabaseInput",
                "properties": {
                  "CatalogName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/CatalogNameString"
                      },
                      {
                        "description": "The name of the data catalog that contains the database to return."
                      }
                    ]
                  },
                  "DatabaseName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/NameString"
                      },
                      {
                        "description": "The name of the database to return."
                      }
                    ]
                  }
                }
              },
              "MetadataException": {},
              "GetNamedQueryOutput": {
                "type": "object",
                "properties": {
                  "NamedQuery": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/NamedQuery"
                      },
                      {
                        "description": "Information about the query."
                      }
                    ]
                  }
                }
              },
              "GetNamedQueryInput": {
                "type": "object",
                "required": [
                  "NamedQueryId"
                ],
                "title": "GetNamedQueryInput",
                "properties": {
                  "NamedQueryId": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/NamedQueryId"
                      },
                      {
                        "description": "The unique ID of the query. Use <a>ListNamedQueries</a> to get query IDs."
                      }
                    ]
                  }
                }
              },
              "GetNotebookMetadataOutput": {
                "type": "object",
                "properties": {
                  "NotebookMetadata": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/NotebookMetadata"
                      },
                      {
                        "description": "The metadata that is returned for the specified notebook ID."
                      }
                    ]
                  }
                }
              },
              "GetNotebookMetadataInput": {
                "type": "object",
                "required": [
                  "NotebookId"
                ],
                "title": "GetNotebookMetadataInput",
                "properties": {
                  "NotebookId": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/NotebookId"
                      },
                      {
                        "description": "The ID of the notebook whose metadata is to be retrieved."
                      }
                    ]
                  }
                }
              },
              "GetPreparedStatementOutput": {
                "type": "object",
                "properties": {
                  "PreparedStatement": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/PreparedStatement"
                      },
                      {
                        "description": "The name of the prepared statement that was retrieved."
                      }
                    ]
                  }
                }
              },
              "GetPreparedStatementInput": {
                "type": "object",
                "required": [
                  "StatementName",
                  "WorkGroup"
                ],
                "title": "GetPreparedStatementInput",
                "properties": {
                  "StatementName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/StatementName"
                      },
                      {
                        "description": "The name of the prepared statement to retrieve."
                      }
                    ]
                  },
                  "WorkGroup": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/WorkGroupName"
                      },
                      {
                        "description": "The workgroup to which the statement to be retrieved belongs."
                      }
                    ]
                  }
                }
              },
              "GetQueryExecutionOutput": {
                "type": "object",
                "properties": {
                  "QueryExecution": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/QueryExecution"
                      },
                      {
                        "description": "Information about the query execution."
                      }
                    ]
                  }
                }
              },
              "GetQueryExecutionInput": {
                "type": "object",
                "required": [
                  "QueryExecutionId"
                ],
                "title": "GetQueryExecutionInput",
                "properties": {
                  "QueryExecutionId": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/QueryExecutionId"
                      },
                      {
                        "description": "The unique ID of the query execution."
                      }
                    ]
                  }
                }
              },
              "GetQueryResultsOutput": {
                "type": "object",
                "properties": {
                  "UpdateCount": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Long"
                      },
                      {
                        "description": "The number of rows inserted with a <code>CREATE TABLE AS SELECT</code> statement. "
                      }
                    ]
                  },
                  "ResultSet": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ResultSet"
                      },
                      {
                        "description": "The results of the query execution."
                      }
                    ]
                  },
                  "NextToken": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Token"
                      },
                      {
                        "description": "A token generated by the Athena service that specifies where to continue pagination if a previous request was truncated. To obtain the next set of pages, pass in the <code>NextToken</code> from the response object of the previous page call."
                      }
                    ]
                  }
                }
              },
              "GetQueryResultsInput": {
                "type": "object",
                "required": [
                  "QueryExecutionId"
                ],
                "title": "GetQueryResultsInput",
                "properties": {
                  "QueryExecutionId": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/QueryExecutionId"
                      },
                      {
                        "description": "The unique ID of the query execution."
                      }
                    ]
                  },
                  "NextToken": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Token"
                      },
                      {
                        "description": "A token generated by the Athena service that specifies where to continue pagination if a previous request was truncated. To obtain the next set of pages, pass in the <code>NextToken</code> from the response object of the previous page call."
                      }
                    ]
                  },
                  "MaxResults": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/MaxQueryResults"
                      },
                      {
                        "description": "The maximum number of results (rows) to return in this request."
                      }
                    ]
                  }
                }
              },
              "GetQueryRuntimeStatisticsOutput": {
                "type": "object",
                "properties": {
                  "QueryRuntimeStatistics": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/QueryRuntimeStatistics"
                      },
                      {
                        "description": "Runtime statistics about the query execution."
                      }
                    ]
                  }
                }
              },
              "GetQueryRuntimeStatisticsInput": {
                "type": "object",
                "required": [
                  "QueryExecutionId"
                ],
                "title": "GetQueryRuntimeStatisticsInput",
                "properties": {
                  "QueryExecutionId": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/QueryExecutionId"
                      },
                      {
                        "description": "The unique ID of the query execution."
                      }
                    ]
                  }
                }
              },
              "GetSessionResponse": {
                "type": "object",
                "properties": {
                  "SessionId": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/SessionId"
                      },
                      {
                        "description": "The session ID."
                      }
                    ]
                  },
                  "Description": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/DescriptionString"
                      },
                      {
                        "description": "The session description."
                      }
                    ]
                  },
                  "WorkGroup": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/WorkGroupName"
                      },
                      {
                        "description": "The workgroup to which the session belongs."
                      }
                    ]
                  },
                  "EngineVersion": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/NameString"
                      },
                      {
                        "description": "The engine version used by the session (for example, <code>PySpark engine version 3</code>). You can get a list of engine versions by calling <a>ListEngineVersions</a>."
                      }
                    ]
                  },
                  "EngineConfiguration": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/EngineConfiguration"
                      },
                      {
                        "description": "Contains engine configuration information like DPU usage."
                      }
                    ]
                  },
                  "NotebookVersion": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/NameString"
                      },
                      {
                        "description": "The notebook version."
                      }
                    ]
                  },
                  "SessionConfiguration": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/SessionConfiguration"
                      },
                      {
                        "description": "Contains the workgroup configuration information used by the session."
                      }
                    ]
                  },
                  "Status": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/SessionStatus"
                      },
                      {
                        "description": "Contains information about the status of the session."
                      }
                    ]
                  },
                  "Statistics": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/SessionStatistics"
                      },
                      {
                        "description": "Contains the DPU execution time."
                      }
                    ]
                  }
                }
              },
              "GetSessionRequest": {
                "type": "object",
                "required": [
                  "SessionId"
                ],
                "title": "GetSessionRequest",
                "properties": {
                  "SessionId": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/SessionId"
                      },
                      {
                        "description": "The session ID."
                      }
                    ]
                  }
                }
              },
              "GetSessionStatusResponse": {
                "type": "object",
                "properties": {
                  "SessionId": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/SessionId"
                      },
                      {
                        "description": "The session ID."
                      }
                    ]
                  },
                  "Status": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/SessionStatus"
                      },
                      {
                        "description": "Contains information about the status of the session."
                      }
                    ]
                  }
                }
              },
              "GetSessionStatusRequest": {
                "type": "object",
                "required": [
                  "SessionId"
                ],
                "title": "GetSessionStatusRequest",
                "properties": {
                  "SessionId": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/SessionId"
                      },
                      {
                        "description": "The session ID."
                      }
                    ]
                  }
                }
              },
              "GetTableMetadataOutput": {
                "type": "object",
                "properties": {
                  "TableMetadata": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/TableMetadata"
                      },
                      {
                        "description": "An object that contains table metadata."
                      }
                    ]
                  }
                }
              },
              "GetTableMetadataInput": {
                "type": "object",
                "required": [
                  "CatalogName",
                  "DatabaseName",
                  "TableName"
                ],
                "title": "GetTableMetadataInput",
                "properties": {
                  "CatalogName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/CatalogNameString"
                      },
                      {
                        "description": "The name of the data catalog that contains the database and table metadata to return."
                      }
                    ]
                  },
                  "DatabaseName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/NameString"
                      },
                      {
                        "description": "The name of the database that contains the table metadata to return."
                      }
                    ]
                  },
                  "TableName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/NameString"
                      },
                      {
                        "description": "The name of the table for which metadata is returned."
                      }
                    ]
                  }
                }
              },
              "GetWorkGroupOutput": {
                "type": "object",
                "properties": {
                  "WorkGroup": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/WorkGroup"
                      },
                      {
                        "description": "Information about the workgroup."
                      }
                    ]
                  }
                }
              },
              "GetWorkGroupInput": {
                "type": "object",
                "required": [
                  "WorkGroup"
                ],
                "title": "GetWorkGroupInput",
                "properties": {
                  "WorkGroup": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/WorkGroupName"
                      },
                      {
                        "description": "The name of the workgroup."
                      }
                    ]
                  }
                }
              },
              "ImportNotebookOutput": {
                "type": "object",
                "properties": {
                  "NotebookId": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/NotebookId"
                      },
                      {
                        "description": "The ID assigned to the imported notebook."
                      }
                    ]
                  }
                }
              },
              "ImportNotebookInput": {
                "type": "object",
                "required": [
                  "WorkGroup",
                  "Name",
                  "Payload",
                  "Type"
                ],
                "title": "ImportNotebookInput",
                "properties": {
                  "WorkGroup": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/WorkGroupName"
                      },
                      {
                        "description": "The name of the Spark enabled workgroup to import the notebook to."
                      }
                    ]
                  },
                  "Name": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/NotebookName"
                      },
                      {
                        "description": "The name of the notebook to import."
                      }
                    ]
                  },
                  "Payload": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Payload"
                      },
                      {
                        "description": "The notebook content to be imported."
                      }
                    ]
                  },
                  "Type": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/NotebookType"
                      },
                      {
                        "description": "The notebook content type. Currently, the only valid type is <code>IPYNB</code>."
                      }
                    ]
                  },
                  "ClientRequestToken": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ClientRequestToken"
                      },
                      {
                        "description": "<p>A unique case-sensitive string used to ensure the request to import the notebook is idempotent (executes only once).</p> <important> <p>This token is listed as not required because Amazon Web Services SDKs (for example the Amazon Web Services SDK for Java) auto-generate the token for you. If you are not using the Amazon Web Services SDK or the Amazon Web Services CLI, you must provide this token or the action will fail.</p> </important>"
                      }
                    ]
                  }
                }
              },
              "ListApplicationDPUSizesOutput": {
                "type": "object",
                "properties": {
                  "ApplicationDPUSizes": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ApplicationDPUSizesList"
                      },
                      {
                        "description": "A list of the supported DPU sizes that the application runtime supports."
                      }
                    ]
                  },
                  "NextToken": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Token"
                      },
                      {
                        "description": "A token generated by the Athena service that specifies where to continue pagination if a previous request was truncated. To obtain the next set of pages, pass in the <code>NextToken</code> from the response object of the previous page call."
                      }
                    ]
                  }
                }
              },
              "ListApplicationDPUSizesInput": {
                "type": "object",
                "title": "ListApplicationDPUSizesInput",
                "properties": {
                  "MaxResults": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/MaxApplicationDPUSizesCount"
                      },
                      {
                        "description": "Specifies the maximum number of results to return."
                      }
                    ]
                  },
                  "NextToken": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Token"
                      },
                      {
                        "description": "A token generated by the Athena service that specifies where to continue pagination if a previous request was truncated."
                      }
                    ]
                  }
                }
              },
              "ListCalculationExecutionsResponse": {
                "type": "object",
                "properties": {
                  "NextToken": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/SessionManagerToken"
                      },
                      {
                        "description": "A token generated by the Athena service that specifies where to continue pagination if a previous request was truncated. To obtain the next set of pages, pass in the <code>NextToken</code> from the response object of the previous page call."
                      }
                    ]
                  },
                  "Calculations": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/CalculationsList"
                      },
                      {
                        "description": "A list of <a>CalculationSummary</a> objects."
                      }
                    ]
                  }
                }
              },
              "ListCalculationExecutionsRequest": {
                "type": "object",
                "required": [
                  "SessionId"
                ],
                "title": "ListCalculationExecutionsRequest",
                "properties": {
                  "SessionId": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/SessionId"
                      },
                      {
                        "description": "The session ID."
                      }
                    ]
                  },
                  "StateFilter": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/CalculationExecutionState"
                      },
                      {
                        "description": "<p>A filter for a specific calculation execution state. A description of each state follows.</p> <p> <code>CREATING</code> - The calculation is in the process of being created.</p> <p> <code>CREATED</code> - The calculation has been created and is ready to run.</p> <p> <code>QUEUED</code> - The calculation has been queued for processing.</p> <p> <code>RUNNING</code> - The calculation is running.</p> <p> <code>CANCELING</code> - A request to cancel the calculation has been received and the system is working to stop it.</p> <p> <code>CANCELED</code> - The calculation is no longer running as the result of a cancel request.</p> <p> <code>COMPLETED</code> - The calculation has completed without error.</p> <p> <code>FAILED</code> - The calculation failed and is no longer running.</p>"
                      }
                    ]
                  },
                  "MaxResults": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/MaxCalculationsCount"
                      },
                      {
                        "description": "The maximum number of calculation executions to return."
                      }
                    ]
                  },
                  "NextToken": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/SessionManagerToken"
                      },
                      {
                        "description": "A token generated by the Athena service that specifies where to continue pagination if a previous request was truncated. To obtain the next set of pages, pass in the <code>NextToken</code> from the response object of the previous page call."
                      }
                    ]
                  }
                }
              },
              "ListDataCatalogsOutput": {
                "type": "object",
                "properties": {
                  "DataCatalogsSummary": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/DataCatalogSummaryList"
                      },
                      {
                        "description": "A summary list of data catalogs."
                      }
                    ]
                  },
                  "NextToken": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Token"
                      },
                      {
                        "description": "A token generated by the Athena service that specifies where to continue pagination if a previous request was truncated. To obtain the next set of pages, pass in the NextToken from the response object of the previous page call."
                      }
                    ]
                  }
                }
              },
              "ListDataCatalogsInput": {
                "type": "object",
                "title": "ListDataCatalogsInput",
                "properties": {
                  "NextToken": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Token"
                      },
                      {
                        "description": "A token generated by the Athena service that specifies where to continue pagination if a previous request was truncated. To obtain the next set of pages, pass in the NextToken from the response object of the previous page call."
                      }
                    ]
                  },
                  "MaxResults": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/MaxDataCatalogsCount"
                      },
                      {
                        "description": "Specifies the maximum number of data catalogs to return."
                      }
                    ]
                  }
                }
              },
              "ListDatabasesOutput": {
                "type": "object",
                "properties": {
                  "DatabaseList": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/DatabaseList"
                      },
                      {
                        "description": "A list of databases from a data catalog."
                      }
                    ]
                  },
                  "NextToken": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Token"
                      },
                      {
                        "description": "A token generated by the Athena service that specifies where to continue pagination if a previous request was truncated. To obtain the next set of pages, pass in the NextToken from the response object of the previous page call."
                      }
                    ]
                  }
                }
              },
              "ListDatabasesInput": {
                "type": "object",
                "required": [
                  "CatalogName"
                ],
                "title": "ListDatabasesInput",
                "properties": {
                  "CatalogName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/CatalogNameString"
                      },
                      {
                        "description": "The name of the data catalog that contains the databases to return."
                      }
                    ]
                  },
                  "NextToken": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Token"
                      },
                      {
                        "description": "A token generated by the Athena service that specifies where to continue pagination if a previous request was truncated. To obtain the next set of pages, pass in the <code>NextToken</code> from the response object of the previous page call."
                      }
                    ]
                  },
                  "MaxResults": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/MaxDatabasesCount"
                      },
                      {
                        "description": "Specifies the maximum number of results to return."
                      }
                    ]
                  }
                }
              },
              "ListEngineVersionsOutput": {
                "type": "object",
                "properties": {
                  "EngineVersions": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/EngineVersionsList"
                      },
                      {
                        "description": "A list of engine versions that are available to choose from."
                      }
                    ]
                  },
                  "NextToken": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Token"
                      },
                      {
                        "description": "A token generated by the Athena service that specifies where to continue pagination if a previous request was truncated. To obtain the next set of pages, pass in the <code>NextToken</code> from the response object of the previous page call."
                      }
                    ]
                  }
                }
              },
              "ListEngineVersionsInput": {
                "type": "object",
                "title": "ListEngineVersionsInput",
                "properties": {
                  "NextToken": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Token"
                      },
                      {
                        "description": "A token generated by the Athena service that specifies where to continue pagination if a previous request was truncated. To obtain the next set of pages, pass in the <code>NextToken</code> from the response object of the previous page call."
                      }
                    ]
                  },
                  "MaxResults": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/MaxEngineVersionsCount"
                      },
                      {
                        "description": "The maximum number of engine versions to return in this request."
                      }
                    ]
                  }
                }
              },
              "ListExecutorsResponse": {
                "type": "object",
                "required": [
                  "SessionId"
                ],
                "properties": {
                  "SessionId": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/SessionId"
                      },
                      {
                        "description": "The session ID."
                      }
                    ]
                  },
                  "NextToken": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/SessionManagerToken"
                      },
                      {
                        "description": "A token generated by the Athena service that specifies where to continue pagination if a previous request was truncated. To obtain the next set of pages, pass in the <code>NextToken</code> from the response object of the previous page call."
                      }
                    ]
                  },
                  "ExecutorsSummary": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ExecutorsSummaryList"
                      },
                      {
                        "description": "Contains summary information about the executor."
                      }
                    ]
                  }
                }
              },
              "ListExecutorsRequest": {
                "type": "object",
                "required": [
                  "SessionId"
                ],
                "title": "ListExecutorsRequest",
                "properties": {
                  "SessionId": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/SessionId"
                      },
                      {
                        "description": "The session ID."
                      }
                    ]
                  },
                  "ExecutorStateFilter": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ExecutorState"
                      },
                      {
                        "description": "<p>A filter for a specific executor state. A description of each state follows.</p> <p> <code>CREATING</code> - The executor is being started, including acquiring resources.</p> <p> <code>CREATED</code> - The executor has been started.</p> <p> <code>REGISTERED</code> - The executor has been registered.</p> <p> <code>TERMINATING</code> - The executor is in the process of shutting down.</p> <p> <code>TERMINATED</code> - The executor is no longer running.</p> <p> <code>FAILED</code> - Due to a failure, the executor is no longer running.</p>"
                      }
                    ]
                  },
                  "MaxResults": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/MaxListExecutorsCount"
                      },
                      {
                        "description": "The maximum number of executors to return."
                      }
                    ]
                  },
                  "NextToken": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/SessionManagerToken"
                      },
                      {
                        "description": "A token generated by the Athena service that specifies where to continue pagination if a previous request was truncated. To obtain the next set of pages, pass in the <code>NextToken</code> from the response object of the previous page call."
                      }
                    ]
                  }
                }
              },
              "ListNamedQueriesOutput": {
                "type": "object",
                "properties": {
                  "NamedQueryIds": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/NamedQueryIdList"
                      },
                      {
                        "description": "The list of unique query IDs."
                      }
                    ]
                  },
                  "NextToken": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Token"
                      },
                      {
                        "description": "A token generated by the Athena service that specifies where to continue pagination if a previous request was truncated. To obtain the next set of pages, pass in the <code>NextToken</code> from the response object of the previous page call."
                      }
                    ]
                  }
                }
              },
              "ListNamedQueriesInput": {
                "type": "object",
                "title": "ListNamedQueriesInput",
                "properties": {
                  "NextToken": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Token"
                      },
                      {
                        "description": "A token generated by the Athena service that specifies where to continue pagination if a previous request was truncated. To obtain the next set of pages, pass in the <code>NextToken</code> from the response object of the previous page call."
                      }
                    ]
                  },
                  "MaxResults": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/MaxNamedQueriesCount"
                      },
                      {
                        "description": "The maximum number of queries to return in this request."
                      }
                    ]
                  },
                  "WorkGroup": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/WorkGroupName"
                      },
                      {
                        "description": "The name of the workgroup from which the named queries are being returned. If a workgroup is not specified, the saved queries for the primary workgroup are returned."
                      }
                    ]
                  }
                }
              },
              "ListNotebookMetadataOutput": {
                "type": "object",
                "properties": {
                  "NextToken": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Token"
                      },
                      {
                        "description": "A token generated by the Athena service that specifies where to continue pagination if a previous request was truncated. To obtain the next set of pages, pass in the <code>NextToken</code> from the response object of the previous page call."
                      }
                    ]
                  },
                  "NotebookMetadataList": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/NotebookMetadataArray"
                      },
                      {
                        "description": "The list of notebook metadata for the specified workgroup."
                      }
                    ]
                  }
                }
              },
              "ListNotebookMetadataInput": {
                "type": "object",
                "required": [
                  "WorkGroup"
                ],
                "title": "ListNotebookMetadataInput",
                "properties": {
                  "Filters": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/FilterDefinition"
                      },
                      {
                        "description": "Search filter string."
                      }
                    ]
                  },
                  "NextToken": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Token"
                      },
                      {
                        "description": "A token generated by the Athena service that specifies where to continue pagination if a previous request was truncated."
                      }
                    ]
                  },
                  "MaxResults": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/MaxNotebooksCount"
                      },
                      {
                        "description": "Specifies the maximum number of results to return."
                      }
                    ]
                  },
                  "WorkGroup": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/WorkGroupName"
                      },
                      {
                        "description": "The name of the Spark enabled workgroup to retrieve notebook metadata for."
                      }
                    ]
                  }
                }
              },
              "ListNotebookSessionsResponse": {
                "type": "object",
                "required": [
                  "NotebookSessionsList"
                ],
                "properties": {
                  "NotebookSessionsList": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/NotebookSessionsList"
                      },
                      {
                        "description": "A list of the sessions belonging to the notebook."
                      }
                    ]
                  },
                  "NextToken": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Token"
                      },
                      {
                        "description": "A token generated by the Athena service that specifies where to continue pagination if a previous request was truncated. To obtain the next set of pages, pass in the <code>NextToken</code> from the response object of the previous page call."
                      }
                    ]
                  }
                }
              },
              "ListNotebookSessionsRequest": {
                "type": "object",
                "required": [
                  "NotebookId"
                ],
                "title": "ListNotebookSessionsRequest",
                "properties": {
                  "NotebookId": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/NotebookId"
                      },
                      {
                        "description": "The ID of the notebook to list sessions for."
                      }
                    ]
                  },
                  "MaxResults": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/MaxSessionsCount"
                      },
                      {
                        "description": "The maximum number of notebook sessions to return."
                      }
                    ]
                  },
                  "NextToken": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Token"
                      },
                      {
                        "description": "A token generated by the Athena service that specifies where to continue pagination if a previous request was truncated. To obtain the next set of pages, pass in the <code>NextToken</code> from the response object of the previous page call."
                      }
                    ]
                  }
                }
              },
              "ListPreparedStatementsOutput": {
                "type": "object",
                "properties": {
                  "PreparedStatements": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/PreparedStatementsList"
                      },
                      {
                        "description": "The list of prepared statements for the workgroup."
                      }
                    ]
                  },
                  "NextToken": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Token"
                      },
                      {
                        "description": "A token generated by the Athena service that specifies where to continue pagination if a previous request was truncated. To obtain the next set of pages, pass in the <code>NextToken</code> from the response object of the previous page call."
                      }
                    ]
                  }
                }
              },
              "ListPreparedStatementsInput": {
                "type": "object",
                "required": [
                  "WorkGroup"
                ],
                "title": "ListPreparedStatementsInput",
                "properties": {
                  "WorkGroup": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/WorkGroupName"
                      },
                      {
                        "description": "The workgroup to list the prepared statements for."
                      }
                    ]
                  },
                  "NextToken": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Token"
                      },
                      {
                        "description": "A token generated by the Athena service that specifies where to continue pagination if a previous request was truncated. To obtain the next set of pages, pass in the <code>NextToken</code> from the response object of the previous page call."
                      }
                    ]
                  },
                  "MaxResults": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/MaxPreparedStatementsCount"
                      },
                      {
                        "description": "The maximum number of results to return in this request."
                      }
                    ]
                  }
                }
              },
              "ListQueryExecutionsOutput": {
                "type": "object",
                "properties": {
                  "QueryExecutionIds": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/QueryExecutionIdList"
                      },
                      {
                        "description": "The unique IDs of each query execution as an array of strings."
                      }
                    ]
                  },
                  "NextToken": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Token"
                      },
                      {
                        "description": "A token to be used by the next request if this request is truncated."
                      }
                    ]
                  }
                }
              },
              "ListQueryExecutionsInput": {
                "type": "object",
                "title": "ListQueryExecutionsInput",
                "properties": {
                  "NextToken": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Token"
                      },
                      {
                        "description": "A token generated by the Athena service that specifies where to continue pagination if a previous request was truncated. To obtain the next set of pages, pass in the <code>NextToken</code> from the response object of the previous page call."
                      }
                    ]
                  },
                  "MaxResults": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/MaxQueryExecutionsCount"
                      },
                      {
                        "description": "The maximum number of query executions to return in this request."
                      }
                    ]
                  },
                  "WorkGroup": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/WorkGroupName"
                      },
                      {
                        "description": "The name of the workgroup from which queries are being returned. If a workgroup is not specified, a list of available query execution IDs for the queries in the primary workgroup is returned."
                      }
                    ]
                  }
                }
              },
              "ListSessionsResponse": {
                "type": "object",
                "properties": {
                  "NextToken": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/SessionManagerToken"
                      },
                      {
                        "description": "A token generated by the Athena service that specifies where to continue pagination if a previous request was truncated. To obtain the next set of pages, pass in the <code>NextToken</code> from the response object of the previous page call."
                      }
                    ]
                  },
                  "Sessions": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/SessionsList"
                      },
                      {
                        "description": "A list of sessions."
                      }
                    ]
                  }
                }
              },
              "ListSessionsRequest": {
                "type": "object",
                "required": [
                  "WorkGroup"
                ],
                "title": "ListSessionsRequest",
                "properties": {
                  "WorkGroup": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/WorkGroupName"
                      },
                      {
                        "description": "The workgroup to which the session belongs."
                      }
                    ]
                  },
                  "StateFilter": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/SessionState"
                      },
                      {
                        "description": "<p>A filter for a specific session state. A description of each state follows.</p> <p> <code>CREATING</code> - The session is being started, including acquiring resources.</p> <p> <code>CREATED</code> - The session has been started.</p> <p> <code>IDLE</code> - The session is able to accept a calculation.</p> <p> <code>BUSY</code> - The session is processing another task and is unable to accept a calculation.</p> <p> <code>TERMINATING</code> - The session is in the process of shutting down.</p> <p> <code>TERMINATED</code> - The session and its resources are no longer running.</p> <p> <code>DEGRADED</code> - The session has no healthy coordinators.</p> <p> <code>FAILED</code> - Due to a failure, the session and its resources are no longer running.</p>"
                      }
                    ]
                  },
                  "MaxResults": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/MaxSessionsCount"
                      },
                      {
                        "description": "The maximum number of sessions to return."
                      }
                    ]
                  },
                  "NextToken": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/SessionManagerToken"
                      },
                      {
                        "description": "A token generated by the Athena service that specifies where to continue pagination if a previous request was truncated. To obtain the next set of pages, pass in the <code>NextToken</code> from the response object of the previous page call."
                      }
                    ]
                  }
                }
              },
              "ListTableMetadataOutput": {
                "type": "object",
                "properties": {
                  "TableMetadataList": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/TableMetadataList"
                      },
                      {
                        "description": "A list of table metadata."
                      }
                    ]
                  },
                  "NextToken": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Token"
                      },
                      {
                        "description": "A token generated by the Athena service that specifies where to continue pagination if a previous request was truncated. To obtain the next set of pages, pass in the NextToken from the response object of the previous page call."
                      }
                    ]
                  }
                }
              },
              "ListTableMetadataInput": {
                "type": "object",
                "required": [
                  "CatalogName",
                  "DatabaseName"
                ],
                "title": "ListTableMetadataInput",
                "properties": {
                  "CatalogName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/CatalogNameString"
                      },
                      {
                        "description": "The name of the data catalog for which table metadata should be returned."
                      }
                    ]
                  },
                  "DatabaseName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/NameString"
                      },
                      {
                        "description": "The name of the database for which table metadata should be returned."
                      }
                    ]
                  },
                  "Expression": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ExpressionString"
                      },
                      {
                        "description": "A regex filter that pattern-matches table names. If no expression is supplied, metadata for all tables are listed."
                      }
                    ]
                  },
                  "NextToken": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Token"
                      },
                      {
                        "description": "A token generated by the Athena service that specifies where to continue pagination if a previous request was truncated. To obtain the next set of pages, pass in the NextToken from the response object of the previous page call."
                      }
                    ]
                  },
                  "MaxResults": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/MaxTableMetadataCount"
                      },
                      {
                        "description": "Specifies the maximum number of results to return."
                      }
                    ]
                  }
                }
              },
              "ListTagsForResourceOutput": {
                "type": "object",
                "properties": {
                  "Tags": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/TagList"
                      },
                      {
                        "description": "The list of tags associated with the specified resource."
                      }
                    ]
                  },
                  "NextToken": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Token"
                      },
                      {
                        "description": "A token to be used by the next request if this request is truncated."
                      }
                    ]
                  }
                }
              },
              "ListTagsForResourceInput": {
                "type": "object",
                "required": [
                  "ResourceARN"
                ],
                "title": "ListTagsForResourceInput",
                "properties": {
                  "ResourceARN": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/AmazonResourceName"
                      },
                      {
                        "description": "Lists the tags for the resource with the specified ARN."
                      }
                    ]
                  },
                  "NextToken": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Token"
                      },
                      {
                        "description": "The token for the next set of results, or null if there are no additional results for this request, where the request lists the tags for the resource with the specified ARN."
                      }
                    ]
                  },
                  "MaxResults": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/MaxTagsCount"
                      },
                      {
                        "description": "The maximum number of results to be returned per request that lists the tags for the resource."
                      }
                    ]
                  }
                }
              },
              "ListWorkGroupsOutput": {
                "type": "object",
                "properties": {
                  "WorkGroups": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/WorkGroupsList"
                      },
                      {
                        "description": "A list of <a>WorkGroupSummary</a> objects that include the names, descriptions, creation times, and states for each workgroup."
                      }
                    ]
                  },
                  "NextToken": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Token"
                      },
                      {
                        "description": "A token generated by the Athena service that specifies where to continue pagination if a previous request was truncated. To obtain the next set of pages, pass in the <code>NextToken</code> from the response object of the previous page call."
                      }
                    ]
                  }
                }
              },
              "ListWorkGroupsInput": {
                "type": "object",
                "title": "ListWorkGroupsInput",
                "properties": {
                  "NextToken": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Token"
                      },
                      {
                        "description": "A token generated by the Athena service that specifies where to continue pagination if a previous request was truncated. To obtain the next set of pages, pass in the <code>NextToken</code> from the response object of the previous page call."
                      }
                    ]
                  },
                  "MaxResults": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/MaxWorkGroupsCount"
                      },
                      {
                        "description": "The maximum number of workgroups to return in this request."
                      }
                    ]
                  }
                }
              },
              "StartCalculationExecutionResponse": {
                "type": "object",
                "properties": {
                  "CalculationExecutionId": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/CalculationExecutionId"
                      },
                      {
                        "description": "The calculation execution UUID."
                      }
                    ]
                  },
                  "State": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/CalculationExecutionState"
                      },
                      {
                        "description": "<p> <code>CREATING</code> - The calculation is in the process of being created.</p> <p> <code>CREATED</code> - The calculation has been created and is ready to run.</p> <p> <code>QUEUED</code> - The calculation has been queued for processing.</p> <p> <code>RUNNING</code> - The calculation is running.</p> <p> <code>CANCELING</code> - A request to cancel the calculation has been received and the system is working to stop it.</p> <p> <code>CANCELED</code> - The calculation is no longer running as the result of a cancel request.</p> <p> <code>COMPLETED</code> - The calculation has completed without error.</p> <p> <code>FAILED</code> - The calculation failed and is no longer running.</p>"
                      }
                    ]
                  }
                }
              },
              "StartCalculationExecutionRequest": {
                "type": "object",
                "required": [
                  "SessionId"
                ],
                "title": "StartCalculationExecutionRequest",
                "properties": {
                  "SessionId": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/SessionId"
                      },
                      {
                        "description": "The session ID."
                      }
                    ]
                  },
                  "Description": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/DescriptionString"
                      },
                      {
                        "description": "A description of the calculation."
                      }
                    ]
                  },
                  "CalculationConfiguration": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/CalculationConfiguration"
                      },
                      {
                        "deprecated": true,
                        "description": "Contains configuration information for the calculation.Kepler Post GA Tasks : https://sim.amazon.com/issues/ATHENA-39828"
                      }
                    ]
                  },
                  "CodeBlock": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/CodeBlock"
                      },
                      {
                        "description": "A string that contains the code of the calculation."
                      }
                    ]
                  },
                  "ClientRequestToken": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/IdempotencyToken"
                      },
                      {
                        "description": "<p>A unique case-sensitive string used to ensure the request to create the calculation is idempotent (executes only once). If another <code>StartCalculationExecutionRequest</code> is received, the same response is returned and another calculation is not created. If a parameter has changed, an error is returned.</p> <important> <p>This token is listed as not required because Amazon Web Services SDKs (for example the Amazon Web Services SDK for Java) auto-generate the token for users. If you are not using the Amazon Web Services SDK or the Amazon Web Services CLI, you must provide this token or the action will fail.</p> </important>"
                      }
                    ]
                  }
                }
              },
              "StartQueryExecutionOutput": {
                "type": "object",
                "properties": {
                  "QueryExecutionId": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/QueryExecutionId"
                      },
                      {
                        "description": "The unique ID of the query that ran as a result of this request."
                      }
                    ]
                  }
                }
              },
              "StartQueryExecutionInput": {
                "type": "object",
                "required": [
                  "QueryString"
                ],
                "title": "StartQueryExecutionInput",
                "properties": {
                  "QueryString": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/QueryString"
                      },
                      {
                        "description": "The SQL query statements to be executed."
                      }
                    ]
                  },
                  "ClientRequestToken": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/IdempotencyToken"
                      },
                      {
                        "description": "<p>A unique case-sensitive string used to ensure the request to create the query is idempotent (executes only once). If another <code>StartQueryExecution</code> request is received, the same response is returned and another query is not created. If a parameter has changed, for example, the <code>QueryString</code>, an error is returned.</p> <important> <p>This token is listed as not required because Amazon Web Services SDKs (for example the Amazon Web Services SDK for Java) auto-generate the token for users. If you are not using the Amazon Web Services SDK or the Amazon Web Services CLI, you must provide this token or the action will fail.</p> </important>"
                      }
                    ]
                  },
                  "QueryExecutionContext": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/QueryExecutionContext"
                      },
                      {
                        "description": "The database within which the query executes."
                      }
                    ]
                  },
                  "ResultConfiguration": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ResultConfiguration"
                      },
                      {
                        "description": "Specifies information about where and how to save the results of the query execution. If the query runs in a workgroup, then workgroup's settings may override query settings. This affects the query results location. The workgroup settings override is specified in EnforceWorkGroupConfiguration (true/false) in the WorkGroupConfiguration. See <a>WorkGroupConfiguration$EnforceWorkGroupConfiguration</a>."
                      }
                    ]
                  },
                  "WorkGroup": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/WorkGroupName"
                      },
                      {
                        "description": "The name of the workgroup in which the query is being started."
                      }
                    ]
                  },
                  "ExecutionParameters": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ExecutionParameters"
                      },
                      {
                        "description": "A list of values for the parameters in a query. The values are applied sequentially to the parameters in the query in the order in which the parameters occur."
                      }
                    ]
                  },
                  "ResultReuseConfiguration": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ResultReuseConfiguration"
                      },
                      {
                        "description": "Specifies the query result reuse behavior for the query."
                      }
                    ]
                  }
                }
              },
              "StartSessionResponse": {
                "type": "object",
                "properties": {
                  "SessionId": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/SessionId"
                      },
                      {
                        "description": "The session ID."
                      }
                    ]
                  },
                  "State": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/SessionState"
                      },
                      {
                        "description": "<p>The state of the session. A description of each state follows.</p> <p> <code>CREATING</code> - The session is being started, including acquiring resources.</p> <p> <code>CREATED</code> - The session has been started.</p> <p> <code>IDLE</code> - The session is able to accept a calculation.</p> <p> <code>BUSY</code> - The session is processing another task and is unable to accept a calculation.</p> <p> <code>TERMINATING</code> - The session is in the process of shutting down.</p> <p> <code>TERMINATED</code> - The session and its resources are no longer running.</p> <p> <code>DEGRADED</code> - The session has no healthy coordinators.</p> <p> <code>FAILED</code> - Due to a failure, the session and its resources are no longer running.</p>"
                      }
                    ]
                  }
                }
              },
              "StartSessionRequest": {
                "type": "object",
                "required": [
                  "WorkGroup",
                  "EngineConfiguration"
                ],
                "title": "StartSessionRequest",
                "properties": {
                  "Description": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/DescriptionString"
                      },
                      {
                        "description": "The session description."
                      }
                    ]
                  },
                  "WorkGroup": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/WorkGroupName"
                      },
                      {
                        "description": "The workgroup to which the session belongs."
                      }
                    ]
                  },
                  "EngineConfiguration": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/EngineConfiguration"
                      },
                      {
                        "description": "Contains engine data processing unit (DPU) configuration settings and parameter mappings."
                      }
                    ]
                  },
                  "NotebookVersion": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/NameString"
                      },
                      {
                        "description": "The notebook version. This value is supplied automatically for notebook sessions in the Athena console and is not required for programmatic session access. The only valid notebook version is <code>Athena notebook version 1</code>. If you specify a value for <code>NotebookVersion</code>, you must also specify a value for <code>NotebookId</code>. See <a>EngineConfiguration$AdditionalConfigs</a>."
                      }
                    ]
                  },
                  "SessionIdleTimeoutInMinutes": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/SessionIdleTimeoutInMinutes"
                      },
                      {
                        "description": "The idle timeout in minutes for the session."
                      }
                    ]
                  },
                  "ClientRequestToken": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/IdempotencyToken"
                      },
                      {
                        "description": "<p>A unique case-sensitive string used to ensure the request to create the session is idempotent (executes only once). If another <code>StartSessionRequest</code> is received, the same response is returned and another session is not created. If a parameter has changed, an error is returned.</p> <important> <p>This token is listed as not required because Amazon Web Services SDKs (for example the Amazon Web Services SDK for Java) auto-generate the token for users. If you are not using the Amazon Web Services SDK or the Amazon Web Services CLI, you must provide this token or the action will fail.</p> </important>"
                      }
                    ]
                  }
                }
              },
              "SessionAlreadyExistsException": {},
              "StopCalculationExecutionResponse": {
                "type": "object",
                "properties": {
                  "State": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/CalculationExecutionState"
                      },
                      {
                        "description": "<p> <code>CREATING</code> - The calculation is in the process of being created.</p> <p> <code>CREATED</code> - The calculation has been created and is ready to run.</p> <p> <code>QUEUED</code> - The calculation has been queued for processing.</p> <p> <code>RUNNING</code> - The calculation is running.</p> <p> <code>CANCELING</code> - A request to cancel the calculation has been received and the system is working to stop it.</p> <p> <code>CANCELED</code> - The calculation is no longer running as the result of a cancel request.</p> <p> <code>COMPLETED</code> - The calculation has completed without error.</p> <p> <code>FAILED</code> - The calculation failed and is no longer running.</p>"
                      }
                    ]
                  }
                }
              },
              "StopCalculationExecutionRequest": {
                "type": "object",
                "required": [
                  "CalculationExecutionId"
                ],
                "title": "StopCalculationExecutionRequest",
                "properties": {
                  "CalculationExecutionId": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/CalculationExecutionId"
                      },
                      {
                        "description": "The calculation execution UUID."
                      }
                    ]
                  }
                }
              },
              "StopQueryExecutionOutput": {
                "type": "object",
                "properties": {}
              },
              "StopQueryExecutionInput": {
                "type": "object",
                "required": [
                  "QueryExecutionId"
                ],
                "title": "StopQueryExecutionInput",
                "properties": {
                  "QueryExecutionId": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/QueryExecutionId"
                      },
                      {
                        "description": "The unique ID of the query execution to stop."
                      }
                    ]
                  }
                }
              },
              "TagResourceOutput": {
                "type": "object",
                "properties": {}
              },
              "TagResourceInput": {
                "type": "object",
                "required": [
                  "ResourceARN",
                  "Tags"
                ],
                "title": "TagResourceInput",
                "properties": {
                  "ResourceARN": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/AmazonResourceName"
                      },
                      {
                        "description": "Specifies the ARN of the Athena resource (workgroup or data catalog) to which tags are to be added."
                      }
                    ]
                  },
                  "Tags": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/TagList"
                      },
                      {
                        "description": "A collection of one or more tags, separated by commas, to be added to an Athena workgroup or data catalog resource."
                      }
                    ]
                  }
                }
              },
              "TerminateSessionResponse": {
                "type": "object",
                "properties": {
                  "State": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/SessionState"
                      },
                      {
                        "description": "<p>The state of the session. A description of each state follows.</p> <p> <code>CREATING</code> - The session is being started, including acquiring resources.</p> <p> <code>CREATED</code> - The session has been started.</p> <p> <code>IDLE</code> - The session is able to accept a calculation.</p> <p> <code>BUSY</code> - The session is processing another task and is unable to accept a calculation.</p> <p> <code>TERMINATING</code> - The session is in the process of shutting down.</p> <p> <code>TERMINATED</code> - The session and its resources are no longer running.</p> <p> <code>DEGRADED</code> - The session has no healthy coordinators.</p> <p> <code>FAILED</code> - Due to a failure, the session and its resources are no longer running.</p>"
                      }
                    ]
                  }
                }
              },
              "TerminateSessionRequest": {
                "type": "object",
                "required": [
                  "SessionId"
                ],
                "title": "TerminateSessionRequest",
                "properties": {
                  "SessionId": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/SessionId"
                      },
                      {
                        "description": "The session ID."
                      }
                    ]
                  }
                }
              },
              "UntagResourceOutput": {
                "type": "object",
                "properties": {}
              },
              "UntagResourceInput": {
                "type": "object",
                "required": [
                  "ResourceARN",
                  "TagKeys"
                ],
                "title": "UntagResourceInput",
                "properties": {
                  "ResourceARN": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/AmazonResourceName"
                      },
                      {
                        "description": "Specifies the ARN of the resource from which tags are to be removed."
                      }
                    ]
                  },
                  "TagKeys": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/TagKeyList"
                      },
                      {
                        "description": "A comma-separated list of one or more tag keys whose tags are to be removed from the specified resource."
                      }
                    ]
                  }
                }
              },
              "UpdateDataCatalogOutput": {
                "type": "object",
                "properties": {}
              },
              "UpdateDataCatalogInput": {
                "type": "object",
                "required": [
                  "Name",
                  "Type"
                ],
                "title": "UpdateDataCatalogInput",
                "properties": {
                  "Name": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/CatalogNameString"
                      },
                      {
                        "description": "The name of the data catalog to update. The catalog name must be unique for the Amazon Web Services account and can use a maximum of 127 alphanumeric, underscore, at sign, or hyphen characters. The remainder of the length constraint of 256 is reserved for use by Athena."
                      }
                    ]
                  },
                  "Type": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/DataCatalogType"
                      },
                      {
                        "description": "Specifies the type of data catalog to update. Specify <code>LAMBDA</code> for a federated catalog, <code>HIVE</code> for an external hive metastore, or <code>GLUE</code> for an Glue Data Catalog."
                      }
                    ]
                  },
                  "Description": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/DescriptionString"
                      },
                      {
                        "description": "New or modified text that describes the data catalog."
                      }
                    ]
                  },
                  "Parameters": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ParametersMap"
                      },
                      {
                        "description": "<p>Specifies the Lambda function or functions to use for updating the data catalog. This is a mapping whose values depend on the catalog type. </p> <ul> <li> <p>For the <code>HIVE</code> data catalog type, use the following syntax. The <code>metadata-function</code> parameter is required. <code>The sdk-version</code> parameter is optional and defaults to the currently supported version.</p> <p> <code>metadata-function=<i>lambda_arn</i>, sdk-version=<i>version_number</i> </code> </p> </li> <li> <p>For the <code>LAMBDA</code> data catalog type, use one of the following sets of required parameters, but not both.</p> <ul> <li> <p>If you have one Lambda function that processes metadata and another for reading the actual data, use the following syntax. Both parameters are required.</p> <p> <code>metadata-function=<i>lambda_arn</i>, record-function=<i>lambda_arn</i> </code> </p> </li> <li> <p> If you have a composite Lambda function that processes both metadata and data, use the following syntax to specify your Lambda function.</p> <p> <code>function=<i>lambda_arn</i> </code> </p> </li> </ul> </li> </ul>"
                      }
                    ]
                  }
                }
              },
              "UpdateNamedQueryOutput": {
                "type": "object",
                "properties": {}
              },
              "UpdateNamedQueryInput": {
                "type": "object",
                "required": [
                  "NamedQueryId",
                  "Name",
                  "QueryString"
                ],
                "title": "UpdateNamedQueryInput",
                "properties": {
                  "NamedQueryId": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/NamedQueryId"
                      },
                      {
                        "description": "The unique identifier (UUID) of the query."
                      }
                    ]
                  },
                  "Name": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/NameString"
                      },
                      {
                        "description": "The name of the query."
                      }
                    ]
                  },
                  "Description": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/NamedQueryDescriptionString"
                      },
                      {
                        "description": "The query description."
                      }
                    ]
                  },
                  "QueryString": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/QueryString"
                      },
                      {
                        "description": "The contents of the query with all query statements."
                      }
                    ]
                  }
                }
              },
              "UpdateNotebookOutput": {
                "type": "object",
                "properties": {}
              },
              "UpdateNotebookInput": {
                "type": "object",
                "required": [
                  "NotebookId",
                  "Payload",
                  "Type"
                ],
                "title": "UpdateNotebookInput",
                "properties": {
                  "NotebookId": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/NotebookId"
                      },
                      {
                        "description": "The ID of the notebook to update."
                      }
                    ]
                  },
                  "Payload": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Payload"
                      },
                      {
                        "description": "The updated content for the notebook."
                      }
                    ]
                  },
                  "Type": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/NotebookType"
                      },
                      {
                        "description": "The notebook content type. Currently, the only valid type is <code>IPYNB</code>."
                      }
                    ]
                  },
                  "SessionId": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/SessionId"
                      },
                      {
                        "description": "The active notebook session ID. Required if the notebook has an active session."
                      }
                    ]
                  },
                  "ClientRequestToken": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ClientRequestToken"
                      },
                      {
                        "description": "<p>A unique case-sensitive string used to ensure the request to create the notebook is idempotent (executes only once).</p> <important> <p>This token is listed as not required because Amazon Web Services SDKs (for example the Amazon Web Services SDK for Java) auto-generate the token for you. If you are not using the Amazon Web Services SDK or the Amazon Web Services CLI, you must provide this token or the action will fail.</p> </important>"
                      }
                    ]
                  }
                }
              },
              "UpdateNotebookMetadataOutput": {
                "type": "object",
                "properties": {}
              },
              "UpdateNotebookMetadataInput": {
                "type": "object",
                "required": [
                  "NotebookId",
                  "Name"
                ],
                "title": "UpdateNotebookMetadataInput",
                "properties": {
                  "NotebookId": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/NotebookId"
                      },
                      {
                        "description": "The ID of the notebook to update the metadata for."
                      }
                    ]
                  },
                  "ClientRequestToken": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ClientRequestToken"
                      },
                      {
                        "description": "<p>A unique case-sensitive string used to ensure the request to create the notebook is idempotent (executes only once).</p> <important> <p>This token is listed as not required because Amazon Web Services SDKs (for example the Amazon Web Services SDK for Java) auto-generate the token for you. If you are not using the Amazon Web Services SDK or the Amazon Web Services CLI, you must provide this token or the action will fail.</p> </important>"
                      }
                    ]
                  },
                  "Name": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/NotebookName"
                      },
                      {
                        "description": "The name to update the notebook to."
                      }
                    ]
                  }
                }
              },
              "UpdatePreparedStatementOutput": {
                "type": "object",
                "properties": {}
              },
              "UpdatePreparedStatementInput": {
                "type": "object",
                "required": [
                  "StatementName",
                  "WorkGroup",
                  "QueryStatement"
                ],
                "title": "UpdatePreparedStatementInput",
                "properties": {
                  "StatementName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/StatementName"
                      },
                      {
                        "description": "The name of the prepared statement."
                      }
                    ]
                  },
                  "WorkGroup": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/WorkGroupName"
                      },
                      {
                        "description": "The workgroup for the prepared statement."
                      }
                    ]
                  },
                  "QueryStatement": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/QueryString"
                      },
                      {
                        "description": "The query string for the prepared statement."
                      }
                    ]
                  },
                  "Description": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/DescriptionString"
                      },
                      {
                        "description": "The description of the prepared statement."
                      }
                    ]
                  }
                }
              },
              "UpdateWorkGroupOutput": {
                "type": "object",
                "properties": {}
              },
              "UpdateWorkGroupInput": {
                "type": "object",
                "required": [
                  "WorkGroup"
                ],
                "title": "UpdateWorkGroupInput",
                "properties": {
                  "WorkGroup": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/WorkGroupName"
                      },
                      {
                        "description": "The specified workgroup that will be updated."
                      }
                    ]
                  },
                  "Description": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/WorkGroupDescriptionString"
                      },
                      {
                        "description": "The workgroup description."
                      }
                    ]
                  },
                  "ConfigurationUpdates": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/WorkGroupConfigurationUpdates"
                      },
                      {
                        "description": "Contains configuration updates for an Athena SQL workgroup."
                      }
                    ]
                  },
                  "State": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/WorkGroupState"
                      },
                      {
                        "description": "The workgroup state that will be updated for the given workgroup."
                      }
                    ]
                  }
                }
              },
              "S3AclOption": {
                "type": "string",
                "enum": [
                  "BUCKET_OWNER_FULL_CONTROL"
                ]
              },
              "AclConfiguration": {
                "type": "object",
                "required": [
                  "S3AclOption"
                ],
                "properties": {
                  "S3AclOption": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/S3AclOption"
                      },
                      {
                        "description": "The Amazon S3 canned ACL that Athena should specify when storing query results. Currently the only supported canned ACL is <code>BUCKET_OWNER_FULL_CONTROL</code>. If a query runs in a workgroup and the workgroup overrides client-side settings, then the Amazon S3 canned ACL specified in the workgroup's settings is used for all queries that run in the workgroup. For more information about Amazon S3 canned ACLs, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/userguide/acl-overview.html#canned-acl\">Canned ACL</a> in the <i>Amazon S3 User Guide</i>."
                      }
                    ]
                  }
                },
                "description": "Indicates that an Amazon S3 canned ACL should be set to control ownership of stored query results. When Athena stores query results in Amazon S3, the canned ACL is set with the <code>x-amz-acl</code> request header. For more information about S3 Object Ownership, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/userguide/about-object-ownership.html#object-ownership-overview\">Object Ownership settings</a> in the <i>Amazon S3 User Guide</i>."
              },
              "Age": {
                "type": "integer",
                "minimum": 0,
                "maximum": 10080
              },
              "AmazonResourceName": {
                "type": "string",
                "minLength": 1,
                "maxLength": 1011
              },
              "NameString": {
                "type": "string",
                "minLength": 1,
                "maxLength": 128
              },
              "SupportedDPUSizeList": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Integer"
                }
              },
              "ApplicationDPUSizes": {
                "type": "object",
                "properties": {
                  "ApplicationRuntimeId": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/NameString"
                      },
                      {
                        "description": "The name of the supported application runtime (for example, <code>Athena notebook version 1</code>)."
                      }
                    ]
                  },
                  "SupportedDPUSizes": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/SupportedDPUSizeList"
                      },
                      {
                        "description": "A list of the supported DPU sizes that the application runtime supports."
                      }
                    ]
                  }
                },
                "description": "Contains the application runtime IDs and their supported DPU sizes."
              },
              "ApplicationDPUSizesList": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ApplicationDPUSizes"
                }
              },
              "ErrorCategory": {
                "type": "integer",
                "minimum": 1,
                "maximum": 3
              },
              "ErrorType": {
                "type": "integer",
                "minimum": 0,
                "maximum": 9999
              },
              "Boolean": {
                "type": "boolean"
              },
              "String": {
                "type": "string"
              },
              "AthenaError": {
                "type": "object",
                "properties": {
                  "ErrorCategory": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ErrorCategory"
                      },
                      {
                        "description": "<p>An integer value that specifies the category of a query failure error. The following list shows the category for each integer value.</p> <p> <b>1</b> - System</p> <p> <b>2</b> - User</p> <p> <b>3</b> - Other</p>"
                      }
                    ]
                  },
                  "ErrorType": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ErrorType"
                      },
                      {
                        "description": "An integer value that provides specific information about an Athena query error. For the meaning of specific values, see the <a href=\"https://docs.aws.amazon.com/athena/latest/ug/error-reference.html#error-reference-error-type-reference\">Error Type Reference</a> in the <i>Amazon Athena User Guide</i>."
                      }
                    ]
                  },
                  "Retryable": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Boolean"
                      },
                      {
                        "description": "True if the query might succeed if resubmitted."
                      }
                    ]
                  },
                  "ErrorMessage": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/String"
                      },
                      {
                        "description": "Contains a short description of the error that occurred."
                      }
                    ]
                  }
                },
                "description": "Provides information about an Athena query error. The <code>AthenaError</code> feature provides standardized error information to help you understand failed queries and take steps after a query failure occurs. <code>AthenaError</code> includes an <code>ErrorCategory</code> field that specifies whether the cause of the failed query is due to system error, user error, or other error."
              },
              "AuthToken": {
                "type": "string",
                "maxLength": 2048
              },
              "AwsAccountId": {
                "type": "string",
                "pattern": "^[0-9]+$",
                "minLength": 12,
                "maxLength": 12
              },
              "NamedQueryIdList": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/NamedQueryId"
                },
                "minItems": 1,
                "maxItems": 50
              },
              "NamedQueryList": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/NamedQuery"
                }
              },
              "UnprocessedNamedQueryIdList": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/UnprocessedNamedQueryId"
                }
              },
              "PreparedStatementNameList": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/StatementName"
                }
              },
              "WorkGroupName": {
                "type": "string",
                "pattern": "[a-zA-Z0-9._-]{1,128}"
              },
              "PreparedStatementDetailsList": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PreparedStatement"
                }
              },
              "UnprocessedPreparedStatementNameList": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/UnprocessedPreparedStatementName"
                }
              },
              "QueryExecutionIdList": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/QueryExecutionId"
                },
                "minItems": 1,
                "maxItems": 50
              },
              "QueryExecutionList": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/QueryExecution"
                }
              },
              "UnprocessedQueryExecutionIdList": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/UnprocessedQueryExecutionId"
                }
              },
              "BoxedBoolean": {
                "type": "boolean"
              },
              "BytesScannedCutoffValue": {
                "type": "integer",
                "minimum": 10000000
              },
              "CodeBlock": {
                "type": "string",
                "maxLength": 68000
              },
              "CalculationConfiguration": {
                "type": "object",
                "properties": {
                  "CodeBlock": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/CodeBlock"
                      },
                      {
                        "description": "A string that contains the code for the calculation."
                      }
                    ]
                  }
                },
                "description": "Contains configuration information for the calculation."
              },
              "CalculationExecutionId": {
                "type": "string",
                "minLength": 1,
                "maxLength": 36
              },
              "CalculationExecutionState": {
                "type": "string",
                "enum": [
                  "CREATING",
                  "CREATED",
                  "QUEUED",
                  "RUNNING",
                  "CANCELING",
                  "CANCELED",
                  "COMPLETED",
                  "FAILED"
                ]
              },
              "S3Uri": {
                "type": "string",
                "pattern": "^(https|s3|S3)://([^/]+)/?(.*)$",
                "maxLength": 1024
              },
              "CalculationResultType": {
                "type": "string",
                "pattern": "\\w+\\/[-+.\\w]+",
                "minLength": 1,
                "maxLength": 256
              },
              "CalculationResult": {
                "type": "object",
                "properties": {
                  "StdOutS3Uri": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/S3Uri"
                      },
                      {
                        "description": "The Amazon S3 location of the <code>stdout</code> file for the calculation."
                      }
                    ]
                  },
                  "StdErrorS3Uri": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/S3Uri"
                      },
                      {
                        "description": "The Amazon S3 location of the <code>stderr</code> error messages file for the calculation."
                      }
                    ]
                  },
                  "ResultS3Uri": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/S3Uri"
                      },
                      {
                        "description": "The Amazon S3 location of the folder for the calculation results."
                      }
                    ]
                  },
                  "ResultType": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/CalculationResultType"
                      },
                      {
                        "description": "The data format of the calculation result."
                      }
                    ]
                  }
                },
                "description": "Contains information about an application-specific calculation result."
              },
              "Long": {
                "type": "integer"
              },
              "DescriptionString": {
                "type": "string",
                "minLength": 1,
                "maxLength": 1024
              },
              "CalculationStatistics": {
                "type": "object",
                "properties": {
                  "DpuExecutionInMillis": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Long"
                      },
                      {
                        "description": "The data processing unit execution time in milliseconds for the calculation."
                      }
                    ]
                  },
                  "Progress": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/DescriptionString"
                      },
                      {
                        "description": "The progress of the calculation."
                      }
                    ]
                  }
                },
                "description": "Contains statistics for a notebook calculation."
              },
              "Date": {
                "type": "string",
                "format": "date-time"
              },
              "CalculationStatus": {
                "type": "object",
                "properties": {
                  "SubmissionDateTime": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Date"
                      },
                      {
                        "description": "The date and time the calculation was submitted for processing."
                      }
                    ]
                  },
                  "CompletionDateTime": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Date"
                      },
                      {
                        "description": "The date and time the calculation completed processing."
                      }
                    ]
                  },
                  "State": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/CalculationExecutionState"
                      },
                      {
                        "description": "<p>The state of the calculation execution. A description of each state follows.</p> <p> <code>CREATING</code> - The calculation is in the process of being created.</p> <p> <code>CREATED</code> - The calculation has been created and is ready to run.</p> <p> <code>QUEUED</code> - The calculation has been queued for processing.</p> <p> <code>RUNNING</code> - The calculation is running.</p> <p> <code>CANCELING</code> - A request to cancel the calculation has been received and the system is working to stop it.</p> <p> <code>CANCELED</code> - The calculation is no longer running as the result of a cancel request.</p> <p> <code>COMPLETED</code> - The calculation has completed without error.</p> <p> <code>FAILED</code> - The calculation failed and is no longer running.</p>"
                      }
                    ]
                  },
                  "StateChangeReason": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/DescriptionString"
                      },
                      {
                        "description": "The reason for the calculation state change (for example, the calculation was canceled because the session was terminated)."
                      }
                    ]
                  }
                },
                "description": "Contains information about the status of a notebook calculation."
              },
              "CalculationSummary": {
                "type": "object",
                "properties": {
                  "CalculationExecutionId": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/CalculationExecutionId"
                      },
                      {
                        "description": "The calculation execution UUID."
                      }
                    ]
                  },
                  "Description": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/DescriptionString"
                      },
                      {
                        "description": "A description of the calculation."
                      }
                    ]
                  },
                  "Status": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/CalculationStatus"
                      },
                      {
                        "description": "Contains information about the status of the calculation."
                      }
                    ]
                  }
                },
                "description": "Summary information for a notebook calculation."
              },
              "CalculationsList": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CalculationSummary"
                },
                "minItems": 0,
                "maxItems": 100
              },
              "CatalogNameString": {
                "type": "string",
                "minLength": 1,
                "maxLength": 256,
                "x-pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*"
              },
              "ClientRequestToken": {
                "type": "string",
                "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}",
                "minLength": 1,
                "maxLength": 36
              },
              "TypeString": {
                "type": "string",
                "minLength": 0,
                "maxLength": 4096,
                "x-pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*"
              },
              "CommentString": {
                "type": "string",
                "minLength": 0,
                "maxLength": 255,
                "x-pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*"
              },
              "Column": {
                "type": "object",
                "required": [
                  "Name"
                ],
                "properties": {
                  "Name": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/NameString"
                      },
                      {
                        "description": "The name of the column."
                      }
                    ]
                  },
                  "Type": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/TypeString"
                      },
                      {
                        "description": "The data type of the column."
                      }
                    ]
                  },
                  "Comment": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/CommentString"
                      },
                      {
                        "description": "Optional information about the column."
                      }
                    ]
                  }
                },
                "description": "Contains metadata for a column in a table."
              },
              "Integer": {
                "type": "integer"
              },
              "ColumnNullable": {
                "type": "string",
                "enum": [
                  "NOT_NULL",
                  "NULLABLE",
                  "UNKNOWN"
                ]
              },
              "ColumnInfo": {
                "type": "object",
                "required": [
                  "Name",
                  "Type"
                ],
                "properties": {
                  "CatalogName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/String"
                      },
                      {
                        "description": "The catalog to which the query results belong."
                      }
                    ]
                  },
                  "SchemaName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/String"
                      },
                      {
                        "description": "The schema name (database name) to which the query results belong."
                      }
                    ]
                  },
                  "TableName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/String"
                      },
                      {
                        "description": "The table name for the query results."
                      }
                    ]
                  },
                  "Name": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/String"
                      },
                      {
                        "description": "The name of the column."
                      }
                    ]
                  },
                  "Label": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/String"
                      },
                      {
                        "description": "A column label."
                      }
                    ]
                  },
                  "Type": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/String"
                      },
                      {
                        "description": "The data type of the column."
                      }
                    ]
                  },
                  "Precision": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Integer"
                      },
                      {
                        "description": "For <code>DECIMAL</code> data types, specifies the total number of digits, up to 38. For performance reasons, we recommend up to 18 digits."
                      }
                    ]
                  },
                  "Scale": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Integer"
                      },
                      {
                        "description": "For <code>DECIMAL</code> data types, specifies the total number of digits in the fractional part of the value. Defaults to 0."
                      }
                    ]
                  },
                  "Nullable": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ColumnNullable"
                      },
                      {
                        "description": "Indicates the column's nullable status."
                      }
                    ]
                  },
                  "CaseSensitive": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Boolean"
                      },
                      {
                        "description": "Indicates whether values in the column are case-sensitive."
                      }
                    ]
                  }
                },
                "description": "Information about the columns in a query execution result."
              },
              "ColumnInfoList": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ColumnInfo"
                }
              },
              "ColumnList": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Column"
                }
              },
              "CoordinatorDpuSize": {
                "type": "integer",
                "minimum": 1,
                "maximum": 1
              },
              "DataCatalogType": {
                "type": "string",
                "enum": [
                  "LAMBDA",
                  "GLUE",
                  "HIVE"
                ]
              },
              "ParametersMap": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/ParametersMapValue"
                }
              },
              "TagList": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Tag"
                }
              },
              "DatabaseString": {
                "type": "string",
                "minLength": 1,
                "maxLength": 255
              },
              "QueryString": {
                "type": "string",
                "minLength": 1,
                "maxLength": 262144
              },
              "IdempotencyToken": {
                "type": "string",
                "minLength": 32,
                "maxLength": 128
              },
              "NamedQueryId": {
                "type": "string",
                "pattern": "\\S+",
                "minLength": 1,
                "maxLength": 128
              },
              "NotebookName": {
                "type": "string",
                "minLength": 1,
                "maxLength": 255,
                "x-pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]\\+"
              },
              "NotebookId": {
                "type": "string",
                "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}",
                "minLength": 1,
                "maxLength": 36
              },
              "StatementName": {
                "type": "string",
                "pattern": "[a-zA-Z_][a-zA-Z0-9_@:]{1,256}",
                "minLength": 1,
                "maxLength": 256
              },
              "SessionId": {
                "type": "string",
                "minLength": 1,
                "maxLength": 256
              },
              "WorkGroupConfiguration": {
                "type": "object",
                "properties": {
                  "ResultConfiguration": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ResultConfiguration"
                      },
                      {
                        "description": "The configuration for the workgroup, which includes the location in Amazon S3 where query and calculation results are stored and the encryption option, if any, used for query and calculation results. To run the query, you must specify the query results location using one of the ways: either in the workgroup using this setting, or for individual queries (client-side), using <a>ResultConfiguration$OutputLocation</a>. If none of them is set, Athena issues an error that no output location is provided. For more information, see <a href=\"https://docs.aws.amazon.com/athena/latest/ug/querying.html\">Working with query results, recent queries, and output files</a>."
                      }
                    ]
                  },
                  "EnforceWorkGroupConfiguration": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/BoxedBoolean"
                      },
                      {
                        "description": "If set to \"true\", the settings for the workgroup override client-side settings. If set to \"false\", client-side settings are used. For more information, see <a href=\"https://docs.aws.amazon.com/athena/latest/ug/workgroups-settings-override.html\">Workgroup Settings Override Client-Side Settings</a>."
                      }
                    ]
                  },
                  "PublishCloudWatchMetricsEnabled": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/BoxedBoolean"
                      },
                      {
                        "description": "Indicates that the Amazon CloudWatch metrics are enabled for the workgroup."
                      }
                    ]
                  },
                  "BytesScannedCutoffPerQuery": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/BytesScannedCutoffValue"
                      },
                      {
                        "description": "The upper data usage limit (cutoff) for the amount of bytes a single query in a workgroup is allowed to scan."
                      }
                    ]
                  },
                  "RequesterPaysEnabled": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/BoxedBoolean"
                      },
                      {
                        "description": "If set to <code>true</code>, allows members assigned to a workgroup to reference Amazon S3 Requester Pays buckets in queries. If set to <code>false</code>, workgroup members cannot query data from Requester Pays buckets, and queries that retrieve data from Requester Pays buckets cause an error. The default is <code>false</code>. For more information about Requester Pays buckets, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/RequesterPaysBuckets.html\">Requester Pays Buckets</a> in the <i>Amazon Simple Storage Service Developer Guide</i>."
                      }
                    ]
                  },
                  "EngineVersion": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/EngineVersion"
                      },
                      {
                        "description": "The engine version that all queries running on the workgroup use. Queries on the <code>AmazonAthenaPreviewFunctionality</code> workgroup run on the preview engine regardless of this setting."
                      }
                    ]
                  },
                  "AdditionalConfiguration": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/NameString"
                      },
                      {
                        "description": "Specifies a user defined JSON string that is passed to the notebook engine."
                      }
                    ]
                  },
                  "ExecutionRole": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/RoleArn"
                      },
                      {
                        "description": "Role used in a session for accessing the user's resources."
                      }
                    ]
                  },
                  "CustomerContentEncryptionConfiguration": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/CustomerContentEncryptionConfiguration"
                      },
                      {
                        "description": "Specifies the KMS key that is used to encrypt the user's data stores in Athena."
                      }
                    ]
                  },
                  "EnableMinimumEncryptionConfiguration": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/BoxedBoolean"
                      },
                      {
                        "description": "<p>Enforces a minimal level of encryption for the workgroup for query and calculation results that are written to Amazon S3. When enabled, workgroup users can set encryption only to the minimum level set by the administrator or higher when they submit queries.</p> <p>The <code>EnforceWorkGroupConfiguration</code> setting takes precedence over the <code>EnableMinimumEncryptionConfiguration</code> flag. This means that if <code>EnforceWorkGroupConfiguration</code> is true, the <code>EnableMinimumEncryptionConfiguration</code> flag is ignored, and the workgroup configuration for encryption is used.</p>"
                      }
                    ]
                  }
                },
                "description": "The configuration of the workgroup, which includes the location in Amazon S3 where query and calculation results are stored, the encryption option, if any, used for query and calculation results, whether the Amazon CloudWatch Metrics are enabled for the workgroup and whether workgroup settings override query settings, and the data usage limits for the amount of data scanned per query or per workgroup. The workgroup settings override is specified in <code>EnforceWorkGroupConfiguration</code> (true/false) in the <code>WorkGroupConfiguration</code>. See <a>WorkGroupConfiguration$EnforceWorkGroupConfiguration</a>. "
              },
              "WorkGroupDescriptionString": {
                "type": "string",
                "minLength": 0,
                "maxLength": 1024
              },
              "KmsKey": {
                "type": "string",
                "pattern": "^arn:aws[a-z\\-]*:kms:([a-z0-9\\-]+):\\d{12}:key/?[a-zA-Z_0-9+=,.@\\-_/]+$|^arn:aws[a-z\\-]*:kms:([a-z0-9\\-]+):\\d{12}:alias/?[a-zA-Z_0-9+=,.@\\-_/]+$|^alias/[a-zA-Z0-9/_-]+$|[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}",
                "minLength": 1,
                "maxLength": 2048
              },
              "CustomerContentEncryptionConfiguration": {
                "type": "object",
                "required": [
                  "KmsKey"
                ],
                "properties": {
                  "KmsKey": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/KmsKey"
                      },
                      {
                        "description": "The KMS key that is used to encrypt the user's data stores in Athena."
                      }
                    ]
                  }
                },
                "description": "Specifies the KMS key that is used to encrypt the user's data stores in Athena."
              },
              "DataCatalog": {
                "type": "object",
                "required": [
                  "Name",
                  "Type"
                ],
                "properties": {
                  "Name": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/CatalogNameString"
                      },
                      {
                        "description": "The name of the data catalog. The catalog name must be unique for the Amazon Web Services account and can use a maximum of 127 alphanumeric, underscore, at sign, or hyphen characters. The remainder of the length constraint of 256 is reserved for use by Athena."
                      }
                    ]
                  },
                  "Description": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/DescriptionString"
                      },
                      {
                        "description": "An optional description of the data catalog."
                      }
                    ]
                  },
                  "Type": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/DataCatalogType"
                      },
                      {
                        "description": "The type of data catalog to create: <code>LAMBDA</code> for a federated catalog, <code>HIVE</code> for an external hive metastore, or <code>GLUE</code> for an Glue Data Catalog."
                      }
                    ]
                  },
                  "Parameters": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ParametersMap"
                      },
                      {
                        "description": "<p>Specifies the Lambda function or functions to use for the data catalog. This is a mapping whose values depend on the catalog type. </p> <ul> <li> <p>For the <code>HIVE</code> data catalog type, use the following syntax. The <code>metadata-function</code> parameter is required. <code>The sdk-version</code> parameter is optional and defaults to the currently supported version.</p> <p> <code>metadata-function=<i>lambda_arn</i>, sdk-version=<i>version_number</i> </code> </p> </li> <li> <p>For the <code>LAMBDA</code> data catalog type, use one of the following sets of required parameters, but not both.</p> <ul> <li> <p>If you have one Lambda function that processes metadata and another for reading the actual data, use the following syntax. Both parameters are required.</p> <p> <code>metadata-function=<i>lambda_arn</i>, record-function=<i>lambda_arn</i> </code> </p> </li> <li> <p> If you have a composite Lambda function that processes both metadata and data, use the following syntax to specify your Lambda function.</p> <p> <code>function=<i>lambda_arn</i> </code> </p> </li> </ul> </li> <li> <p>The <code>GLUE</code> type takes a catalog ID parameter and is required. The <code> <i>catalog_id</i> </code> is the account ID of the Amazon Web Services account to which the Glue catalog belongs.</p> <p> <code>catalog-id=<i>catalog_id</i> </code> </p> <ul> <li> <p>The <code>GLUE</code> data catalog type also applies to the default <code>AwsDataCatalog</code> that already exists in your account, of which you can have only one and cannot modify.</p> </li> <li> <p>Queries that specify a Glue Data Catalog other than the default <code>AwsDataCatalog</code> must be run on Athena engine version 2.</p> </li> </ul> </li> </ul>"
                      }
                    ]
                  }
                },
                "description": "<p>Contains information about a data catalog in an Amazon Web Services account.</p> <note> <p>In the Athena console, data catalogs are listed as \"data sources\" on the <b>Data sources</b> page under the <b>Data source name</b> column.</p> </note>"
              },
              "DataCatalogSummary": {
                "type": "object",
                "properties": {
                  "CatalogName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/CatalogNameString"
                      },
                      {
                        "description": "The name of the data catalog. The catalog name is unique for the Amazon Web Services account and can use a maximum of 127 alphanumeric, underscore, at sign, or hyphen characters. The remainder of the length constraint of 256 is reserved for use by Athena."
                      }
                    ]
                  },
                  "Type": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/DataCatalogType"
                      },
                      {
                        "description": "The data catalog type."
                      }
                    ]
                  }
                },
                "description": "The summary information for the data catalog, which includes its name and type."
              },
              "DataCatalogSummaryList": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/DataCatalogSummary"
                }
              },
              "Database": {
                "type": "object",
                "required": [
                  "Name"
                ],
                "properties": {
                  "Name": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/NameString"
                      },
                      {
                        "description": "The name of the database."
                      }
                    ]
                  },
                  "Description": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/DescriptionString"
                      },
                      {
                        "description": "An optional description of the database."
                      }
                    ]
                  },
                  "Parameters": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ParametersMap"
                      },
                      {
                        "description": "A set of custom key/value pairs."
                      }
                    ]
                  }
                },
                "description": "Contains metadata information for a database in a data catalog."
              },
              "DatabaseList": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Database"
                }
              },
              "datumString": {
                "type": "string"
              },
              "Datum": {
                "type": "object",
                "properties": {
                  "VarCharValue": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/datumString"
                      },
                      {
                        "description": "The value of the datum."
                      }
                    ]
                  }
                },
                "description": "A piece of data (a field in the table)."
              },
              "DefaultExecutorDpuSize": {
                "type": "integer",
                "minimum": 1,
                "maximum": 1
              },
              "EncryptionOption": {
                "type": "string",
                "enum": [
                  "SSE_S3",
                  "SSE_KMS",
                  "CSE_KMS"
                ]
              },
              "EncryptionConfiguration": {
                "type": "object",
                "required": [
                  "EncryptionOption"
                ],
                "properties": {
                  "EncryptionOption": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/EncryptionOption"
                      },
                      {
                        "description": "<p>Indicates whether Amazon S3 server-side encryption with Amazon S3-managed keys (<code>SSE_S3</code>), server-side encryption with KMS-managed keys (<code>SSE_KMS</code>), or client-side encryption with KMS-managed keys (<code>CSE_KMS</code>) is used.</p> <p>If a query runs in a workgroup and the workgroup overrides client-side settings, then the workgroup's setting for encryption is used. It specifies whether query results must be encrypted, for all queries that run in this workgroup. </p>"
                      }
                    ]
                  },
                  "KmsKey": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/String"
                      },
                      {
                        "description": "For <code>SSE_KMS</code> and <code>CSE_KMS</code>, this is the KMS key ARN or ID."
                      }
                    ]
                  }
                },
                "description": "If query and calculation results are encrypted in Amazon S3, indicates the encryption option used (for example, <code>SSE_KMS</code> or <code>CSE_KMS</code>) and key information."
              },
              "MaxConcurrentDpus": {
                "type": "integer",
                "minimum": 2,
                "maximum": 5000
              },
              "EngineConfiguration": {
                "type": "object",
                "required": [
                  "MaxConcurrentDpus"
                ],
                "properties": {
                  "CoordinatorDpuSize": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/CoordinatorDpuSize"
                      },
                      {
                        "description": "The number of DPUs to use for the coordinator. A coordinator is a special executor that orchestrates processing work and manages other executors in a notebook session."
                      }
                    ]
                  },
                  "MaxConcurrentDpus": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/MaxConcurrentDpus"
                      },
                      {
                        "description": "The maximum number of DPUs that can run concurrently."
                      }
                    ]
                  },
                  "DefaultExecutorDpuSize": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/DefaultExecutorDpuSize"
                      },
                      {
                        "description": "The default number of DPUs to use for executors. An executor is the smallest unit of compute that a notebook session can request from Athena."
                      }
                    ]
                  },
                  "AdditionalConfigs": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ParametersMap"
                      },
                      {
                        "description": "Contains additional notebook engine <code>MAP&lt;string, string&gt;</code> parameter mappings in the form of key-value pairs. To specify an Athena notebook that the Jupyter server will download and serve, specify a value for the <a>StartSessionRequest$NotebookVersion</a> field, and then add a key named <code>NotebookId</code> to <code>AdditionalConfigs</code> that has the value of the Athena notebook ID."
                      }
                    ]
                  }
                },
                "description": "Contains data processing unit (DPU) configuration settings and parameter mappings for a notebook engine."
              },
              "EngineVersion": {
                "type": "object",
                "properties": {
                  "SelectedEngineVersion": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/NameString"
                      },
                      {
                        "description": "The engine version requested by the user. Possible values are determined by the output of <code>ListEngineVersions</code>, including AUTO. The default is AUTO."
                      }
                    ]
                  },
                  "EffectiveEngineVersion": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/NameString"
                      },
                      {
                        "description": "Read only. The engine version on which the query runs. If the user requests a valid engine version other than Auto, the effective engine version is the same as the engine version that the user requested. If the user requests Auto, the effective engine version is chosen by Athena. When a request to update the engine version is made by a <code>CreateWorkGroup</code> or <code>UpdateWorkGroup</code> operation, the <code>EffectiveEngineVersion</code> field is ignored."
                      }
                    ]
                  }
                },
                "description": "The Athena engine version for running queries, or the PySpark engine version for running sessions."
              },
              "EngineVersionsList": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/EngineVersion"
                },
                "minItems": 0,
                "maxItems": 10
              },
              "ErrorCode": {
                "type": "string",
                "description": "The error code returned when the query execution failed to process, or when the processing request for the named query failed.",
                "minLength": 1,
                "maxLength": 256
              },
              "ErrorMessage": {
                "type": "string"
              },
              "ExecutionParameter": {
                "type": "string",
                "minLength": 1,
                "maxLength": 1024
              },
              "ExecutionParameters": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ExecutionParameter"
                },
                "minItems": 1
              },
              "ExecutorId": {
                "type": "string",
                "pattern": ".*",
                "maxLength": 100000
              },
              "ExecutorState": {
                "type": "string",
                "enum": [
                  "CREATING",
                  "CREATED",
                  "REGISTERED",
                  "TERMINATING",
                  "TERMINATED",
                  "FAILED"
                ]
              },
              "ExecutorType": {
                "type": "string",
                "enum": [
                  "COORDINATOR",
                  "GATEWAY",
                  "WORKER"
                ]
              },
              "ExecutorsSummary": {
                "type": "object",
                "required": [
                  "ExecutorId"
                ],
                "properties": {
                  "ExecutorId": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ExecutorId"
                      },
                      {
                        "description": "The UUID of the executor."
                      }
                    ]
                  },
                  "ExecutorType": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ExecutorType"
                      },
                      {
                        "description": "The type of executor used for the application (<code>COORDINATOR</code>, <code>GATEWAY</code>, or <code>WORKER</code>)."
                      }
                    ]
                  },
                  "StartDateTime": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Long"
                      },
                      {
                        "description": "The date and time that the executor started."
                      }
                    ]
                  },
                  "TerminationDateTime": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Long"
                      },
                      {
                        "description": "The date and time that the executor was terminated."
                      }
                    ]
                  },
                  "ExecutorState": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ExecutorState"
                      },
                      {
                        "description": "<p>The processing state of the executor. A description of each state follows.</p> <p> <code>CREATING</code> - The executor is being started, including acquiring resources.</p> <p> <code>CREATED</code> - The executor has been started.</p> <p> <code>REGISTERED</code> - The executor has been registered.</p> <p> <code>TERMINATING</code> - The executor is in the process of shutting down.</p> <p> <code>TERMINATED</code> - The executor is no longer running.</p> <p> <code>FAILED</code> - Due to a failure, the executor is no longer running.</p>"
                      }
                    ]
                  },
                  "ExecutorSize": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Long"
                      },
                      {
                        "description": "The smallest unit of compute that a session can request from Athena. Size is measured in data processing unit (DPU) values, a relative measure of processing power."
                      }
                    ]
                  }
                },
                "description": "Contains summary information about an executor."
              },
              "ExecutorsSummaryList": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ExecutorsSummary"
                }
              },
              "NotebookMetadata": {
                "type": "object",
                "properties": {
                  "NotebookId": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/NotebookId"
                      },
                      {
                        "description": "The notebook ID."
                      }
                    ]
                  },
                  "Name": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/NotebookName"
                      },
                      {
                        "description": "The name of the notebook."
                      }
                    ]
                  },
                  "WorkGroup": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/WorkGroupName"
                      },
                      {
                        "description": "The name of the Spark enabled workgroup to which the notebook belongs."
                      }
                    ]
                  },
                  "CreationTime": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Date"
                      },
                      {
                        "description": "The time when the notebook was created."
                      }
                    ]
                  },
                  "Type": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/NotebookType"
                      },
                      {
                        "description": "The type of notebook. Currently, the only valid type is <code>IPYNB</code>."
                      }
                    ]
                  },
                  "LastModifiedTime": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Date"
                      },
                      {
                        "description": "The time when the notebook was last modified."
                      }
                    ]
                  }
                },
                "description": "Contains metadata for notebook, including the notebook name, ID, workgroup, and time created."
              },
              "Payload": {
                "type": "string",
                "minLength": 1,
                "maxLength": 10485760
              },
              "ExpressionString": {
                "type": "string",
                "minLength": 0,
                "maxLength": 256
              },
              "FilterDefinition": {
                "type": "object",
                "properties": {
                  "Name": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/NotebookName"
                      },
                      {
                        "description": "The name of the notebook to search for."
                      }
                    ]
                  }
                },
                "description": "A string for searching notebook names."
              },
              "NamedQuery": {
                "type": "object",
                "required": [
                  "Name",
                  "Database",
                  "QueryString"
                ],
                "properties": {
                  "Name": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/NameString"
                      },
                      {
                        "description": "The query name."
                      }
                    ]
                  },
                  "Description": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/DescriptionString"
                      },
                      {
                        "description": "The query description."
                      }
                    ]
                  },
                  "Database": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/DatabaseString"
                      },
                      {
                        "description": "The database to which the query belongs."
                      }
                    ]
                  },
                  "QueryString": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/QueryString"
                      },
                      {
                        "description": "The SQL statements that make up the query."
                      }
                    ]
                  },
                  "NamedQueryId": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/NamedQueryId"
                      },
                      {
                        "description": "The unique identifier of the query."
                      }
                    ]
                  },
                  "WorkGroup": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/WorkGroupName"
                      },
                      {
                        "description": "The name of the workgroup that contains the named query."
                      }
                    ]
                  }
                },
                "description": "A query, where <code>QueryString</code> contains the SQL statements that make up the query."
              },
              "PreparedStatement": {
                "type": "object",
                "properties": {
                  "StatementName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/StatementName"
                      },
                      {
                        "description": "The name of the prepared statement."
                      }
                    ]
                  },
                  "QueryStatement": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/QueryString"
                      },
                      {
                        "description": "The query string for the prepared statement."
                      }
                    ]
                  },
                  "WorkGroupName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/WorkGroupName"
                      },
                      {
                        "description": "The name of the workgroup to which the prepared statement belongs."
                      }
                    ]
                  },
                  "Description": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/DescriptionString"
                      },
                      {
                        "description": "The description of the prepared statement."
                      }
                    ]
                  },
                  "LastModifiedTime": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Date"
                      },
                      {
                        "description": "The last modified time of the prepared statement."
                      }
                    ]
                  }
                },
                "description": "A prepared SQL statement for use with Athena."
              },
              "QueryExecutionId": {
                "type": "string",
                "pattern": "\\S+",
                "minLength": 1,
                "maxLength": 128
              },
              "QueryExecution": {
                "type": "object",
                "properties": {
                  "QueryExecutionId": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/QueryExecutionId"
                      },
                      {
                        "description": "The unique identifier for each query execution."
                      }
                    ]
                  },
                  "Query": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/QueryString"
                      },
                      {
                        "description": "The SQL query statements which the query execution ran."
                      }
                    ]
                  },
                  "StatementType": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/StatementType"
                      },
                      {
                        "description": "The type of query statement that was run. <code>DDL</code> indicates DDL query statements. <code>DML</code> indicates DML (Data Manipulation Language) query statements, such as <code>CREATE TABLE AS SELECT</code>. <code>UTILITY</code> indicates query statements other than DDL and DML, such as <code>SHOW CREATE TABLE</code>, or <code>DESCRIBE TABLE</code>."
                      }
                    ]
                  },
                  "ResultConfiguration": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ResultConfiguration"
                      },
                      {
                        "description": "The location in Amazon S3 where query and calculation results are stored and the encryption option, if any, used for query results. These are known as \"client-side settings\". If workgroup settings override client-side settings, then the query uses the location for the query results and the encryption configuration that are specified for the workgroup."
                      }
                    ]
                  },
                  "ResultReuseConfiguration": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ResultReuseConfiguration"
                      },
                      {
                        "description": "Specifies the query result reuse behavior that was used for the query."
                      }
                    ]
                  },
                  "QueryExecutionContext": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/QueryExecutionContext"
                      },
                      {
                        "description": "The database in which the query execution occurred."
                      }
                    ]
                  },
                  "Status": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/QueryExecutionStatus"
                      },
                      {
                        "description": "The completion date, current state, submission time, and state change reason (if applicable) for the query execution."
                      }
                    ]
                  },
                  "Statistics": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/QueryExecutionStatistics"
                      },
                      {
                        "description": "Query execution statistics, such as the amount of data scanned, the amount of time that the query took to process, and the type of statement that was run."
                      }
                    ]
                  },
                  "WorkGroup": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/WorkGroupName"
                      },
                      {
                        "description": "The name of the workgroup in which the query ran."
                      }
                    ]
                  },
                  "EngineVersion": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/EngineVersion"
                      },
                      {
                        "description": "The engine version that executed the query."
                      }
                    ]
                  },
                  "ExecutionParameters": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ExecutionParameters"
                      },
                      {
                        "description": "A list of values for the parameters in a query. The values are applied sequentially to the parameters in the query in the order in which the parameters occur."
                      }
                    ]
                  },
                  "SubstatementType": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/String"
                      },
                      {
                        "description": "The kind of query statement that was run."
                      }
                    ]
                  }
                },
                "description": "Information about a single instance of a query execution."
              },
              "Token": {
                "type": "string",
                "minLength": 1,
                "maxLength": 1024
              },
              "MaxQueryResults": {
                "type": "integer",
                "minimum": 1,
                "maximum": 1000
              },
              "ResultSet": {
                "type": "object",
                "properties": {
                  "Rows": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/RowList"
                      },
                      {
                        "description": "The rows in the table."
                      }
                    ]
                  },
                  "ResultSetMetadata": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ResultSetMetadata"
                      },
                      {
                        "description": "The metadata that describes the column structure and data types of a table of query results."
                      }
                    ]
                  }
                },
                "description": "The metadata and rows that make up a query result set. The metadata describes the column structure and data types. To return a <code>ResultSet</code> object, use <a>GetQueryResults</a>."
              },
              "QueryRuntimeStatistics": {
                "type": "object",
                "properties": {
                  "Timeline": {
                    "$ref": "#/components/schemas/QueryRuntimeStatisticsTimeline"
                  },
                  "Rows": {
                    "$ref": "#/components/schemas/QueryRuntimeStatisticsRows"
                  },
                  "OutputStage": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/QueryStage"
                      },
                      {
                        "description": "Stage statistics such as input and output rows and bytes, execution time, and stage state. This information also includes substages and the query stage plan."
                      }
                    ]
                  }
                },
                "description": "The query execution timeline, statistics on input and output rows and bytes, and the different query stages that form the query execution plan."
              },
              "SessionConfiguration": {
                "type": "object",
                "properties": {
                  "ExecutionRole": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/RoleArn"
                      },
                      {
                        "description": "The ARN of the execution role used for the session."
                      }
                    ]
                  },
                  "WorkingDirectory": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ResultOutputLocation"
                      },
                      {
                        "description": "The Amazon S3 location that stores information for the notebook."
                      }
                    ]
                  },
                  "IdleTimeoutSeconds": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Long"
                      },
                      {
                        "description": "The idle timeout in seconds for the session."
                      }
                    ]
                  },
                  "EncryptionConfiguration": {
                    "$ref": "#/components/schemas/EncryptionConfiguration"
                  }
                },
                "description": "Contains session configuration information."
              },
              "SessionStatus": {
                "type": "object",
                "properties": {
                  "StartDateTime": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Date"
                      },
                      {
                        "description": "The date and time that the session started."
                      }
                    ]
                  },
                  "LastModifiedDateTime": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Date"
                      },
                      {
                        "description": "The most recent date and time that the session was modified."
                      }
                    ]
                  },
                  "EndDateTime": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Date"
                      },
                      {
                        "description": "The date and time that the session ended."
                      }
                    ]
                  },
                  "IdleSinceDateTime": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Date"
                      },
                      {
                        "description": "The date and time starting at which the session became idle. Can be empty if the session is not currently idle."
                      }
                    ]
                  },
                  "State": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/SessionState"
                      },
                      {
                        "description": "<p>The state of the session. A description of each state follows.</p> <p> <code>CREATING</code> - The session is being started, including acquiring resources.</p> <p> <code>CREATED</code> - The session has been started.</p> <p> <code>IDLE</code> - The session is able to accept a calculation.</p> <p> <code>BUSY</code> - The session is processing another task and is unable to accept a calculation.</p> <p> <code>TERMINATING</code> - The session is in the process of shutting down.</p> <p> <code>TERMINATED</code> - The session and its resources are no longer running.</p> <p> <code>DEGRADED</code> - The session has no healthy coordinators.</p> <p> <code>FAILED</code> - Due to a failure, the session and its resources are no longer running.</p>"
                      }
                    ]
                  },
                  "StateChangeReason": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/DescriptionString"
                      },
                      {
                        "description": "The reason for the session state change (for example, canceled because the session was terminated)."
                      }
                    ]
                  }
                },
                "description": "Contains information about the status of a session."
              },
              "SessionStatistics": {
                "type": "object",
                "properties": {
                  "DpuExecutionInMillis": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Long"
                      },
                      {
                        "description": "The data processing unit execution time for a session in milliseconds."
                      }
                    ]
                  }
                },
                "description": "Contains statistics for a session."
              },
              "TableMetadata": {
                "type": "object",
                "required": [
                  "Name"
                ],
                "properties": {
                  "Name": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/NameString"
                      },
                      {
                        "description": "The name of the table."
                      }
                    ]
                  },
                  "CreateTime": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Timestamp"
                      },
                      {
                        "description": "The time that the table was created."
                      }
                    ]
                  },
                  "LastAccessTime": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Timestamp"
                      },
                      {
                        "description": "The last time the table was accessed."
                      }
                    ]
                  },
                  "TableType": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/TableTypeString"
                      },
                      {
                        "description": "The type of table. In Athena, only <code>EXTERNAL_TABLE</code> is supported."
                      }
                    ]
                  },
                  "Columns": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ColumnList"
                      },
                      {
                        "description": "A list of the columns in the table."
                      }
                    ]
                  },
                  "PartitionKeys": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ColumnList"
                      },
                      {
                        "description": "A list of the partition keys in the table."
                      }
                    ]
                  },
                  "Parameters": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ParametersMap"
                      },
                      {
                        "description": "A set of custom key/value pairs for table properties."
                      }
                    ]
                  }
                },
                "description": "Contains metadata for a table."
              },
              "WorkGroup": {
                "type": "object",
                "required": [
                  "Name"
                ],
                "properties": {
                  "Name": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/WorkGroupName"
                      },
                      {
                        "description": "The workgroup name."
                      }
                    ]
                  },
                  "State": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/WorkGroupState"
                      },
                      {
                        "description": "The state of the workgroup: ENABLED or DISABLED."
                      }
                    ]
                  },
                  "Configuration": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/WorkGroupConfiguration"
                      },
                      {
                        "description": "The configuration of the workgroup, which includes the location in Amazon S3 where query and calculation results are stored, the encryption configuration, if any, used for query and calculation results; whether the Amazon CloudWatch Metrics are enabled for the workgroup; whether workgroup settings override client-side settings; and the data usage limits for the amount of data scanned per query or per workgroup. The workgroup settings override is specified in <code>EnforceWorkGroupConfiguration</code> (true/false) in the <code>WorkGroupConfiguration</code>. See <a>WorkGroupConfiguration$EnforceWorkGroupConfiguration</a>."
                      }
                    ]
                  },
                  "Description": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/WorkGroupDescriptionString"
                      },
                      {
                        "description": "The workgroup description."
                      }
                    ]
                  },
                  "CreationTime": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Date"
                      },
                      {
                        "description": "The date and time the workgroup was created."
                      }
                    ]
                  }
                },
                "description": "A workgroup, which contains a name, description, creation time, state, and other configuration, listed under <a>WorkGroup$Configuration</a>. Each workgroup enables you to isolate queries for you or your group of users from other queries in the same account, to configure the query results location and the encryption configuration (known as workgroup settings), to enable sending query metrics to Amazon CloudWatch, and to establish per-query data usage control limits for all queries in a workgroup. The workgroup settings override is specified in <code>EnforceWorkGroupConfiguration</code> (true/false) in the <code>WorkGroupConfiguration</code>. See <a>WorkGroupConfiguration$EnforceWorkGroupConfiguration</a>."
              },
              "NotebookType": {
                "type": "string",
                "enum": [
                  "IPYNB"
                ]
              },
              "KeyString": {
                "type": "string",
                "minLength": 1,
                "maxLength": 255,
                "x-pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*"
              },
              "MaxApplicationDPUSizesCount": {
                "type": "integer",
                "minimum": 1,
                "maximum": 100
              },
              "MaxCalculationsCount": {
                "type": "integer",
                "minimum": 1,
                "maximum": 100
              },
              "SessionManagerToken": {
                "type": "string",
                "maxLength": 2048
              },
              "MaxDataCatalogsCount": {
                "type": "integer",
                "minimum": 2,
                "maximum": 50
              },
              "MaxDatabasesCount": {
                "type": "integer",
                "minimum": 1,
                "maximum": 50
              },
              "MaxEngineVersionsCount": {
                "type": "integer",
                "minimum": 1,
                "maximum": 10
              },
              "MaxListExecutorsCount": {
                "type": "integer",
                "minimum": 1,
                "maximum": 100
              },
              "MaxNamedQueriesCount": {
                "type": "integer",
                "minimum": 0,
                "maximum": 50
              },
              "MaxNotebooksCount": {
                "type": "integer",
                "minimum": 1,
                "maximum": 50
              },
              "NotebookMetadataArray": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/NotebookMetadata"
                }
              },
              "MaxSessionsCount": {
                "type": "integer",
                "minimum": 1,
                "maximum": 100
              },
              "NotebookSessionsList": {
                "type": "array",
                "description": "A list of notebook sessions.",
                "items": {
                  "$ref": "#/components/schemas/NotebookSessionSummary"
                },
                "minItems": 0,
                "maxItems": 10
              },
              "MaxPreparedStatementsCount": {
                "type": "integer",
                "minimum": 1,
                "maximum": 50
              },
              "PreparedStatementsList": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PreparedStatementSummary"
                },
                "minItems": 0,
                "maxItems": 50
              },
              "MaxQueryExecutionsCount": {
                "type": "integer",
                "minimum": 0,
                "maximum": 50
              },
              "SessionState": {
                "type": "string",
                "enum": [
                  "CREATING",
                  "CREATED",
                  "IDLE",
                  "BUSY",
                  "TERMINATING",
                  "TERMINATED",
                  "DEGRADED",
                  "FAILED"
                ]
              },
              "SessionsList": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SessionSummary"
                },
                "minItems": 0,
                "maxItems": 100
              },
              "MaxTableMetadataCount": {
                "type": "integer",
                "minimum": 1,
                "maximum": 50
              },
              "TableMetadataList": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/TableMetadata"
                }
              },
              "MaxTagsCount": {
                "type": "integer",
                "minimum": 75
              },
              "MaxWorkGroupsCount": {
                "type": "integer",
                "minimum": 1,
                "maximum": 50
              },
              "WorkGroupsList": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/WorkGroupSummary"
                },
                "minItems": 0,
                "maxItems": 50
              },
              "NamedQueryDescriptionString": {
                "type": "string",
                "minLength": 0,
                "maxLength": 1024
              },
              "NotebookSessionSummary": {
                "type": "object",
                "properties": {
                  "SessionId": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/SessionId"
                      },
                      {
                        "description": "The notebook session ID."
                      }
                    ]
                  },
                  "CreationTime": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Date"
                      },
                      {
                        "description": "The time when the notebook session was created."
                      }
                    ]
                  }
                },
                "description": "Contains the notebook session ID and notebook session creation time."
              },
              "ParametersMapValue": {
                "type": "string",
                "maxLength": 51200
              },
              "PreparedStatementSummary": {
                "type": "object",
                "properties": {
                  "StatementName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/StatementName"
                      },
                      {
                        "description": "The name of the prepared statement."
                      }
                    ]
                  },
                  "LastModifiedTime": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Date"
                      },
                      {
                        "description": "The last modified time of the prepared statement."
                      }
                    ]
                  }
                },
                "description": "The name and last modified time of the prepared statement."
              },
              "StatementType": {
                "type": "string",
                "enum": [
                  "DDL",
                  "DML",
                  "UTILITY"
                ]
              },
              "ResultConfiguration": {
                "type": "object",
                "properties": {
                  "OutputLocation": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ResultOutputLocation"
                      },
                      {
                        "description": "The location in Amazon S3 where your query and calculation results are stored, such as <code>s3://path/to/query/bucket/</code>. To run the query, you must specify the query results location using one of the ways: either for individual queries using either this setting (client-side), or in the workgroup, using <a>WorkGroupConfiguration</a>. If none of them is set, Athena issues an error that no output location is provided. For more information, see <a href=\"https://docs.aws.amazon.com/athena/latest/ug/querying.html\">Working with query results, recent queries, and output files</a>. If workgroup settings override client-side settings, then the query uses the settings specified for the workgroup. See <a>WorkGroupConfiguration$EnforceWorkGroupConfiguration</a>."
                      }
                    ]
                  },
                  "EncryptionConfiguration": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/EncryptionConfiguration"
                      },
                      {
                        "description": "If query and calculation results are encrypted in Amazon S3, indicates the encryption option used (for example, <code>SSE_KMS</code> or <code>CSE_KMS</code>) and key information. This is a client-side setting. If workgroup settings override client-side settings, then the query uses the encryption configuration that is specified for the workgroup, and also uses the location for storing query results specified in the workgroup. See <a>WorkGroupConfiguration$EnforceWorkGroupConfiguration</a> and <a href=\"https://docs.aws.amazon.com/athena/latest/ug/workgroups-settings-override.html\">Workgroup Settings Override Client-Side Settings</a>."
                      }
                    ]
                  },
                  "ExpectedBucketOwner": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/AwsAccountId"
                      },
                      {
                        "description": "<p>The Amazon Web Services account ID that you expect to be the owner of the Amazon S3 bucket specified by <a>ResultConfiguration$OutputLocation</a>. If set, Athena uses the value for <code>ExpectedBucketOwner</code> when it makes Amazon S3 calls to your specified output location. If the <code>ExpectedBucketOwner</code> Amazon Web Services account ID does not match the actual owner of the Amazon S3 bucket, the call fails with a permissions error.</p> <p>This is a client-side setting. If workgroup settings override client-side settings, then the query uses the <code>ExpectedBucketOwner</code> setting that is specified for the workgroup, and also uses the location for storing query results specified in the workgroup. See <a>WorkGroupConfiguration$EnforceWorkGroupConfiguration</a> and <a href=\"https://docs.aws.amazon.com/athena/latest/ug/workgroups-settings-override.html\">Workgroup Settings Override Client-Side Settings</a>.</p>"
                      }
                    ]
                  },
                  "AclConfiguration": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/AclConfiguration"
                      },
                      {
                        "description": "Indicates that an Amazon S3 canned ACL should be set to control ownership of stored query results. Currently the only supported canned ACL is <code>BUCKET_OWNER_FULL_CONTROL</code>. This is a client-side setting. If workgroup settings override client-side settings, then the query uses the ACL configuration that is specified for the workgroup, and also uses the location for storing query results specified in the workgroup. For more information, see <a>WorkGroupConfiguration$EnforceWorkGroupConfiguration</a> and <a href=\"https://docs.aws.amazon.com/athena/latest/ug/workgroups-settings-override.html\">Workgroup Settings Override Client-Side Settings</a>."
                      }
                    ]
                  }
                },
                "description": "The location in Amazon S3 where query and calculation results are stored and the encryption option, if any, used for query and calculation results. These are known as \"client-side settings\". If workgroup settings override client-side settings, then the query uses the workgroup settings."
              },
              "ResultReuseConfiguration": {
                "type": "object",
                "properties": {
                  "ResultReuseByAgeConfiguration": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ResultReuseByAgeConfiguration"
                      },
                      {
                        "description": "Specifies whether previous query results are reused, and if so, their maximum age."
                      }
                    ]
                  }
                },
                "description": "Specifies the query result reuse behavior for the query."
              },
              "QueryExecutionContext": {
                "type": "object",
                "properties": {
                  "Database": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/DatabaseString"
                      },
                      {
                        "description": "The name of the database used in the query execution. The database must exist in the catalog."
                      }
                    ]
                  },
                  "Catalog": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/CatalogNameString"
                      },
                      {
                        "description": "The name of the data catalog used in the query execution."
                      }
                    ]
                  }
                },
                "description": "The database and data catalog context in which the query execution occurs."
              },
              "QueryExecutionStatus": {
                "type": "object",
                "properties": {
                  "State": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/QueryExecutionState"
                      },
                      {
                        "description": "<p>The state of query execution. <code>QUEUED</code> indicates that the query has been submitted to the service, and Athena will execute the query as soon as resources are available. <code>RUNNING</code> indicates that the query is in execution phase. <code>SUCCEEDED</code> indicates that the query completed without errors. <code>FAILED</code> indicates that the query experienced an error and did not complete processing. <code>CANCELLED</code> indicates that a user input interrupted query execution.</p> <note> <p>Athena automatically retries your queries in cases of certain transient errors. As a result, you may see the query state transition from <code>RUNNING</code> or <code>FAILED</code> to <code>QUEUED</code>. </p> </note>"
                      }
                    ]
                  },
                  "StateChangeReason": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/String"
                      },
                      {
                        "description": "Further detail about the status of the query."
                      }
                    ]
                  },
                  "SubmissionDateTime": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Date"
                      },
                      {
                        "description": "The date and time that the query was submitted."
                      }
                    ]
                  },
                  "CompletionDateTime": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Date"
                      },
                      {
                        "description": "The date and time that the query completed."
                      }
                    ]
                  },
                  "AthenaError": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/AthenaError"
                      },
                      {
                        "description": "Provides information about an Athena query error."
                      }
                    ]
                  }
                },
                "description": "The completion date, current state, submission time, and state change reason (if applicable) for the query execution."
              },
              "QueryExecutionStatistics": {
                "type": "object",
                "properties": {
                  "EngineExecutionTimeInMillis": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Long"
                      },
                      {
                        "description": "The number of milliseconds that the query took to execute."
                      }
                    ]
                  },
                  "DataScannedInBytes": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Long"
                      },
                      {
                        "description": "The number of bytes in the data that was queried."
                      }
                    ]
                  },
                  "DataManifestLocation": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/String"
                      },
                      {
                        "description": "The location and file name of a data manifest file. The manifest file is saved to the Athena query results location in Amazon S3. The manifest file tracks files that the query wrote to Amazon S3. If the query fails, the manifest file also tracks files that the query intended to write. The manifest is useful for identifying orphaned files resulting from a failed query. For more information, see <a href=\"https://docs.aws.amazon.com/athena/latest/ug/querying.html\">Working with Query Results, Output Files, and Query History</a> in the <i>Amazon Athena User Guide</i>."
                      }
                    ]
                  },
                  "TotalExecutionTimeInMillis": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Long"
                      },
                      {
                        "description": "The number of milliseconds that Athena took to run the query."
                      }
                    ]
                  },
                  "QueryQueueTimeInMillis": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Long"
                      },
                      {
                        "description": "The number of milliseconds that the query was in your query queue waiting for resources. Note that if transient errors occur, Athena might automatically add the query back to the queue."
                      }
                    ]
                  },
                  "QueryPlanningTimeInMillis": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Long"
                      },
                      {
                        "description": "The number of milliseconds that Athena took to plan the query processing flow. This includes the time spent retrieving table partitions from the data source. Note that because the query engine performs the query planning, query planning time is a subset of engine processing time."
                      }
                    ]
                  },
                  "ServiceProcessingTimeInMillis": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Long"
                      },
                      {
                        "description": "The number of milliseconds that Athena took to finalize and publish the query results after the query engine finished running the query."
                      }
                    ]
                  },
                  "ResultReuseInformation": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ResultReuseInformation"
                      },
                      {
                        "description": "Contains information about whether previous query results were reused for the query."
                      }
                    ]
                  }
                },
                "description": "The amount of data scanned during the query execution and the amount of time that it took to execute, and the type of statement that was run."
              },
              "QueryExecutionState": {
                "type": "string",
                "enum": [
                  "QUEUED",
                  "RUNNING",
                  "SUCCEEDED",
                  "FAILED",
                  "CANCELLED"
                ]
              },
              "ResultReuseInformation": {
                "type": "object",
                "required": [
                  "ReusedPreviousResult"
                ],
                "properties": {
                  "ReusedPreviousResult": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Boolean"
                      },
                      {
                        "description": "True if a previous query result was reused; false if the result was generated from a new run of the query."
                      }
                    ]
                  }
                },
                "description": "Contains information about whether the result of a previous query was reused."
              },
              "QueryRuntimeStatisticsTimeline": {
                "type": "object",
                "properties": {
                  "QueryQueueTimeInMillis": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Long"
                      },
                      {
                        "description": "The number of milliseconds that the query was in your query queue waiting for resources. Note that if transient errors occur, Athena might automatically add the query back to the queue."
                      }
                    ]
                  },
                  "QueryPlanningTimeInMillis": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Long"
                      },
                      {
                        "description": "The number of milliseconds that Athena took to plan the query processing flow. This includes the time spent retrieving table partitions from the data source. Note that because the query engine performs the query planning, query planning time is a subset of engine processing time."
                      }
                    ]
                  },
                  "EngineExecutionTimeInMillis": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Long"
                      },
                      {
                        "description": "The number of milliseconds that the query took to execute."
                      }
                    ]
                  },
                  "ServiceProcessingTimeInMillis": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Long"
                      },
                      {
                        "description": "The number of milliseconds that Athena took to finalize and publish the query results after the query engine finished running the query."
                      }
                    ]
                  },
                  "TotalExecutionTimeInMillis": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Long"
                      },
                      {
                        "description": "The number of milliseconds that Athena took to run the query."
                      }
                    ]
                  }
                },
                "description": "Timeline statistics such as query queue time, planning time, execution time, service processing time, and total execution time."
              },
              "QueryRuntimeStatisticsRows": {
                "type": "object",
                "properties": {
                  "InputRows": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Long"
                      },
                      {
                        "description": "The number of rows read to execute the query."
                      }
                    ]
                  },
                  "InputBytes": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Long"
                      },
                      {
                        "description": "The number of bytes read to execute the query."
                      }
                    ]
                  },
                  "OutputBytes": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Long"
                      },
                      {
                        "description": "The number of bytes returned by the query."
                      }
                    ]
                  },
                  "OutputRows": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Long"
                      },
                      {
                        "description": "The number of rows returned by the query."
                      }
                    ]
                  }
                },
                "description": "Statistics such as input rows and bytes read by the query, rows and bytes output by the query, and the number of rows written by the query."
              },
              "QueryStage": {
                "type": "object",
                "properties": {
                  "StageId": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Long"
                      },
                      {
                        "description": "The identifier for a stage."
                      }
                    ]
                  },
                  "State": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/String"
                      },
                      {
                        "description": "State of the stage after query execution."
                      }
                    ]
                  },
                  "OutputBytes": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Long"
                      },
                      {
                        "description": "The number of bytes output from the stage after execution."
                      }
                    ]
                  },
                  "OutputRows": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Long"
                      },
                      {
                        "description": "The number of rows output from the stage after execution."
                      }
                    ]
                  },
                  "InputBytes": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Long"
                      },
                      {
                        "description": "The number of bytes input into the stage for execution."
                      }
                    ]
                  },
                  "InputRows": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Long"
                      },
                      {
                        "description": "The number of rows input into the stage for execution."
                      }
                    ]
                  },
                  "ExecutionTime": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Long"
                      },
                      {
                        "description": "Time taken to execute this stage."
                      }
                    ]
                  },
                  "QueryStagePlan": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/QueryStagePlanNode"
                      },
                      {
                        "description": "Stage plan information such as name, identifier, sub plans, and source stages."
                      }
                    ]
                  },
                  "SubStages": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/QueryStages"
                      },
                      {
                        "description": "List of sub query stages that form this stage execution plan."
                      }
                    ]
                  }
                },
                "description": "Stage statistics such as input and output rows and bytes, execution time and stage state. This information also includes substages and the query stage plan."
              },
              "QueryStagePlanNode": {
                "type": "object",
                "properties": {
                  "Name": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/String"
                      },
                      {
                        "description": "Name of the query stage plan that describes the operation this stage is performing as part of query execution."
                      }
                    ]
                  },
                  "Identifier": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/String"
                      },
                      {
                        "description": "Information about the operation this query stage plan node is performing."
                      }
                    ]
                  },
                  "Children": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/QueryStagePlanNodes"
                      },
                      {
                        "description": "Stage plan information such as name, identifier, sub plans, and remote sources of child plan nodes/"
                      }
                    ]
                  },
                  "RemoteSources": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/StringList"
                      },
                      {
                        "description": "Source plan node IDs."
                      }
                    ]
                  }
                },
                "description": "Stage plan information such as name, identifier, sub plans, and remote sources."
              },
              "QueryStages": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/QueryStage"
                }
              },
              "QueryStagePlanNodes": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/QueryStagePlanNode"
                }
              },
              "StringList": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/String"
                }
              },
              "ResultOutputLocation": {
                "type": "string"
              },
              "ResultConfigurationUpdates": {
                "type": "object",
                "properties": {
                  "OutputLocation": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ResultOutputLocation"
                      },
                      {
                        "description": "The location in Amazon S3 where your query and calculation results are stored, such as <code>s3://path/to/query/bucket/</code>. For more information, see <a href=\"https://docs.aws.amazon.com/athena/latest/ug/querying.html\">Working with query results, recent queries, and output files</a>. If workgroup settings override client-side settings, then the query uses the location for the query results and the encryption configuration that are specified for the workgroup. The \"workgroup settings override\" is specified in <code>EnforceWorkGroupConfiguration</code> (true/false) in the <code>WorkGroupConfiguration</code>. See <a>WorkGroupConfiguration$EnforceWorkGroupConfiguration</a>."
                      }
                    ]
                  },
                  "RemoveOutputLocation": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/BoxedBoolean"
                      },
                      {
                        "description": "If set to \"true\", indicates that the previously-specified query results location (also known as a client-side setting) for queries in this workgroup should be ignored and set to null. If set to \"false\" or not set, and a value is present in the <code>OutputLocation</code> in <code>ResultConfigurationUpdates</code> (the client-side setting), the <code>OutputLocation</code> in the workgroup's <code>ResultConfiguration</code> will be updated with the new value. For more information, see <a href=\"https://docs.aws.amazon.com/athena/latest/ug/workgroups-settings-override.html\">Workgroup Settings Override Client-Side Settings</a>."
                      }
                    ]
                  },
                  "EncryptionConfiguration": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/EncryptionConfiguration"
                      },
                      {
                        "description": "The encryption configuration for query and calculation results."
                      }
                    ]
                  },
                  "RemoveEncryptionConfiguration": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/BoxedBoolean"
                      },
                      {
                        "description": "If set to \"true\", indicates that the previously-specified encryption configuration (also known as the client-side setting) for queries in this workgroup should be ignored and set to null. If set to \"false\" or not set, and a value is present in the <code>EncryptionConfiguration</code> in <code>ResultConfigurationUpdates</code> (the client-side setting), the <code>EncryptionConfiguration</code> in the workgroup's <code>ResultConfiguration</code> will be updated with the new value. For more information, see <a href=\"https://docs.aws.amazon.com/athena/latest/ug/workgroups-settings-override.html\">Workgroup Settings Override Client-Side Settings</a>."
                      }
                    ]
                  },
                  "ExpectedBucketOwner": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/AwsAccountId"
                      },
                      {
                        "description": "<p>The Amazon Web Services account ID that you expect to be the owner of the Amazon S3 bucket specified by <a>ResultConfiguration$OutputLocation</a>. If set, Athena uses the value for <code>ExpectedBucketOwner</code> when it makes Amazon S3 calls to your specified output location. If the <code>ExpectedBucketOwner</code> Amazon Web Services account ID does not match the actual owner of the Amazon S3 bucket, the call fails with a permissions error.</p> <p>If workgroup settings override client-side settings, then the query uses the <code>ExpectedBucketOwner</code> setting that is specified for the workgroup, and also uses the location for storing query results specified in the workgroup. See <a>WorkGroupConfiguration$EnforceWorkGroupConfiguration</a> and <a href=\"https://docs.aws.amazon.com/athena/latest/ug/workgroups-settings-override.html\">Workgroup Settings Override Client-Side Settings</a>.</p>"
                      }
                    ]
                  },
                  "RemoveExpectedBucketOwner": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/BoxedBoolean"
                      },
                      {
                        "description": "If set to \"true\", removes the Amazon Web Services account ID previously specified for <a>ResultConfiguration$ExpectedBucketOwner</a>. If set to \"false\" or not set, and a value is present in the <code>ExpectedBucketOwner</code> in <code>ResultConfigurationUpdates</code> (the client-side setting), the <code>ExpectedBucketOwner</code> in the workgroup's <code>ResultConfiguration</code> is updated with the new value. For more information, see <a href=\"https://docs.aws.amazon.com/athena/latest/ug/workgroups-settings-override.html\">Workgroup Settings Override Client-Side Settings</a>."
                      }
                    ]
                  },
                  "AclConfiguration": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/AclConfiguration"
                      },
                      {
                        "description": "The ACL configuration for the query results."
                      }
                    ]
                  },
                  "RemoveAclConfiguration": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/BoxedBoolean"
                      },
                      {
                        "description": "If set to <code>true</code>, indicates that the previously-specified ACL configuration for queries in this workgroup should be ignored and set to null. If set to <code>false</code> or not set, and a value is present in the <code>AclConfiguration</code> of <code>ResultConfigurationUpdates</code>, the <code>AclConfiguration</code> in the workgroup's <code>ResultConfiguration</code> is updated with the new value. For more information, see <a href=\"https://docs.aws.amazon.com/athena/latest/ug/workgroups-settings-override.html\">Workgroup Settings Override Client-Side Settings</a>."
                      }
                    ]
                  }
                },
                "description": "The information about the updates in the query results, such as output location and encryption configuration for the query results."
              },
              "ResultReuseByAgeConfiguration": {
                "type": "object",
                "required": [
                  "Enabled"
                ],
                "properties": {
                  "Enabled": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Boolean"
                      },
                      {
                        "description": "True if previous query results can be reused when the query is run; otherwise, false. The default is false."
                      }
                    ]
                  },
                  "MaxAgeInMinutes": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Age"
                      },
                      {
                        "description": "Specifies, in minutes, the maximum age of a previous query result that Athena should consider for reuse. The default is 60."
                      }
                    ]
                  }
                },
                "description": "Specifies whether previous query results are reused, and if so, their maximum age."
              },
              "RowList": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Row"
                }
              },
              "ResultSetMetadata": {
                "type": "object",
                "properties": {
                  "ColumnInfo": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ColumnInfoList"
                      },
                      {
                        "description": "Information about the columns returned in a query result metadata."
                      }
                    ]
                  }
                },
                "description": "The metadata that describes the column structure and data types of a table of query results. To return a <code>ResultSetMetadata</code> object, use <a>GetQueryResults</a>."
              },
              "RoleArn": {
                "type": "string",
                "pattern": "^arn:aws[a-z\\-]*:iam::\\d{12}:role/?[a-zA-Z_0-9+=,.@\\-_/]+$",
                "minLength": 20,
                "maxLength": 2048
              },
              "datumList": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Datum"
                }
              },
              "Row": {
                "type": "object",
                "properties": {
                  "Data": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/datumList"
                      },
                      {
                        "description": "The data that populates a row in a query result table."
                      }
                    ]
                  }
                },
                "description": "The rows that make up a query result table."
              },
              "SessionIdleTimeoutInMinutes": {
                "type": "integer",
                "minimum": 1,
                "maximum": 480
              },
              "SessionSummary": {
                "type": "object",
                "properties": {
                  "SessionId": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/SessionId"
                      },
                      {
                        "description": "The session ID."
                      }
                    ]
                  },
                  "Description": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/DescriptionString"
                      },
                      {
                        "description": "The session description."
                      }
                    ]
                  },
                  "EngineVersion": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/EngineVersion"
                      },
                      {
                        "description": "The engine version used by the session (for example, <code>PySpark engine version 3</code>)."
                      }
                    ]
                  },
                  "NotebookVersion": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/NameString"
                      },
                      {
                        "description": "The notebook version."
                      }
                    ]
                  },
                  "Status": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/SessionStatus"
                      },
                      {
                        "description": "Contains information about the session status."
                      }
                    ]
                  }
                },
                "description": "Contains summary information about a session."
              },
              "Timestamp": {
                "type": "string",
                "format": "date-time"
              },
              "TableTypeString": {
                "type": "string",
                "maxLength": 255
              },
              "TagKey": {
                "type": "string",
                "minLength": 1,
                "maxLength": 128
              },
              "TagValue": {
                "type": "string",
                "minLength": 0,
                "maxLength": 256
              },
              "Tag": {
                "type": "object",
                "properties": {
                  "Key": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/TagKey"
                      },
                      {
                        "description": "A tag key. The tag key length is from 1 to 128 Unicode characters in UTF-8. You can use letters and numbers representable in UTF-8, and the following characters: + - = . _ : / @. Tag keys are case-sensitive and must be unique per resource. "
                      }
                    ]
                  },
                  "Value": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/TagValue"
                      },
                      {
                        "description": "A tag value. The tag value length is from 0 to 256 Unicode characters in UTF-8. You can use letters and numbers representable in UTF-8, and the following characters: + - = . _ : / @. Tag values are case-sensitive. "
                      }
                    ]
                  }
                },
                "description": "A label that you assign to a resource. In Athena, a resource can be a workgroup or data catalog. Each tag consists of a key and an optional value, both of which you define. For example, you can use tags to categorize Athena workgroups or data catalogs by purpose, owner, or environment. Use a consistent set of tag keys to make it easier to search and filter workgroups or data catalogs in your account. For best practices, see <a href=\"https://docs.aws.amazon.com/whitepapers/latest/tagging-best-practices/tagging-best-practices.html\">Tagging Best Practices</a>. Tag keys can be from 1 to 128 UTF-8 Unicode characters, and tag values can be from 0 to 256 UTF-8 Unicode characters. Tags can use letters and numbers representable in UTF-8, and the following characters: + - = . _ : / @. Tag keys and values are case-sensitive. Tag keys must be unique per resource. If you specify more than one tag, separate them by commas. "
              },
              "TagKeyList": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/TagKey"
                }
              },
              "UnprocessedNamedQueryId": {
                "type": "object",
                "properties": {
                  "NamedQueryId": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/NamedQueryId"
                      },
                      {
                        "description": "The unique identifier of the named query."
                      }
                    ]
                  },
                  "ErrorCode": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ErrorCode"
                      },
                      {
                        "description": "The error code returned when the processing request for the named query failed, if applicable."
                      }
                    ]
                  },
                  "ErrorMessage": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ErrorMessage"
                      },
                      {
                        "description": "The error message returned when the processing request for the named query failed, if applicable."
                      }
                    ]
                  }
                },
                "description": "Information about a named query ID that could not be processed."
              },
              "UnprocessedPreparedStatementName": {
                "type": "object",
                "properties": {
                  "StatementName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/StatementName"
                      },
                      {
                        "description": "The name of a prepared statement that could not be returned due to an error."
                      }
                    ]
                  },
                  "ErrorCode": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ErrorCode"
                      },
                      {
                        "description": "The error code returned when the request for the prepared statement failed."
                      }
                    ]
                  },
                  "ErrorMessage": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ErrorMessage"
                      },
                      {
                        "description": "<p>The error message containing the reason why the prepared statement could not be returned. The following error messages are possible:</p> <ul> <li> <p> <code>INVALID_INPUT</code> - The name of the prepared statement that was provided is not valid (for example, the name is too long).</p> </li> <li> <p> <code>STATEMENT_NOT_FOUND</code> - A prepared statement with the name provided could not be found.</p> </li> <li> <p> <code>UNAUTHORIZED</code> - The requester does not have permission to access the workgroup that contains the prepared statement.</p> </li> </ul>"
                      }
                    ]
                  }
                },
                "description": "The name of a prepared statement that could not be returned."
              },
              "UnprocessedQueryExecutionId": {
                "type": "object",
                "properties": {
                  "QueryExecutionId": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/QueryExecutionId"
                      },
                      {
                        "description": "The unique identifier of the query execution."
                      }
                    ]
                  },
                  "ErrorCode": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ErrorCode"
                      },
                      {
                        "description": "The error code returned when the query execution failed to process, if applicable."
                      }
                    ]
                  },
                  "ErrorMessage": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ErrorMessage"
                      },
                      {
                        "description": "The error message returned when the query execution failed to process, if applicable."
                      }
                    ]
                  }
                },
                "description": "Describes a query execution that failed to process."
              },
              "WorkGroupConfigurationUpdates": {
                "type": "object",
                "properties": {
                  "EnforceWorkGroupConfiguration": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/BoxedBoolean"
                      },
                      {
                        "description": "If set to \"true\", the settings for the workgroup override client-side settings. If set to \"false\" client-side settings are used. For more information, see <a href=\"https://docs.aws.amazon.com/athena/latest/ug/workgroups-settings-override.html\">Workgroup Settings Override Client-Side Settings</a>."
                      }
                    ]
                  },
                  "ResultConfigurationUpdates": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ResultConfigurationUpdates"
                      },
                      {
                        "description": "The result configuration information about the queries in this workgroup that will be updated. Includes the updated results location and an updated option for encrypting query results."
                      }
                    ]
                  },
                  "PublishCloudWatchMetricsEnabled": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/BoxedBoolean"
                      },
                      {
                        "description": "Indicates whether this workgroup enables publishing metrics to Amazon CloudWatch."
                      }
                    ]
                  },
                  "BytesScannedCutoffPerQuery": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/BytesScannedCutoffValue"
                      },
                      {
                        "description": "The upper limit (cutoff) for the amount of bytes a single query in a workgroup is allowed to scan."
                      }
                    ]
                  },
                  "RemoveBytesScannedCutoffPerQuery": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/BoxedBoolean"
                      },
                      {
                        "description": "Indicates that the data usage control limit per query is removed. <a>WorkGroupConfiguration$BytesScannedCutoffPerQuery</a> "
                      }
                    ]
                  },
                  "RequesterPaysEnabled": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/BoxedBoolean"
                      },
                      {
                        "description": "If set to <code>true</code>, allows members assigned to a workgroup to specify Amazon S3 Requester Pays buckets in queries. If set to <code>false</code>, workgroup members cannot query data from Requester Pays buckets, and queries that retrieve data from Requester Pays buckets cause an error. The default is <code>false</code>. For more information about Requester Pays buckets, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/RequesterPaysBuckets.html\">Requester Pays Buckets</a> in the <i>Amazon Simple Storage Service Developer Guide</i>."
                      }
                    ]
                  },
                  "EngineVersion": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/EngineVersion"
                      },
                      {
                        "description": "The engine version requested when a workgroup is updated. After the update, all queries on the workgroup run on the requested engine version. If no value was previously set, the default is Auto. Queries on the <code>AmazonAthenaPreviewFunctionality</code> workgroup run on the preview engine regardless of this setting."
                      }
                    ]
                  },
                  "RemoveCustomerContentEncryptionConfiguration": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/BoxedBoolean"
                      },
                      {
                        "description": "Removes content encryption configuration for a workgroup."
                      }
                    ]
                  },
                  "AdditionalConfiguration": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/NameString"
                      },
                      {
                        "description": "Contains a user defined string in JSON format for a Spark-enabled workgroup."
                      }
                    ]
                  },
                  "ExecutionRole": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/RoleArn"
                      },
                      {
                        "description": "Contains the ARN of the execution role for the workgroup"
                      }
                    ]
                  },
                  "CustomerContentEncryptionConfiguration": {
                    "$ref": "#/components/schemas/CustomerContentEncryptionConfiguration"
                  },
                  "EnableMinimumEncryptionConfiguration": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/BoxedBoolean"
                      },
                      {
                        "description": "<p>Enforces a minimal level of encryption for the workgroup for query and calculation results that are written to Amazon S3. When enabled, workgroup users can set encryption only to the minimum level set by the administrator or higher when they submit queries. This setting does not apply to Spark-enabled workgroups.</p> <p>The <code>EnforceWorkGroupConfiguration</code> setting takes precedence over the <code>EnableMinimumEncryptionConfiguration</code> flag. This means that if <code>EnforceWorkGroupConfiguration</code> is true, the <code>EnableMinimumEncryptionConfiguration</code> flag is ignored, and the workgroup configuration for encryption is used.</p>"
                      }
                    ]
                  }
                },
                "description": "The configuration information that will be updated for this workgroup, which includes the location in Amazon S3 where query and calculation results are stored, the encryption option, if any, used for query results, whether the Amazon CloudWatch Metrics are enabled for the workgroup, whether the workgroup settings override the client-side settings, and the data usage limit for the amount of bytes scanned per query, if it is specified."
              },
              "WorkGroupState": {
                "type": "string",
                "enum": [
                  "ENABLED",
                  "DISABLED"
                ]
              },
              "WorkGroupSummary": {
                "type": "object",
                "properties": {
                  "Name": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/WorkGroupName"
                      },
                      {
                        "description": "The name of the workgroup."
                      }
                    ]
                  },
                  "State": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/WorkGroupState"
                      },
                      {
                        "description": "The state of the workgroup."
                      }
                    ]
                  },
                  "Description": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/WorkGroupDescriptionString"
                      },
                      {
                        "description": "The workgroup description."
                      }
                    ]
                  },
                  "CreationTime": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Date"
                      },
                      {
                        "description": "The workgroup creation date and time."
                      }
                    ]
                  },
                  "EngineVersion": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/EngineVersion"
                      },
                      {
                        "description": "The engine version setting for all queries on the workgroup. Queries on the <code>AmazonAthenaPreviewFunctionality</code> workgroup run on the preview engine regardless of this setting."
                      }
                    ]
                  }
                },
                "description": "The summary information for the workgroup, which includes its name, state, description, and the date and time it was created."
              }
            }
          },
          "security": [
            {
              "hmac": []
            }
          ]
        }
        // Exercise and evaluate
        assert.ok(typeof schema === 'object')
    })
    it('should match schema6', () => {
        // Setup
        const schema: OpenAPI = {
          "openapi": "3.0.0",
          "info": {
            "version": "2019-01-25",
            "x-release": "v4",
            "title": "AWS App Mesh",
            "description": "<p>App Mesh is a service mesh based on the Envoy proxy that makes it easy to monitor and control microservices. App Mesh standardizes how your microservices communicate, giving you end-to-end visibility and helping to ensure high availability for your applications.</p> <p>App Mesh gives you consistent visibility and network traffic controls for every microservice in an application. You can use App Mesh with Amazon Web Services Fargate, Amazon ECS, Amazon EKS, Kubernetes on Amazon Web Services, and Amazon EC2.</p> <note> <p>App Mesh supports microservice applications that use service discovery naming for their components. For more information about service discovery on Amazon ECS, see <a href=\"https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-discovery.html\">Service Discovery</a> in the <i>Amazon Elastic Container Service Developer Guide</i>. Kubernetes <code>kube-dns</code> and <code>coredns</code> are supported. For more information, see <a href=\"https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/\">DNS for Services and Pods</a> in the Kubernetes documentation.</p> </note>",
            "x-logo": {
              "url": "https://api.apis.guru/v2/cache/logo/https_twitter.com_awscloud_profile_image.png",
              "backgroundColor": "#FFFFFF"
            },
            "termsOfService": "https://aws.amazon.com/service-terms/",
            "contact": {
              "name": "Mike Ralphson",
              "email": "mike.ralphson@gmail.com",
              "url": "https://github.com/mermade/aws2openapi",
              "x-twitter": "PermittedSoc"
            },
            "license": {
              "name": "Apache 2.0 License",
              "url": "http://www.apache.org/licenses/"
            },
            "x-providerName": "amazonaws.com",
            "x-serviceName": "appmesh",
            "x-aws-signingName": "appmesh",
            "x-origin": [
              {
                "contentType": "application/json",
                "url": "https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/appmesh-2019-01-25.normal.json",
                "converter": {
                  "url": "https://github.com/mermade/aws2openapi",
                  "version": "1.0.0"
                },
                "x-apisguru-driver": "external"
              }
            ],
            "x-apiClientRegistration": {
              "url": "https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct"
            },
            "x-apisguru-categories": [
              "cloud"
            ],
            "x-preferred": true
          },
          "externalDocs": {
            "description": "Amazon Web Services documentation",
            "url": "https://docs.aws.amazon.com/appmesh/"
          },
          "servers": [
            {
              "url": "http://appmesh.{region}.amazonaws.com",
              "variables": {
                "region": {
                  "description": "The AWS region",
                  "enum": [
                    "us-east-1",
                    "us-east-2",
                    "us-west-1",
                    "us-west-2",
                    "us-gov-west-1",
                    "us-gov-east-1",
                    "ca-central-1",
                    "eu-north-1",
                    "eu-west-1",
                    "eu-west-2",
                    "eu-west-3",
                    "eu-central-1",
                    "eu-south-1",
                    "af-south-1",
                    "ap-northeast-1",
                    "ap-northeast-2",
                    "ap-northeast-3",
                    "ap-southeast-1",
                    "ap-southeast-2",
                    "ap-east-1",
                    "ap-south-1",
                    "sa-east-1",
                    "me-south-1"
                  ],
                  "default": "us-east-1"
                }
              },
              "description": "The AWS App Mesh multi-region endpoint"
            },
            {
              "url": "https://appmesh.{region}.amazonaws.com",
              "variables": {
                "region": {
                  "description": "The AWS region",
                  "enum": [
                    "us-east-1",
                    "us-east-2",
                    "us-west-1",
                    "us-west-2",
                    "us-gov-west-1",
                    "us-gov-east-1",
                    "ca-central-1",
                    "eu-north-1",
                    "eu-west-1",
                    "eu-west-2",
                    "eu-west-3",
                    "eu-central-1",
                    "eu-south-1",
                    "af-south-1",
                    "ap-northeast-1",
                    "ap-northeast-2",
                    "ap-northeast-3",
                    "ap-southeast-1",
                    "ap-southeast-2",
                    "ap-east-1",
                    "ap-south-1",
                    "sa-east-1",
                    "me-south-1"
                  ],
                  "default": "us-east-1"
                }
              },
              "description": "The AWS App Mesh multi-region endpoint"
            },
            {
              "url": "http://appmesh.{region}.amazonaws.com.cn",
              "variables": {
                "region": {
                  "description": "The AWS region",
                  "enum": [
                    "cn-north-1",
                    "cn-northwest-1"
                  ],
                  "default": "cn-north-1"
                }
              },
              "description": "The AWS App Mesh endpoint for China (Beijing) and China (Ningxia)"
            },
            {
              "url": "https://appmesh.{region}.amazonaws.com.cn",
              "variables": {
                "region": {
                  "description": "The AWS region",
                  "enum": [
                    "cn-north-1",
                    "cn-northwest-1"
                  ],
                  "default": "cn-north-1"
                }
              },
              "description": "The AWS App Mesh endpoint for China (Beijing) and China (Ningxia)"
            }
          ],
          "paths": {
            "/v20190125/meshes/{meshName}/virtualGateway/{virtualGatewayName}/gatewayRoutes": {
              "put": {
                "operationId": "CreateGatewayRoute",
                "description": "<p>Creates a gateway route.</p> <p>A gateway route is attached to a virtual gateway and routes traffic to an existing virtual service. If a route matches a request, it can distribute traffic to a target virtual service.</p> <p>For more information about gateway routes, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/gateway-routes.html\">Gateway routes</a>.</p>",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/CreateGatewayRouteOutput"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "NotFoundException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/NotFoundException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "BadRequestException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/BadRequestException"
                        }
                      }
                    }
                  },
                  "482": {
                    "description": "ConflictException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ConflictException"
                        }
                      }
                    }
                  },
                  "483": {
                    "description": "TooManyRequestsException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/TooManyRequestsException"
                        }
                      }
                    }
                  },
                  "484": {
                    "description": "ForbiddenException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ForbiddenException"
                        }
                      }
                    }
                  },
                  "485": {
                    "description": "ServiceUnavailableException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ServiceUnavailableException"
                        }
                      }
                    }
                  },
                  "486": {
                    "description": "InternalServerErrorException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InternalServerErrorException"
                        }
                      }
                    }
                  },
                  "487": {
                    "description": "LimitExceededException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/LimitExceededException"
                        }
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "meshName",
                    "in": "path",
                    "required": true,
                    "description": "The name of the service mesh to create the gateway route in.",
                    "schema": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 255
                    }
                  },
                  {
                    "name": "meshOwner",
                    "in": "query",
                    "required": false,
                    "description": "The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then the account that you specify must share the mesh with your account before you can create the resource in the service mesh. For more information about mesh sharing, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\">Working with shared meshes</a>.",
                    "schema": {
                      "type": "string",
                      "minLength": 12,
                      "maxLength": 12
                    }
                  },
                  {
                    "name": "virtualGatewayName",
                    "in": "path",
                    "required": true,
                    "description": "The name of the virtual gateway to associate the gateway route with. If the virtual gateway is in a shared mesh, then you must be the owner of the virtual gateway resource.",
                    "schema": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 255
                    }
                  }
                ],
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "required": [
                          "gatewayRouteName",
                          "spec"
                        ],
                        "properties": {
                          "clientToken": {
                            "description": "Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Up to 36 letters, numbers, hyphens, and underscores are allowed.",
                            "type": "string"
                          },
                          "gatewayRouteName": {
                            "description": "The name to use for the gateway route.",
                            "type": "string",
                            "minLength": 1,
                            "maxLength": 255
                          },
                          "spec": {
                            "description": "An object that represents a gateway route specification. Specify one gateway route type.",
                            "type": "object",
                            "properties": {
                              "grpcRoute": {
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/GrpcGatewayRoute"
                                  },
                                  {
                                    "description": "An object that represents the specification of a gRPC gateway route."
                                  }
                                ]
                              },
                              "http2Route": {
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/HttpGatewayRoute"
                                  },
                                  {
                                    "description": "An object that represents the specification of an HTTP/2 gateway route."
                                  }
                                ]
                              },
                              "httpRoute": {
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/HttpGatewayRoute"
                                  },
                                  {
                                    "description": "An object that represents the specification of an HTTP gateway route."
                                  }
                                ]
                              },
                              "priority": {
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/GatewayRoutePriority"
                                  },
                                  {
                                    "description": "The ordering of the gateway routes spec."
                                  }
                                ]
                              }
                            }
                          },
                          "tags": {
                            "description": "Optional metadata that you can apply to the gateway route to assist with categorization and organization. Each tag consists of a key and an optional value, both of which you define. Tag keys can have a maximum character length of 128 characters, and tag values can have a maximum length of 256 characters.",
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/TagRef"
                            },
                            "minItems": 0,
                            "maxItems": 50
                          }
                        }
                      }
                    }
                  }
                }
              },
              "parameters": [
                {
                  "$ref": "#/components/parameters/X-Amz-Content-Sha256"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Date"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Algorithm"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Credential"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Security-Token"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Signature"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-SignedHeaders"
                }
              ],
              "get": {
                "operationId": "ListGatewayRoutes",
                "description": "Returns a list of existing gateway routes that are associated to a virtual gateway.",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ListGatewayRoutesOutput"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "NotFoundException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/NotFoundException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "BadRequestException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/BadRequestException"
                        }
                      }
                    }
                  },
                  "482": {
                    "description": "TooManyRequestsException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/TooManyRequestsException"
                        }
                      }
                    }
                  },
                  "483": {
                    "description": "ForbiddenException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ForbiddenException"
                        }
                      }
                    }
                  },
                  "484": {
                    "description": "ServiceUnavailableException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ServiceUnavailableException"
                        }
                      }
                    }
                  },
                  "485": {
                    "description": "InternalServerErrorException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InternalServerErrorException"
                        }
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "limit",
                    "in": "query",
                    "required": false,
                    "description": "The maximum number of results returned by <code>ListGatewayRoutes</code> in paginated output. When you use this parameter, <code>ListGatewayRoutes</code> returns only <code>limit</code> results in a single page along with a <code>nextToken</code> response element. You can see the remaining results of the initial request by sending another <code>ListGatewayRoutes</code> request with the returned <code>nextToken</code> value. This value can be between 1 and 100. If you don't use this parameter, <code>ListGatewayRoutes</code> returns up to 100 results and a <code>nextToken</code> value if applicable.",
                    "schema": {
                      "type": "integer",
                      "minimum": 1,
                      "maximum": 100
                    }
                  },
                  {
                    "name": "meshName",
                    "in": "path",
                    "required": true,
                    "description": "The name of the service mesh to list gateway routes in.",
                    "schema": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 255
                    }
                  },
                  {
                    "name": "meshOwner",
                    "in": "query",
                    "required": false,
                    "description": "The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\">Working with shared meshes</a>.",
                    "schema": {
                      "type": "string",
                      "minLength": 12,
                      "maxLength": 12
                    }
                  },
                  {
                    "name": "nextToken",
                    "in": "query",
                    "required": false,
                    "description": "The <code>nextToken</code> value returned from a previous paginated <code>ListGatewayRoutes</code> request where <code>limit</code> was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the <code>nextToken</code> value.",
                    "schema": {
                      "type": "string"
                    }
                  },
                  {
                    "name": "virtualGatewayName",
                    "in": "path",
                    "required": true,
                    "description": "The name of the virtual gateway to list gateway routes in.",
                    "schema": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 255
                    }
                  }
                ]
              }
            },
            "/v20190125/meshes": {
              "put": {
                "operationId": "CreateMesh",
                "description": "<p>Creates a service mesh.</p> <p> A service mesh is a logical boundary for network traffic between services that are represented by resources within the mesh. After you create your service mesh, you can create virtual services, virtual nodes, virtual routers, and routes to distribute traffic between the applications in your mesh.</p> <p>For more information about service meshes, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/meshes.html\">Service meshes</a>.</p>",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/CreateMeshOutput"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "NotFoundException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/NotFoundException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "BadRequestException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/BadRequestException"
                        }
                      }
                    }
                  },
                  "482": {
                    "description": "ConflictException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ConflictException"
                        }
                      }
                    }
                  },
                  "483": {
                    "description": "TooManyRequestsException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/TooManyRequestsException"
                        }
                      }
                    }
                  },
                  "484": {
                    "description": "ForbiddenException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ForbiddenException"
                        }
                      }
                    }
                  },
                  "485": {
                    "description": "ServiceUnavailableException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ServiceUnavailableException"
                        }
                      }
                    }
                  },
                  "486": {
                    "description": "InternalServerErrorException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InternalServerErrorException"
                        }
                      }
                    }
                  },
                  "487": {
                    "description": "LimitExceededException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/LimitExceededException"
                        }
                      }
                    }
                  }
                },
                "parameters": [],
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "required": [
                          "meshName"
                        ],
                        "properties": {
                          "clientToken": {
                            "description": "Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Up to 36 letters, numbers, hyphens, and underscores are allowed.",
                            "type": "string"
                          },
                          "meshName": {
                            "description": "The name to use for the service mesh.",
                            "type": "string",
                            "minLength": 1,
                            "maxLength": 255
                          },
                          "spec": {
                            "description": "An object that represents the specification of a service mesh.",
                            "type": "object",
                            "properties": {
                              "egressFilter": {
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/EgressFilter"
                                  },
                                  {
                                    "description": "The egress filter rules for the service mesh."
                                  }
                                ]
                              },
                              "serviceDiscovery": {
                                "$ref": "#/components/schemas/MeshServiceDiscovery"
                              }
                            }
                          },
                          "tags": {
                            "description": "Optional metadata that you can apply to the service mesh to assist with categorization and organization. Each tag consists of a key and an optional value, both of which you define. Tag keys can have a maximum character length of 128 characters, and tag values can have a maximum length of 256 characters.",
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/TagRef"
                            },
                            "minItems": 0,
                            "maxItems": 50
                          }
                        }
                      }
                    }
                  }
                }
              },
              "parameters": [
                {
                  "$ref": "#/components/parameters/X-Amz-Content-Sha256"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Date"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Algorithm"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Credential"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Security-Token"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Signature"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-SignedHeaders"
                }
              ],
              "get": {
                "operationId": "ListMeshes",
                "description": "Returns a list of existing service meshes.",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ListMeshesOutput"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "NotFoundException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/NotFoundException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "BadRequestException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/BadRequestException"
                        }
                      }
                    }
                  },
                  "482": {
                    "description": "TooManyRequestsException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/TooManyRequestsException"
                        }
                      }
                    }
                  },
                  "483": {
                    "description": "ForbiddenException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ForbiddenException"
                        }
                      }
                    }
                  },
                  "484": {
                    "description": "ServiceUnavailableException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ServiceUnavailableException"
                        }
                      }
                    }
                  },
                  "485": {
                    "description": "InternalServerErrorException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InternalServerErrorException"
                        }
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "limit",
                    "in": "query",
                    "required": false,
                    "description": "The maximum number of results returned by <code>ListMeshes</code> in paginated output. When you use this parameter, <code>ListMeshes</code> returns only <code>limit</code> results in a single page along with a <code>nextToken</code> response element. You can see the remaining results of the initial request by sending another <code>ListMeshes</code> request with the returned <code>nextToken</code> value. This value can be between 1 and 100. If you don't use this parameter, <code>ListMeshes</code> returns up to 100 results and a <code>nextToken</code> value if applicable.",
                    "schema": {
                      "type": "integer",
                      "minimum": 1,
                      "maximum": 100
                    }
                  },
                  {
                    "name": "nextToken",
                    "in": "query",
                    "required": false,
                    "description": "<p>The <code>nextToken</code> value returned from a previous paginated <code>ListMeshes</code> request where <code>limit</code> was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the <code>nextToken</code> value.</p> <note> <p>This token should be treated as an opaque identifier that is used only to retrieve the next items in a list and not for other programmatic purposes.</p> </note>",
                    "schema": {
                      "type": "string"
                    }
                  }
                ]
              }
            },
            "/v20190125/meshes/{meshName}/virtualRouter/{virtualRouterName}/routes": {
              "put": {
                "operationId": "CreateRoute",
                "description": "<p>Creates a route that is associated with a virtual router.</p> <p> You can route several different protocols and define a retry policy for a route. Traffic can be routed to one or more virtual nodes.</p> <p>For more information about routes, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/routes.html\">Routes</a>.</p>",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/CreateRouteOutput"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "NotFoundException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/NotFoundException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "BadRequestException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/BadRequestException"
                        }
                      }
                    }
                  },
                  "482": {
                    "description": "ConflictException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ConflictException"
                        }
                      }
                    }
                  },
                  "483": {
                    "description": "TooManyRequestsException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/TooManyRequestsException"
                        }
                      }
                    }
                  },
                  "484": {
                    "description": "ForbiddenException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ForbiddenException"
                        }
                      }
                    }
                  },
                  "485": {
                    "description": "ServiceUnavailableException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ServiceUnavailableException"
                        }
                      }
                    }
                  },
                  "486": {
                    "description": "InternalServerErrorException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InternalServerErrorException"
                        }
                      }
                    }
                  },
                  "487": {
                    "description": "LimitExceededException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/LimitExceededException"
                        }
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "meshName",
                    "in": "path",
                    "required": true,
                    "description": "The name of the service mesh to create the route in.",
                    "schema": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 255
                    }
                  },
                  {
                    "name": "meshOwner",
                    "in": "query",
                    "required": false,
                    "description": "The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then the account that you specify must share the mesh with your account before you can create the resource in the service mesh. For more information about mesh sharing, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\">Working with shared meshes</a>.",
                    "schema": {
                      "type": "string",
                      "minLength": 12,
                      "maxLength": 12
                    }
                  },
                  {
                    "name": "virtualRouterName",
                    "in": "path",
                    "required": true,
                    "description": "The name of the virtual router in which to create the route. If the virtual router is in a shared mesh, then you must be the owner of the virtual router resource.",
                    "schema": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 255
                    }
                  }
                ],
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "required": [
                          "routeName",
                          "spec"
                        ],
                        "properties": {
                          "clientToken": {
                            "description": "Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Up to 36 letters, numbers, hyphens, and underscores are allowed.",
                            "type": "string"
                          },
                          "routeName": {
                            "description": "The name to use for the route.",
                            "type": "string",
                            "minLength": 1,
                            "maxLength": 255
                          },
                          "spec": {
                            "description": "An object that represents a route specification. Specify one route type.",
                            "type": "object",
                            "properties": {
                              "grpcRoute": {
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/GrpcRoute"
                                  },
                                  {
                                    "description": "An object that represents the specification of a gRPC route."
                                  }
                                ]
                              },
                              "http2Route": {
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/HttpRoute"
                                  },
                                  {
                                    "description": "An object that represents the specification of an HTTP/2 route."
                                  }
                                ]
                              },
                              "httpRoute": {
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/HttpRoute"
                                  },
                                  {
                                    "description": "An object that represents the specification of an HTTP route."
                                  }
                                ]
                              },
                              "priority": {
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/RoutePriority"
                                  },
                                  {
                                    "description": "The priority for the route. Routes are matched based on the specified value, where 0 is the highest priority."
                                  }
                                ]
                              },
                              "tcpRoute": {
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/TcpRoute"
                                  },
                                  {
                                    "description": "An object that represents the specification of a TCP route."
                                  }
                                ]
                              }
                            }
                          },
                          "tags": {
                            "description": "Optional metadata that you can apply to the route to assist with categorization and organization. Each tag consists of a key and an optional value, both of which you define. Tag keys can have a maximum character length of 128 characters, and tag values can have a maximum length of 256 characters.",
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/TagRef"
                            },
                            "minItems": 0,
                            "maxItems": 50
                          }
                        }
                      }
                    }
                  }
                }
              },
              "parameters": [
                {
                  "$ref": "#/components/parameters/X-Amz-Content-Sha256"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Date"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Algorithm"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Credential"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Security-Token"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Signature"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-SignedHeaders"
                }
              ],
              "get": {
                "operationId": "ListRoutes",
                "description": "Returns a list of existing routes in a service mesh.",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ListRoutesOutput"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "NotFoundException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/NotFoundException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "BadRequestException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/BadRequestException"
                        }
                      }
                    }
                  },
                  "482": {
                    "description": "TooManyRequestsException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/TooManyRequestsException"
                        }
                      }
                    }
                  },
                  "483": {
                    "description": "ForbiddenException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ForbiddenException"
                        }
                      }
                    }
                  },
                  "484": {
                    "description": "ServiceUnavailableException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ServiceUnavailableException"
                        }
                      }
                    }
                  },
                  "485": {
                    "description": "InternalServerErrorException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InternalServerErrorException"
                        }
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "limit",
                    "in": "query",
                    "required": false,
                    "description": "The maximum number of results returned by <code>ListRoutes</code> in paginated output. When you use this parameter, <code>ListRoutes</code> returns only <code>limit</code> results in a single page along with a <code>nextToken</code> response element. You can see the remaining results of the initial request by sending another <code>ListRoutes</code> request with the returned <code>nextToken</code> value. This value can be between 1 and 100. If you don't use this parameter, <code>ListRoutes</code> returns up to 100 results and a <code>nextToken</code> value if applicable.",
                    "schema": {
                      "type": "integer",
                      "minimum": 1,
                      "maximum": 100
                    }
                  },
                  {
                    "name": "meshName",
                    "in": "path",
                    "required": true,
                    "description": "The name of the service mesh to list routes in.",
                    "schema": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 255
                    }
                  },
                  {
                    "name": "meshOwner",
                    "in": "query",
                    "required": false,
                    "description": "The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\">Working with shared meshes</a>.",
                    "schema": {
                      "type": "string",
                      "minLength": 12,
                      "maxLength": 12
                    }
                  },
                  {
                    "name": "nextToken",
                    "in": "query",
                    "required": false,
                    "description": "The <code>nextToken</code> value returned from a previous paginated <code>ListRoutes</code> request where <code>limit</code> was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the <code>nextToken</code> value.",
                    "schema": {
                      "type": "string"
                    }
                  },
                  {
                    "name": "virtualRouterName",
                    "in": "path",
                    "required": true,
                    "description": "The name of the virtual router to list routes in.",
                    "schema": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 255
                    }
                  }
                ]
              }
            },
            "/v20190125/meshes/{meshName}/virtualGateways": {
              "put": {
                "operationId": "CreateVirtualGateway",
                "description": "<p>Creates a virtual gateway.</p> <p>A virtual gateway allows resources outside your mesh to communicate to resources that are inside your mesh. The virtual gateway represents an Envoy proxy running in an Amazon ECS task, in a Kubernetes service, or on an Amazon EC2 instance. Unlike a virtual node, which represents an Envoy running with an application, a virtual gateway represents Envoy deployed by itself.</p> <p>For more information about virtual gateways, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/virtual_gateways.html\">Virtual gateways</a>. </p>",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/CreateVirtualGatewayOutput"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "NotFoundException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/NotFoundException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "BadRequestException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/BadRequestException"
                        }
                      }
                    }
                  },
                  "482": {
                    "description": "ConflictException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ConflictException"
                        }
                      }
                    }
                  },
                  "483": {
                    "description": "TooManyRequestsException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/TooManyRequestsException"
                        }
                      }
                    }
                  },
                  "484": {
                    "description": "ForbiddenException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ForbiddenException"
                        }
                      }
                    }
                  },
                  "485": {
                    "description": "ServiceUnavailableException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ServiceUnavailableException"
                        }
                      }
                    }
                  },
                  "486": {
                    "description": "InternalServerErrorException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InternalServerErrorException"
                        }
                      }
                    }
                  },
                  "487": {
                    "description": "LimitExceededException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/LimitExceededException"
                        }
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "meshName",
                    "in": "path",
                    "required": true,
                    "description": "The name of the service mesh to create the virtual gateway in.",
                    "schema": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 255
                    }
                  },
                  {
                    "name": "meshOwner",
                    "in": "query",
                    "required": false,
                    "description": "The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then the account that you specify must share the mesh with your account before you can create the resource in the service mesh. For more information about mesh sharing, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\">Working with shared meshes</a>.",
                    "schema": {
                      "type": "string",
                      "minLength": 12,
                      "maxLength": 12
                    }
                  }
                ],
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "required": [
                          "spec",
                          "virtualGatewayName"
                        ],
                        "properties": {
                          "clientToken": {
                            "description": "Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Up to 36 letters, numbers, hyphens, and underscores are allowed.",
                            "type": "string"
                          },
                          "spec": {
                            "description": "An object that represents the specification of a service mesh resource.",
                            "type": "object",
                            "properties": {
                              "backendDefaults": {
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/VirtualGatewayBackendDefaults"
                                  },
                                  {
                                    "description": "A reference to an object that represents the defaults for backends."
                                  }
                                ]
                              },
                              "listeners": {
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/VirtualGatewayListeners"
                                  },
                                  {
                                    "description": "The listeners that the mesh endpoint is expected to receive inbound traffic from. You can specify one listener."
                                  }
                                ]
                              },
                              "logging": {
                                "$ref": "#/components/schemas/VirtualGatewayLogging"
                              }
                            }
                          },
                          "tags": {
                            "description": "Optional metadata that you can apply to the virtual gateway to assist with categorization and organization. Each tag consists of a key and an optional value, both of which you define. Tag keys can have a maximum character length of 128 characters, and tag values can have a maximum length of 256 characters.",
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/TagRef"
                            },
                            "minItems": 0,
                            "maxItems": 50
                          },
                          "virtualGatewayName": {
                            "description": "The name to use for the virtual gateway.",
                            "type": "string",
                            "minLength": 1,
                            "maxLength": 255
                          }
                        }
                      }
                    }
                  }
                }
              },
              "parameters": [
                {
                  "$ref": "#/components/parameters/X-Amz-Content-Sha256"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Date"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Algorithm"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Credential"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Security-Token"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Signature"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-SignedHeaders"
                }
              ],
              "get": {
                "operationId": "ListVirtualGateways",
                "description": "Returns a list of existing virtual gateways in a service mesh.",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ListVirtualGatewaysOutput"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "NotFoundException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/NotFoundException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "BadRequestException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/BadRequestException"
                        }
                      }
                    }
                  },
                  "482": {
                    "description": "TooManyRequestsException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/TooManyRequestsException"
                        }
                      }
                    }
                  },
                  "483": {
                    "description": "ForbiddenException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ForbiddenException"
                        }
                      }
                    }
                  },
                  "484": {
                    "description": "ServiceUnavailableException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ServiceUnavailableException"
                        }
                      }
                    }
                  },
                  "485": {
                    "description": "InternalServerErrorException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InternalServerErrorException"
                        }
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "limit",
                    "in": "query",
                    "required": false,
                    "description": "The maximum number of results returned by <code>ListVirtualGateways</code> in paginated output. When you use this parameter, <code>ListVirtualGateways</code> returns only <code>limit</code> results in a single page along with a <code>nextToken</code> response element. You can see the remaining results of the initial request by sending another <code>ListVirtualGateways</code> request with the returned <code>nextToken</code> value. This value can be between 1 and 100. If you don't use this parameter, <code>ListVirtualGateways</code> returns up to 100 results and a <code>nextToken</code> value if applicable.",
                    "schema": {
                      "type": "integer",
                      "minimum": 1,
                      "maximum": 100
                    }
                  },
                  {
                    "name": "meshName",
                    "in": "path",
                    "required": true,
                    "description": "The name of the service mesh to list virtual gateways in.",
                    "schema": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 255
                    }
                  },
                  {
                    "name": "meshOwner",
                    "in": "query",
                    "required": false,
                    "description": "The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\">Working with shared meshes</a>.",
                    "schema": {
                      "type": "string",
                      "minLength": 12,
                      "maxLength": 12
                    }
                  },
                  {
                    "name": "nextToken",
                    "in": "query",
                    "required": false,
                    "description": "The <code>nextToken</code> value returned from a previous paginated <code>ListVirtualGateways</code> request where <code>limit</code> was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the <code>nextToken</code> value.",
                    "schema": {
                      "type": "string"
                    }
                  }
                ]
              }
            },
            "/v20190125/meshes/{meshName}/virtualNodes": {
              "put": {
                "operationId": "CreateVirtualNode",
                "description": "<p>Creates a virtual node within a service mesh.</p> <p> A virtual node acts as a logical pointer to a particular task group, such as an Amazon ECS service or a Kubernetes deployment. When you create a virtual node, you can specify the service discovery information for your task group, and whether the proxy running in a task group will communicate with other proxies using Transport Layer Security (TLS).</p> <p>You define a <code>listener</code> for any inbound traffic that your virtual node expects. Any virtual service that your virtual node expects to communicate to is specified as a <code>backend</code>.</p> <p>The response metadata for your new virtual node contains the <code>arn</code> that is associated with the virtual node. Set this value to the full ARN; for example, <code>arn:aws:appmesh:us-west-2:123456789012:myMesh/default/virtualNode/myApp</code>) as the <code>APPMESH_RESOURCE_ARN</code> environment variable for your task group's Envoy proxy container in your task definition or pod spec. This is then mapped to the <code>node.id</code> and <code>node.cluster</code> Envoy parameters.</p> <note> <p>By default, App Mesh uses the name of the resource you specified in <code>APPMESH_RESOURCE_ARN</code> when Envoy is referring to itself in metrics and traces. You can override this behavior by setting the <code>APPMESH_RESOURCE_CLUSTER</code> environment variable with your own name.</p> </note> <p>For more information about virtual nodes, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/virtual_nodes.html\">Virtual nodes</a>. You must be using <code>1.15.0</code> or later of the Envoy image when setting these variables. For more information aboutApp Mesh Envoy variables, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/envoy.html\">Envoy image</a> in the App Mesh User Guide.</p>",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/CreateVirtualNodeOutput"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "NotFoundException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/NotFoundException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "BadRequestException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/BadRequestException"
                        }
                      }
                    }
                  },
                  "482": {
                    "description": "ConflictException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ConflictException"
                        }
                      }
                    }
                  },
                  "483": {
                    "description": "TooManyRequestsException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/TooManyRequestsException"
                        }
                      }
                    }
                  },
                  "484": {
                    "description": "ForbiddenException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ForbiddenException"
                        }
                      }
                    }
                  },
                  "485": {
                    "description": "ServiceUnavailableException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ServiceUnavailableException"
                        }
                      }
                    }
                  },
                  "486": {
                    "description": "InternalServerErrorException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InternalServerErrorException"
                        }
                      }
                    }
                  },
                  "487": {
                    "description": "LimitExceededException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/LimitExceededException"
                        }
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "meshName",
                    "in": "path",
                    "required": true,
                    "description": "The name of the service mesh to create the virtual node in.",
                    "schema": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 255
                    }
                  },
                  {
                    "name": "meshOwner",
                    "in": "query",
                    "required": false,
                    "description": "The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then the account that you specify must share the mesh with your account before you can create the resource in the service mesh. For more information about mesh sharing, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\">Working with shared meshes</a>.",
                    "schema": {
                      "type": "string",
                      "minLength": 12,
                      "maxLength": 12
                    }
                  }
                ],
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "required": [
                          "spec",
                          "virtualNodeName"
                        ],
                        "properties": {
                          "clientToken": {
                            "description": "Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Up to 36 letters, numbers, hyphens, and underscores are allowed.",
                            "type": "string"
                          },
                          "spec": {
                            "description": "An object that represents the specification of a virtual node.",
                            "type": "object",
                            "properties": {
                              "backendDefaults": {
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/BackendDefaults"
                                  },
                                  {
                                    "description": "A reference to an object that represents the defaults for backends."
                                  }
                                ]
                              },
                              "backends": {
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/Backends"
                                  },
                                  {
                                    "description": "The backends that the virtual node is expected to send outbound traffic to."
                                  }
                                ]
                              },
                              "listeners": {
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/Listeners"
                                  },
                                  {
                                    "description": "The listener that the virtual node is expected to receive inbound traffic from. You can specify one listener."
                                  }
                                ]
                              },
                              "logging": {
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/Logging"
                                  },
                                  {
                                    "description": "The inbound and outbound access logging information for the virtual node."
                                  }
                                ]
                              },
                              "serviceDiscovery": {
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/ServiceDiscovery"
                                  },
                                  {
                                    "description": "The service discovery information for the virtual node. If your virtual node does not expect ingress traffic, you can omit this parameter. If you specify a <code>listener</code>, then you must specify service discovery information."
                                  }
                                ]
                              }
                            }
                          },
                          "tags": {
                            "description": "Optional metadata that you can apply to the virtual node to assist with categorization and organization. Each tag consists of a key and an optional value, both of which you define. Tag keys can have a maximum character length of 128 characters, and tag values can have a maximum length of 256 characters.",
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/TagRef"
                            },
                            "minItems": 0,
                            "maxItems": 50
                          },
                          "virtualNodeName": {
                            "description": "The name to use for the virtual node.",
                            "type": "string",
                            "minLength": 1,
                            "maxLength": 255
                          }
                        }
                      }
                    }
                  }
                }
              },
              "parameters": [
                {
                  "$ref": "#/components/parameters/X-Amz-Content-Sha256"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Date"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Algorithm"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Credential"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Security-Token"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Signature"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-SignedHeaders"
                }
              ],
              "get": {
                "operationId": "ListVirtualNodes",
                "description": "Returns a list of existing virtual nodes.",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ListVirtualNodesOutput"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "NotFoundException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/NotFoundException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "BadRequestException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/BadRequestException"
                        }
                      }
                    }
                  },
                  "482": {
                    "description": "TooManyRequestsException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/TooManyRequestsException"
                        }
                      }
                    }
                  },
                  "483": {
                    "description": "ForbiddenException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ForbiddenException"
                        }
                      }
                    }
                  },
                  "484": {
                    "description": "ServiceUnavailableException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ServiceUnavailableException"
                        }
                      }
                    }
                  },
                  "485": {
                    "description": "InternalServerErrorException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InternalServerErrorException"
                        }
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "limit",
                    "in": "query",
                    "required": false,
                    "description": "The maximum number of results returned by <code>ListVirtualNodes</code> in paginated output. When you use this parameter, <code>ListVirtualNodes</code> returns only <code>limit</code> results in a single page along with a <code>nextToken</code> response element. You can see the remaining results of the initial request by sending another <code>ListVirtualNodes</code> request with the returned <code>nextToken</code> value. This value can be between 1 and 100. If you don't use this parameter, <code>ListVirtualNodes</code> returns up to 100 results and a <code>nextToken</code> value if applicable.",
                    "schema": {
                      "type": "integer",
                      "minimum": 1,
                      "maximum": 100
                    }
                  },
                  {
                    "name": "meshName",
                    "in": "path",
                    "required": true,
                    "description": "The name of the service mesh to list virtual nodes in.",
                    "schema": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 255
                    }
                  },
                  {
                    "name": "meshOwner",
                    "in": "query",
                    "required": false,
                    "description": "The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\">Working with shared meshes</a>.",
                    "schema": {
                      "type": "string",
                      "minLength": 12,
                      "maxLength": 12
                    }
                  },
                  {
                    "name": "nextToken",
                    "in": "query",
                    "required": false,
                    "description": "The <code>nextToken</code> value returned from a previous paginated <code>ListVirtualNodes</code> request where <code>limit</code> was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the <code>nextToken</code> value.",
                    "schema": {
                      "type": "string"
                    }
                  }
                ]
              }
            },
            "/v20190125/meshes/{meshName}/virtualRouters": {
              "put": {
                "operationId": "CreateVirtualRouter",
                "description": "<p>Creates a virtual router within a service mesh.</p> <p>Specify a <code>listener</code> for any inbound traffic that your virtual router receives. Create a virtual router for each protocol and port that you need to route. Virtual routers handle traffic for one or more virtual services within your mesh. After you create your virtual router, create and associate routes for your virtual router that direct incoming requests to different virtual nodes.</p> <p>For more information about virtual routers, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/virtual_routers.html\">Virtual routers</a>.</p>",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/CreateVirtualRouterOutput"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "NotFoundException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/NotFoundException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "BadRequestException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/BadRequestException"
                        }
                      }
                    }
                  },
                  "482": {
                    "description": "ConflictException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ConflictException"
                        }
                      }
                    }
                  },
                  "483": {
                    "description": "TooManyRequestsException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/TooManyRequestsException"
                        }
                      }
                    }
                  },
                  "484": {
                    "description": "ForbiddenException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ForbiddenException"
                        }
                      }
                    }
                  },
                  "485": {
                    "description": "ServiceUnavailableException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ServiceUnavailableException"
                        }
                      }
                    }
                  },
                  "486": {
                    "description": "InternalServerErrorException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InternalServerErrorException"
                        }
                      }
                    }
                  },
                  "487": {
                    "description": "LimitExceededException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/LimitExceededException"
                        }
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "meshName",
                    "in": "path",
                    "required": true,
                    "description": "The name of the service mesh to create the virtual router in.",
                    "schema": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 255
                    }
                  },
                  {
                    "name": "meshOwner",
                    "in": "query",
                    "required": false,
                    "description": "The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then the account that you specify must share the mesh with your account before you can create the resource in the service mesh. For more information about mesh sharing, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\">Working with shared meshes</a>.",
                    "schema": {
                      "type": "string",
                      "minLength": 12,
                      "maxLength": 12
                    }
                  }
                ],
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "required": [
                          "spec",
                          "virtualRouterName"
                        ],
                        "properties": {
                          "clientToken": {
                            "description": "Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Up to 36 letters, numbers, hyphens, and underscores are allowed.",
                            "type": "string"
                          },
                          "spec": {
                            "description": "An object that represents the specification of a virtual router.",
                            "type": "object",
                            "properties": {
                              "listeners": {
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/VirtualRouterListeners"
                                  },
                                  {
                                    "description": "The listeners that the virtual router is expected to receive inbound traffic from. You can specify one listener."
                                  }
                                ]
                              }
                            }
                          },
                          "tags": {
                            "description": "Optional metadata that you can apply to the virtual router to assist with categorization and organization. Each tag consists of a key and an optional value, both of which you define. Tag keys can have a maximum character length of 128 characters, and tag values can have a maximum length of 256 characters.",
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/TagRef"
                            },
                            "minItems": 0,
                            "maxItems": 50
                          },
                          "virtualRouterName": {
                            "description": "The name to use for the virtual router.",
                            "type": "string",
                            "minLength": 1,
                            "maxLength": 255
                          }
                        }
                      }
                    }
                  }
                }
              },
              "parameters": [
                {
                  "$ref": "#/components/parameters/X-Amz-Content-Sha256"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Date"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Algorithm"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Credential"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Security-Token"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Signature"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-SignedHeaders"
                }
              ],
              "get": {
                "operationId": "ListVirtualRouters",
                "description": "Returns a list of existing virtual routers in a service mesh.",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ListVirtualRoutersOutput"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "NotFoundException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/NotFoundException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "BadRequestException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/BadRequestException"
                        }
                      }
                    }
                  },
                  "482": {
                    "description": "TooManyRequestsException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/TooManyRequestsException"
                        }
                      }
                    }
                  },
                  "483": {
                    "description": "ForbiddenException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ForbiddenException"
                        }
                      }
                    }
                  },
                  "484": {
                    "description": "ServiceUnavailableException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ServiceUnavailableException"
                        }
                      }
                    }
                  },
                  "485": {
                    "description": "InternalServerErrorException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InternalServerErrorException"
                        }
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "limit",
                    "in": "query",
                    "required": false,
                    "description": "The maximum number of results returned by <code>ListVirtualRouters</code> in paginated output. When you use this parameter, <code>ListVirtualRouters</code> returns only <code>limit</code> results in a single page along with a <code>nextToken</code> response element. You can see the remaining results of the initial request by sending another <code>ListVirtualRouters</code> request with the returned <code>nextToken</code> value. This value can be between 1 and 100. If you don't use this parameter, <code>ListVirtualRouters</code> returns up to 100 results and a <code>nextToken</code> value if applicable.",
                    "schema": {
                      "type": "integer",
                      "minimum": 1,
                      "maximum": 100
                    }
                  },
                  {
                    "name": "meshName",
                    "in": "path",
                    "required": true,
                    "description": "The name of the service mesh to list virtual routers in.",
                    "schema": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 255
                    }
                  },
                  {
                    "name": "meshOwner",
                    "in": "query",
                    "required": false,
                    "description": "The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\">Working with shared meshes</a>.",
                    "schema": {
                      "type": "string",
                      "minLength": 12,
                      "maxLength": 12
                    }
                  },
                  {
                    "name": "nextToken",
                    "in": "query",
                    "required": false,
                    "description": "The <code>nextToken</code> value returned from a previous paginated <code>ListVirtualRouters</code> request where <code>limit</code> was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the <code>nextToken</code> value.",
                    "schema": {
                      "type": "string"
                    }
                  }
                ]
              }
            },
            "/v20190125/meshes/{meshName}/virtualServices": {
              "put": {
                "operationId": "CreateVirtualService",
                "description": "<p>Creates a virtual service within a service mesh.</p> <p>A virtual service is an abstraction of a real service that is provided by a virtual node directly or indirectly by means of a virtual router. Dependent services call your virtual service by its <code>virtualServiceName</code>, and those requests are routed to the virtual node or virtual router that is specified as the provider for the virtual service.</p> <p>For more information about virtual services, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/virtual_services.html\">Virtual services</a>.</p>",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/CreateVirtualServiceOutput"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "NotFoundException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/NotFoundException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "BadRequestException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/BadRequestException"
                        }
                      }
                    }
                  },
                  "482": {
                    "description": "ConflictException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ConflictException"
                        }
                      }
                    }
                  },
                  "483": {
                    "description": "TooManyRequestsException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/TooManyRequestsException"
                        }
                      }
                    }
                  },
                  "484": {
                    "description": "ForbiddenException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ForbiddenException"
                        }
                      }
                    }
                  },
                  "485": {
                    "description": "ServiceUnavailableException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ServiceUnavailableException"
                        }
                      }
                    }
                  },
                  "486": {
                    "description": "InternalServerErrorException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InternalServerErrorException"
                        }
                      }
                    }
                  },
                  "487": {
                    "description": "LimitExceededException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/LimitExceededException"
                        }
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "meshName",
                    "in": "path",
                    "required": true,
                    "description": "The name of the service mesh to create the virtual service in.",
                    "schema": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 255
                    }
                  },
                  {
                    "name": "meshOwner",
                    "in": "query",
                    "required": false,
                    "description": "The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then the account that you specify must share the mesh with your account before you can create the resource in the service mesh. For more information about mesh sharing, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\">Working with shared meshes</a>.",
                    "schema": {
                      "type": "string",
                      "minLength": 12,
                      "maxLength": 12
                    }
                  }
                ],
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "required": [
                          "spec",
                          "virtualServiceName"
                        ],
                        "properties": {
                          "clientToken": {
                            "description": "Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Up to 36 letters, numbers, hyphens, and underscores are allowed.",
                            "type": "string"
                          },
                          "spec": {
                            "description": "An object that represents the specification of a virtual service.",
                            "type": "object",
                            "properties": {
                              "provider": {
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/VirtualServiceProvider"
                                  },
                                  {
                                    "description": "The App Mesh object that is acting as the provider for a virtual service. You can specify a single virtual node or virtual router."
                                  }
                                ]
                              }
                            }
                          },
                          "tags": {
                            "description": "Optional metadata that you can apply to the virtual service to assist with categorization and organization. Each tag consists of a key and an optional value, both of which you define. Tag keys can have a maximum character length of 128 characters, and tag values can have a maximum length of 256 characters.",
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/TagRef"
                            },
                            "minItems": 0,
                            "maxItems": 50
                          },
                          "virtualServiceName": {
                            "description": "The name to use for the virtual service.",
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              },
              "parameters": [
                {
                  "$ref": "#/components/parameters/X-Amz-Content-Sha256"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Date"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Algorithm"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Credential"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Security-Token"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Signature"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-SignedHeaders"
                }
              ],
              "get": {
                "operationId": "ListVirtualServices",
                "description": "Returns a list of existing virtual services in a service mesh.",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ListVirtualServicesOutput"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "NotFoundException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/NotFoundException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "BadRequestException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/BadRequestException"
                        }
                      }
                    }
                  },
                  "482": {
                    "description": "TooManyRequestsException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/TooManyRequestsException"
                        }
                      }
                    }
                  },
                  "483": {
                    "description": "ForbiddenException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ForbiddenException"
                        }
                      }
                    }
                  },
                  "484": {
                    "description": "ServiceUnavailableException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ServiceUnavailableException"
                        }
                      }
                    }
                  },
                  "485": {
                    "description": "InternalServerErrorException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InternalServerErrorException"
                        }
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "limit",
                    "in": "query",
                    "required": false,
                    "description": "The maximum number of results returned by <code>ListVirtualServices</code> in paginated output. When you use this parameter, <code>ListVirtualServices</code> returns only <code>limit</code> results in a single page along with a <code>nextToken</code> response element. You can see the remaining results of the initial request by sending another <code>ListVirtualServices</code> request with the returned <code>nextToken</code> value. This value can be between 1 and 100. If you don't use this parameter, <code>ListVirtualServices</code> returns up to 100 results and a <code>nextToken</code> value if applicable.",
                    "schema": {
                      "type": "integer",
                      "minimum": 1,
                      "maximum": 100
                    }
                  },
                  {
                    "name": "meshName",
                    "in": "path",
                    "required": true,
                    "description": "The name of the service mesh to list virtual services in.",
                    "schema": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 255
                    }
                  },
                  {
                    "name": "meshOwner",
                    "in": "query",
                    "required": false,
                    "description": "The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\">Working with shared meshes</a>.",
                    "schema": {
                      "type": "string",
                      "minLength": 12,
                      "maxLength": 12
                    }
                  },
                  {
                    "name": "nextToken",
                    "in": "query",
                    "required": false,
                    "description": "The <code>nextToken</code> value returned from a previous paginated <code>ListVirtualServices</code> request where <code>limit</code> was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the <code>nextToken</code> value.",
                    "schema": {
                      "type": "string"
                    }
                  }
                ]
              }
            },
            "/v20190125/meshes/{meshName}/virtualGateway/{virtualGatewayName}/gatewayRoutes/{gatewayRouteName}": {
              "delete": {
                "operationId": "DeleteGatewayRoute",
                "description": "Deletes an existing gateway route.",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/DeleteGatewayRouteOutput"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "NotFoundException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/NotFoundException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "BadRequestException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/BadRequestException"
                        }
                      }
                    }
                  },
                  "482": {
                    "description": "TooManyRequestsException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/TooManyRequestsException"
                        }
                      }
                    }
                  },
                  "483": {
                    "description": "ForbiddenException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ForbiddenException"
                        }
                      }
                    }
                  },
                  "484": {
                    "description": "ResourceInUseException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ResourceInUseException"
                        }
                      }
                    }
                  },
                  "485": {
                    "description": "ServiceUnavailableException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ServiceUnavailableException"
                        }
                      }
                    }
                  },
                  "486": {
                    "description": "InternalServerErrorException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InternalServerErrorException"
                        }
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "gatewayRouteName",
                    "in": "path",
                    "required": true,
                    "description": "The name of the gateway route to delete.",
                    "schema": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 255
                    }
                  },
                  {
                    "name": "meshName",
                    "in": "path",
                    "required": true,
                    "description": "The name of the service mesh to delete the gateway route from.",
                    "schema": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 255
                    }
                  },
                  {
                    "name": "meshOwner",
                    "in": "query",
                    "required": false,
                    "description": "The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\">Working with shared meshes</a>.",
                    "schema": {
                      "type": "string",
                      "minLength": 12,
                      "maxLength": 12
                    }
                  },
                  {
                    "name": "virtualGatewayName",
                    "in": "path",
                    "required": true,
                    "description": "The name of the virtual gateway to delete the route from.",
                    "schema": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 255
                    }
                  }
                ]
              },
              "parameters": [
                {
                  "$ref": "#/components/parameters/X-Amz-Content-Sha256"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Date"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Algorithm"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Credential"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Security-Token"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Signature"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-SignedHeaders"
                }
              ],
              "get": {
                "operationId": "DescribeGatewayRoute",
                "description": "Describes an existing gateway route.",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/DescribeGatewayRouteOutput"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "NotFoundException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/NotFoundException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "BadRequestException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/BadRequestException"
                        }
                      }
                    }
                  },
                  "482": {
                    "description": "TooManyRequestsException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/TooManyRequestsException"
                        }
                      }
                    }
                  },
                  "483": {
                    "description": "ForbiddenException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ForbiddenException"
                        }
                      }
                    }
                  },
                  "484": {
                    "description": "ServiceUnavailableException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ServiceUnavailableException"
                        }
                      }
                    }
                  },
                  "485": {
                    "description": "InternalServerErrorException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InternalServerErrorException"
                        }
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "gatewayRouteName",
                    "in": "path",
                    "required": true,
                    "description": "The name of the gateway route to describe.",
                    "schema": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 255
                    }
                  },
                  {
                    "name": "meshName",
                    "in": "path",
                    "required": true,
                    "description": "The name of the service mesh that the gateway route resides in.",
                    "schema": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 255
                    }
                  },
                  {
                    "name": "meshOwner",
                    "in": "query",
                    "required": false,
                    "description": "The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\">Working with shared meshes</a>.",
                    "schema": {
                      "type": "string",
                      "minLength": 12,
                      "maxLength": 12
                    }
                  },
                  {
                    "name": "virtualGatewayName",
                    "in": "path",
                    "required": true,
                    "description": "The name of the virtual gateway that the gateway route is associated with.",
                    "schema": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 255
                    }
                  }
                ]
              },
              "put": {
                "operationId": "UpdateGatewayRoute",
                "description": "Updates an existing gateway route that is associated to a specified virtual gateway in a service mesh.",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/UpdateGatewayRouteOutput"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "NotFoundException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/NotFoundException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "BadRequestException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/BadRequestException"
                        }
                      }
                    }
                  },
                  "482": {
                    "description": "ConflictException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ConflictException"
                        }
                      }
                    }
                  },
                  "483": {
                    "description": "TooManyRequestsException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/TooManyRequestsException"
                        }
                      }
                    }
                  },
                  "484": {
                    "description": "ForbiddenException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ForbiddenException"
                        }
                      }
                    }
                  },
                  "485": {
                    "description": "ServiceUnavailableException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ServiceUnavailableException"
                        }
                      }
                    }
                  },
                  "486": {
                    "description": "InternalServerErrorException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InternalServerErrorException"
                        }
                      }
                    }
                  },
                  "487": {
                    "description": "LimitExceededException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/LimitExceededException"
                        }
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "gatewayRouteName",
                    "in": "path",
                    "required": true,
                    "description": "The name of the gateway route to update.",
                    "schema": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 255
                    }
                  },
                  {
                    "name": "meshName",
                    "in": "path",
                    "required": true,
                    "description": "The name of the service mesh that the gateway route resides in.",
                    "schema": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 255
                    }
                  },
                  {
                    "name": "meshOwner",
                    "in": "query",
                    "required": false,
                    "description": "The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\">Working with shared meshes</a>.",
                    "schema": {
                      "type": "string",
                      "minLength": 12,
                      "maxLength": 12
                    }
                  },
                  {
                    "name": "virtualGatewayName",
                    "in": "path",
                    "required": true,
                    "description": "The name of the virtual gateway that the gateway route is associated with.",
                    "schema": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 255
                    }
                  }
                ],
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "required": [
                          "spec"
                        ],
                        "properties": {
                          "clientToken": {
                            "description": "Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Up to 36 letters, numbers, hyphens, and underscores are allowed.",
                            "type": "string"
                          },
                          "spec": {
                            "description": "An object that represents a gateway route specification. Specify one gateway route type.",
                            "type": "object",
                            "properties": {
                              "grpcRoute": {
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/GrpcGatewayRoute"
                                  },
                                  {
                                    "description": "An object that represents the specification of a gRPC gateway route."
                                  }
                                ]
                              },
                              "http2Route": {
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/HttpGatewayRoute"
                                  },
                                  {
                                    "description": "An object that represents the specification of an HTTP/2 gateway route."
                                  }
                                ]
                              },
                              "httpRoute": {
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/HttpGatewayRoute"
                                  },
                                  {
                                    "description": "An object that represents the specification of an HTTP gateway route."
                                  }
                                ]
                              },
                              "priority": {
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/GatewayRoutePriority"
                                  },
                                  {
                                    "description": "The ordering of the gateway routes spec."
                                  }
                                ]
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "/v20190125/meshes/{meshName}": {
              "delete": {
                "operationId": "DeleteMesh",
                "description": "<p>Deletes an existing service mesh.</p> <p>You must delete all resources (virtual services, routes, virtual routers, and virtual nodes) in the service mesh before you can delete the mesh itself.</p>",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/DeleteMeshOutput"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "NotFoundException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/NotFoundException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "BadRequestException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/BadRequestException"
                        }
                      }
                    }
                  },
                  "482": {
                    "description": "TooManyRequestsException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/TooManyRequestsException"
                        }
                      }
                    }
                  },
                  "483": {
                    "description": "ForbiddenException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ForbiddenException"
                        }
                      }
                    }
                  },
                  "484": {
                    "description": "ResourceInUseException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ResourceInUseException"
                        }
                      }
                    }
                  },
                  "485": {
                    "description": "ServiceUnavailableException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ServiceUnavailableException"
                        }
                      }
                    }
                  },
                  "486": {
                    "description": "InternalServerErrorException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InternalServerErrorException"
                        }
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "meshName",
                    "in": "path",
                    "required": true,
                    "description": "The name of the service mesh to delete.",
                    "schema": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 255
                    }
                  }
                ]
              },
              "parameters": [
                {
                  "$ref": "#/components/parameters/X-Amz-Content-Sha256"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Date"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Algorithm"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Credential"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Security-Token"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Signature"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-SignedHeaders"
                }
              ],
              "get": {
                "operationId": "DescribeMesh",
                "description": "Describes an existing service mesh.",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/DescribeMeshOutput"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "NotFoundException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/NotFoundException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "BadRequestException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/BadRequestException"
                        }
                      }
                    }
                  },
                  "482": {
                    "description": "TooManyRequestsException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/TooManyRequestsException"
                        }
                      }
                    }
                  },
                  "483": {
                    "description": "ForbiddenException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ForbiddenException"
                        }
                      }
                    }
                  },
                  "484": {
                    "description": "ServiceUnavailableException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ServiceUnavailableException"
                        }
                      }
                    }
                  },
                  "485": {
                    "description": "InternalServerErrorException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InternalServerErrorException"
                        }
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "meshName",
                    "in": "path",
                    "required": true,
                    "description": "The name of the service mesh to describe.",
                    "schema": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 255
                    }
                  },
                  {
                    "name": "meshOwner",
                    "in": "query",
                    "required": false,
                    "description": "The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\">Working with shared meshes</a>.",
                    "schema": {
                      "type": "string",
                      "minLength": 12,
                      "maxLength": 12
                    }
                  }
                ]
              },
              "put": {
                "operationId": "UpdateMesh",
                "description": "Updates an existing service mesh.",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/UpdateMeshOutput"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "NotFoundException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/NotFoundException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "BadRequestException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/BadRequestException"
                        }
                      }
                    }
                  },
                  "482": {
                    "description": "ConflictException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ConflictException"
                        }
                      }
                    }
                  },
                  "483": {
                    "description": "TooManyRequestsException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/TooManyRequestsException"
                        }
                      }
                    }
                  },
                  "484": {
                    "description": "ForbiddenException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ForbiddenException"
                        }
                      }
                    }
                  },
                  "485": {
                    "description": "ServiceUnavailableException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ServiceUnavailableException"
                        }
                      }
                    }
                  },
                  "486": {
                    "description": "InternalServerErrorException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InternalServerErrorException"
                        }
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "meshName",
                    "in": "path",
                    "required": true,
                    "description": "The name of the service mesh to update.",
                    "schema": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 255
                    }
                  }
                ],
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "clientToken": {
                            "description": "Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Up to 36 letters, numbers, hyphens, and underscores are allowed.",
                            "type": "string"
                          },
                          "spec": {
                            "description": "An object that represents the specification of a service mesh.",
                            "type": "object",
                            "properties": {
                              "egressFilter": {
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/EgressFilter"
                                  },
                                  {
                                    "description": "The egress filter rules for the service mesh."
                                  }
                                ]
                              },
                              "serviceDiscovery": {
                                "$ref": "#/components/schemas/MeshServiceDiscovery"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "/v20190125/meshes/{meshName}/virtualRouter/{virtualRouterName}/routes/{routeName}": {
              "delete": {
                "operationId": "DeleteRoute",
                "description": "Deletes an existing route.",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/DeleteRouteOutput"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "NotFoundException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/NotFoundException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "BadRequestException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/BadRequestException"
                        }
                      }
                    }
                  },
                  "482": {
                    "description": "TooManyRequestsException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/TooManyRequestsException"
                        }
                      }
                    }
                  },
                  "483": {
                    "description": "ForbiddenException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ForbiddenException"
                        }
                      }
                    }
                  },
                  "484": {
                    "description": "ResourceInUseException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ResourceInUseException"
                        }
                      }
                    }
                  },
                  "485": {
                    "description": "ServiceUnavailableException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ServiceUnavailableException"
                        }
                      }
                    }
                  },
                  "486": {
                    "description": "InternalServerErrorException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InternalServerErrorException"
                        }
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "meshName",
                    "in": "path",
                    "required": true,
                    "description": "The name of the service mesh to delete the route in.",
                    "schema": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 255
                    }
                  },
                  {
                    "name": "meshOwner",
                    "in": "query",
                    "required": false,
                    "description": "The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\">Working with shared meshes</a>.",
                    "schema": {
                      "type": "string",
                      "minLength": 12,
                      "maxLength": 12
                    }
                  },
                  {
                    "name": "routeName",
                    "in": "path",
                    "required": true,
                    "description": "The name of the route to delete.",
                    "schema": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 255
                    }
                  },
                  {
                    "name": "virtualRouterName",
                    "in": "path",
                    "required": true,
                    "description": "The name of the virtual router to delete the route in.",
                    "schema": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 255
                    }
                  }
                ]
              },
              "parameters": [
                {
                  "$ref": "#/components/parameters/X-Amz-Content-Sha256"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Date"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Algorithm"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Credential"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Security-Token"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Signature"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-SignedHeaders"
                }
              ],
              "get": {
                "operationId": "DescribeRoute",
                "description": "Describes an existing route.",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/DescribeRouteOutput"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "NotFoundException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/NotFoundException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "BadRequestException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/BadRequestException"
                        }
                      }
                    }
                  },
                  "482": {
                    "description": "TooManyRequestsException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/TooManyRequestsException"
                        }
                      }
                    }
                  },
                  "483": {
                    "description": "ForbiddenException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ForbiddenException"
                        }
                      }
                    }
                  },
                  "484": {
                    "description": "ServiceUnavailableException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ServiceUnavailableException"
                        }
                      }
                    }
                  },
                  "485": {
                    "description": "InternalServerErrorException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InternalServerErrorException"
                        }
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "meshName",
                    "in": "path",
                    "required": true,
                    "description": "The name of the service mesh that the route resides in.",
                    "schema": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 255
                    }
                  },
                  {
                    "name": "meshOwner",
                    "in": "query",
                    "required": false,
                    "description": "The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\">Working with shared meshes</a>.",
                    "schema": {
                      "type": "string",
                      "minLength": 12,
                      "maxLength": 12
                    }
                  },
                  {
                    "name": "routeName",
                    "in": "path",
                    "required": true,
                    "description": "The name of the route to describe.",
                    "schema": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 255
                    }
                  },
                  {
                    "name": "virtualRouterName",
                    "in": "path",
                    "required": true,
                    "description": "The name of the virtual router that the route is associated with.",
                    "schema": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 255
                    }
                  }
                ]
              },
              "put": {
                "operationId": "UpdateRoute",
                "description": "Updates an existing route for a specified service mesh and virtual router.",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/UpdateRouteOutput"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "NotFoundException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/NotFoundException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "BadRequestException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/BadRequestException"
                        }
                      }
                    }
                  },
                  "482": {
                    "description": "ConflictException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ConflictException"
                        }
                      }
                    }
                  },
                  "483": {
                    "description": "TooManyRequestsException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/TooManyRequestsException"
                        }
                      }
                    }
                  },
                  "484": {
                    "description": "ForbiddenException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ForbiddenException"
                        }
                      }
                    }
                  },
                  "485": {
                    "description": "ServiceUnavailableException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ServiceUnavailableException"
                        }
                      }
                    }
                  },
                  "486": {
                    "description": "InternalServerErrorException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InternalServerErrorException"
                        }
                      }
                    }
                  },
                  "487": {
                    "description": "LimitExceededException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/LimitExceededException"
                        }
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "meshName",
                    "in": "path",
                    "required": true,
                    "description": "The name of the service mesh that the route resides in.",
                    "schema": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 255
                    }
                  },
                  {
                    "name": "meshOwner",
                    "in": "query",
                    "required": false,
                    "description": "The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\">Working with shared meshes</a>.",
                    "schema": {
                      "type": "string",
                      "minLength": 12,
                      "maxLength": 12
                    }
                  },
                  {
                    "name": "routeName",
                    "in": "path",
                    "required": true,
                    "description": "The name of the route to update.",
                    "schema": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 255
                    }
                  },
                  {
                    "name": "virtualRouterName",
                    "in": "path",
                    "required": true,
                    "description": "The name of the virtual router that the route is associated with.",
                    "schema": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 255
                    }
                  }
                ],
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "required": [
                          "spec"
                        ],
                        "properties": {
                          "clientToken": {
                            "description": "Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Up to 36 letters, numbers, hyphens, and underscores are allowed.",
                            "type": "string"
                          },
                          "spec": {
                            "description": "An object that represents a route specification. Specify one route type.",
                            "type": "object",
                            "properties": {
                              "grpcRoute": {
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/GrpcRoute"
                                  },
                                  {
                                    "description": "An object that represents the specification of a gRPC route."
                                  }
                                ]
                              },
                              "http2Route": {
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/HttpRoute"
                                  },
                                  {
                                    "description": "An object that represents the specification of an HTTP/2 route."
                                  }
                                ]
                              },
                              "httpRoute": {
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/HttpRoute"
                                  },
                                  {
                                    "description": "An object that represents the specification of an HTTP route."
                                  }
                                ]
                              },
                              "priority": {
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/RoutePriority"
                                  },
                                  {
                                    "description": "The priority for the route. Routes are matched based on the specified value, where 0 is the highest priority."
                                  }
                                ]
                              },
                              "tcpRoute": {
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/TcpRoute"
                                  },
                                  {
                                    "description": "An object that represents the specification of a TCP route."
                                  }
                                ]
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "/v20190125/meshes/{meshName}/virtualGateways/{virtualGatewayName}": {
              "delete": {
                "operationId": "DeleteVirtualGateway",
                "description": "Deletes an existing virtual gateway. You cannot delete a virtual gateway if any gateway routes are associated to it.",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/DeleteVirtualGatewayOutput"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "NotFoundException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/NotFoundException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "BadRequestException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/BadRequestException"
                        }
                      }
                    }
                  },
                  "482": {
                    "description": "TooManyRequestsException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/TooManyRequestsException"
                        }
                      }
                    }
                  },
                  "483": {
                    "description": "ForbiddenException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ForbiddenException"
                        }
                      }
                    }
                  },
                  "484": {
                    "description": "ResourceInUseException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ResourceInUseException"
                        }
                      }
                    }
                  },
                  "485": {
                    "description": "ServiceUnavailableException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ServiceUnavailableException"
                        }
                      }
                    }
                  },
                  "486": {
                    "description": "InternalServerErrorException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InternalServerErrorException"
                        }
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "meshName",
                    "in": "path",
                    "required": true,
                    "description": "The name of the service mesh to delete the virtual gateway from.",
                    "schema": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 255
                    }
                  },
                  {
                    "name": "meshOwner",
                    "in": "query",
                    "required": false,
                    "description": "The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\">Working with shared meshes</a>.",
                    "schema": {
                      "type": "string",
                      "minLength": 12,
                      "maxLength": 12
                    }
                  },
                  {
                    "name": "virtualGatewayName",
                    "in": "path",
                    "required": true,
                    "description": "The name of the virtual gateway to delete.",
                    "schema": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 255
                    }
                  }
                ]
              },
              "parameters": [
                {
                  "$ref": "#/components/parameters/X-Amz-Content-Sha256"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Date"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Algorithm"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Credential"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Security-Token"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Signature"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-SignedHeaders"
                }
              ],
              "get": {
                "operationId": "DescribeVirtualGateway",
                "description": "Describes an existing virtual gateway.",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/DescribeVirtualGatewayOutput"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "NotFoundException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/NotFoundException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "BadRequestException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/BadRequestException"
                        }
                      }
                    }
                  },
                  "482": {
                    "description": "TooManyRequestsException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/TooManyRequestsException"
                        }
                      }
                    }
                  },
                  "483": {
                    "description": "ForbiddenException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ForbiddenException"
                        }
                      }
                    }
                  },
                  "484": {
                    "description": "ServiceUnavailableException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ServiceUnavailableException"
                        }
                      }
                    }
                  },
                  "485": {
                    "description": "InternalServerErrorException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InternalServerErrorException"
                        }
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "meshName",
                    "in": "path",
                    "required": true,
                    "description": "The name of the service mesh that the gateway route resides in.",
                    "schema": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 255
                    }
                  },
                  {
                    "name": "meshOwner",
                    "in": "query",
                    "required": false,
                    "description": "The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\">Working with shared meshes</a>.",
                    "schema": {
                      "type": "string",
                      "minLength": 12,
                      "maxLength": 12
                    }
                  },
                  {
                    "name": "virtualGatewayName",
                    "in": "path",
                    "required": true,
                    "description": "The name of the virtual gateway to describe.",
                    "schema": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 255
                    }
                  }
                ]
              },
              "put": {
                "operationId": "UpdateVirtualGateway",
                "description": "Updates an existing virtual gateway in a specified service mesh.",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/UpdateVirtualGatewayOutput"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "NotFoundException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/NotFoundException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "BadRequestException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/BadRequestException"
                        }
                      }
                    }
                  },
                  "482": {
                    "description": "ConflictException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ConflictException"
                        }
                      }
                    }
                  },
                  "483": {
                    "description": "TooManyRequestsException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/TooManyRequestsException"
                        }
                      }
                    }
                  },
                  "484": {
                    "description": "ForbiddenException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ForbiddenException"
                        }
                      }
                    }
                  },
                  "485": {
                    "description": "ServiceUnavailableException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ServiceUnavailableException"
                        }
                      }
                    }
                  },
                  "486": {
                    "description": "InternalServerErrorException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InternalServerErrorException"
                        }
                      }
                    }
                  },
                  "487": {
                    "description": "LimitExceededException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/LimitExceededException"
                        }
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "meshName",
                    "in": "path",
                    "required": true,
                    "description": "The name of the service mesh that the virtual gateway resides in.",
                    "schema": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 255
                    }
                  },
                  {
                    "name": "meshOwner",
                    "in": "query",
                    "required": false,
                    "description": "The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\">Working with shared meshes</a>.",
                    "schema": {
                      "type": "string",
                      "minLength": 12,
                      "maxLength": 12
                    }
                  },
                  {
                    "name": "virtualGatewayName",
                    "in": "path",
                    "required": true,
                    "description": "The name of the virtual gateway to update.",
                    "schema": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 255
                    }
                  }
                ],
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "required": [
                          "spec"
                        ],
                        "properties": {
                          "clientToken": {
                            "description": "Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Up to 36 letters, numbers, hyphens, and underscores are allowed.",
                            "type": "string"
                          },
                          "spec": {
                            "description": "An object that represents the specification of a service mesh resource.",
                            "type": "object",
                            "properties": {
                              "backendDefaults": {
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/VirtualGatewayBackendDefaults"
                                  },
                                  {
                                    "description": "A reference to an object that represents the defaults for backends."
                                  }
                                ]
                              },
                              "listeners": {
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/VirtualGatewayListeners"
                                  },
                                  {
                                    "description": "The listeners that the mesh endpoint is expected to receive inbound traffic from. You can specify one listener."
                                  }
                                ]
                              },
                              "logging": {
                                "$ref": "#/components/schemas/VirtualGatewayLogging"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "/v20190125/meshes/{meshName}/virtualNodes/{virtualNodeName}": {
              "delete": {
                "operationId": "DeleteVirtualNode",
                "description": "<p>Deletes an existing virtual node.</p> <p>You must delete any virtual services that list a virtual node as a service provider before you can delete the virtual node itself.</p>",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/DeleteVirtualNodeOutput"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "NotFoundException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/NotFoundException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "BadRequestException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/BadRequestException"
                        }
                      }
                    }
                  },
                  "482": {
                    "description": "TooManyRequestsException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/TooManyRequestsException"
                        }
                      }
                    }
                  },
                  "483": {
                    "description": "ForbiddenException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ForbiddenException"
                        }
                      }
                    }
                  },
                  "484": {
                    "description": "ResourceInUseException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ResourceInUseException"
                        }
                      }
                    }
                  },
                  "485": {
                    "description": "ServiceUnavailableException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ServiceUnavailableException"
                        }
                      }
                    }
                  },
                  "486": {
                    "description": "InternalServerErrorException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InternalServerErrorException"
                        }
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "meshName",
                    "in": "path",
                    "required": true,
                    "description": "The name of the service mesh to delete the virtual node in.",
                    "schema": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 255
                    }
                  },
                  {
                    "name": "meshOwner",
                    "in": "query",
                    "required": false,
                    "description": "The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\">Working with shared meshes</a>.",
                    "schema": {
                      "type": "string",
                      "minLength": 12,
                      "maxLength": 12
                    }
                  },
                  {
                    "name": "virtualNodeName",
                    "in": "path",
                    "required": true,
                    "description": "The name of the virtual node to delete.",
                    "schema": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 255
                    }
                  }
                ]
              },
              "parameters": [
                {
                  "$ref": "#/components/parameters/X-Amz-Content-Sha256"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Date"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Algorithm"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Credential"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Security-Token"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Signature"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-SignedHeaders"
                }
              ],
              "get": {
                "operationId": "DescribeVirtualNode",
                "description": "Describes an existing virtual node.",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/DescribeVirtualNodeOutput"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "NotFoundException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/NotFoundException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "BadRequestException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/BadRequestException"
                        }
                      }
                    }
                  },
                  "482": {
                    "description": "TooManyRequestsException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/TooManyRequestsException"
                        }
                      }
                    }
                  },
                  "483": {
                    "description": "ForbiddenException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ForbiddenException"
                        }
                      }
                    }
                  },
                  "484": {
                    "description": "ServiceUnavailableException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ServiceUnavailableException"
                        }
                      }
                    }
                  },
                  "485": {
                    "description": "InternalServerErrorException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InternalServerErrorException"
                        }
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "meshName",
                    "in": "path",
                    "required": true,
                    "description": "The name of the service mesh that the virtual node resides in.",
                    "schema": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 255
                    }
                  },
                  {
                    "name": "meshOwner",
                    "in": "query",
                    "required": false,
                    "description": "The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\">Working with shared meshes</a>.",
                    "schema": {
                      "type": "string",
                      "minLength": 12,
                      "maxLength": 12
                    }
                  },
                  {
                    "name": "virtualNodeName",
                    "in": "path",
                    "required": true,
                    "description": "The name of the virtual node to describe.",
                    "schema": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 255
                    }
                  }
                ]
              },
              "put": {
                "operationId": "UpdateVirtualNode",
                "description": "Updates an existing virtual node in a specified service mesh.",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/UpdateVirtualNodeOutput"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "NotFoundException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/NotFoundException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "BadRequestException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/BadRequestException"
                        }
                      }
                    }
                  },
                  "482": {
                    "description": "ConflictException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ConflictException"
                        }
                      }
                    }
                  },
                  "483": {
                    "description": "TooManyRequestsException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/TooManyRequestsException"
                        }
                      }
                    }
                  },
                  "484": {
                    "description": "ForbiddenException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ForbiddenException"
                        }
                      }
                    }
                  },
                  "485": {
                    "description": "ServiceUnavailableException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ServiceUnavailableException"
                        }
                      }
                    }
                  },
                  "486": {
                    "description": "InternalServerErrorException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InternalServerErrorException"
                        }
                      }
                    }
                  },
                  "487": {
                    "description": "LimitExceededException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/LimitExceededException"
                        }
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "meshName",
                    "in": "path",
                    "required": true,
                    "description": "The name of the service mesh that the virtual node resides in.",
                    "schema": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 255
                    }
                  },
                  {
                    "name": "meshOwner",
                    "in": "query",
                    "required": false,
                    "description": "The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\">Working with shared meshes</a>.",
                    "schema": {
                      "type": "string",
                      "minLength": 12,
                      "maxLength": 12
                    }
                  },
                  {
                    "name": "virtualNodeName",
                    "in": "path",
                    "required": true,
                    "description": "The name of the virtual node to update.",
                    "schema": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 255
                    }
                  }
                ],
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "required": [
                          "spec"
                        ],
                        "properties": {
                          "clientToken": {
                            "description": "Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Up to 36 letters, numbers, hyphens, and underscores are allowed.",
                            "type": "string"
                          },
                          "spec": {
                            "description": "An object that represents the specification of a virtual node.",
                            "type": "object",
                            "properties": {
                              "backendDefaults": {
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/BackendDefaults"
                                  },
                                  {
                                    "description": "A reference to an object that represents the defaults for backends."
                                  }
                                ]
                              },
                              "backends": {
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/Backends"
                                  },
                                  {
                                    "description": "The backends that the virtual node is expected to send outbound traffic to."
                                  }
                                ]
                              },
                              "listeners": {
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/Listeners"
                                  },
                                  {
                                    "description": "The listener that the virtual node is expected to receive inbound traffic from. You can specify one listener."
                                  }
                                ]
                              },
                              "logging": {
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/Logging"
                                  },
                                  {
                                    "description": "The inbound and outbound access logging information for the virtual node."
                                  }
                                ]
                              },
                              "serviceDiscovery": {
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/ServiceDiscovery"
                                  },
                                  {
                                    "description": "The service discovery information for the virtual node. If your virtual node does not expect ingress traffic, you can omit this parameter. If you specify a <code>listener</code>, then you must specify service discovery information."
                                  }
                                ]
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "/v20190125/meshes/{meshName}/virtualRouters/{virtualRouterName}": {
              "delete": {
                "operationId": "DeleteVirtualRouter",
                "description": "<p>Deletes an existing virtual router.</p> <p>You must delete any routes associated with the virtual router before you can delete the router itself.</p>",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/DeleteVirtualRouterOutput"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "NotFoundException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/NotFoundException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "BadRequestException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/BadRequestException"
                        }
                      }
                    }
                  },
                  "482": {
                    "description": "TooManyRequestsException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/TooManyRequestsException"
                        }
                      }
                    }
                  },
                  "483": {
                    "description": "ForbiddenException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ForbiddenException"
                        }
                      }
                    }
                  },
                  "484": {
                    "description": "ResourceInUseException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ResourceInUseException"
                        }
                      }
                    }
                  },
                  "485": {
                    "description": "ServiceUnavailableException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ServiceUnavailableException"
                        }
                      }
                    }
                  },
                  "486": {
                    "description": "InternalServerErrorException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InternalServerErrorException"
                        }
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "meshName",
                    "in": "path",
                    "required": true,
                    "description": "The name of the service mesh to delete the virtual router in.",
                    "schema": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 255
                    }
                  },
                  {
                    "name": "meshOwner",
                    "in": "query",
                    "required": false,
                    "description": "The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\">Working with shared meshes</a>.",
                    "schema": {
                      "type": "string",
                      "minLength": 12,
                      "maxLength": 12
                    }
                  },
                  {
                    "name": "virtualRouterName",
                    "in": "path",
                    "required": true,
                    "description": "The name of the virtual router to delete.",
                    "schema": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 255
                    }
                  }
                ]
              },
              "parameters": [
                {
                  "$ref": "#/components/parameters/X-Amz-Content-Sha256"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Date"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Algorithm"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Credential"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Security-Token"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Signature"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-SignedHeaders"
                }
              ],
              "get": {
                "operationId": "DescribeVirtualRouter",
                "description": "Describes an existing virtual router.",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/DescribeVirtualRouterOutput"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "NotFoundException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/NotFoundException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "BadRequestException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/BadRequestException"
                        }
                      }
                    }
                  },
                  "482": {
                    "description": "TooManyRequestsException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/TooManyRequestsException"
                        }
                      }
                    }
                  },
                  "483": {
                    "description": "ForbiddenException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ForbiddenException"
                        }
                      }
                    }
                  },
                  "484": {
                    "description": "ServiceUnavailableException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ServiceUnavailableException"
                        }
                      }
                    }
                  },
                  "485": {
                    "description": "InternalServerErrorException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InternalServerErrorException"
                        }
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "meshName",
                    "in": "path",
                    "required": true,
                    "description": "The name of the service mesh that the virtual router resides in.",
                    "schema": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 255
                    }
                  },
                  {
                    "name": "meshOwner",
                    "in": "query",
                    "required": false,
                    "description": "The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\">Working with shared meshes</a>.",
                    "schema": {
                      "type": "string",
                      "minLength": 12,
                      "maxLength": 12
                    }
                  },
                  {
                    "name": "virtualRouterName",
                    "in": "path",
                    "required": true,
                    "description": "The name of the virtual router to describe.",
                    "schema": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 255
                    }
                  }
                ]
              },
              "put": {
                "operationId": "UpdateVirtualRouter",
                "description": "Updates an existing virtual router in a specified service mesh.",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/UpdateVirtualRouterOutput"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "NotFoundException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/NotFoundException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "BadRequestException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/BadRequestException"
                        }
                      }
                    }
                  },
                  "482": {
                    "description": "ConflictException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ConflictException"
                        }
                      }
                    }
                  },
                  "483": {
                    "description": "TooManyRequestsException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/TooManyRequestsException"
                        }
                      }
                    }
                  },
                  "484": {
                    "description": "ForbiddenException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ForbiddenException"
                        }
                      }
                    }
                  },
                  "485": {
                    "description": "ServiceUnavailableException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ServiceUnavailableException"
                        }
                      }
                    }
                  },
                  "486": {
                    "description": "InternalServerErrorException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InternalServerErrorException"
                        }
                      }
                    }
                  },
                  "487": {
                    "description": "LimitExceededException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/LimitExceededException"
                        }
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "meshName",
                    "in": "path",
                    "required": true,
                    "description": "The name of the service mesh that the virtual router resides in.",
                    "schema": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 255
                    }
                  },
                  {
                    "name": "meshOwner",
                    "in": "query",
                    "required": false,
                    "description": "The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\">Working with shared meshes</a>.",
                    "schema": {
                      "type": "string",
                      "minLength": 12,
                      "maxLength": 12
                    }
                  },
                  {
                    "name": "virtualRouterName",
                    "in": "path",
                    "required": true,
                    "description": "The name of the virtual router to update.",
                    "schema": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 255
                    }
                  }
                ],
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "required": [
                          "spec"
                        ],
                        "properties": {
                          "clientToken": {
                            "description": "Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Up to 36 letters, numbers, hyphens, and underscores are allowed.",
                            "type": "string"
                          },
                          "spec": {
                            "description": "An object that represents the specification of a virtual router.",
                            "type": "object",
                            "properties": {
                              "listeners": {
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/VirtualRouterListeners"
                                  },
                                  {
                                    "description": "The listeners that the virtual router is expected to receive inbound traffic from. You can specify one listener."
                                  }
                                ]
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "/v20190125/meshes/{meshName}/virtualServices/{virtualServiceName}": {
              "delete": {
                "operationId": "DeleteVirtualService",
                "description": "Deletes an existing virtual service.",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/DeleteVirtualServiceOutput"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "NotFoundException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/NotFoundException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "BadRequestException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/BadRequestException"
                        }
                      }
                    }
                  },
                  "482": {
                    "description": "TooManyRequestsException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/TooManyRequestsException"
                        }
                      }
                    }
                  },
                  "483": {
                    "description": "ForbiddenException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ForbiddenException"
                        }
                      }
                    }
                  },
                  "484": {
                    "description": "ResourceInUseException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ResourceInUseException"
                        }
                      }
                    }
                  },
                  "485": {
                    "description": "ServiceUnavailableException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ServiceUnavailableException"
                        }
                      }
                    }
                  },
                  "486": {
                    "description": "InternalServerErrorException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InternalServerErrorException"
                        }
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "meshName",
                    "in": "path",
                    "required": true,
                    "description": "The name of the service mesh to delete the virtual service in.",
                    "schema": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 255
                    }
                  },
                  {
                    "name": "meshOwner",
                    "in": "query",
                    "required": false,
                    "description": "The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\">Working with shared meshes</a>.",
                    "schema": {
                      "type": "string",
                      "minLength": 12,
                      "maxLength": 12
                    }
                  },
                  {
                    "name": "virtualServiceName",
                    "in": "path",
                    "required": true,
                    "description": "The name of the virtual service to delete.",
                    "schema": {
                      "type": "string"
                    }
                  }
                ]
              },
              "parameters": [
                {
                  "$ref": "#/components/parameters/X-Amz-Content-Sha256"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Date"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Algorithm"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Credential"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Security-Token"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Signature"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-SignedHeaders"
                }
              ],
              "get": {
                "operationId": "DescribeVirtualService",
                "description": "Describes an existing virtual service.",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/DescribeVirtualServiceOutput"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "NotFoundException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/NotFoundException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "BadRequestException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/BadRequestException"
                        }
                      }
                    }
                  },
                  "482": {
                    "description": "TooManyRequestsException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/TooManyRequestsException"
                        }
                      }
                    }
                  },
                  "483": {
                    "description": "ForbiddenException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ForbiddenException"
                        }
                      }
                    }
                  },
                  "484": {
                    "description": "ServiceUnavailableException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ServiceUnavailableException"
                        }
                      }
                    }
                  },
                  "485": {
                    "description": "InternalServerErrorException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InternalServerErrorException"
                        }
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "meshName",
                    "in": "path",
                    "required": true,
                    "description": "The name of the service mesh that the virtual service resides in.",
                    "schema": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 255
                    }
                  },
                  {
                    "name": "meshOwner",
                    "in": "query",
                    "required": false,
                    "description": "The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\">Working with shared meshes</a>.",
                    "schema": {
                      "type": "string",
                      "minLength": 12,
                      "maxLength": 12
                    }
                  },
                  {
                    "name": "virtualServiceName",
                    "in": "path",
                    "required": true,
                    "description": "The name of the virtual service to describe.",
                    "schema": {
                      "type": "string"
                    }
                  }
                ]
              },
              "put": {
                "operationId": "UpdateVirtualService",
                "description": "Updates an existing virtual service in a specified service mesh.",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/UpdateVirtualServiceOutput"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "NotFoundException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/NotFoundException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "BadRequestException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/BadRequestException"
                        }
                      }
                    }
                  },
                  "482": {
                    "description": "ConflictException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ConflictException"
                        }
                      }
                    }
                  },
                  "483": {
                    "description": "TooManyRequestsException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/TooManyRequestsException"
                        }
                      }
                    }
                  },
                  "484": {
                    "description": "ForbiddenException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ForbiddenException"
                        }
                      }
                    }
                  },
                  "485": {
                    "description": "ServiceUnavailableException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ServiceUnavailableException"
                        }
                      }
                    }
                  },
                  "486": {
                    "description": "InternalServerErrorException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InternalServerErrorException"
                        }
                      }
                    }
                  },
                  "487": {
                    "description": "LimitExceededException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/LimitExceededException"
                        }
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "meshName",
                    "in": "path",
                    "required": true,
                    "description": "The name of the service mesh that the virtual service resides in.",
                    "schema": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 255
                    }
                  },
                  {
                    "name": "meshOwner",
                    "in": "query",
                    "required": false,
                    "description": "The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\">Working with shared meshes</a>.",
                    "schema": {
                      "type": "string",
                      "minLength": 12,
                      "maxLength": 12
                    }
                  },
                  {
                    "name": "virtualServiceName",
                    "in": "path",
                    "required": true,
                    "description": "The name of the virtual service to update.",
                    "schema": {
                      "type": "string"
                    }
                  }
                ],
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "required": [
                          "spec"
                        ],
                        "properties": {
                          "clientToken": {
                            "description": "Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Up to 36 letters, numbers, hyphens, and underscores are allowed.",
                            "type": "string"
                          },
                          "spec": {
                            "description": "An object that represents the specification of a virtual service.",
                            "type": "object",
                            "properties": {
                              "provider": {
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/VirtualServiceProvider"
                                  },
                                  {
                                    "description": "The App Mesh object that is acting as the provider for a virtual service. You can specify a single virtual node or virtual router."
                                  }
                                ]
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "/v20190125/tags#resourceArn": {
              "get": {
                "operationId": "ListTagsForResource",
                "description": "List the tags for an App Mesh resource.",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ListTagsForResourceOutput"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "NotFoundException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/NotFoundException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "BadRequestException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/BadRequestException"
                        }
                      }
                    }
                  },
                  "482": {
                    "description": "TooManyRequestsException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/TooManyRequestsException"
                        }
                      }
                    }
                  },
                  "483": {
                    "description": "ForbiddenException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ForbiddenException"
                        }
                      }
                    }
                  },
                  "484": {
                    "description": "ServiceUnavailableException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ServiceUnavailableException"
                        }
                      }
                    }
                  },
                  "485": {
                    "description": "InternalServerErrorException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InternalServerErrorException"
                        }
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "limit",
                    "in": "query",
                    "required": false,
                    "description": "The maximum number of tag results returned by <code>ListTagsForResource</code> in paginated output. When this parameter is used, <code>ListTagsForResource</code> returns only <code>limit</code> results in a single page along with a <code>nextToken</code> response element. You can see the remaining results of the initial request by sending another <code>ListTagsForResource</code> request with the returned <code>nextToken</code> value. This value can be between 1 and 100. If you don't use this parameter, <code>ListTagsForResource</code> returns up to 100 results and a <code>nextToken</code> value if applicable.",
                    "schema": {
                      "type": "integer",
                      "minimum": 1,
                      "maximum": 50
                    }
                  },
                  {
                    "name": "nextToken",
                    "in": "query",
                    "required": false,
                    "description": "The <code>nextToken</code> value returned from a previous paginated <code>ListTagsForResource</code> request where <code>limit</code> was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the <code>nextToken</code> value.",
                    "schema": {
                      "type": "string"
                    }
                  },
                  {
                    "name": "resourceArn",
                    "in": "query",
                    "required": true,
                    "description": "The Amazon Resource Name (ARN) that identifies the resource to list the tags for.",
                    "schema": {
                      "type": "string"
                    }
                  }
                ]
              },
              "parameters": [
                {
                  "$ref": "#/components/parameters/X-Amz-Content-Sha256"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Date"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Algorithm"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Credential"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Security-Token"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Signature"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-SignedHeaders"
                }
              ]
            },
            "/v20190125/tag#resourceArn": {
              "put": {
                "operationId": "TagResource",
                "description": "Associates the specified tags to a resource with the specified <code>resourceArn</code>. If existing tags on a resource aren't specified in the request parameters, they aren't changed. When a resource is deleted, the tags associated with that resource are also deleted.",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/TagResourceOutput"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "NotFoundException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/NotFoundException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "BadRequestException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/BadRequestException"
                        }
                      }
                    }
                  },
                  "482": {
                    "description": "TooManyTagsException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/TooManyTagsException"
                        }
                      }
                    }
                  },
                  "483": {
                    "description": "TooManyRequestsException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/TooManyRequestsException"
                        }
                      }
                    }
                  },
                  "484": {
                    "description": "ForbiddenException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ForbiddenException"
                        }
                      }
                    }
                  },
                  "485": {
                    "description": "ServiceUnavailableException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ServiceUnavailableException"
                        }
                      }
                    }
                  },
                  "486": {
                    "description": "InternalServerErrorException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InternalServerErrorException"
                        }
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "resourceArn",
                    "in": "query",
                    "required": true,
                    "description": "The Amazon Resource Name (ARN) of the resource to add tags to.",
                    "schema": {
                      "type": "string"
                    }
                  }
                ],
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "required": [
                          "tags"
                        ],
                        "properties": {
                          "tags": {
                            "description": "The tags to add to the resource. A tag is an array of key-value pairs. Tag keys can have a maximum character length of 128 characters, and tag values can have a maximum length of 256 characters.",
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/TagRef"
                            },
                            "minItems": 0,
                            "maxItems": 50
                          }
                        }
                      }
                    }
                  }
                }
              },
              "parameters": [
                {
                  "$ref": "#/components/parameters/X-Amz-Content-Sha256"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Date"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Algorithm"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Credential"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Security-Token"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Signature"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-SignedHeaders"
                }
              ]
            },
            "/v20190125/untag#resourceArn": {
              "put": {
                "operationId": "UntagResource",
                "description": "Deletes specified tags from a resource.",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/UntagResourceOutput"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "NotFoundException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/NotFoundException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "BadRequestException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/BadRequestException"
                        }
                      }
                    }
                  },
                  "482": {
                    "description": "TooManyRequestsException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/TooManyRequestsException"
                        }
                      }
                    }
                  },
                  "483": {
                    "description": "ForbiddenException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ForbiddenException"
                        }
                      }
                    }
                  },
                  "484": {
                    "description": "ServiceUnavailableException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ServiceUnavailableException"
                        }
                      }
                    }
                  },
                  "485": {
                    "description": "InternalServerErrorException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/InternalServerErrorException"
                        }
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "resourceArn",
                    "in": "query",
                    "required": true,
                    "description": "The Amazon Resource Name (ARN) of the resource to delete tags from.",
                    "schema": {
                      "type": "string"
                    }
                  }
                ],
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "required": [
                          "tagKeys"
                        ],
                        "properties": {
                          "tagKeys": {
                            "description": "The keys of the tags to be removed.",
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/TagKey"
                            },
                            "minItems": 0,
                            "maxItems": 50
                          }
                        }
                      }
                    }
                  }
                }
              },
              "parameters": [
                {
                  "$ref": "#/components/parameters/X-Amz-Content-Sha256"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Date"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Algorithm"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Credential"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Security-Token"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Signature"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-SignedHeaders"
                }
              ]
            }
          },
          "components": {
            "parameters": {
              "X-Amz-Content-Sha256": {
                "name": "X-Amz-Content-Sha256",
                "in": "header",
                "schema": {
                  "type": "string"
                },
                "required": false
              },
              "X-Amz-Date": {
                "name": "X-Amz-Date",
                "in": "header",
                "schema": {
                  "type": "string"
                },
                "required": false
              },
              "X-Amz-Algorithm": {
                "name": "X-Amz-Algorithm",
                "in": "header",
                "schema": {
                  "type": "string"
                },
                "required": false
              },
              "X-Amz-Credential": {
                "name": "X-Amz-Credential",
                "in": "header",
                "schema": {
                  "type": "string"
                },
                "required": false
              },
              "X-Amz-Security-Token": {
                "name": "X-Amz-Security-Token",
                "in": "header",
                "schema": {
                  "type": "string"
                },
                "required": false
              },
              "X-Amz-Signature": {
                "name": "X-Amz-Signature",
                "in": "header",
                "schema": {
                  "type": "string"
                },
                "required": false
              },
              "X-Amz-SignedHeaders": {
                "name": "X-Amz-SignedHeaders",
                "in": "header",
                "schema": {
                  "type": "string"
                },
                "required": false
              }
            },
            "securitySchemes": {
              "hmac": {
                "type": "apiKey",
                "name": "Authorization",
                "in": "header",
                "description": "Amazon Signature authorization v4",
                "x-amazon-apigateway-authtype": "awsSigv4"
              }
            },
            "schemas": {
              "CreateGatewayRouteOutput": {
                "type": "object",
                "required": [
                  "gatewayRoute"
                ],
                "properties": {
                  "gatewayRoute": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/GatewayRouteData"
                      },
                      {
                        "description": "The full description of your gateway route following the create call."
                      }
                    ]
                  }
                }
              },
              "GrpcGatewayRoute": {
                "type": "object",
                "required": [
                  "action",
                  "match"
                ],
                "properties": {
                  "action": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/GrpcGatewayRouteAction"
                      },
                      {
                        "description": "An object that represents the action to take if a match is determined."
                      }
                    ]
                  },
                  "match": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/GrpcGatewayRouteMatch"
                      },
                      {
                        "description": "An object that represents the criteria for determining a request match."
                      }
                    ]
                  }
                },
                "description": "An object that represents a gRPC gateway route."
              },
              "HttpGatewayRoute": {
                "type": "object",
                "required": [
                  "action",
                  "match"
                ],
                "properties": {
                  "action": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/HttpGatewayRouteAction"
                      },
                      {
                        "description": "An object that represents the action to take if a match is determined."
                      }
                    ]
                  },
                  "match": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/HttpGatewayRouteMatch"
                      },
                      {
                        "description": "An object that represents the criteria for determining a request match."
                      }
                    ]
                  }
                },
                "description": "An object that represents an HTTP gateway route."
              },
              "GatewayRoutePriority": {
                "type": "integer",
                "minimum": 0,
                "maximum": 1000
              },
              "TagRef": {
                "type": "object",
                "required": [
                  "key",
                  "value"
                ],
                "properties": {
                  "key": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/TagKey"
                      },
                      {
                        "description": "One part of a key-value pair that make up a tag. A <code>key</code> is a general label that acts like a category for more specific tag values."
                      }
                    ]
                  },
                  "value": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/TagValue"
                      },
                      {
                        "description": "The optional part of a key-value pair that make up a tag. A <code>value</code> acts as a descriptor within a tag category (key)."
                      }
                    ]
                  }
                },
                "description": "Optional metadata that you apply to a resource to assist with categorization and organization. Each tag consists of a key and an optional value, both of which you define. Tag keys can have a maximum character length of 128 characters, and tag values can have a maximum length of 256 characters."
              },
              "NotFoundException": {},
              "BadRequestException": {},
              "ConflictException": {},
              "TooManyRequestsException": {},
              "ForbiddenException": {},
              "ServiceUnavailableException": {},
              "InternalServerErrorException": {},
              "LimitExceededException": {},
              "CreateMeshOutput": {
                "type": "object",
                "required": [
                  "mesh"
                ],
                "properties": {
                  "mesh": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/MeshData"
                      },
                      {
                        "description": "The full description of your service mesh following the create call."
                      }
                    ]
                  }
                },
                "description": "<zonbook></zonbook><xhtml></xhtml>"
              },
              "EgressFilter": {
                "type": "object",
                "required": [
                  "type"
                ],
                "properties": {
                  "type": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/EgressFilterType"
                      },
                      {
                        "description": "The egress filter type. By default, the type is <code>DROP_ALL</code>, which allows egress only from virtual nodes to other defined resources in the service mesh (and any traffic to <code>*.amazonaws.com</code> for Amazon Web Services API calls). You can set the egress filter type to <code>ALLOW_ALL</code> to allow egress to any endpoint inside or outside of the service mesh."
                      }
                    ]
                  }
                },
                "description": "An object that represents the egress filter rules for a service mesh."
              },
              "MeshServiceDiscovery": {
                "type": "object",
                "properties": {
                  "ipPreference": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/IpPreference"
                      },
                      {
                        "description": "The IP version to use to control traffic within the mesh."
                      }
                    ]
                  }
                },
                "description": "An object that represents the service discovery information for a service mesh."
              },
              "CreateRouteOutput": {
                "type": "object",
                "required": [
                  "route"
                ],
                "properties": {
                  "route": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/RouteData"
                      },
                      {
                        "description": "The full description of your mesh following the create call."
                      }
                    ]
                  }
                },
                "description": "<zonbook></zonbook><xhtml></xhtml>"
              },
              "GrpcRoute": {
                "type": "object",
                "required": [
                  "action",
                  "match"
                ],
                "properties": {
                  "action": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/GrpcRouteAction"
                      },
                      {
                        "description": "An object that represents the action to take if a match is determined."
                      }
                    ]
                  },
                  "match": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/GrpcRouteMatch"
                      },
                      {
                        "description": "An object that represents the criteria for determining a request match."
                      }
                    ]
                  },
                  "retryPolicy": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/GrpcRetryPolicy"
                      },
                      {
                        "description": "An object that represents a retry policy."
                      }
                    ]
                  },
                  "timeout": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/GrpcTimeout"
                      },
                      {
                        "description": "An object that represents types of timeouts. "
                      }
                    ]
                  }
                },
                "description": "An object that represents a gRPC route type."
              },
              "HttpRoute": {
                "type": "object",
                "required": [
                  "action",
                  "match"
                ],
                "properties": {
                  "action": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/HttpRouteAction"
                      },
                      {
                        "description": "An object that represents the action to take if a match is determined."
                      }
                    ]
                  },
                  "match": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/HttpRouteMatch"
                      },
                      {
                        "description": "An object that represents the criteria for determining a request match."
                      }
                    ]
                  },
                  "retryPolicy": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/HttpRetryPolicy"
                      },
                      {
                        "description": "An object that represents a retry policy."
                      }
                    ]
                  },
                  "timeout": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/HttpTimeout"
                      },
                      {
                        "description": "An object that represents types of timeouts. "
                      }
                    ]
                  }
                },
                "description": "An object that represents an HTTP or HTTP/2 route type."
              },
              "RoutePriority": {
                "type": "integer",
                "minimum": 0,
                "maximum": 1000
              },
              "TcpRoute": {
                "type": "object",
                "required": [
                  "action"
                ],
                "properties": {
                  "action": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/TcpRouteAction"
                      },
                      {
                        "description": "The action to take if a match is determined."
                      }
                    ]
                  },
                  "match": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/TcpRouteMatch"
                      },
                      {
                        "description": "An object that represents the criteria for determining a request match."
                      }
                    ]
                  },
                  "timeout": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/TcpTimeout"
                      },
                      {
                        "description": "An object that represents types of timeouts. "
                      }
                    ]
                  }
                },
                "description": "An object that represents a TCP route type."
              },
              "CreateVirtualGatewayOutput": {
                "type": "object",
                "required": [
                  "virtualGateway"
                ],
                "properties": {
                  "virtualGateway": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/VirtualGatewayData"
                      },
                      {
                        "description": "The full description of your virtual gateway following the create call."
                      }
                    ]
                  }
                }
              },
              "VirtualGatewayBackendDefaults": {
                "type": "object",
                "properties": {
                  "clientPolicy": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/VirtualGatewayClientPolicy"
                      },
                      {
                        "description": "A reference to an object that represents a client policy."
                      }
                    ]
                  }
                },
                "description": "An object that represents the default properties for a backend."
              },
              "VirtualGatewayListeners": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/VirtualGatewayListener"
                }
              },
              "VirtualGatewayLogging": {
                "type": "object",
                "properties": {
                  "accessLog": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/VirtualGatewayAccessLog"
                      },
                      {
                        "description": "The access log configuration."
                      }
                    ]
                  }
                },
                "description": "An object that represents logging information."
              },
              "CreateVirtualNodeOutput": {
                "type": "object",
                "required": [
                  "virtualNode"
                ],
                "properties": {
                  "virtualNode": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/VirtualNodeData"
                      },
                      {
                        "description": "The full description of your virtual node following the create call."
                      }
                    ]
                  }
                },
                "description": "<zonbook></zonbook><xhtml></xhtml>"
              },
              "BackendDefaults": {
                "type": "object",
                "properties": {
                  "clientPolicy": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ClientPolicy"
                      },
                      {
                        "description": "A reference to an object that represents a client policy."
                      }
                    ]
                  }
                },
                "description": "An object that represents the default properties for a backend."
              },
              "Backends": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Backend"
                }
              },
              "Listeners": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Listener"
                }
              },
              "Logging": {
                "type": "object",
                "properties": {
                  "accessLog": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/AccessLog"
                      },
                      {
                        "description": "The access log configuration for a virtual node."
                      }
                    ]
                  }
                },
                "description": "An object that represents the logging information for a virtual node."
              },
              "ServiceDiscovery": {
                "type": "object",
                "properties": {
                  "awsCloudMap": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/AwsCloudMapServiceDiscovery"
                      },
                      {
                        "description": "Specifies any Cloud Map information for the virtual node."
                      }
                    ]
                  },
                  "dns": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/DnsServiceDiscovery"
                      },
                      {
                        "description": "Specifies the DNS information for the virtual node."
                      }
                    ]
                  }
                },
                "description": "An object that represents the service discovery information for a virtual node."
              },
              "CreateVirtualRouterOutput": {
                "type": "object",
                "required": [
                  "virtualRouter"
                ],
                "properties": {
                  "virtualRouter": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/VirtualRouterData"
                      },
                      {
                        "description": "The full description of your virtual router following the create call."
                      }
                    ]
                  }
                },
                "description": "<zonbook></zonbook><xhtml></xhtml>"
              },
              "VirtualRouterListeners": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/VirtualRouterListener"
                }
              },
              "CreateVirtualServiceOutput": {
                "type": "object",
                "required": [
                  "virtualService"
                ],
                "properties": {
                  "virtualService": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/VirtualServiceData"
                      },
                      {
                        "description": "The full description of your virtual service following the create call."
                      }
                    ]
                  }
                },
                "description": "<zonbook></zonbook><xhtml></xhtml>"
              },
              "VirtualServiceProvider": {
                "type": "object",
                "properties": {
                  "virtualNode": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/VirtualNodeServiceProvider"
                      },
                      {
                        "description": "The virtual node associated with a virtual service."
                      }
                    ]
                  },
                  "virtualRouter": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/VirtualRouterServiceProvider"
                      },
                      {
                        "description": "The virtual router associated with a virtual service."
                      }
                    ]
                  }
                },
                "description": "An object that represents the provider for a virtual service."
              },
              "DeleteGatewayRouteOutput": {
                "type": "object",
                "required": [
                  "gatewayRoute"
                ],
                "properties": {
                  "gatewayRoute": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/GatewayRouteData"
                      },
                      {
                        "description": "The gateway route that was deleted."
                      }
                    ]
                  }
                }
              },
              "ResourceInUseException": {},
              "DeleteMeshOutput": {
                "type": "object",
                "required": [
                  "mesh"
                ],
                "properties": {
                  "mesh": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/MeshData"
                      },
                      {
                        "description": "The service mesh that was deleted."
                      }
                    ]
                  }
                },
                "description": "<zonbook></zonbook><xhtml></xhtml>"
              },
              "DeleteRouteOutput": {
                "type": "object",
                "required": [
                  "route"
                ],
                "properties": {
                  "route": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/RouteData"
                      },
                      {
                        "description": "The route that was deleted."
                      }
                    ]
                  }
                },
                "description": "<zonbook></zonbook><xhtml></xhtml>"
              },
              "DeleteVirtualGatewayOutput": {
                "type": "object",
                "required": [
                  "virtualGateway"
                ],
                "properties": {
                  "virtualGateway": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/VirtualGatewayData"
                      },
                      {
                        "description": "The virtual gateway that was deleted."
                      }
                    ]
                  }
                }
              },
              "DeleteVirtualNodeOutput": {
                "type": "object",
                "required": [
                  "virtualNode"
                ],
                "properties": {
                  "virtualNode": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/VirtualNodeData"
                      },
                      {
                        "description": "The virtual node that was deleted."
                      }
                    ]
                  }
                },
                "description": "<zonbook></zonbook><xhtml></xhtml>"
              },
              "DeleteVirtualRouterOutput": {
                "type": "object",
                "required": [
                  "virtualRouter"
                ],
                "properties": {
                  "virtualRouter": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/VirtualRouterData"
                      },
                      {
                        "description": "The virtual router that was deleted."
                      }
                    ]
                  }
                },
                "description": "<zonbook></zonbook><xhtml></xhtml>"
              },
              "DeleteVirtualServiceOutput": {
                "type": "object",
                "required": [
                  "virtualService"
                ],
                "properties": {
                  "virtualService": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/VirtualServiceData"
                      },
                      {
                        "description": "The virtual service that was deleted."
                      }
                    ]
                  }
                },
                "description": "<zonbook></zonbook><xhtml></xhtml>"
              },
              "DescribeGatewayRouteOutput": {
                "type": "object",
                "required": [
                  "gatewayRoute"
                ],
                "properties": {
                  "gatewayRoute": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/GatewayRouteData"
                      },
                      {
                        "description": "The full description of your gateway route."
                      }
                    ]
                  }
                }
              },
              "DescribeMeshOutput": {
                "type": "object",
                "required": [
                  "mesh"
                ],
                "properties": {
                  "mesh": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/MeshData"
                      },
                      {
                        "description": "The full description of your service mesh."
                      }
                    ]
                  }
                },
                "description": "<zonbook></zonbook><xhtml></xhtml>"
              },
              "DescribeRouteOutput": {
                "type": "object",
                "required": [
                  "route"
                ],
                "properties": {
                  "route": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/RouteData"
                      },
                      {
                        "description": "The full description of your route."
                      }
                    ]
                  }
                },
                "description": "<zonbook></zonbook><xhtml></xhtml>"
              },
              "DescribeVirtualGatewayOutput": {
                "type": "object",
                "required": [
                  "virtualGateway"
                ],
                "properties": {
                  "virtualGateway": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/VirtualGatewayData"
                      },
                      {
                        "description": "The full description of your virtual gateway."
                      }
                    ]
                  }
                }
              },
              "DescribeVirtualNodeOutput": {
                "type": "object",
                "required": [
                  "virtualNode"
                ],
                "properties": {
                  "virtualNode": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/VirtualNodeData"
                      },
                      {
                        "description": "The full description of your virtual node."
                      }
                    ]
                  }
                },
                "description": "<zonbook></zonbook><xhtml></xhtml>"
              },
              "DescribeVirtualRouterOutput": {
                "type": "object",
                "required": [
                  "virtualRouter"
                ],
                "properties": {
                  "virtualRouter": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/VirtualRouterData"
                      },
                      {
                        "description": "The full description of your virtual router."
                      }
                    ]
                  }
                },
                "description": "<zonbook></zonbook><xhtml></xhtml>"
              },
              "DescribeVirtualServiceOutput": {
                "type": "object",
                "required": [
                  "virtualService"
                ],
                "properties": {
                  "virtualService": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/VirtualServiceData"
                      },
                      {
                        "description": "The full description of your virtual service."
                      }
                    ]
                  }
                },
                "description": "<zonbook></zonbook><xhtml></xhtml>"
              },
              "ListGatewayRoutesOutput": {
                "type": "object",
                "required": [
                  "gatewayRoutes"
                ],
                "properties": {
                  "gatewayRoutes": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/GatewayRouteList"
                      },
                      {
                        "description": "The list of existing gateway routes for the specified service mesh and virtual gateway."
                      }
                    ]
                  },
                  "nextToken": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/String"
                      },
                      {
                        "description": "The <code>nextToken</code> value to include in a future <code>ListGatewayRoutes</code> request. When the results of a <code>ListGatewayRoutes</code> request exceed <code>limit</code>, you can use this value to retrieve the next page of results. This value is <code>null</code> when there are no more results to return."
                      }
                    ]
                  }
                }
              },
              "ListMeshesOutput": {
                "type": "object",
                "required": [
                  "meshes"
                ],
                "properties": {
                  "meshes": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/MeshList"
                      },
                      {
                        "description": "The list of existing service meshes."
                      }
                    ]
                  },
                  "nextToken": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/String"
                      },
                      {
                        "description": "The <code>nextToken</code> value to include in a future <code>ListMeshes</code> request. When the results of a <code>ListMeshes</code> request exceed <code>limit</code>, you can use this value to retrieve the next page of results. This value is <code>null</code> when there are no more results to return."
                      }
                    ]
                  }
                },
                "description": "<zonbook></zonbook><xhtml></xhtml>"
              },
              "ListRoutesOutput": {
                "type": "object",
                "required": [
                  "routes"
                ],
                "properties": {
                  "nextToken": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/String"
                      },
                      {
                        "description": "The <code>nextToken</code> value to include in a future <code>ListRoutes</code> request. When the results of a <code>ListRoutes</code> request exceed <code>limit</code>, you can use this value to retrieve the next page of results. This value is <code>null</code> when there are no more results to return."
                      }
                    ]
                  },
                  "routes": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/RouteList"
                      },
                      {
                        "description": "The list of existing routes for the specified service mesh and virtual router."
                      }
                    ]
                  }
                },
                "description": "<zonbook></zonbook><xhtml></xhtml>"
              },
              "ListTagsForResourceOutput": {
                "type": "object",
                "required": [
                  "tags"
                ],
                "properties": {
                  "nextToken": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/String"
                      },
                      {
                        "description": "The <code>nextToken</code> value to include in a future <code>ListTagsForResource</code> request. When the results of a <code>ListTagsForResource</code> request exceed <code>limit</code>, you can use this value to retrieve the next page of results. This value is <code>null</code> when there are no more results to return."
                      }
                    ]
                  },
                  "tags": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/TagList"
                      },
                      {
                        "description": "The tags for the resource."
                      }
                    ]
                  }
                },
                "description": "<zonbook></zonbook><xhtml></xhtml>"
              },
              "ListVirtualGatewaysOutput": {
                "type": "object",
                "required": [
                  "virtualGateways"
                ],
                "properties": {
                  "nextToken": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/String"
                      },
                      {
                        "description": "The <code>nextToken</code> value to include in a future <code>ListVirtualGateways</code> request. When the results of a <code>ListVirtualGateways</code> request exceed <code>limit</code>, you can use this value to retrieve the next page of results. This value is <code>null</code> when there are no more results to return."
                      }
                    ]
                  },
                  "virtualGateways": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/VirtualGatewayList"
                      },
                      {
                        "description": "The list of existing virtual gateways for the specified service mesh."
                      }
                    ]
                  }
                }
              },
              "ListVirtualNodesOutput": {
                "type": "object",
                "required": [
                  "virtualNodes"
                ],
                "properties": {
                  "nextToken": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/String"
                      },
                      {
                        "description": "The <code>nextToken</code> value to include in a future <code>ListVirtualNodes</code> request. When the results of a <code>ListVirtualNodes</code> request exceed <code>limit</code>, you can use this value to retrieve the next page of results. This value is <code>null</code> when there are no more results to return."
                      }
                    ]
                  },
                  "virtualNodes": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/VirtualNodeList"
                      },
                      {
                        "description": "The list of existing virtual nodes for the specified service mesh."
                      }
                    ]
                  }
                },
                "description": "<zonbook></zonbook><xhtml></xhtml>"
              },
              "ListVirtualRoutersOutput": {
                "type": "object",
                "required": [
                  "virtualRouters"
                ],
                "properties": {
                  "nextToken": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/String"
                      },
                      {
                        "description": "The <code>nextToken</code> value to include in a future <code>ListVirtualRouters</code> request. When the results of a <code>ListVirtualRouters</code> request exceed <code>limit</code>, you can use this value to retrieve the next page of results. This value is <code>null</code> when there are no more results to return."
                      }
                    ]
                  },
                  "virtualRouters": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/VirtualRouterList"
                      },
                      {
                        "description": "The list of existing virtual routers for the specified service mesh."
                      }
                    ]
                  }
                },
                "description": "<zonbook></zonbook><xhtml></xhtml>"
              },
              "ListVirtualServicesOutput": {
                "type": "object",
                "required": [
                  "virtualServices"
                ],
                "properties": {
                  "nextToken": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/String"
                      },
                      {
                        "description": "The <code>nextToken</code> value to include in a future <code>ListVirtualServices</code> request. When the results of a <code>ListVirtualServices</code> request exceed <code>limit</code>, you can use this value to retrieve the next page of results. This value is <code>null</code> when there are no more results to return."
                      }
                    ]
                  },
                  "virtualServices": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/VirtualServiceList"
                      },
                      {
                        "description": "The list of existing virtual services for the specified service mesh."
                      }
                    ]
                  }
                },
                "description": "<zonbook></zonbook><xhtml></xhtml>"
              },
              "TagResourceOutput": {
                "type": "object",
                "properties": {},
                "description": "<zonbook></zonbook><xhtml></xhtml>"
              },
              "TooManyTagsException": {},
              "UntagResourceOutput": {
                "type": "object",
                "properties": {},
                "description": "<zonbook></zonbook><xhtml></xhtml>"
              },
              "TagKey": {
                "type": "string",
                "minLength": 1,
                "maxLength": 128
              },
              "UpdateGatewayRouteOutput": {
                "type": "object",
                "required": [
                  "gatewayRoute"
                ],
                "properties": {
                  "gatewayRoute": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/GatewayRouteData"
                      },
                      {
                        "description": "A full description of the gateway route that was updated."
                      }
                    ]
                  }
                }
              },
              "UpdateMeshOutput": {
                "type": "object",
                "required": [
                  "mesh"
                ],
                "properties": {
                  "mesh": {
                    "$ref": "#/components/schemas/MeshData"
                  }
                },
                "description": "<zonbook></zonbook><xhtml></xhtml>"
              },
              "UpdateRouteOutput": {
                "type": "object",
                "required": [
                  "route"
                ],
                "properties": {
                  "route": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/RouteData"
                      },
                      {
                        "description": "A full description of the route that was updated."
                      }
                    ]
                  }
                },
                "description": "<zonbook></zonbook><xhtml></xhtml>"
              },
              "UpdateVirtualGatewayOutput": {
                "type": "object",
                "required": [
                  "virtualGateway"
                ],
                "properties": {
                  "virtualGateway": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/VirtualGatewayData"
                      },
                      {
                        "description": "A full description of the virtual gateway that was updated."
                      }
                    ]
                  }
                }
              },
              "UpdateVirtualNodeOutput": {
                "type": "object",
                "required": [
                  "virtualNode"
                ],
                "properties": {
                  "virtualNode": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/VirtualNodeData"
                      },
                      {
                        "description": "A full description of the virtual node that was updated."
                      }
                    ]
                  }
                },
                "description": "<zonbook></zonbook><xhtml></xhtml>"
              },
              "UpdateVirtualRouterOutput": {
                "type": "object",
                "required": [
                  "virtualRouter"
                ],
                "properties": {
                  "virtualRouter": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/VirtualRouterData"
                      },
                      {
                        "description": "A full description of the virtual router that was updated."
                      }
                    ]
                  }
                },
                "description": "<zonbook></zonbook><xhtml></xhtml>"
              },
              "UpdateVirtualServiceOutput": {
                "type": "object",
                "required": [
                  "virtualService"
                ],
                "properties": {
                  "virtualService": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/VirtualServiceData"
                      },
                      {
                        "description": "A full description of the virtual service that was updated."
                      }
                    ]
                  }
                },
                "description": "<zonbook></zonbook><xhtml></xhtml>"
              },
              "FileAccessLog": {
                "type": "object",
                "required": [
                  "path"
                ],
                "properties": {
                  "format": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/LoggingFormat"
                      },
                      {
                        "description": "The specified format for the logs. The format is either <code>json_format</code> or <code>text_format</code>."
                      }
                    ]
                  },
                  "path": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/FilePath"
                      },
                      {
                        "description": "<p>The file path to write access logs to. You can use <code>/dev/stdout</code> to send access logs to standard out and configure your Envoy container to use a log driver, such as <code>awslogs</code>, to export the access logs to a log storage service such as Amazon CloudWatch Logs. You can also specify a path in the Envoy container's file system to write the files to disk.</p> <pre><code> &lt;note&gt; &lt;p&gt;The Envoy process must have write permissions to the path that you specify here. Otherwise, Envoy fails to bootstrap properly.&lt;/p&gt; &lt;/note&gt; </code></pre>"
                      }
                    ]
                  }
                },
                "description": "An object that represents an access log file."
              },
              "AccessLog": {
                "type": "object",
                "properties": {
                  "file": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/FileAccessLog"
                      },
                      {
                        "description": "The file object to send virtual node access logs to."
                      }
                    ]
                  }
                },
                "description": "An object that represents the access logging information for a virtual node."
              },
              "AccountId": {
                "type": "string",
                "minLength": 12,
                "maxLength": 12
              },
              "Arn": {
                "type": "string"
              },
              "AwsCloudMapInstanceAttributeKey": {
                "type": "string",
                "pattern": "^[a-zA-Z0-9!-~]+$",
                "minLength": 1,
                "maxLength": 255
              },
              "AwsCloudMapInstanceAttributeValue": {
                "type": "string",
                "pattern": "^([a-zA-Z0-9!-~][  a-zA-Z0-9!-~]*){0,1}[a-zA-Z0-9!-~]{0,1}$",
                "minLength": 1,
                "maxLength": 1024
              },
              "AwsCloudMapInstanceAttribute": {
                "type": "object",
                "required": [
                  "key",
                  "value"
                ],
                "properties": {
                  "key": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/AwsCloudMapInstanceAttributeKey"
                      },
                      {
                        "description": "The name of an Cloud Map service instance attribute key. Any Cloud Map service instance that contains the specified key and value is returned."
                      }
                    ]
                  },
                  "value": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/AwsCloudMapInstanceAttributeValue"
                      },
                      {
                        "description": "The value of an Cloud Map service instance attribute key. Any Cloud Map service instance that contains the specified key and value is returned."
                      }
                    ]
                  }
                },
                "description": "<p>An object that represents the Cloud Map attribute information for your virtual node.</p> <note> <p>Cloud Map is not available in the eu-south-1 Region.</p> </note>"
              },
              "AwsCloudMapInstanceAttributes": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AwsCloudMapInstanceAttribute"
                }
              },
              "AwsCloudMapName": {
                "type": "string",
                "minLength": 1,
                "maxLength": 1024
              },
              "IpPreference": {
                "type": "string",
                "enum": [
                  "IPv6_PREFERRED",
                  "IPv4_PREFERRED",
                  "IPv4_ONLY",
                  "IPv6_ONLY"
                ]
              },
              "AwsCloudMapServiceDiscovery": {
                "type": "object",
                "required": [
                  "namespaceName",
                  "serviceName"
                ],
                "properties": {
                  "attributes": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/AwsCloudMapInstanceAttributes"
                      },
                      {
                        "description": "A string map that contains attributes with values that you can use to filter instances by any custom attribute that you specified when you registered the instance. Only instances that match all of the specified key/value pairs will be returned."
                      }
                    ]
                  },
                  "ipPreference": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/IpPreference"
                      },
                      {
                        "description": "The preferred IP version that this virtual node uses. Setting the IP preference on the virtual node only overrides the IP preference set for the mesh on this specific node."
                      }
                    ]
                  },
                  "namespaceName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/AwsCloudMapName"
                      },
                      {
                        "description": "The name of the Cloud Map namespace to use."
                      }
                    ]
                  },
                  "serviceName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/AwsCloudMapName"
                      },
                      {
                        "description": "The name of the Cloud Map service to use."
                      }
                    ]
                  }
                },
                "description": "<p>An object that represents the Cloud Map service discovery information for your virtual node.</p> <note> <p>Cloud Map is not available in the eu-south-1 Region.</p> </note>"
              },
              "VirtualServiceBackend": {
                "type": "object",
                "required": [
                  "virtualServiceName"
                ],
                "properties": {
                  "clientPolicy": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ClientPolicy"
                      },
                      {
                        "description": "A reference to an object that represents the client policy for a backend."
                      }
                    ]
                  },
                  "virtualServiceName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ServiceName"
                      },
                      {
                        "description": "The name of the virtual service that is acting as a virtual node backend."
                      }
                    ]
                  }
                },
                "description": "An object that represents a virtual service backend for a virtual node."
              },
              "Backend": {
                "type": "object",
                "properties": {
                  "virtualService": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/VirtualServiceBackend"
                      },
                      {
                        "description": "Specifies a virtual service to use as a backend. "
                      }
                    ]
                  }
                },
                "description": "An object that represents the backends that a virtual node is expected to send outbound traffic to."
              },
              "ClientPolicy": {
                "type": "object",
                "properties": {
                  "tls": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ClientPolicyTls"
                      },
                      {
                        "description": "A reference to an object that represents a Transport Layer Security (TLS) client policy."
                      }
                    ]
                  }
                },
                "description": "An object that represents a client policy."
              },
              "Boolean": {
                "type": "boolean"
              },
              "CertificateAuthorityArns": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Arn"
                },
                "minItems": 1,
                "maxItems": 3
              },
              "ClientPolicyTls": {
                "type": "object",
                "required": [
                  "validation"
                ],
                "properties": {
                  "certificate": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ClientTlsCertificate"
                      },
                      {
                        "description": "A reference to an object that represents a client's TLS certificate."
                      }
                    ]
                  },
                  "enforce": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Boolean"
                      },
                      {
                        "description": "Whether the policy is enforced. The default is <code>True</code>, if a value isn't specified."
                      }
                    ]
                  },
                  "ports": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/PortSet"
                      },
                      {
                        "description": "One or more ports that the policy is enforced for."
                      }
                    ]
                  },
                  "validation": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/TlsValidationContext"
                      },
                      {
                        "description": "A reference to an object that represents a TLS validation context."
                      }
                    ]
                  }
                },
                "description": "A reference to an object that represents a Transport Layer Security (TLS) client policy."
              },
              "ClientTlsCertificate": {
                "type": "object",
                "properties": {
                  "file": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ListenerTlsFileCertificate"
                      },
                      {
                        "description": "An object that represents a local file certificate. The certificate must meet specific requirements and you must have proxy authorization enabled. For more information, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/tls.html\">Transport Layer Security (TLS)</a>."
                      }
                    ]
                  },
                  "sds": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ListenerTlsSdsCertificate"
                      },
                      {
                        "description": "A reference to an object that represents a client's TLS Secret Discovery Service certificate."
                      }
                    ]
                  }
                },
                "description": "An object that represents the client's certificate."
              },
              "PortSet": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PortNumber"
                }
              },
              "TlsValidationContext": {
                "type": "object",
                "required": [
                  "trust"
                ],
                "properties": {
                  "subjectAlternativeNames": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/SubjectAlternativeNames"
                      },
                      {
                        "description": "A reference to an object that represents the SANs for a Transport Layer Security (TLS) validation context. If you don't specify SANs on the <i>terminating</i> mesh endpoint, the Envoy proxy for that node doesn't verify the SAN on a peer client certificate. If you don't specify SANs on the <i>originating</i> mesh endpoint, the SAN on the certificate provided by the terminating endpoint must match the mesh endpoint service discovery configuration. Since SPIRE vended certificates have a SPIFFE ID as a name, you must set the SAN since the name doesn't match the service discovery name."
                      }
                    ]
                  },
                  "trust": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/TlsValidationContextTrust"
                      },
                      {
                        "description": "A reference to where to retrieve the trust chain when validating a peer’s Transport Layer Security (TLS) certificate."
                      }
                    ]
                  }
                },
                "description": "An object that represents how the proxy will validate its peer during Transport Layer Security (TLS) negotiation."
              },
              "ListenerTlsFileCertificate": {
                "type": "object",
                "required": [
                  "certificateChain",
                  "privateKey"
                ],
                "properties": {
                  "certificateChain": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/FilePath"
                      },
                      {
                        "description": "The certificate chain for the certificate."
                      }
                    ]
                  },
                  "privateKey": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/FilePath"
                      },
                      {
                        "description": "The private key for a certificate stored on the file system of the virtual node that the proxy is running on."
                      }
                    ]
                  }
                },
                "description": "An object that represents a local file certificate. The certificate must meet specific requirements and you must have proxy authorization enabled. For more information, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/tls.html#virtual-node-tls-prerequisites\">Transport Layer Security (TLS)</a>."
              },
              "ListenerTlsSdsCertificate": {
                "type": "object",
                "required": [
                  "secretName"
                ],
                "properties": {
                  "secretName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/SdsSecretName"
                      },
                      {
                        "description": "A reference to an object that represents the name of the secret requested from the Secret Discovery Service provider representing Transport Layer Security (TLS) materials like a certificate or certificate chain."
                      }
                    ]
                  }
                },
                "description": "An object that represents the listener's Secret Discovery Service certificate. The proxy must be configured with a local SDS provider via a Unix Domain Socket. See App Mesh <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/tls.html\">TLS documentation</a> for more info."
              },
              "String": {
                "type": "string"
              },
              "ResourceName": {
                "type": "string",
                "minLength": 1,
                "maxLength": 255
              },
              "GatewayRouteSpec": {
                "type": "object",
                "properties": {
                  "grpcRoute": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/GrpcGatewayRoute"
                      },
                      {
                        "description": "An object that represents the specification of a gRPC gateway route."
                      }
                    ]
                  },
                  "http2Route": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/HttpGatewayRoute"
                      },
                      {
                        "description": "An object that represents the specification of an HTTP/2 gateway route."
                      }
                    ]
                  },
                  "httpRoute": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/HttpGatewayRoute"
                      },
                      {
                        "description": "An object that represents the specification of an HTTP gateway route."
                      }
                    ]
                  },
                  "priority": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/GatewayRoutePriority"
                      },
                      {
                        "description": "The ordering of the gateway routes spec."
                      }
                    ]
                  }
                },
                "description": "An object that represents a gateway route specification. Specify one gateway route type."
              },
              "TagList": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/TagRef"
                },
                "minItems": 0,
                "maxItems": 50
              },
              "CreateGatewayRouteInput": {
                "type": "object",
                "required": [
                  "gatewayRouteName",
                  "spec"
                ],
                "title": "CreateGatewayRouteInput",
                "properties": {
                  "clientToken": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/String"
                      },
                      {
                        "description": "Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Up to 36 letters, numbers, hyphens, and underscores are allowed."
                      }
                    ]
                  },
                  "gatewayRouteName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ResourceName"
                      },
                      {
                        "description": "The name to use for the gateway route."
                      }
                    ]
                  },
                  "spec": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/GatewayRouteSpec"
                      },
                      {
                        "description": "The gateway route specification to apply."
                      }
                    ]
                  },
                  "tags": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/TagList"
                      },
                      {
                        "description": "Optional metadata that you can apply to the gateway route to assist with categorization and organization. Each tag consists of a key and an optional value, both of which you define. Tag keys can have a maximum character length of 128 characters, and tag values can have a maximum length of 256 characters."
                      }
                    ]
                  }
                }
              },
              "GatewayRouteData": {
                "type": "object",
                "required": [
                  "gatewayRouteName",
                  "meshName",
                  "metadata",
                  "spec",
                  "status",
                  "virtualGatewayName"
                ],
                "properties": {
                  "gatewayRouteName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ResourceName"
                      },
                      {
                        "description": "The name of the gateway route."
                      }
                    ]
                  },
                  "meshName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ResourceName"
                      },
                      {
                        "description": "The name of the service mesh that the resource resides in. "
                      }
                    ]
                  },
                  "metadata": {
                    "$ref": "#/components/schemas/ResourceMetadata"
                  },
                  "spec": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/GatewayRouteSpec"
                      },
                      {
                        "description": "The specifications of the gateway route."
                      }
                    ]
                  },
                  "status": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/GatewayRouteStatus"
                      },
                      {
                        "description": "The status of the gateway route."
                      }
                    ]
                  },
                  "virtualGatewayName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ResourceName"
                      },
                      {
                        "description": "The virtual gateway that the gateway route is associated with."
                      }
                    ]
                  }
                },
                "description": "An object that represents a gateway route returned by a describe operation."
              },
              "MeshSpec": {
                "type": "object",
                "properties": {
                  "egressFilter": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/EgressFilter"
                      },
                      {
                        "description": "The egress filter rules for the service mesh."
                      }
                    ]
                  },
                  "serviceDiscovery": {
                    "$ref": "#/components/schemas/MeshServiceDiscovery"
                  }
                },
                "description": "An object that represents the specification of a service mesh."
              },
              "CreateMeshInput": {
                "type": "object",
                "required": [
                  "meshName"
                ],
                "title": "CreateMeshInput",
                "properties": {
                  "clientToken": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/String"
                      },
                      {
                        "description": "Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Up to 36 letters, numbers, hyphens, and underscores are allowed."
                      }
                    ]
                  },
                  "meshName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ResourceName"
                      },
                      {
                        "description": "The name to use for the service mesh."
                      }
                    ]
                  },
                  "spec": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/MeshSpec"
                      },
                      {
                        "description": "The service mesh specification to apply."
                      }
                    ]
                  },
                  "tags": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/TagList"
                      },
                      {
                        "description": "Optional metadata that you can apply to the service mesh to assist with categorization and organization. Each tag consists of a key and an optional value, both of which you define. Tag keys can have a maximum character length of 128 characters, and tag values can have a maximum length of 256 characters."
                      }
                    ]
                  }
                },
                "description": "<zonbook></zonbook><xhtml></xhtml>"
              },
              "MeshData": {
                "type": "object",
                "required": [
                  "meshName",
                  "metadata",
                  "spec",
                  "status"
                ],
                "properties": {
                  "meshName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ResourceName"
                      },
                      {
                        "description": "The name of the service mesh."
                      }
                    ]
                  },
                  "metadata": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ResourceMetadata"
                      },
                      {
                        "description": "The associated metadata for the service mesh."
                      }
                    ]
                  },
                  "spec": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/MeshSpec"
                      },
                      {
                        "description": "The associated specification for the service mesh."
                      }
                    ]
                  },
                  "status": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/MeshStatus"
                      },
                      {
                        "description": "The status of the service mesh."
                      }
                    ]
                  }
                },
                "description": "An object that represents a service mesh returned by a describe operation."
              },
              "RouteSpec": {
                "type": "object",
                "properties": {
                  "grpcRoute": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/GrpcRoute"
                      },
                      {
                        "description": "An object that represents the specification of a gRPC route."
                      }
                    ]
                  },
                  "http2Route": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/HttpRoute"
                      },
                      {
                        "description": "An object that represents the specification of an HTTP/2 route."
                      }
                    ]
                  },
                  "httpRoute": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/HttpRoute"
                      },
                      {
                        "description": "An object that represents the specification of an HTTP route."
                      }
                    ]
                  },
                  "priority": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/RoutePriority"
                      },
                      {
                        "description": "The priority for the route. Routes are matched based on the specified value, where 0 is the highest priority."
                      }
                    ]
                  },
                  "tcpRoute": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/TcpRoute"
                      },
                      {
                        "description": "An object that represents the specification of a TCP route."
                      }
                    ]
                  }
                },
                "description": "An object that represents a route specification. Specify one route type."
              },
              "CreateRouteInput": {
                "type": "object",
                "required": [
                  "routeName",
                  "spec"
                ],
                "title": "CreateRouteInput",
                "properties": {
                  "clientToken": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/String"
                      },
                      {
                        "description": "Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Up to 36 letters, numbers, hyphens, and underscores are allowed."
                      }
                    ]
                  },
                  "routeName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ResourceName"
                      },
                      {
                        "description": "The name to use for the route."
                      }
                    ]
                  },
                  "spec": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/RouteSpec"
                      },
                      {
                        "description": "The route specification to apply."
                      }
                    ]
                  },
                  "tags": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/TagList"
                      },
                      {
                        "description": "Optional metadata that you can apply to the route to assist with categorization and organization. Each tag consists of a key and an optional value, both of which you define. Tag keys can have a maximum character length of 128 characters, and tag values can have a maximum length of 256 characters."
                      }
                    ]
                  }
                },
                "description": "<zonbook></zonbook><xhtml></xhtml>"
              },
              "RouteData": {
                "type": "object",
                "required": [
                  "meshName",
                  "metadata",
                  "routeName",
                  "spec",
                  "status",
                  "virtualRouterName"
                ],
                "properties": {
                  "meshName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ResourceName"
                      },
                      {
                        "description": "The name of the service mesh that the route resides in."
                      }
                    ]
                  },
                  "metadata": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ResourceMetadata"
                      },
                      {
                        "description": "The associated metadata for the route."
                      }
                    ]
                  },
                  "routeName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ResourceName"
                      },
                      {
                        "description": "The name of the route."
                      }
                    ]
                  },
                  "spec": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/RouteSpec"
                      },
                      {
                        "description": "The specifications of the route."
                      }
                    ]
                  },
                  "status": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/RouteStatus"
                      },
                      {
                        "description": "The status of the route."
                      }
                    ]
                  },
                  "virtualRouterName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ResourceName"
                      },
                      {
                        "description": "The virtual router that the route is associated with."
                      }
                    ]
                  }
                },
                "description": "An object that represents a route returned by a describe operation."
              },
              "VirtualGatewaySpec": {
                "type": "object",
                "required": [
                  "listeners"
                ],
                "properties": {
                  "backendDefaults": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/VirtualGatewayBackendDefaults"
                      },
                      {
                        "description": "A reference to an object that represents the defaults for backends."
                      }
                    ]
                  },
                  "listeners": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/VirtualGatewayListeners"
                      },
                      {
                        "description": "The listeners that the mesh endpoint is expected to receive inbound traffic from. You can specify one listener."
                      }
                    ]
                  },
                  "logging": {
                    "$ref": "#/components/schemas/VirtualGatewayLogging"
                  }
                },
                "description": "An object that represents the specification of a service mesh resource."
              },
              "CreateVirtualGatewayInput": {
                "type": "object",
                "required": [
                  "spec",
                  "virtualGatewayName"
                ],
                "title": "CreateVirtualGatewayInput",
                "properties": {
                  "clientToken": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/String"
                      },
                      {
                        "description": "Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Up to 36 letters, numbers, hyphens, and underscores are allowed."
                      }
                    ]
                  },
                  "spec": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/VirtualGatewaySpec"
                      },
                      {
                        "description": "The virtual gateway specification to apply."
                      }
                    ]
                  },
                  "tags": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/TagList"
                      },
                      {
                        "description": "Optional metadata that you can apply to the virtual gateway to assist with categorization and organization. Each tag consists of a key and an optional value, both of which you define. Tag keys can have a maximum character length of 128 characters, and tag values can have a maximum length of 256 characters."
                      }
                    ]
                  },
                  "virtualGatewayName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ResourceName"
                      },
                      {
                        "description": "The name to use for the virtual gateway."
                      }
                    ]
                  }
                }
              },
              "VirtualGatewayData": {
                "type": "object",
                "required": [
                  "meshName",
                  "metadata",
                  "spec",
                  "status",
                  "virtualGatewayName"
                ],
                "properties": {
                  "meshName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ResourceName"
                      },
                      {
                        "description": "The name of the service mesh that the virtual gateway resides in."
                      }
                    ]
                  },
                  "metadata": {
                    "$ref": "#/components/schemas/ResourceMetadata"
                  },
                  "spec": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/VirtualGatewaySpec"
                      },
                      {
                        "description": "The specifications of the virtual gateway."
                      }
                    ]
                  },
                  "status": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/VirtualGatewayStatus"
                      },
                      {
                        "description": "The current status of the virtual gateway."
                      }
                    ]
                  },
                  "virtualGatewayName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ResourceName"
                      },
                      {
                        "description": "The name of the virtual gateway."
                      }
                    ]
                  }
                },
                "description": "An object that represents a virtual gateway returned by a describe operation."
              },
              "VirtualNodeSpec": {
                "type": "object",
                "properties": {
                  "backendDefaults": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/BackendDefaults"
                      },
                      {
                        "description": "A reference to an object that represents the defaults for backends."
                      }
                    ]
                  },
                  "backends": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Backends"
                      },
                      {
                        "description": "The backends that the virtual node is expected to send outbound traffic to."
                      }
                    ]
                  },
                  "listeners": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Listeners"
                      },
                      {
                        "description": "The listener that the virtual node is expected to receive inbound traffic from. You can specify one listener."
                      }
                    ]
                  },
                  "logging": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Logging"
                      },
                      {
                        "description": "The inbound and outbound access logging information for the virtual node."
                      }
                    ]
                  },
                  "serviceDiscovery": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ServiceDiscovery"
                      },
                      {
                        "description": "The service discovery information for the virtual node. If your virtual node does not expect ingress traffic, you can omit this parameter. If you specify a <code>listener</code>, then you must specify service discovery information."
                      }
                    ]
                  }
                },
                "description": "An object that represents the specification of a virtual node."
              },
              "CreateVirtualNodeInput": {
                "type": "object",
                "required": [
                  "spec",
                  "virtualNodeName"
                ],
                "title": "CreateVirtualNodeInput",
                "properties": {
                  "clientToken": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/String"
                      },
                      {
                        "description": "Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Up to 36 letters, numbers, hyphens, and underscores are allowed."
                      }
                    ]
                  },
                  "spec": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/VirtualNodeSpec"
                      },
                      {
                        "description": "The virtual node specification to apply."
                      }
                    ]
                  },
                  "tags": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/TagList"
                      },
                      {
                        "description": "Optional metadata that you can apply to the virtual node to assist with categorization and organization. Each tag consists of a key and an optional value, both of which you define. Tag keys can have a maximum character length of 128 characters, and tag values can have a maximum length of 256 characters."
                      }
                    ]
                  },
                  "virtualNodeName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ResourceName"
                      },
                      {
                        "description": "The name to use for the virtual node."
                      }
                    ]
                  }
                },
                "description": "<zonbook></zonbook><xhtml></xhtml>"
              },
              "VirtualNodeData": {
                "type": "object",
                "required": [
                  "meshName",
                  "metadata",
                  "spec",
                  "status",
                  "virtualNodeName"
                ],
                "properties": {
                  "meshName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ResourceName"
                      },
                      {
                        "description": "The name of the service mesh that the virtual node resides in."
                      }
                    ]
                  },
                  "metadata": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ResourceMetadata"
                      },
                      {
                        "description": "The associated metadata for the virtual node."
                      }
                    ]
                  },
                  "spec": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/VirtualNodeSpec"
                      },
                      {
                        "description": "The specifications of the virtual node."
                      }
                    ]
                  },
                  "status": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/VirtualNodeStatus"
                      },
                      {
                        "description": "The current status for the virtual node."
                      }
                    ]
                  },
                  "virtualNodeName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ResourceName"
                      },
                      {
                        "description": "The name of the virtual node."
                      }
                    ]
                  }
                },
                "description": "An object that represents a virtual node returned by a describe operation."
              },
              "VirtualRouterSpec": {
                "type": "object",
                "properties": {
                  "listeners": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/VirtualRouterListeners"
                      },
                      {
                        "description": "The listeners that the virtual router is expected to receive inbound traffic from. You can specify one listener."
                      }
                    ]
                  }
                },
                "description": "An object that represents the specification of a virtual router."
              },
              "CreateVirtualRouterInput": {
                "type": "object",
                "required": [
                  "spec",
                  "virtualRouterName"
                ],
                "title": "CreateVirtualRouterInput",
                "properties": {
                  "clientToken": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/String"
                      },
                      {
                        "description": "Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Up to 36 letters, numbers, hyphens, and underscores are allowed."
                      }
                    ]
                  },
                  "spec": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/VirtualRouterSpec"
                      },
                      {
                        "description": "The virtual router specification to apply."
                      }
                    ]
                  },
                  "tags": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/TagList"
                      },
                      {
                        "description": "Optional metadata that you can apply to the virtual router to assist with categorization and organization. Each tag consists of a key and an optional value, both of which you define. Tag keys can have a maximum character length of 128 characters, and tag values can have a maximum length of 256 characters."
                      }
                    ]
                  },
                  "virtualRouterName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ResourceName"
                      },
                      {
                        "description": "The name to use for the virtual router."
                      }
                    ]
                  }
                },
                "description": "<zonbook></zonbook><xhtml></xhtml>"
              },
              "VirtualRouterData": {
                "type": "object",
                "required": [
                  "meshName",
                  "metadata",
                  "spec",
                  "status",
                  "virtualRouterName"
                ],
                "properties": {
                  "meshName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ResourceName"
                      },
                      {
                        "description": "The name of the service mesh that the virtual router resides in."
                      }
                    ]
                  },
                  "metadata": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ResourceMetadata"
                      },
                      {
                        "description": "The associated metadata for the virtual router."
                      }
                    ]
                  },
                  "spec": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/VirtualRouterSpec"
                      },
                      {
                        "description": "The specifications of the virtual router."
                      }
                    ]
                  },
                  "status": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/VirtualRouterStatus"
                      },
                      {
                        "description": "The current status of the virtual router."
                      }
                    ]
                  },
                  "virtualRouterName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ResourceName"
                      },
                      {
                        "description": "The name of the virtual router."
                      }
                    ]
                  }
                },
                "description": "An object that represents a virtual router returned by a describe operation."
              },
              "VirtualServiceSpec": {
                "type": "object",
                "properties": {
                  "provider": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/VirtualServiceProvider"
                      },
                      {
                        "description": "The App Mesh object that is acting as the provider for a virtual service. You can specify a single virtual node or virtual router."
                      }
                    ]
                  }
                },
                "description": "An object that represents the specification of a virtual service."
              },
              "ServiceName": {
                "type": "string"
              },
              "CreateVirtualServiceInput": {
                "type": "object",
                "required": [
                  "spec",
                  "virtualServiceName"
                ],
                "title": "CreateVirtualServiceInput",
                "properties": {
                  "clientToken": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/String"
                      },
                      {
                        "description": "Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Up to 36 letters, numbers, hyphens, and underscores are allowed."
                      }
                    ]
                  },
                  "spec": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/VirtualServiceSpec"
                      },
                      {
                        "description": "The virtual service specification to apply."
                      }
                    ]
                  },
                  "tags": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/TagList"
                      },
                      {
                        "description": "Optional metadata that you can apply to the virtual service to assist with categorization and organization. Each tag consists of a key and an optional value, both of which you define. Tag keys can have a maximum character length of 128 characters, and tag values can have a maximum length of 256 characters."
                      }
                    ]
                  },
                  "virtualServiceName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ServiceName"
                      },
                      {
                        "description": "The name to use for the virtual service."
                      }
                    ]
                  }
                },
                "description": "<zonbook></zonbook><xhtml></xhtml>"
              },
              "VirtualServiceData": {
                "type": "object",
                "required": [
                  "meshName",
                  "metadata",
                  "spec",
                  "status",
                  "virtualServiceName"
                ],
                "properties": {
                  "meshName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ResourceName"
                      },
                      {
                        "description": "The name of the service mesh that the virtual service resides in."
                      }
                    ]
                  },
                  "metadata": {
                    "$ref": "#/components/schemas/ResourceMetadata"
                  },
                  "spec": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/VirtualServiceSpec"
                      },
                      {
                        "description": "The specifications of the virtual service."
                      }
                    ]
                  },
                  "status": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/VirtualServiceStatus"
                      },
                      {
                        "description": "The current status of the virtual service."
                      }
                    ]
                  },
                  "virtualServiceName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ServiceName"
                      },
                      {
                        "description": "The name of the virtual service."
                      }
                    ]
                  }
                },
                "description": "An object that represents a virtual service returned by a describe operation."
              },
              "DefaultGatewayRouteRewrite": {
                "type": "string",
                "enum": [
                  "ENABLED",
                  "DISABLED"
                ]
              },
              "DeleteGatewayRouteInput": {
                "type": "object",
                "title": "DeleteGatewayRouteInput",
                "properties": {}
              },
              "DeleteMeshInput": {
                "type": "object",
                "title": "DeleteMeshInput",
                "properties": {},
                "description": "<zonbook></zonbook><xhtml></xhtml>"
              },
              "DeleteRouteInput": {
                "type": "object",
                "title": "DeleteRouteInput",
                "properties": {},
                "description": "<zonbook></zonbook><xhtml></xhtml>"
              },
              "DeleteVirtualGatewayInput": {
                "type": "object",
                "title": "DeleteVirtualGatewayInput",
                "properties": {}
              },
              "DeleteVirtualNodeInput": {
                "type": "object",
                "title": "DeleteVirtualNodeInput",
                "properties": {},
                "description": "Deletes a virtual node input."
              },
              "DeleteVirtualRouterInput": {
                "type": "object",
                "title": "DeleteVirtualRouterInput",
                "properties": {},
                "description": "<zonbook></zonbook><xhtml></xhtml>"
              },
              "DeleteVirtualServiceInput": {
                "type": "object",
                "title": "DeleteVirtualServiceInput",
                "properties": {},
                "description": "<zonbook></zonbook><xhtml></xhtml>"
              },
              "DescribeGatewayRouteInput": {
                "type": "object",
                "title": "DescribeGatewayRouteInput",
                "properties": {}
              },
              "DescribeMeshInput": {
                "type": "object",
                "title": "DescribeMeshInput",
                "properties": {},
                "description": "<zonbook></zonbook><xhtml></xhtml>"
              },
              "DescribeRouteInput": {
                "type": "object",
                "title": "DescribeRouteInput",
                "properties": {},
                "description": "<zonbook></zonbook><xhtml></xhtml>"
              },
              "DescribeVirtualGatewayInput": {
                "type": "object",
                "title": "DescribeVirtualGatewayInput",
                "properties": {}
              },
              "DescribeVirtualNodeInput": {
                "type": "object",
                "title": "DescribeVirtualNodeInput",
                "properties": {},
                "description": "<zonbook></zonbook><xhtml></xhtml>"
              },
              "DescribeVirtualRouterInput": {
                "type": "object",
                "title": "DescribeVirtualRouterInput",
                "properties": {},
                "description": "<zonbook></zonbook><xhtml></xhtml>"
              },
              "DescribeVirtualServiceInput": {
                "type": "object",
                "title": "DescribeVirtualServiceInput",
                "properties": {},
                "description": "<zonbook></zonbook><xhtml></xhtml>"
              },
              "DnsResponseType": {
                "type": "string",
                "enum": [
                  "LOADBALANCER",
                  "ENDPOINTS"
                ]
              },
              "Hostname": {
                "type": "string"
              },
              "DnsServiceDiscovery": {
                "type": "object",
                "required": [
                  "hostname"
                ],
                "properties": {
                  "hostname": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Hostname"
                      },
                      {
                        "description": "Specifies the DNS service discovery hostname for the virtual node. "
                      }
                    ]
                  },
                  "ipPreference": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/IpPreference"
                      },
                      {
                        "description": "The preferred IP version that this virtual node uses. Setting the IP preference on the virtual node only overrides the IP preference set for the mesh on this specific node."
                      }
                    ]
                  },
                  "responseType": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/DnsResponseType"
                      },
                      {
                        "description": "Specifies the DNS response type for the virtual node."
                      }
                    ]
                  }
                },
                "description": "An object that represents the DNS service discovery information for your virtual node."
              },
              "DurationUnit": {
                "type": "string",
                "enum": [
                  "s",
                  "ms"
                ]
              },
              "DurationValue": {
                "type": "integer",
                "minimum": 0
              },
              "Duration": {
                "type": "object",
                "properties": {
                  "unit": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/DurationUnit"
                      },
                      {
                        "description": "A unit of time."
                      }
                    ]
                  },
                  "value": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/DurationValue"
                      },
                      {
                        "description": "A number of time units."
                      }
                    ]
                  }
                },
                "description": "An object that represents a duration of time."
              },
              "EgressFilterType": {
                "type": "string",
                "enum": [
                  "ALLOW_ALL",
                  "DROP_ALL"
                ]
              },
              "ExactHostName": {
                "type": "string",
                "minLength": 1,
                "maxLength": 253
              },
              "LoggingFormat": {
                "type": "object",
                "properties": {
                  "json": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/JsonFormat"
                      },
                      {
                        "description": "<p/>"
                      }
                    ]
                  },
                  "text": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/TextFormat"
                      },
                      {
                        "description": "<p/>"
                      }
                    ]
                  }
                },
                "description": "An object that represents the format for the logs."
              },
              "FilePath": {
                "type": "string",
                "minLength": 1,
                "maxLength": 255
              },
              "ResourceMetadata": {
                "type": "object",
                "required": [
                  "arn",
                  "createdAt",
                  "lastUpdatedAt",
                  "meshOwner",
                  "resourceOwner",
                  "uid",
                  "version"
                ],
                "properties": {
                  "arn": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Arn"
                      },
                      {
                        "description": "The full Amazon Resource Name (ARN) for the resource."
                      }
                    ]
                  },
                  "createdAt": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Timestamp"
                      },
                      {
                        "description": "The Unix epoch timestamp in seconds for when the resource was created."
                      }
                    ]
                  },
                  "lastUpdatedAt": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Timestamp"
                      },
                      {
                        "description": "The Unix epoch timestamp in seconds for when the resource was last updated."
                      }
                    ]
                  },
                  "meshOwner": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/AccountId"
                      },
                      {
                        "description": "The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\">Working with shared meshes</a>."
                      }
                    ]
                  },
                  "resourceOwner": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/AccountId"
                      },
                      {
                        "description": "The Amazon Web Services IAM account ID of the resource owner. If the account ID is not your own, then it's the ID of the mesh owner or of another account that the mesh is shared with. For more information about mesh sharing, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\">Working with shared meshes</a>."
                      }
                    ]
                  },
                  "uid": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/String"
                      },
                      {
                        "description": "The unique identifier for the resource."
                      }
                    ]
                  },
                  "version": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Long"
                      },
                      {
                        "description": "The version of the resource. Resources are created at version 1, and this version is incremented each time that they're updated."
                      }
                    ]
                  }
                },
                "description": "An object that represents metadata for a resource."
              },
              "GatewayRouteStatus": {
                "type": "object",
                "required": [
                  "status"
                ],
                "properties": {
                  "status": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/GatewayRouteStatusCode"
                      },
                      {
                        "description": "The current status for the gateway route."
                      }
                    ]
                  }
                },
                "description": "An object that represents the current status of a gateway route."
              },
              "SuffixHostname": {
                "type": "string",
                "minLength": 1,
                "maxLength": 253
              },
              "GatewayRouteHostnameMatch": {
                "type": "object",
                "properties": {
                  "exact": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ExactHostName"
                      },
                      {
                        "description": "The exact host name to match on."
                      }
                    ]
                  },
                  "suffix": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/SuffixHostname"
                      },
                      {
                        "description": "The specified ending characters of the host name to match on."
                      }
                    ]
                  }
                },
                "description": "An object representing the gateway route host name to match."
              },
              "GatewayRouteHostnameRewrite": {
                "type": "object",
                "properties": {
                  "defaultTargetHostname": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/DefaultGatewayRouteRewrite"
                      },
                      {
                        "description": "The default target host name to write to."
                      }
                    ]
                  }
                },
                "description": "An object representing the gateway route host name to rewrite."
              },
              "GatewayRouteRef": {
                "type": "object",
                "required": [
                  "arn",
                  "createdAt",
                  "gatewayRouteName",
                  "lastUpdatedAt",
                  "meshName",
                  "meshOwner",
                  "resourceOwner",
                  "version",
                  "virtualGatewayName"
                ],
                "properties": {
                  "arn": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Arn"
                      },
                      {
                        "description": "The full Amazon Resource Name (ARN) for the gateway route."
                      }
                    ]
                  },
                  "createdAt": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Timestamp"
                      },
                      {
                        "description": "The Unix epoch timestamp in seconds for when the resource was created."
                      }
                    ]
                  },
                  "gatewayRouteName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ResourceName"
                      },
                      {
                        "description": "The name of the gateway route."
                      }
                    ]
                  },
                  "lastUpdatedAt": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Timestamp"
                      },
                      {
                        "description": "The Unix epoch timestamp in seconds for when the resource was last updated."
                      }
                    ]
                  },
                  "meshName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ResourceName"
                      },
                      {
                        "description": "The name of the service mesh that the resource resides in. "
                      }
                    ]
                  },
                  "meshOwner": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/AccountId"
                      },
                      {
                        "description": "The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\">Working with shared meshes</a>."
                      }
                    ]
                  },
                  "resourceOwner": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/AccountId"
                      },
                      {
                        "description": "The Amazon Web Services IAM account ID of the resource owner. If the account ID is not your own, then it's the ID of the mesh owner or of another account that the mesh is shared with. For more information about mesh sharing, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\">Working with shared meshes</a>."
                      }
                    ]
                  },
                  "version": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Long"
                      },
                      {
                        "description": "The version of the resource. Resources are created at version 1, and this version is incremented each time that they're updated."
                      }
                    ]
                  },
                  "virtualGatewayName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ResourceName"
                      },
                      {
                        "description": "The virtual gateway that the gateway route is associated with."
                      }
                    ]
                  }
                },
                "description": "An object that represents a gateway route returned by a list operation."
              },
              "GatewayRouteList": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GatewayRouteRef"
                }
              },
              "Timestamp": {
                "type": "string",
                "format": "date-time"
              },
              "Long": {
                "type": "integer"
              },
              "GatewayRouteStatusCode": {
                "type": "string",
                "enum": [
                  "ACTIVE",
                  "INACTIVE",
                  "DELETED"
                ]
              },
              "ListenerPort": {
                "type": "integer",
                "minimum": 1,
                "maximum": 65535
              },
              "GatewayRouteVirtualService": {
                "type": "object",
                "required": [
                  "virtualServiceName"
                ],
                "properties": {
                  "virtualServiceName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ResourceName"
                      },
                      {
                        "description": "The name of the virtual service that traffic is routed to."
                      }
                    ]
                  }
                },
                "description": "An object that represents the virtual service that traffic is routed to."
              },
              "GatewayRouteTarget": {
                "type": "object",
                "required": [
                  "virtualService"
                ],
                "properties": {
                  "port": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ListenerPort"
                      },
                      {
                        "description": "The port number of the gateway route target."
                      }
                    ]
                  },
                  "virtualService": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/GatewayRouteVirtualService"
                      },
                      {
                        "description": "An object that represents a virtual service gateway route target."
                      }
                    ]
                  }
                },
                "description": "An object that represents a gateway route target."
              },
              "GrpcGatewayRouteAction": {
                "type": "object",
                "required": [
                  "target"
                ],
                "properties": {
                  "rewrite": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/GrpcGatewayRouteRewrite"
                      },
                      {
                        "description": "The gateway route action to rewrite."
                      }
                    ]
                  },
                  "target": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/GatewayRouteTarget"
                      },
                      {
                        "description": "An object that represents the target that traffic is routed to when a request matches the gateway route."
                      }
                    ]
                  }
                },
                "description": "An object that represents the action to take if a match is determined."
              },
              "GrpcGatewayRouteMatch": {
                "type": "object",
                "properties": {
                  "hostname": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/GatewayRouteHostnameMatch"
                      },
                      {
                        "description": "The gateway route host name to be matched on."
                      }
                    ]
                  },
                  "metadata": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/GrpcGatewayRouteMetadataList"
                      },
                      {
                        "description": "The gateway route metadata to be matched on."
                      }
                    ]
                  },
                  "port": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ListenerPort"
                      },
                      {
                        "description": "The port number to match from the request."
                      }
                    ]
                  },
                  "serviceName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ServiceName"
                      },
                      {
                        "description": "The fully qualified domain name for the service to match from the request."
                      }
                    ]
                  }
                },
                "description": "An object that represents the criteria for determining a request match."
              },
              "GrpcGatewayRouteRewrite": {
                "type": "object",
                "properties": {
                  "hostname": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/GatewayRouteHostnameRewrite"
                      },
                      {
                        "description": "The host name of the gateway route to rewrite."
                      }
                    ]
                  }
                },
                "description": "An object that represents the gateway route to rewrite."
              },
              "GrpcGatewayRouteMetadataList": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GrpcGatewayRouteMetadata"
                },
                "minItems": 1,
                "maxItems": 10
              },
              "GrpcMetadataMatchMethod": {
                "type": "object",
                "properties": {
                  "exact": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/HeaderMatch"
                      },
                      {
                        "description": "The exact method header to be matched on."
                      }
                    ]
                  },
                  "prefix": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/HeaderMatch"
                      },
                      {
                        "description": "The specified beginning characters of the method header to be matched on."
                      }
                    ]
                  },
                  "range": {
                    "$ref": "#/components/schemas/MatchRange"
                  },
                  "regex": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/HeaderMatch"
                      },
                      {
                        "description": "The regex used to match the method header."
                      }
                    ]
                  },
                  "suffix": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/HeaderMatch"
                      },
                      {
                        "description": "The specified ending characters of the method header to match on."
                      }
                    ]
                  }
                },
                "description": "An object representing the method header to be matched."
              },
              "HeaderName": {
                "type": "string",
                "minLength": 1,
                "maxLength": 50
              },
              "GrpcGatewayRouteMetadata": {
                "type": "object",
                "required": [
                  "name"
                ],
                "properties": {
                  "invert": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Boolean"
                      },
                      {
                        "description": "Specify <code>True</code> to match anything except the match criteria. The default value is <code>False</code>."
                      }
                    ]
                  },
                  "match": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/GrpcMetadataMatchMethod"
                      },
                      {
                        "description": "The criteria for determining a metadata match."
                      }
                    ]
                  },
                  "name": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/HeaderName"
                      },
                      {
                        "description": "A name for the gateway route metadata."
                      }
                    ]
                  }
                },
                "description": "An object representing the metadata of the gateway route."
              },
              "HeaderMatch": {
                "type": "string",
                "minLength": 1,
                "maxLength": 255
              },
              "MatchRange": {
                "type": "object",
                "required": [
                  "end",
                  "start"
                ],
                "properties": {
                  "end": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Long"
                      },
                      {
                        "description": "The end of the range."
                      }
                    ]
                  },
                  "start": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Long"
                      },
                      {
                        "description": "The start of the range."
                      }
                    ]
                  }
                },
                "description": "An object that represents the range of values to match on. The first character of the range is included in the range, though the last character is not. For example, if the range specified were 1-100, only values 1-99 would be matched."
              },
              "GrpcRetryPolicyEvents": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GrpcRetryPolicyEvent"
                },
                "minItems": 1,
                "maxItems": 5
              },
              "HttpRetryPolicyEvents": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/HttpRetryPolicyEvent"
                },
                "minItems": 1,
                "maxItems": 25
              },
              "MaxRetries": {
                "type": "integer",
                "minimum": 0
              },
              "TcpRetryPolicyEvents": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/TcpRetryPolicyEvent"
                },
                "minItems": 1,
                "maxItems": 1
              },
              "GrpcRetryPolicy": {
                "type": "object",
                "required": [
                  "maxRetries",
                  "perRetryTimeout"
                ],
                "properties": {
                  "grpcRetryEvents": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/GrpcRetryPolicyEvents"
                      },
                      {
                        "description": "Specify at least one of the valid values."
                      }
                    ]
                  },
                  "httpRetryEvents": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/HttpRetryPolicyEvents"
                      },
                      {
                        "description": "<p>Specify at least one of the following values.</p> <ul> <li> <p> <b>server-error</b> – HTTP status codes 500, 501, 502, 503, 504, 505, 506, 507, 508, 510, and 511</p> </li> <li> <p> <b>gateway-error</b> – HTTP status codes 502, 503, and 504</p> </li> <li> <p> <b>client-error</b> – HTTP status code 409</p> </li> <li> <p> <b>stream-error</b> – Retry on refused stream</p> </li> </ul>"
                      }
                    ]
                  },
                  "maxRetries": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/MaxRetries"
                      },
                      {
                        "description": "The maximum number of retry attempts."
                      }
                    ]
                  },
                  "perRetryTimeout": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Duration"
                      },
                      {
                        "description": "The timeout for each retry attempt."
                      }
                    ]
                  },
                  "tcpRetryEvents": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/TcpRetryPolicyEvents"
                      },
                      {
                        "description": "Specify a valid value. The event occurs before any processing of a request has started and is encountered when the upstream is temporarily or permanently unavailable."
                      }
                    ]
                  }
                },
                "description": "An object that represents a retry policy. Specify at least one value for at least one of the types of <code>RetryEvents</code>, a value for <code>maxRetries</code>, and a value for <code>perRetryTimeout</code>. Both <code>server-error</code> and <code>gateway-error</code> under <code>httpRetryEvents</code> include the Envoy <code>reset</code> policy. For more information on the <code>reset</code> policy, see the <a href=\"https://www.envoyproxy.io/docs/envoy/latest/configuration/http/http_filters/router_filter#x-envoy-retry-on\">Envoy documentation</a>."
              },
              "GrpcRetryPolicyEvent": {
                "type": "string",
                "enum": [
                  "cancelled",
                  "deadline-exceeded",
                  "internal",
                  "resource-exhausted",
                  "unavailable"
                ]
              },
              "GrpcRouteAction": {
                "type": "object",
                "required": [
                  "weightedTargets"
                ],
                "properties": {
                  "weightedTargets": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/WeightedTargets"
                      },
                      {
                        "description": "An object that represents the targets that traffic is routed to when a request matches the route."
                      }
                    ]
                  }
                },
                "description": "An object that represents the action to take if a match is determined."
              },
              "GrpcRouteMatch": {
                "type": "object",
                "properties": {
                  "metadata": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/GrpcRouteMetadataList"
                      },
                      {
                        "description": "An object that represents the data to match from the request."
                      }
                    ]
                  },
                  "methodName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/MethodName"
                      },
                      {
                        "description": "The method name to match from the request. If you specify a name, you must also specify a <code>serviceName</code>."
                      }
                    ]
                  },
                  "port": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ListenerPort"
                      },
                      {
                        "description": "The port number to match on."
                      }
                    ]
                  },
                  "serviceName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ServiceName"
                      },
                      {
                        "description": "The fully qualified domain name for the service to match from the request."
                      }
                    ]
                  }
                },
                "description": "An object that represents the criteria for determining a request match."
              },
              "GrpcTimeout": {
                "type": "object",
                "properties": {
                  "idle": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Duration"
                      },
                      {
                        "description": "An object that represents an idle timeout. An idle timeout bounds the amount of time that a connection may be idle. The default value is none."
                      }
                    ]
                  },
                  "perRequest": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Duration"
                      },
                      {
                        "description": "An object that represents a per request timeout. The default value is 15 seconds. If you set a higher timeout, then make sure that the higher value is set for each App Mesh resource in a conversation. For example, if a virtual node backend uses a virtual router provider to route to another virtual node, then the timeout should be greater than 15 seconds for the source and destination virtual node and the route."
                      }
                    ]
                  }
                },
                "description": "An object that represents types of timeouts. "
              },
              "WeightedTargets": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/WeightedTarget"
                },
                "minItems": 1,
                "maxItems": 10
              },
              "GrpcRouteMetadataList": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GrpcRouteMetadata"
                },
                "minItems": 1,
                "maxItems": 10
              },
              "MethodName": {
                "type": "string",
                "minLength": 1,
                "maxLength": 50
              },
              "GrpcRouteMetadataMatchMethod": {
                "type": "object",
                "properties": {
                  "exact": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/HeaderMatch"
                      },
                      {
                        "description": "The value sent by the client must match the specified value exactly."
                      }
                    ]
                  },
                  "prefix": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/HeaderMatch"
                      },
                      {
                        "description": "The value sent by the client must begin with the specified characters."
                      }
                    ]
                  },
                  "range": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/MatchRange"
                      },
                      {
                        "description": "An object that represents the range of values to match on."
                      }
                    ]
                  },
                  "regex": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/HeaderMatch"
                      },
                      {
                        "description": "The value sent by the client must include the specified characters."
                      }
                    ]
                  },
                  "suffix": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/HeaderMatch"
                      },
                      {
                        "description": "The value sent by the client must end with the specified characters."
                      }
                    ]
                  }
                },
                "description": "An object that represents the match method. Specify one of the match values."
              },
              "GrpcRouteMetadata": {
                "type": "object",
                "required": [
                  "name"
                ],
                "properties": {
                  "invert": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Boolean"
                      },
                      {
                        "description": "Specify <code>True</code> to match anything except the match criteria. The default value is <code>False</code>."
                      }
                    ]
                  },
                  "match": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/GrpcRouteMetadataMatchMethod"
                      },
                      {
                        "description": "An object that represents the data to match from the request."
                      }
                    ]
                  },
                  "name": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/HeaderName"
                      },
                      {
                        "description": "The name of the route."
                      }
                    ]
                  }
                },
                "description": "An object that represents the match metadata for the route."
              },
              "HeaderMatchMethod": {
                "type": "object",
                "properties": {
                  "exact": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/HeaderMatch"
                      },
                      {
                        "description": "The value sent by the client must match the specified value exactly."
                      }
                    ]
                  },
                  "prefix": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/HeaderMatch"
                      },
                      {
                        "description": "The value sent by the client must begin with the specified characters."
                      }
                    ]
                  },
                  "range": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/MatchRange"
                      },
                      {
                        "description": "An object that represents the range of values to match on."
                      }
                    ]
                  },
                  "regex": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/HeaderMatch"
                      },
                      {
                        "description": "The value sent by the client must include the specified characters."
                      }
                    ]
                  },
                  "suffix": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/HeaderMatch"
                      },
                      {
                        "description": "The value sent by the client must end with the specified characters."
                      }
                    ]
                  }
                },
                "description": "An object that represents the method and value to match with the header value sent in a request. Specify one match method."
              },
              "HealthCheckIntervalMillis": {
                "type": "integer",
                "minimum": 5000,
                "maximum": 300000
              },
              "HealthCheckThreshold": {
                "type": "integer",
                "minimum": 2,
                "maximum": 10
              },
              "PortNumber": {
                "type": "integer",
                "minimum": 1,
                "maximum": 65535
              },
              "PortProtocol": {
                "type": "string",
                "enum": [
                  "http",
                  "tcp",
                  "http2",
                  "grpc"
                ]
              },
              "HealthCheckTimeoutMillis": {
                "type": "integer",
                "minimum": 2000,
                "maximum": 60000
              },
              "HealthCheckPolicy": {
                "type": "object",
                "required": [
                  "healthyThreshold",
                  "intervalMillis",
                  "protocol",
                  "timeoutMillis",
                  "unhealthyThreshold"
                ],
                "properties": {
                  "healthyThreshold": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/HealthCheckThreshold"
                      },
                      {
                        "description": "The number of consecutive successful health checks that must occur before declaring listener healthy."
                      }
                    ]
                  },
                  "intervalMillis": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/HealthCheckIntervalMillis"
                      },
                      {
                        "description": "The time period in milliseconds between each health check execution."
                      }
                    ]
                  },
                  "path": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/String"
                      },
                      {
                        "description": "The destination path for the health check request. This value is only used if the specified protocol is HTTP or HTTP/2. For any other protocol, this value is ignored."
                      }
                    ]
                  },
                  "port": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/PortNumber"
                      },
                      {
                        "description": "The destination port for the health check request. This port must match the port defined in the <a>PortMapping</a> for the listener."
                      }
                    ]
                  },
                  "protocol": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/PortProtocol"
                      },
                      {
                        "description": "The protocol for the health check request. If you specify <code>grpc</code>, then your service must conform to the <a href=\"https://github.com/grpc/grpc/blob/master/doc/health-checking.md\">GRPC Health Checking Protocol</a>."
                      }
                    ]
                  },
                  "timeoutMillis": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/HealthCheckTimeoutMillis"
                      },
                      {
                        "description": "The amount of time to wait when receiving a response from the health check, in milliseconds."
                      }
                    ]
                  },
                  "unhealthyThreshold": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/HealthCheckThreshold"
                      },
                      {
                        "description": "The number of consecutive failed health checks that must occur before declaring a virtual node unhealthy. "
                      }
                    ]
                  }
                },
                "description": "An object that represents the health check policy for a virtual node's listener."
              },
              "HttpGatewayRouteAction": {
                "type": "object",
                "required": [
                  "target"
                ],
                "properties": {
                  "rewrite": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/HttpGatewayRouteRewrite"
                      },
                      {
                        "description": "The gateway route action to rewrite."
                      }
                    ]
                  },
                  "target": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/GatewayRouteTarget"
                      },
                      {
                        "description": "An object that represents the target that traffic is routed to when a request matches the gateway route."
                      }
                    ]
                  }
                },
                "description": "An object that represents the action to take if a match is determined."
              },
              "HttpGatewayRouteMatch": {
                "type": "object",
                "properties": {
                  "headers": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/HttpGatewayRouteHeaders"
                      },
                      {
                        "description": "The client request headers to match on."
                      }
                    ]
                  },
                  "hostname": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/GatewayRouteHostnameMatch"
                      },
                      {
                        "description": "The host name to match on."
                      }
                    ]
                  },
                  "method": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/HttpMethod"
                      },
                      {
                        "description": "The method to match on."
                      }
                    ]
                  },
                  "path": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/HttpPathMatch"
                      },
                      {
                        "description": "The path to match on."
                      }
                    ]
                  },
                  "port": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ListenerPort"
                      },
                      {
                        "description": "The port number to match on."
                      }
                    ]
                  },
                  "prefix": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/String"
                      },
                      {
                        "description": "Specifies the path to match requests with. This parameter must always start with <code>/</code>, which by itself matches all requests to the virtual service name. You can also match for path-based routing of requests. For example, if your virtual service name is <code>my-service.local</code> and you want the route to match requests to <code>my-service.local/metrics</code>, your prefix should be <code>/metrics</code>."
                      }
                    ]
                  },
                  "queryParameters": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/HttpQueryParameters"
                      },
                      {
                        "description": "The query parameter to match on."
                      }
                    ]
                  }
                },
                "description": "An object that represents the criteria for determining a request match."
              },
              "HttpGatewayRouteRewrite": {
                "type": "object",
                "properties": {
                  "hostname": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/GatewayRouteHostnameRewrite"
                      },
                      {
                        "description": "The host name to rewrite."
                      }
                    ]
                  },
                  "path": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/HttpGatewayRoutePathRewrite"
                      },
                      {
                        "description": "The path to rewrite."
                      }
                    ]
                  },
                  "prefix": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/HttpGatewayRoutePrefixRewrite"
                      },
                      {
                        "description": "The specified beginning characters to rewrite."
                      }
                    ]
                  }
                },
                "description": "An object representing the gateway route to rewrite."
              },
              "HttpGatewayRouteHeader": {
                "type": "object",
                "required": [
                  "name"
                ],
                "properties": {
                  "invert": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Boolean"
                      },
                      {
                        "description": "Specify <code>True</code> to match anything except the match criteria. The default value is <code>False</code>."
                      }
                    ]
                  },
                  "match": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/HeaderMatchMethod"
                      },
                      {
                        "description": "An object that represents the method and value to match with the header value sent in a request. Specify one match method."
                      }
                    ]
                  },
                  "name": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/HeaderName"
                      },
                      {
                        "description": "A name for the HTTP header in the gateway route that will be matched on."
                      }
                    ]
                  }
                },
                "description": "An object that represents the HTTP header in the gateway route."
              },
              "HttpGatewayRouteHeaders": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/HttpGatewayRouteHeader"
                },
                "minItems": 1,
                "maxItems": 10
              },
              "HttpMethod": {
                "type": "string",
                "enum": [
                  "GET",
                  "HEAD",
                  "POST",
                  "PUT",
                  "DELETE",
                  "CONNECT",
                  "OPTIONS",
                  "TRACE",
                  "PATCH"
                ]
              },
              "HttpPathMatch": {
                "type": "object",
                "properties": {
                  "exact": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/HttpPathExact"
                      },
                      {
                        "description": "The exact path to match on."
                      }
                    ]
                  },
                  "regex": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/HttpPathRegex"
                      },
                      {
                        "description": "The regex used to match the path."
                      }
                    ]
                  }
                },
                "description": "An object representing the path to match in the request."
              },
              "HttpQueryParameters": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/HttpQueryParameter"
                },
                "minItems": 1,
                "maxItems": 10
              },
              "HttpPathExact": {
                "type": "string",
                "minLength": 1,
                "maxLength": 255
              },
              "HttpGatewayRoutePathRewrite": {
                "type": "object",
                "properties": {
                  "exact": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/HttpPathExact"
                      },
                      {
                        "description": "The exact path to rewrite."
                      }
                    ]
                  }
                },
                "description": "An object that represents the path to rewrite."
              },
              "HttpGatewayRoutePrefix": {
                "type": "string",
                "minLength": 1,
                "maxLength": 255
              },
              "HttpGatewayRoutePrefixRewrite": {
                "type": "object",
                "properties": {
                  "defaultPrefix": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/DefaultGatewayRouteRewrite"
                      },
                      {
                        "description": "The default prefix used to replace the incoming route prefix when rewritten."
                      }
                    ]
                  },
                  "value": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/HttpGatewayRoutePrefix"
                      },
                      {
                        "description": "The value used to replace the incoming route prefix when rewritten."
                      }
                    ]
                  }
                },
                "description": "An object representing the beginning characters of the route to rewrite."
              },
              "HttpPathRegex": {
                "type": "string",
                "minLength": 1,
                "maxLength": 255
              },
              "QueryParameterMatch": {
                "type": "object",
                "properties": {
                  "exact": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/String"
                      },
                      {
                        "description": "The exact query parameter to match on."
                      }
                    ]
                  }
                },
                "description": "An object representing the query parameter to match."
              },
              "QueryParameterName": {
                "type": "string"
              },
              "HttpQueryParameter": {
                "type": "object",
                "required": [
                  "name"
                ],
                "properties": {
                  "match": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/QueryParameterMatch"
                      },
                      {
                        "description": "The query parameter to match on."
                      }
                    ]
                  },
                  "name": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/QueryParameterName"
                      },
                      {
                        "description": "A name for the query parameter that will be matched on."
                      }
                    ]
                  }
                },
                "description": "An object that represents the query parameter in the request."
              },
              "HttpRetryPolicy": {
                "type": "object",
                "required": [
                  "maxRetries",
                  "perRetryTimeout"
                ],
                "properties": {
                  "httpRetryEvents": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/HttpRetryPolicyEvents"
                      },
                      {
                        "description": "<p>Specify at least one of the following values.</p> <ul> <li> <p> <b>server-error</b> – HTTP status codes 500, 501, 502, 503, 504, 505, 506, 507, 508, 510, and 511</p> </li> <li> <p> <b>gateway-error</b> – HTTP status codes 502, 503, and 504</p> </li> <li> <p> <b>client-error</b> – HTTP status code 409</p> </li> <li> <p> <b>stream-error</b> – Retry on refused stream</p> </li> </ul>"
                      }
                    ]
                  },
                  "maxRetries": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/MaxRetries"
                      },
                      {
                        "description": "The maximum number of retry attempts."
                      }
                    ]
                  },
                  "perRetryTimeout": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Duration"
                      },
                      {
                        "description": "The timeout for each retry attempt."
                      }
                    ]
                  },
                  "tcpRetryEvents": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/TcpRetryPolicyEvents"
                      },
                      {
                        "description": "Specify a valid value. The event occurs before any processing of a request has started and is encountered when the upstream is temporarily or permanently unavailable."
                      }
                    ]
                  }
                },
                "description": "An object that represents a retry policy. Specify at least one value for at least one of the types of <code>RetryEvents</code>, a value for <code>maxRetries</code>, and a value for <code>perRetryTimeout</code>. Both <code>server-error</code> and <code>gateway-error</code> under <code>httpRetryEvents</code> include the Envoy <code>reset</code> policy. For more information on the <code>reset</code> policy, see the <a href=\"https://www.envoyproxy.io/docs/envoy/latest/configuration/http/http_filters/router_filter#x-envoy-retry-on\">Envoy documentation</a>."
              },
              "HttpRetryPolicyEvent": {
                "type": "string",
                "minLength": 1,
                "maxLength": 25
              },
              "HttpRouteAction": {
                "type": "object",
                "required": [
                  "weightedTargets"
                ],
                "properties": {
                  "weightedTargets": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/WeightedTargets"
                      },
                      {
                        "description": "An object that represents the targets that traffic is routed to when a request matches the route."
                      }
                    ]
                  }
                },
                "description": "An object that represents the action to take if a match is determined."
              },
              "HttpRouteMatch": {
                "type": "object",
                "properties": {
                  "headers": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/HttpRouteHeaders"
                      },
                      {
                        "description": "The client request headers to match on."
                      }
                    ]
                  },
                  "method": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/HttpMethod"
                      },
                      {
                        "description": "The client request method to match on. Specify only one."
                      }
                    ]
                  },
                  "path": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/HttpPathMatch"
                      },
                      {
                        "description": "The client request path to match on."
                      }
                    ]
                  },
                  "port": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ListenerPort"
                      },
                      {
                        "description": "The port number to match on."
                      }
                    ]
                  },
                  "prefix": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/String"
                      },
                      {
                        "description": "Specifies the path to match requests with. This parameter must always start with <code>/</code>, which by itself matches all requests to the virtual service name. You can also match for path-based routing of requests. For example, if your virtual service name is <code>my-service.local</code> and you want the route to match requests to <code>my-service.local/metrics</code>, your prefix should be <code>/metrics</code>."
                      }
                    ]
                  },
                  "queryParameters": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/HttpQueryParameters"
                      },
                      {
                        "description": "The client request query parameters to match on."
                      }
                    ]
                  },
                  "scheme": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/HttpScheme"
                      },
                      {
                        "description": "The client request scheme to match on. Specify only one. Applicable only for HTTP2 routes."
                      }
                    ]
                  }
                },
                "description": "An object that represents the requirements for a route to match HTTP requests for a virtual router."
              },
              "HttpTimeout": {
                "type": "object",
                "properties": {
                  "idle": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Duration"
                      },
                      {
                        "description": "An object that represents an idle timeout. An idle timeout bounds the amount of time that a connection may be idle. The default value is none."
                      }
                    ]
                  },
                  "perRequest": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Duration"
                      },
                      {
                        "description": "An object that represents a per request timeout. The default value is 15 seconds. If you set a higher timeout, then make sure that the higher value is set for each App Mesh resource in a conversation. For example, if a virtual node backend uses a virtual router provider to route to another virtual node, then the timeout should be greater than 15 seconds for the source and destination virtual node and the route."
                      }
                    ]
                  }
                },
                "description": "An object that represents types of timeouts. "
              },
              "HttpRouteHeader": {
                "type": "object",
                "required": [
                  "name"
                ],
                "properties": {
                  "invert": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Boolean"
                      },
                      {
                        "description": "Specify <code>True</code> to match anything except the match criteria. The default value is <code>False</code>."
                      }
                    ]
                  },
                  "match": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/HeaderMatchMethod"
                      },
                      {
                        "description": "The <code>HeaderMatchMethod</code> object."
                      }
                    ]
                  },
                  "name": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/HeaderName"
                      },
                      {
                        "description": "A name for the HTTP header in the client request that will be matched on."
                      }
                    ]
                  }
                },
                "description": "An object that represents the HTTP header in the request."
              },
              "HttpRouteHeaders": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/HttpRouteHeader"
                },
                "minItems": 1,
                "maxItems": 10
              },
              "HttpScheme": {
                "type": "string",
                "enum": [
                  "http",
                  "https"
                ]
              },
              "JsonFormatRef": {
                "type": "object",
                "required": [
                  "key",
                  "value"
                ],
                "properties": {
                  "key": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/JsonKey"
                      },
                      {
                        "description": "The specified key for the JSON."
                      }
                    ]
                  },
                  "value": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/JsonValue"
                      },
                      {
                        "description": "The specified value for the JSON."
                      }
                    ]
                  }
                },
                "description": "An object that represents the key value pairs for the JSON."
              },
              "JsonFormat": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/JsonFormatRef"
                }
              },
              "JsonKey": {
                "type": "string",
                "minLength": 1,
                "maxLength": 100
              },
              "JsonValue": {
                "type": "string",
                "minLength": 1,
                "maxLength": 100
              },
              "ListGatewayRoutesLimit": {
                "type": "integer",
                "minimum": 1,
                "maximum": 100
              },
              "ListGatewayRoutesInput": {
                "type": "object",
                "title": "ListGatewayRoutesInput",
                "properties": {}
              },
              "ListMeshesLimit": {
                "type": "integer",
                "minimum": 1,
                "maximum": 100
              },
              "ListMeshesInput": {
                "type": "object",
                "title": "ListMeshesInput",
                "properties": {},
                "description": "<zonbook></zonbook><xhtml></xhtml>"
              },
              "MeshList": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/MeshRef"
                }
              },
              "ListRoutesLimit": {
                "type": "integer",
                "minimum": 1,
                "maximum": 100
              },
              "ListRoutesInput": {
                "type": "object",
                "title": "ListRoutesInput",
                "properties": {},
                "description": "<zonbook></zonbook><xhtml></xhtml>"
              },
              "RouteList": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RouteRef"
                }
              },
              "TagsLimit": {
                "type": "integer",
                "minimum": 1,
                "maximum": 50
              },
              "ListTagsForResourceInput": {
                "type": "object",
                "title": "ListTagsForResourceInput",
                "properties": {},
                "description": "<zonbook></zonbook><xhtml></xhtml>"
              },
              "ListVirtualGatewaysLimit": {
                "type": "integer",
                "minimum": 1,
                "maximum": 100
              },
              "ListVirtualGatewaysInput": {
                "type": "object",
                "title": "ListVirtualGatewaysInput",
                "properties": {}
              },
              "VirtualGatewayList": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/VirtualGatewayRef"
                }
              },
              "ListVirtualNodesLimit": {
                "type": "integer",
                "minimum": 1,
                "maximum": 100
              },
              "ListVirtualNodesInput": {
                "type": "object",
                "title": "ListVirtualNodesInput",
                "properties": {},
                "description": "<zonbook></zonbook><xhtml></xhtml>"
              },
              "VirtualNodeList": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/VirtualNodeRef"
                }
              },
              "ListVirtualRoutersLimit": {
                "type": "integer",
                "minimum": 1,
                "maximum": 100
              },
              "ListVirtualRoutersInput": {
                "type": "object",
                "title": "ListVirtualRoutersInput",
                "properties": {},
                "description": "<zonbook></zonbook><xhtml></xhtml>"
              },
              "VirtualRouterList": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/VirtualRouterRef"
                }
              },
              "ListVirtualServicesLimit": {
                "type": "integer",
                "minimum": 1,
                "maximum": 100
              },
              "ListVirtualServicesInput": {
                "type": "object",
                "title": "ListVirtualServicesInput",
                "properties": {},
                "description": "<zonbook></zonbook><xhtml></xhtml>"
              },
              "VirtualServiceList": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/VirtualServiceRef"
                }
              },
              "VirtualNodeConnectionPool": {
                "type": "object",
                "properties": {
                  "grpc": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/VirtualNodeGrpcConnectionPool"
                      },
                      {
                        "description": "An object that represents a type of connection pool."
                      }
                    ]
                  },
                  "http": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/VirtualNodeHttpConnectionPool"
                      },
                      {
                        "description": "An object that represents a type of connection pool."
                      }
                    ]
                  },
                  "http2": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/VirtualNodeHttp2ConnectionPool"
                      },
                      {
                        "description": "An object that represents a type of connection pool."
                      }
                    ]
                  },
                  "tcp": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/VirtualNodeTcpConnectionPool"
                      },
                      {
                        "description": "An object that represents a type of connection pool."
                      }
                    ]
                  }
                },
                "description": "<p>An object that represents the type of virtual node connection pool.</p> <p>Only one protocol is used at a time and should be the same protocol as the one chosen under port mapping.</p> <p>If not present the default value for <code>maxPendingRequests</code> is <code>2147483647</code>.</p> <p/>"
              },
              "OutlierDetection": {
                "type": "object",
                "required": [
                  "baseEjectionDuration",
                  "interval",
                  "maxEjectionPercent",
                  "maxServerErrors"
                ],
                "properties": {
                  "baseEjectionDuration": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Duration"
                      },
                      {
                        "description": "The base amount of time for which a host is ejected."
                      }
                    ]
                  },
                  "interval": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Duration"
                      },
                      {
                        "description": "The time interval between ejection sweep analysis."
                      }
                    ]
                  },
                  "maxEjectionPercent": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/OutlierDetectionMaxEjectionPercent"
                      },
                      {
                        "description": "Maximum percentage of hosts in load balancing pool for upstream service that can be ejected. Will eject at least one host regardless of the value."
                      }
                    ]
                  },
                  "maxServerErrors": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/OutlierDetectionMaxServerErrors"
                      },
                      {
                        "description": "Number of consecutive <code>5xx</code> errors required for ejection. "
                      }
                    ]
                  }
                },
                "description": "An object that represents the outlier detection for a virtual node's listener."
              },
              "PortMapping": {
                "type": "object",
                "required": [
                  "port",
                  "protocol"
                ],
                "properties": {
                  "port": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/PortNumber"
                      },
                      {
                        "description": "The port used for the port mapping."
                      }
                    ]
                  },
                  "protocol": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/PortProtocol"
                      },
                      {
                        "description": "The protocol used for the port mapping. Specify one protocol."
                      }
                    ]
                  }
                },
                "description": "An object that represents a port mapping."
              },
              "ListenerTimeout": {
                "type": "object",
                "properties": {
                  "grpc": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/GrpcTimeout"
                      },
                      {
                        "description": "An object that represents types of timeouts. "
                      }
                    ]
                  },
                  "http": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/HttpTimeout"
                      },
                      {
                        "description": "An object that represents types of timeouts. "
                      }
                    ]
                  },
                  "http2": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/HttpTimeout"
                      },
                      {
                        "description": "An object that represents types of timeouts. "
                      }
                    ]
                  },
                  "tcp": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/TcpTimeout"
                      },
                      {
                        "description": "An object that represents types of timeouts. "
                      }
                    ]
                  }
                },
                "description": "An object that represents timeouts for different protocols."
              },
              "ListenerTls": {
                "type": "object",
                "required": [
                  "certificate",
                  "mode"
                ],
                "properties": {
                  "certificate": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ListenerTlsCertificate"
                      },
                      {
                        "description": "A reference to an object that represents a listener's Transport Layer Security (TLS) certificate."
                      }
                    ]
                  },
                  "mode": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ListenerTlsMode"
                      },
                      {
                        "description": "<p>Specify one of the following modes.</p> <ul> <li> <p> <b/>STRICT – Listener only accepts connections with TLS enabled. </p> </li> <li> <p> <b/>PERMISSIVE – Listener accepts connections with or without TLS enabled.</p> </li> <li> <p> <b/>DISABLED – Listener only accepts connections without TLS. </p> </li> </ul>"
                      }
                    ]
                  },
                  "validation": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ListenerTlsValidationContext"
                      },
                      {
                        "description": "A reference to an object that represents a listener's Transport Layer Security (TLS) validation context."
                      }
                    ]
                  }
                },
                "description": "An object that represents the Transport Layer Security (TLS) properties for a listener."
              },
              "Listener": {
                "type": "object",
                "required": [
                  "portMapping"
                ],
                "properties": {
                  "connectionPool": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/VirtualNodeConnectionPool"
                      },
                      {
                        "description": "The connection pool information for the listener."
                      }
                    ]
                  },
                  "healthCheck": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/HealthCheckPolicy"
                      },
                      {
                        "description": "The health check information for the listener."
                      }
                    ]
                  },
                  "outlierDetection": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/OutlierDetection"
                      },
                      {
                        "description": "The outlier detection information for the listener."
                      }
                    ]
                  },
                  "portMapping": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/PortMapping"
                      },
                      {
                        "description": "The port mapping information for the listener."
                      }
                    ]
                  },
                  "timeout": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ListenerTimeout"
                      },
                      {
                        "description": "An object that represents timeouts for different protocols."
                      }
                    ]
                  },
                  "tls": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ListenerTls"
                      },
                      {
                        "description": "A reference to an object that represents the Transport Layer Security (TLS) properties for a listener."
                      }
                    ]
                  }
                },
                "description": "An object that represents a listener for a virtual node."
              },
              "TcpTimeout": {
                "type": "object",
                "properties": {
                  "idle": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Duration"
                      },
                      {
                        "description": "An object that represents an idle timeout. An idle timeout bounds the amount of time that a connection may be idle. The default value is none."
                      }
                    ]
                  }
                },
                "description": "An object that represents types of timeouts. "
              },
              "ListenerTlsCertificate": {
                "type": "object",
                "properties": {
                  "acm": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ListenerTlsAcmCertificate"
                      },
                      {
                        "description": "A reference to an object that represents an Certificate Manager certificate."
                      }
                    ]
                  },
                  "file": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ListenerTlsFileCertificate"
                      },
                      {
                        "description": "A reference to an object that represents a local file certificate."
                      }
                    ]
                  },
                  "sds": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ListenerTlsSdsCertificate"
                      },
                      {
                        "description": "A reference to an object that represents a listener's Secret Discovery Service certificate."
                      }
                    ]
                  }
                },
                "description": "An object that represents a listener's Transport Layer Security (TLS) certificate."
              },
              "ListenerTlsMode": {
                "type": "string",
                "enum": [
                  "STRICT",
                  "PERMISSIVE",
                  "DISABLED"
                ]
              },
              "ListenerTlsValidationContext": {
                "type": "object",
                "required": [
                  "trust"
                ],
                "properties": {
                  "subjectAlternativeNames": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/SubjectAlternativeNames"
                      },
                      {
                        "description": "A reference to an object that represents the SANs for a listener's Transport Layer Security (TLS) validation context."
                      }
                    ]
                  },
                  "trust": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ListenerTlsValidationContextTrust"
                      },
                      {
                        "description": "A reference to where to retrieve the trust chain when validating a peer’s Transport Layer Security (TLS) certificate."
                      }
                    ]
                  }
                },
                "description": "An object that represents a listener's Transport Layer Security (TLS) validation context."
              },
              "ListenerTlsAcmCertificate": {
                "type": "object",
                "required": [
                  "certificateArn"
                ],
                "properties": {
                  "certificateArn": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Arn"
                      },
                      {
                        "description": "The Amazon Resource Name (ARN) for the certificate. The certificate must meet specific requirements and you must have proxy authorization enabled. For more information, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/tls.html#virtual-node-tls-prerequisites\">Transport Layer Security (TLS)</a>."
                      }
                    ]
                  }
                },
                "description": "An object that represents an Certificate Manager certificate."
              },
              "SdsSecretName": {
                "type": "string"
              },
              "SubjectAlternativeNames": {
                "type": "object",
                "required": [
                  "match"
                ],
                "properties": {
                  "match": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/SubjectAlternativeNameMatchers"
                      },
                      {
                        "description": "An object that represents the criteria for determining a SANs match."
                      }
                    ]
                  }
                },
                "description": "An object that represents the subject alternative names secured by the certificate."
              },
              "ListenerTlsValidationContextTrust": {
                "type": "object",
                "properties": {
                  "file": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/TlsValidationContextFileTrust"
                      },
                      {
                        "description": "An object that represents a Transport Layer Security (TLS) validation context trust for a local file."
                      }
                    ]
                  },
                  "sds": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/TlsValidationContextSdsTrust"
                      },
                      {
                        "description": "A reference to an object that represents a listener's Transport Layer Security (TLS) Secret Discovery Service validation context trust."
                      }
                    ]
                  }
                },
                "description": "An object that represents a listener's Transport Layer Security (TLS) validation context trust."
              },
              "TlsValidationContextFileTrust": {
                "type": "object",
                "required": [
                  "certificateChain"
                ],
                "properties": {
                  "certificateChain": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/FilePath"
                      },
                      {
                        "description": "The certificate trust chain for a certificate stored on the file system of the virtual node that the proxy is running on."
                      }
                    ]
                  }
                },
                "description": "An object that represents a Transport Layer Security (TLS) validation context trust for a local file."
              },
              "TlsValidationContextSdsTrust": {
                "type": "object",
                "required": [
                  "secretName"
                ],
                "properties": {
                  "secretName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/SdsSecretName"
                      },
                      {
                        "description": "A reference to an object that represents the name of the secret for a Transport Layer Security (TLS) Secret Discovery Service validation context trust."
                      }
                    ]
                  }
                },
                "description": "An object that represents a Transport Layer Security (TLS) Secret Discovery Service validation context trust. The proxy must be configured with a local SDS provider via a Unix Domain Socket. See App Mesh <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/tls.html\">TLS documentation</a> for more info."
              },
              "TextFormat": {
                "type": "string",
                "minLength": 1,
                "maxLength": 1000
              },
              "MaxConnections": {
                "type": "integer",
                "minimum": 1
              },
              "MaxPendingRequests": {
                "type": "integer",
                "minimum": 1
              },
              "MaxRequests": {
                "type": "integer",
                "minimum": 1
              },
              "MeshStatus": {
                "type": "object",
                "properties": {
                  "status": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/MeshStatusCode"
                      },
                      {
                        "description": "The current mesh status."
                      }
                    ]
                  }
                },
                "description": "An object that represents the status of a service mesh."
              },
              "MeshRef": {
                "type": "object",
                "required": [
                  "arn",
                  "createdAt",
                  "lastUpdatedAt",
                  "meshName",
                  "meshOwner",
                  "resourceOwner",
                  "version"
                ],
                "properties": {
                  "arn": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Arn"
                      },
                      {
                        "description": "The full Amazon Resource Name (ARN) of the service mesh."
                      }
                    ]
                  },
                  "createdAt": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Timestamp"
                      },
                      {
                        "description": "The Unix epoch timestamp in seconds for when the resource was created."
                      }
                    ]
                  },
                  "lastUpdatedAt": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Timestamp"
                      },
                      {
                        "description": "The Unix epoch timestamp in seconds for when the resource was last updated."
                      }
                    ]
                  },
                  "meshName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ResourceName"
                      },
                      {
                        "description": "The name of the service mesh."
                      }
                    ]
                  },
                  "meshOwner": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/AccountId"
                      },
                      {
                        "description": "The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\">Working with shared meshes</a>."
                      }
                    ]
                  },
                  "resourceOwner": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/AccountId"
                      },
                      {
                        "description": "The Amazon Web Services IAM account ID of the resource owner. If the account ID is not your own, then it's the ID of the mesh owner or of another account that the mesh is shared with. For more information about mesh sharing, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\">Working with shared meshes</a>."
                      }
                    ]
                  },
                  "version": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Long"
                      },
                      {
                        "description": "The version of the resource. Resources are created at version 1, and this version is incremented each time that they're updated."
                      }
                    ]
                  }
                },
                "description": "An object that represents a service mesh returned by a list operation."
              },
              "MeshStatusCode": {
                "type": "string",
                "enum": [
                  "ACTIVE",
                  "INACTIVE",
                  "DELETED"
                ]
              },
              "OutlierDetectionMaxEjectionPercent": {
                "type": "integer",
                "minimum": 0,
                "maximum": 100
              },
              "OutlierDetectionMaxServerErrors": {
                "type": "integer",
                "minimum": 1
              },
              "PercentInt": {
                "type": "integer",
                "minimum": 0,
                "maximum": 100
              },
              "RouteStatus": {
                "type": "object",
                "required": [
                  "status"
                ],
                "properties": {
                  "status": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/RouteStatusCode"
                      },
                      {
                        "description": "The current status for the route."
                      }
                    ]
                  }
                },
                "description": "An object that represents the current status of a route."
              },
              "RouteRef": {
                "type": "object",
                "required": [
                  "arn",
                  "createdAt",
                  "lastUpdatedAt",
                  "meshName",
                  "meshOwner",
                  "resourceOwner",
                  "routeName",
                  "version",
                  "virtualRouterName"
                ],
                "properties": {
                  "arn": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Arn"
                      },
                      {
                        "description": "The full Amazon Resource Name (ARN) for the route."
                      }
                    ]
                  },
                  "createdAt": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Timestamp"
                      },
                      {
                        "description": "The Unix epoch timestamp in seconds for when the resource was created."
                      }
                    ]
                  },
                  "lastUpdatedAt": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Timestamp"
                      },
                      {
                        "description": "The Unix epoch timestamp in seconds for when the resource was last updated."
                      }
                    ]
                  },
                  "meshName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ResourceName"
                      },
                      {
                        "description": "The name of the service mesh that the route resides in."
                      }
                    ]
                  },
                  "meshOwner": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/AccountId"
                      },
                      {
                        "description": "The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\">Working with shared meshes</a>."
                      }
                    ]
                  },
                  "resourceOwner": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/AccountId"
                      },
                      {
                        "description": "The Amazon Web Services IAM account ID of the resource owner. If the account ID is not your own, then it's the ID of the mesh owner or of another account that the mesh is shared with. For more information about mesh sharing, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\">Working with shared meshes</a>."
                      }
                    ]
                  },
                  "routeName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ResourceName"
                      },
                      {
                        "description": "The name of the route."
                      }
                    ]
                  },
                  "version": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Long"
                      },
                      {
                        "description": "The version of the resource. Resources are created at version 1, and this version is incremented each time that they're updated."
                      }
                    ]
                  },
                  "virtualRouterName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ResourceName"
                      },
                      {
                        "description": "The virtual router that the route is associated with."
                      }
                    ]
                  }
                },
                "description": "An object that represents a route returned by a list operation."
              },
              "RouteStatusCode": {
                "type": "string",
                "enum": [
                  "ACTIVE",
                  "INACTIVE",
                  "DELETED"
                ]
              },
              "SubjectAlternativeName": {
                "type": "string",
                "minLength": 1,
                "maxLength": 254
              },
              "SubjectAlternativeNameList": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SubjectAlternativeName"
                }
              },
              "SubjectAlternativeNameMatchers": {
                "type": "object",
                "required": [
                  "exact"
                ],
                "properties": {
                  "exact": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/SubjectAlternativeNameList"
                      },
                      {
                        "description": "The values sent must match the specified values exactly."
                      }
                    ]
                  }
                },
                "description": "An object that represents the methods by which a subject alternative name on a peer Transport Layer Security (TLS) certificate can be matched."
              },
              "TagKeyList": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/TagKey"
                },
                "minItems": 0,
                "maxItems": 50
              },
              "TagValue": {
                "type": "string",
                "minLength": 0,
                "maxLength": 256
              },
              "TagResourceInput": {
                "type": "object",
                "required": [
                  "tags"
                ],
                "title": "TagResourceInput",
                "properties": {
                  "tags": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/TagList"
                      },
                      {
                        "description": "The tags to add to the resource. A tag is an array of key-value pairs. Tag keys can have a maximum character length of 128 characters, and tag values can have a maximum length of 256 characters."
                      }
                    ]
                  }
                },
                "description": "<zonbook></zonbook><xhtml></xhtml>"
              },
              "TcpRetryPolicyEvent": {
                "type": "string",
                "enum": [
                  "connection-error"
                ]
              },
              "TcpRouteAction": {
                "type": "object",
                "required": [
                  "weightedTargets"
                ],
                "properties": {
                  "weightedTargets": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/WeightedTargets"
                      },
                      {
                        "description": "An object that represents the targets that traffic is routed to when a request matches the route."
                      }
                    ]
                  }
                },
                "description": "An object that represents the action to take if a match is determined."
              },
              "TcpRouteMatch": {
                "type": "object",
                "properties": {
                  "port": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ListenerPort"
                      },
                      {
                        "description": "The port number to match on."
                      }
                    ]
                  }
                },
                "description": "An object representing the TCP route to match."
              },
              "TlsValidationContextTrust": {
                "type": "object",
                "properties": {
                  "acm": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/TlsValidationContextAcmTrust"
                      },
                      {
                        "description": "A reference to an object that represents a Transport Layer Security (TLS) validation context trust for an Certificate Manager certificate."
                      }
                    ]
                  },
                  "file": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/TlsValidationContextFileTrust"
                      },
                      {
                        "description": "An object that represents a Transport Layer Security (TLS) validation context trust for a local file."
                      }
                    ]
                  },
                  "sds": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/TlsValidationContextSdsTrust"
                      },
                      {
                        "description": "A reference to an object that represents a Transport Layer Security (TLS) Secret Discovery Service validation context trust."
                      }
                    ]
                  }
                },
                "description": "An object that represents a Transport Layer Security (TLS) validation context trust."
              },
              "TlsValidationContextAcmTrust": {
                "type": "object",
                "required": [
                  "certificateAuthorityArns"
                ],
                "properties": {
                  "certificateAuthorityArns": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/CertificateAuthorityArns"
                      },
                      {
                        "description": "One or more ACM Amazon Resource Name (ARN)s."
                      }
                    ]
                  }
                },
                "description": "An object that represents a Transport Layer Security (TLS) validation context trust for an Certificate Manager certificate."
              },
              "UntagResourceInput": {
                "type": "object",
                "required": [
                  "tagKeys"
                ],
                "title": "UntagResourceInput",
                "properties": {
                  "tagKeys": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/TagKeyList"
                      },
                      {
                        "description": "The keys of the tags to be removed."
                      }
                    ]
                  }
                },
                "description": "<zonbook></zonbook><xhtml></xhtml>"
              },
              "UpdateGatewayRouteInput": {
                "type": "object",
                "required": [
                  "spec"
                ],
                "title": "UpdateGatewayRouteInput",
                "properties": {
                  "clientToken": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/String"
                      },
                      {
                        "description": "Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Up to 36 letters, numbers, hyphens, and underscores are allowed."
                      }
                    ]
                  },
                  "spec": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/GatewayRouteSpec"
                      },
                      {
                        "description": "The new gateway route specification to apply. This overwrites the existing data."
                      }
                    ]
                  }
                }
              },
              "UpdateMeshInput": {
                "type": "object",
                "title": "UpdateMeshInput",
                "properties": {
                  "clientToken": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/String"
                      },
                      {
                        "description": "Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Up to 36 letters, numbers, hyphens, and underscores are allowed."
                      }
                    ]
                  },
                  "spec": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/MeshSpec"
                      },
                      {
                        "description": "The service mesh specification to apply."
                      }
                    ]
                  }
                },
                "description": "<zonbook></zonbook><xhtml></xhtml>"
              },
              "UpdateRouteInput": {
                "type": "object",
                "required": [
                  "spec"
                ],
                "title": "UpdateRouteInput",
                "properties": {
                  "clientToken": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/String"
                      },
                      {
                        "description": "Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Up to 36 letters, numbers, hyphens, and underscores are allowed."
                      }
                    ]
                  },
                  "spec": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/RouteSpec"
                      },
                      {
                        "description": "The new route specification to apply. This overwrites the existing data."
                      }
                    ]
                  }
                },
                "description": "<zonbook></zonbook><xhtml></xhtml>"
              },
              "UpdateVirtualGatewayInput": {
                "type": "object",
                "required": [
                  "spec"
                ],
                "title": "UpdateVirtualGatewayInput",
                "properties": {
                  "clientToken": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/String"
                      },
                      {
                        "description": "Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Up to 36 letters, numbers, hyphens, and underscores are allowed."
                      }
                    ]
                  },
                  "spec": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/VirtualGatewaySpec"
                      },
                      {
                        "description": "The new virtual gateway specification to apply. This overwrites the existing data."
                      }
                    ]
                  }
                }
              },
              "UpdateVirtualNodeInput": {
                "type": "object",
                "required": [
                  "spec"
                ],
                "title": "UpdateVirtualNodeInput",
                "properties": {
                  "clientToken": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/String"
                      },
                      {
                        "description": "Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Up to 36 letters, numbers, hyphens, and underscores are allowed."
                      }
                    ]
                  },
                  "spec": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/VirtualNodeSpec"
                      },
                      {
                        "description": "The new virtual node specification to apply. This overwrites the existing data."
                      }
                    ]
                  }
                },
                "description": "<zonbook></zonbook><xhtml></xhtml>"
              },
              "UpdateVirtualRouterInput": {
                "type": "object",
                "required": [
                  "spec"
                ],
                "title": "UpdateVirtualRouterInput",
                "properties": {
                  "clientToken": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/String"
                      },
                      {
                        "description": "Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Up to 36 letters, numbers, hyphens, and underscores are allowed."
                      }
                    ]
                  },
                  "spec": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/VirtualRouterSpec"
                      },
                      {
                        "description": "The new virtual router specification to apply. This overwrites the existing data."
                      }
                    ]
                  }
                },
                "description": "<zonbook></zonbook><xhtml></xhtml>"
              },
              "UpdateVirtualServiceInput": {
                "type": "object",
                "required": [
                  "spec"
                ],
                "title": "UpdateVirtualServiceInput",
                "properties": {
                  "clientToken": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/String"
                      },
                      {
                        "description": "Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Up to 36 letters, numbers, hyphens, and underscores are allowed."
                      }
                    ]
                  },
                  "spec": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/VirtualServiceSpec"
                      },
                      {
                        "description": "The new virtual service specification to apply. This overwrites the existing data."
                      }
                    ]
                  }
                },
                "description": "<zonbook></zonbook><xhtml></xhtml>"
              },
              "VirtualGatewayFileAccessLog": {
                "type": "object",
                "required": [
                  "path"
                ],
                "properties": {
                  "format": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/LoggingFormat"
                      },
                      {
                        "description": "The specified format for the virtual gateway access logs. It can be either <code>json_format</code> or <code>text_format</code>."
                      }
                    ]
                  },
                  "path": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/FilePath"
                      },
                      {
                        "description": "The file path to write access logs to. You can use <code>/dev/stdout</code> to send access logs to standard out and configure your Envoy container to use a log driver, such as <code>awslogs</code>, to export the access logs to a log storage service such as Amazon CloudWatch Logs. You can also specify a path in the Envoy container's file system to write the files to disk."
                      }
                    ]
                  }
                },
                "description": "An object that represents an access log file."
              },
              "VirtualGatewayAccessLog": {
                "type": "object",
                "properties": {
                  "file": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/VirtualGatewayFileAccessLog"
                      },
                      {
                        "description": "The file object to send virtual gateway access logs to."
                      }
                    ]
                  }
                },
                "description": "The access log configuration for a virtual gateway."
              },
              "VirtualGatewayClientPolicy": {
                "type": "object",
                "properties": {
                  "tls": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/VirtualGatewayClientPolicyTls"
                      },
                      {
                        "description": "A reference to an object that represents a Transport Layer Security (TLS) client policy."
                      }
                    ]
                  }
                },
                "description": "An object that represents a client policy."
              },
              "VirtualGatewayCertificateAuthorityArns": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Arn"
                },
                "minItems": 1,
                "maxItems": 3
              },
              "VirtualGatewayClientPolicyTls": {
                "type": "object",
                "required": [
                  "validation"
                ],
                "properties": {
                  "certificate": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/VirtualGatewayClientTlsCertificate"
                      },
                      {
                        "description": "A reference to an object that represents a virtual gateway's client's Transport Layer Security (TLS) certificate."
                      }
                    ]
                  },
                  "enforce": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Boolean"
                      },
                      {
                        "description": "Whether the policy is enforced. The default is <code>True</code>, if a value isn't specified."
                      }
                    ]
                  },
                  "ports": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/PortSet"
                      },
                      {
                        "description": "One or more ports that the policy is enforced for."
                      }
                    ]
                  },
                  "validation": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/VirtualGatewayTlsValidationContext"
                      },
                      {
                        "description": "A reference to an object that represents a Transport Layer Security (TLS) validation context."
                      }
                    ]
                  }
                },
                "description": "An object that represents a Transport Layer Security (TLS) client policy."
              },
              "VirtualGatewayClientTlsCertificate": {
                "type": "object",
                "properties": {
                  "file": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/VirtualGatewayListenerTlsFileCertificate"
                      },
                      {
                        "description": "An object that represents a local file certificate. The certificate must meet specific requirements and you must have proxy authorization enabled. For more information, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/tls.html\"> Transport Layer Security (TLS) </a>."
                      }
                    ]
                  },
                  "sds": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/VirtualGatewayListenerTlsSdsCertificate"
                      },
                      {
                        "description": "A reference to an object that represents a virtual gateway's client's Secret Discovery Service certificate."
                      }
                    ]
                  }
                },
                "description": "An object that represents the virtual gateway's client's Transport Layer Security (TLS) certificate."
              },
              "VirtualGatewayTlsValidationContext": {
                "type": "object",
                "required": [
                  "trust"
                ],
                "properties": {
                  "subjectAlternativeNames": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/SubjectAlternativeNames"
                      },
                      {
                        "description": "A reference to an object that represents the SANs for a virtual gateway's listener's Transport Layer Security (TLS) validation context."
                      }
                    ]
                  },
                  "trust": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/VirtualGatewayTlsValidationContextTrust"
                      },
                      {
                        "description": "A reference to where to retrieve the trust chain when validating a peer’s Transport Layer Security (TLS) certificate."
                      }
                    ]
                  }
                },
                "description": "An object that represents a Transport Layer Security (TLS) validation context."
              },
              "VirtualGatewayListenerTlsFileCertificate": {
                "type": "object",
                "required": [
                  "certificateChain",
                  "privateKey"
                ],
                "properties": {
                  "certificateChain": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/FilePath"
                      },
                      {
                        "description": "The certificate chain for the certificate."
                      }
                    ]
                  },
                  "privateKey": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/FilePath"
                      },
                      {
                        "description": "The private key for a certificate stored on the file system of the mesh endpoint that the proxy is running on."
                      }
                    ]
                  }
                },
                "description": "An object that represents a local file certificate. The certificate must meet specific requirements and you must have proxy authorization enabled. For more information, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/tls.html#virtual-node-tls-prerequisites\">Transport Layer Security (TLS)</a>."
              },
              "VirtualGatewayListenerTlsSdsCertificate": {
                "type": "object",
                "required": [
                  "secretName"
                ],
                "properties": {
                  "secretName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/VirtualGatewaySdsSecretName"
                      },
                      {
                        "description": "A reference to an object that represents the name of the secret secret requested from the Secret Discovery Service provider representing Transport Layer Security (TLS) materials like a certificate or certificate chain."
                      }
                    ]
                  }
                },
                "description": "An object that represents the virtual gateway's listener's Secret Discovery Service certificate.The proxy must be configured with a local SDS provider via a Unix Domain Socket. See App Mesh<a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/tls.html\">TLS documentation</a> for more info. "
              },
              "VirtualGatewayGrpcConnectionPool": {
                "type": "object",
                "required": [
                  "maxRequests"
                ],
                "properties": {
                  "maxRequests": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/MaxRequests"
                      },
                      {
                        "description": "Maximum number of inflight requests Envoy can concurrently support across hosts in upstream cluster."
                      }
                    ]
                  }
                },
                "description": "An object that represents a type of connection pool."
              },
              "VirtualGatewayHttpConnectionPool": {
                "type": "object",
                "required": [
                  "maxConnections"
                ],
                "properties": {
                  "maxConnections": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/MaxConnections"
                      },
                      {
                        "description": "Maximum number of outbound TCP connections Envoy can establish concurrently with all hosts in upstream cluster."
                      }
                    ]
                  },
                  "maxPendingRequests": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/MaxPendingRequests"
                      },
                      {
                        "description": "Number of overflowing requests after <code>max_connections</code> Envoy will queue to upstream cluster."
                      }
                    ]
                  }
                },
                "description": "An object that represents a type of connection pool."
              },
              "VirtualGatewayHttp2ConnectionPool": {
                "type": "object",
                "required": [
                  "maxRequests"
                ],
                "properties": {
                  "maxRequests": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/MaxRequests"
                      },
                      {
                        "description": "Maximum number of inflight requests Envoy can concurrently support across hosts in upstream cluster."
                      }
                    ]
                  }
                },
                "description": "An object that represents a type of connection pool."
              },
              "VirtualGatewayConnectionPool": {
                "type": "object",
                "properties": {
                  "grpc": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/VirtualGatewayGrpcConnectionPool"
                      },
                      {
                        "description": "An object that represents a type of connection pool. "
                      }
                    ]
                  },
                  "http": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/VirtualGatewayHttpConnectionPool"
                      },
                      {
                        "description": "An object that represents a type of connection pool."
                      }
                    ]
                  },
                  "http2": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/VirtualGatewayHttp2ConnectionPool"
                      },
                      {
                        "description": "An object that represents a type of connection pool."
                      }
                    ]
                  }
                },
                "description": "<p>An object that represents the type of virtual gateway connection pool.</p> <p>Only one protocol is used at a time and should be the same protocol as the one chosen under port mapping.</p> <p>If not present the default value for <code>maxPendingRequests</code> is <code>2147483647</code>.</p>"
              },
              "VirtualGatewayStatus": {
                "type": "object",
                "required": [
                  "status"
                ],
                "properties": {
                  "status": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/VirtualGatewayStatusCode"
                      },
                      {
                        "description": "The current status."
                      }
                    ]
                  }
                },
                "description": "An object that represents the status of the mesh resource."
              },
              "VirtualGatewayHealthCheckIntervalMillis": {
                "type": "integer",
                "minimum": 5000,
                "maximum": 300000
              },
              "VirtualGatewayHealthCheckThreshold": {
                "type": "integer",
                "minimum": 2,
                "maximum": 10
              },
              "VirtualGatewayPortProtocol": {
                "type": "string",
                "enum": [
                  "http",
                  "http2",
                  "grpc"
                ]
              },
              "VirtualGatewayHealthCheckTimeoutMillis": {
                "type": "integer",
                "minimum": 2000,
                "maximum": 60000
              },
              "VirtualGatewayHealthCheckPolicy": {
                "type": "object",
                "required": [
                  "healthyThreshold",
                  "intervalMillis",
                  "protocol",
                  "timeoutMillis",
                  "unhealthyThreshold"
                ],
                "properties": {
                  "healthyThreshold": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/VirtualGatewayHealthCheckThreshold"
                      },
                      {
                        "description": "The number of consecutive successful health checks that must occur before declaring the listener healthy."
                      }
                    ]
                  },
                  "intervalMillis": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/VirtualGatewayHealthCheckIntervalMillis"
                      },
                      {
                        "description": "The time period in milliseconds between each health check execution."
                      }
                    ]
                  },
                  "path": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/String"
                      },
                      {
                        "description": "The destination path for the health check request. This value is only used if the specified protocol is HTTP or HTTP/2. For any other protocol, this value is ignored."
                      }
                    ]
                  },
                  "port": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/PortNumber"
                      },
                      {
                        "description": "The destination port for the health check request. This port must match the port defined in the <a>PortMapping</a> for the listener."
                      }
                    ]
                  },
                  "protocol": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/VirtualGatewayPortProtocol"
                      },
                      {
                        "description": "The protocol for the health check request. If you specify <code>grpc</code>, then your service must conform to the <a href=\"https://github.com/grpc/grpc/blob/master/doc/health-checking.md\">GRPC Health Checking Protocol</a>."
                      }
                    ]
                  },
                  "timeoutMillis": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/VirtualGatewayHealthCheckTimeoutMillis"
                      },
                      {
                        "description": "The amount of time to wait when receiving a response from the health check, in milliseconds."
                      }
                    ]
                  },
                  "unhealthyThreshold": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/VirtualGatewayHealthCheckThreshold"
                      },
                      {
                        "description": "The number of consecutive failed health checks that must occur before declaring a virtual gateway unhealthy."
                      }
                    ]
                  }
                },
                "description": "An object that represents the health check policy for a virtual gateway's listener."
              },
              "VirtualGatewayRef": {
                "type": "object",
                "required": [
                  "arn",
                  "createdAt",
                  "lastUpdatedAt",
                  "meshName",
                  "meshOwner",
                  "resourceOwner",
                  "version",
                  "virtualGatewayName"
                ],
                "properties": {
                  "arn": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Arn"
                      },
                      {
                        "description": "The full Amazon Resource Name (ARN) for the resource."
                      }
                    ]
                  },
                  "createdAt": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Timestamp"
                      },
                      {
                        "description": "The Unix epoch timestamp in seconds for when the resource was created."
                      }
                    ]
                  },
                  "lastUpdatedAt": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Timestamp"
                      },
                      {
                        "description": "The Unix epoch timestamp in seconds for when the resource was last updated."
                      }
                    ]
                  },
                  "meshName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ResourceName"
                      },
                      {
                        "description": "The name of the service mesh that the resource resides in."
                      }
                    ]
                  },
                  "meshOwner": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/AccountId"
                      },
                      {
                        "description": "The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\">Working with shared meshes</a>."
                      }
                    ]
                  },
                  "resourceOwner": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/AccountId"
                      },
                      {
                        "description": "The Amazon Web Services IAM account ID of the resource owner. If the account ID is not your own, then it's the ID of the mesh owner or of another account that the mesh is shared with. For more information about mesh sharing, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\">Working with shared meshes</a>."
                      }
                    ]
                  },
                  "version": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Long"
                      },
                      {
                        "description": "The version of the resource. Resources are created at version 1, and this version is incremented each time that they're updated."
                      }
                    ]
                  },
                  "virtualGatewayName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ResourceName"
                      },
                      {
                        "description": "The name of the resource."
                      }
                    ]
                  }
                },
                "description": "An object that represents a virtual gateway returned by a list operation."
              },
              "VirtualGatewayPortMapping": {
                "type": "object",
                "required": [
                  "port",
                  "protocol"
                ],
                "properties": {
                  "port": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/PortNumber"
                      },
                      {
                        "description": "The port used for the port mapping. Specify one protocol."
                      }
                    ]
                  },
                  "protocol": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/VirtualGatewayPortProtocol"
                      },
                      {
                        "description": "The protocol used for the port mapping."
                      }
                    ]
                  }
                },
                "description": "An object that represents a port mapping."
              },
              "VirtualGatewayListenerTls": {
                "type": "object",
                "required": [
                  "certificate",
                  "mode"
                ],
                "properties": {
                  "certificate": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/VirtualGatewayListenerTlsCertificate"
                      },
                      {
                        "description": "An object that represents a Transport Layer Security (TLS) certificate."
                      }
                    ]
                  },
                  "mode": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/VirtualGatewayListenerTlsMode"
                      },
                      {
                        "description": "<p>Specify one of the following modes.</p> <ul> <li> <p> <b/>STRICT – Listener only accepts connections with TLS enabled. </p> </li> <li> <p> <b/>PERMISSIVE – Listener accepts connections with or without TLS enabled.</p> </li> <li> <p> <b/>DISABLED – Listener only accepts connections without TLS. </p> </li> </ul>"
                      }
                    ]
                  },
                  "validation": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/VirtualGatewayListenerTlsValidationContext"
                      },
                      {
                        "description": "A reference to an object that represents a virtual gateway's listener's Transport Layer Security (TLS) validation context."
                      }
                    ]
                  }
                },
                "description": "An object that represents the Transport Layer Security (TLS) properties for a listener."
              },
              "VirtualGatewayListener": {
                "type": "object",
                "required": [
                  "portMapping"
                ],
                "properties": {
                  "connectionPool": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/VirtualGatewayConnectionPool"
                      },
                      {
                        "description": "The connection pool information for the virtual gateway listener."
                      }
                    ]
                  },
                  "healthCheck": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/VirtualGatewayHealthCheckPolicy"
                      },
                      {
                        "description": "The health check information for the listener."
                      }
                    ]
                  },
                  "portMapping": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/VirtualGatewayPortMapping"
                      },
                      {
                        "description": "The port mapping information for the listener."
                      }
                    ]
                  },
                  "tls": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/VirtualGatewayListenerTls"
                      },
                      {
                        "description": "A reference to an object that represents the Transport Layer Security (TLS) properties for the listener."
                      }
                    ]
                  }
                },
                "description": "An object that represents a listener for a virtual gateway."
              },
              "VirtualGatewayListenerTlsCertificate": {
                "type": "object",
                "properties": {
                  "acm": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/VirtualGatewayListenerTlsAcmCertificate"
                      },
                      {
                        "description": "A reference to an object that represents an Certificate Manager certificate."
                      }
                    ]
                  },
                  "file": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/VirtualGatewayListenerTlsFileCertificate"
                      },
                      {
                        "description": "A reference to an object that represents a local file certificate."
                      }
                    ]
                  },
                  "sds": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/VirtualGatewayListenerTlsSdsCertificate"
                      },
                      {
                        "description": "A reference to an object that represents a virtual gateway's listener's Secret Discovery Service certificate."
                      }
                    ]
                  }
                },
                "description": "An object that represents a listener's Transport Layer Security (TLS) certificate."
              },
              "VirtualGatewayListenerTlsMode": {
                "type": "string",
                "enum": [
                  "STRICT",
                  "PERMISSIVE",
                  "DISABLED"
                ]
              },
              "VirtualGatewayListenerTlsValidationContext": {
                "type": "object",
                "required": [
                  "trust"
                ],
                "properties": {
                  "subjectAlternativeNames": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/SubjectAlternativeNames"
                      },
                      {
                        "description": "A reference to an object that represents the SANs for a virtual gateway listener's Transport Layer Security (TLS) validation context."
                      }
                    ]
                  },
                  "trust": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/VirtualGatewayListenerTlsValidationContextTrust"
                      },
                      {
                        "description": "A reference to where to retrieve the trust chain when validating a peer’s Transport Layer Security (TLS) certificate."
                      }
                    ]
                  }
                },
                "description": "An object that represents a virtual gateway's listener's Transport Layer Security (TLS) validation context."
              },
              "VirtualGatewayListenerTlsAcmCertificate": {
                "type": "object",
                "required": [
                  "certificateArn"
                ],
                "properties": {
                  "certificateArn": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Arn"
                      },
                      {
                        "description": "The Amazon Resource Name (ARN) for the certificate. The certificate must meet specific requirements and you must have proxy authorization enabled. For more information, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/tls.html#virtual-node-tls-prerequisites\">Transport Layer Security (TLS)</a>."
                      }
                    ]
                  }
                },
                "description": "An object that represents an Certificate Manager certificate."
              },
              "VirtualGatewaySdsSecretName": {
                "type": "string"
              },
              "VirtualGatewayListenerTlsValidationContextTrust": {
                "type": "object",
                "properties": {
                  "file": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/VirtualGatewayTlsValidationContextFileTrust"
                      },
                      {
                        "description": "An object that represents a Transport Layer Security (TLS) validation context trust for a local file."
                      }
                    ]
                  },
                  "sds": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/VirtualGatewayTlsValidationContextSdsTrust"
                      },
                      {
                        "description": "A reference to an object that represents a virtual gateway's listener's Transport Layer Security (TLS) Secret Discovery Service validation context trust."
                      }
                    ]
                  }
                },
                "description": "An object that represents a virtual gateway's listener's Transport Layer Security (TLS) validation context trust."
              },
              "VirtualGatewayTlsValidationContextFileTrust": {
                "type": "object",
                "required": [
                  "certificateChain"
                ],
                "properties": {
                  "certificateChain": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/FilePath"
                      },
                      {
                        "description": "The certificate trust chain for a certificate stored on the file system of the virtual node that the proxy is running on."
                      }
                    ]
                  }
                },
                "description": "An object that represents a Transport Layer Security (TLS) validation context trust for a local file."
              },
              "VirtualGatewayTlsValidationContextSdsTrust": {
                "type": "object",
                "required": [
                  "secretName"
                ],
                "properties": {
                  "secretName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/VirtualGatewaySdsSecretName"
                      },
                      {
                        "description": "A reference to an object that represents the name of the secret for a virtual gateway's Transport Layer Security (TLS) Secret Discovery Service validation context trust."
                      }
                    ]
                  }
                },
                "description": "An object that represents a virtual gateway's listener's Transport Layer Security (TLS) Secret Discovery Service validation context trust. The proxy must be configured with a local SDS provider via a Unix Domain Socket. See App Mesh <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/tls.html\">TLS documentation</a> for more info."
              },
              "VirtualGatewayStatusCode": {
                "type": "string",
                "enum": [
                  "ACTIVE",
                  "INACTIVE",
                  "DELETED"
                ]
              },
              "VirtualGatewayTlsValidationContextTrust": {
                "type": "object",
                "properties": {
                  "acm": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/VirtualGatewayTlsValidationContextAcmTrust"
                      },
                      {
                        "description": "A reference to an object that represents a Transport Layer Security (TLS) validation context trust for an Certificate Manager certificate."
                      }
                    ]
                  },
                  "file": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/VirtualGatewayTlsValidationContextFileTrust"
                      },
                      {
                        "description": "An object that represents a Transport Layer Security (TLS) validation context trust for a local file."
                      }
                    ]
                  },
                  "sds": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/VirtualGatewayTlsValidationContextSdsTrust"
                      },
                      {
                        "description": "A reference to an object that represents a virtual gateway's Transport Layer Security (TLS) Secret Discovery Service validation context trust."
                      }
                    ]
                  }
                },
                "description": "An object that represents a Transport Layer Security (TLS) validation context trust."
              },
              "VirtualGatewayTlsValidationContextAcmTrust": {
                "type": "object",
                "required": [
                  "certificateAuthorityArns"
                ],
                "properties": {
                  "certificateAuthorityArns": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/VirtualGatewayCertificateAuthorityArns"
                      },
                      {
                        "description": "One or more ACM Amazon Resource Name (ARN)s."
                      }
                    ]
                  }
                },
                "description": "An object that represents a Transport Layer Security (TLS) validation context trust for an Certificate Manager certificate."
              },
              "VirtualNodeGrpcConnectionPool": {
                "type": "object",
                "required": [
                  "maxRequests"
                ],
                "properties": {
                  "maxRequests": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/MaxRequests"
                      },
                      {
                        "description": "Maximum number of inflight requests Envoy can concurrently support across hosts in upstream cluster."
                      }
                    ]
                  }
                },
                "description": "An object that represents a type of connection pool."
              },
              "VirtualNodeHttpConnectionPool": {
                "type": "object",
                "required": [
                  "maxConnections"
                ],
                "properties": {
                  "maxConnections": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/MaxConnections"
                      },
                      {
                        "description": "Maximum number of outbound TCP connections Envoy can establish concurrently with all hosts in upstream cluster."
                      }
                    ]
                  },
                  "maxPendingRequests": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/MaxPendingRequests"
                      },
                      {
                        "description": "Number of overflowing requests after <code>max_connections</code> Envoy will queue to upstream cluster."
                      }
                    ]
                  }
                },
                "description": "An object that represents a type of connection pool."
              },
              "VirtualNodeHttp2ConnectionPool": {
                "type": "object",
                "required": [
                  "maxRequests"
                ],
                "properties": {
                  "maxRequests": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/MaxRequests"
                      },
                      {
                        "description": "Maximum number of inflight requests Envoy can concurrently support across hosts in upstream cluster."
                      }
                    ]
                  }
                },
                "description": "An object that represents a type of connection pool."
              },
              "VirtualNodeTcpConnectionPool": {
                "type": "object",
                "required": [
                  "maxConnections"
                ],
                "properties": {
                  "maxConnections": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/MaxConnections"
                      },
                      {
                        "description": "Maximum number of outbound TCP connections Envoy can establish concurrently with all hosts in upstream cluster."
                      }
                    ]
                  }
                },
                "description": "An object that represents a type of connection pool."
              },
              "VirtualNodeStatus": {
                "type": "object",
                "required": [
                  "status"
                ],
                "properties": {
                  "status": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/VirtualNodeStatusCode"
                      },
                      {
                        "description": "The current status of the virtual node."
                      }
                    ]
                  }
                },
                "description": "An object that represents the current status of the virtual node."
              },
              "VirtualNodeRef": {
                "type": "object",
                "required": [
                  "arn",
                  "createdAt",
                  "lastUpdatedAt",
                  "meshName",
                  "meshOwner",
                  "resourceOwner",
                  "version",
                  "virtualNodeName"
                ],
                "properties": {
                  "arn": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Arn"
                      },
                      {
                        "description": "The full Amazon Resource Name (ARN) for the virtual node."
                      }
                    ]
                  },
                  "createdAt": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Timestamp"
                      },
                      {
                        "description": "The Unix epoch timestamp in seconds for when the resource was created."
                      }
                    ]
                  },
                  "lastUpdatedAt": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Timestamp"
                      },
                      {
                        "description": "The Unix epoch timestamp in seconds for when the resource was last updated."
                      }
                    ]
                  },
                  "meshName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ResourceName"
                      },
                      {
                        "description": "The name of the service mesh that the virtual node resides in."
                      }
                    ]
                  },
                  "meshOwner": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/AccountId"
                      },
                      {
                        "description": "The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\">Working with shared meshes</a>."
                      }
                    ]
                  },
                  "resourceOwner": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/AccountId"
                      },
                      {
                        "description": "The Amazon Web Services IAM account ID of the resource owner. If the account ID is not your own, then it's the ID of the mesh owner or of another account that the mesh is shared with. For more information about mesh sharing, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\">Working with shared meshes</a>."
                      }
                    ]
                  },
                  "version": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Long"
                      },
                      {
                        "description": "The version of the resource. Resources are created at version 1, and this version is incremented each time that they're updated."
                      }
                    ]
                  },
                  "virtualNodeName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ResourceName"
                      },
                      {
                        "description": "The name of the virtual node."
                      }
                    ]
                  }
                },
                "description": "An object that represents a virtual node returned by a list operation."
              },
              "VirtualNodeServiceProvider": {
                "type": "object",
                "required": [
                  "virtualNodeName"
                ],
                "properties": {
                  "virtualNodeName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ResourceName"
                      },
                      {
                        "description": "The name of the virtual node that is acting as a service provider."
                      }
                    ]
                  }
                },
                "description": "An object that represents a virtual node service provider."
              },
              "VirtualNodeStatusCode": {
                "type": "string",
                "enum": [
                  "ACTIVE",
                  "INACTIVE",
                  "DELETED"
                ]
              },
              "VirtualRouterStatus": {
                "type": "object",
                "required": [
                  "status"
                ],
                "properties": {
                  "status": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/VirtualRouterStatusCode"
                      },
                      {
                        "description": "The current status of the virtual router."
                      }
                    ]
                  }
                },
                "description": "An object that represents the status of a virtual router. "
              },
              "VirtualRouterRef": {
                "type": "object",
                "required": [
                  "arn",
                  "createdAt",
                  "lastUpdatedAt",
                  "meshName",
                  "meshOwner",
                  "resourceOwner",
                  "version",
                  "virtualRouterName"
                ],
                "properties": {
                  "arn": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Arn"
                      },
                      {
                        "description": "The full Amazon Resource Name (ARN) for the virtual router."
                      }
                    ]
                  },
                  "createdAt": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Timestamp"
                      },
                      {
                        "description": "The Unix epoch timestamp in seconds for when the resource was created."
                      }
                    ]
                  },
                  "lastUpdatedAt": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Timestamp"
                      },
                      {
                        "description": "The Unix epoch timestamp in seconds for when the resource was last updated."
                      }
                    ]
                  },
                  "meshName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ResourceName"
                      },
                      {
                        "description": "The name of the service mesh that the virtual router resides in."
                      }
                    ]
                  },
                  "meshOwner": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/AccountId"
                      },
                      {
                        "description": "The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\">Working with shared meshes</a>."
                      }
                    ]
                  },
                  "resourceOwner": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/AccountId"
                      },
                      {
                        "description": "The Amazon Web Services IAM account ID of the resource owner. If the account ID is not your own, then it's the ID of the mesh owner or of another account that the mesh is shared with. For more information about mesh sharing, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\">Working with shared meshes</a>."
                      }
                    ]
                  },
                  "version": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Long"
                      },
                      {
                        "description": "The version of the resource. Resources are created at version 1, and this version is incremented each time that they're updated."
                      }
                    ]
                  },
                  "virtualRouterName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ResourceName"
                      },
                      {
                        "description": "The name of the virtual router."
                      }
                    ]
                  }
                },
                "description": "An object that represents a virtual router returned by a list operation."
              },
              "VirtualRouterListener": {
                "type": "object",
                "required": [
                  "portMapping"
                ],
                "properties": {
                  "portMapping": {
                    "$ref": "#/components/schemas/PortMapping"
                  }
                },
                "description": "An object that represents a virtual router listener."
              },
              "VirtualRouterServiceProvider": {
                "type": "object",
                "required": [
                  "virtualRouterName"
                ],
                "properties": {
                  "virtualRouterName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ResourceName"
                      },
                      {
                        "description": "The name of the virtual router that is acting as a service provider."
                      }
                    ]
                  }
                },
                "description": "An object that represents a virtual node service provider."
              },
              "VirtualRouterStatusCode": {
                "type": "string",
                "enum": [
                  "ACTIVE",
                  "INACTIVE",
                  "DELETED"
                ]
              },
              "VirtualServiceStatus": {
                "type": "object",
                "required": [
                  "status"
                ],
                "properties": {
                  "status": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/VirtualServiceStatusCode"
                      },
                      {
                        "description": "The current status of the virtual service."
                      }
                    ]
                  }
                },
                "description": "An object that represents the status of a virtual service."
              },
              "VirtualServiceRef": {
                "type": "object",
                "required": [
                  "arn",
                  "createdAt",
                  "lastUpdatedAt",
                  "meshName",
                  "meshOwner",
                  "resourceOwner",
                  "version",
                  "virtualServiceName"
                ],
                "properties": {
                  "arn": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Arn"
                      },
                      {
                        "description": "The full Amazon Resource Name (ARN) for the virtual service."
                      }
                    ]
                  },
                  "createdAt": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Timestamp"
                      },
                      {
                        "description": "The Unix epoch timestamp in seconds for when the resource was created."
                      }
                    ]
                  },
                  "lastUpdatedAt": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Timestamp"
                      },
                      {
                        "description": "The Unix epoch timestamp in seconds for when the resource was last updated."
                      }
                    ]
                  },
                  "meshName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ResourceName"
                      },
                      {
                        "description": "The name of the service mesh that the virtual service resides in."
                      }
                    ]
                  },
                  "meshOwner": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/AccountId"
                      },
                      {
                        "description": "The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\">Working with shared meshes</a>."
                      }
                    ]
                  },
                  "resourceOwner": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/AccountId"
                      },
                      {
                        "description": "The Amazon Web Services IAM account ID of the resource owner. If the account ID is not your own, then it's the ID of the mesh owner or of another account that the mesh is shared with. For more information about mesh sharing, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\">Working with shared meshes</a>."
                      }
                    ]
                  },
                  "version": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Long"
                      },
                      {
                        "description": "The version of the resource. Resources are created at version 1, and this version is incremented each time that they're updated."
                      }
                    ]
                  },
                  "virtualServiceName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ServiceName"
                      },
                      {
                        "description": "The name of the virtual service."
                      }
                    ]
                  }
                },
                "description": "An object that represents a virtual service returned by a list operation."
              },
              "VirtualServiceStatusCode": {
                "type": "string",
                "enum": [
                  "ACTIVE",
                  "INACTIVE",
                  "DELETED"
                ]
              },
              "WeightedTarget": {
                "type": "object",
                "required": [
                  "virtualNode",
                  "weight"
                ],
                "properties": {
                  "port": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ListenerPort"
                      },
                      {
                        "description": "The targeted port of the weighted object."
                      }
                    ]
                  },
                  "virtualNode": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ResourceName"
                      },
                      {
                        "description": "The virtual node to associate with the weighted target."
                      }
                    ]
                  },
                  "weight": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/PercentInt"
                      },
                      {
                        "description": "The relative weight of the weighted target."
                      }
                    ]
                  }
                },
                "description": "An object that represents a target and its relative weight. Traffic is distributed across targets according to their relative weight. For example, a weighted target with a relative weight of 50 receives five times as much traffic as one with a relative weight of 10. The total weight for all targets combined must be less than or equal to 100."
              }
            }
          },
          "security": [
            {
              "hmac": []
            }
          ]
        }
        // Exercise and evaluate
        assert.ok(typeof schema === 'object')
    })
    it('should match schema7', () => {
        // Setup
        const schema: OpenAPI = {
          "openapi": "3.0.0",
          "info": {
            "version": "2020-12-01",
            "x-release": "v4",
            "title": "AWS Fault Injection Simulator",
            "description": "Fault Injection Simulator is a managed service that enables you to perform fault injection experiments on your Amazon Web Services workloads. For more information, see the <a href=\"https://docs.aws.amazon.com/fis/latest/userguide/\">Fault Injection Simulator User Guide</a>.",
            "x-logo": {
              "url": "https://api.apis.guru/v2/cache/logo/https_twitter.com_awscloud_profile_image.png",
              "backgroundColor": "#FFFFFF"
            },
            "termsOfService": "https://aws.amazon.com/service-terms/",
            "contact": {
              "name": "Mike Ralphson",
              "email": "mike.ralphson@gmail.com",
              "url": "https://github.com/mermade/aws2openapi",
              "x-twitter": "PermittedSoc"
            },
            "license": {
              "name": "Apache 2.0 License",
              "url": "http://www.apache.org/licenses/"
            },
            "x-providerName": "amazonaws.com",
            "x-serviceName": "fis",
            "x-aws-signingName": "fis",
            "x-origin": [
              {
                "contentType": "application/json",
                "url": "https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/fis-2020-12-01.normal.json",
                "converter": {
                  "url": "https://github.com/mermade/aws2openapi",
                  "version": "1.0.0"
                },
                "x-apisguru-driver": "external"
              }
            ],
            "x-apiClientRegistration": {
              "url": "https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct"
            },
            "x-apisguru-categories": [
              "cloud"
            ],
            "x-preferred": true
          },
          "externalDocs": {
            "description": "Amazon Web Services documentation",
            "url": "https://docs.aws.amazon.com/fis/"
          },
          "servers": [
            {
              "url": "http://fis.{region}.amazonaws.com",
              "variables": {
                "region": {
                  "description": "The AWS region",
                  "enum": [
                    "us-east-1",
                    "us-east-2",
                    "us-west-1",
                    "us-west-2",
                    "us-gov-west-1",
                    "us-gov-east-1",
                    "ca-central-1",
                    "eu-north-1",
                    "eu-west-1",
                    "eu-west-2",
                    "eu-west-3",
                    "eu-central-1",
                    "eu-south-1",
                    "af-south-1",
                    "ap-northeast-1",
                    "ap-northeast-2",
                    "ap-northeast-3",
                    "ap-southeast-1",
                    "ap-southeast-2",
                    "ap-east-1",
                    "ap-south-1",
                    "sa-east-1",
                    "me-south-1"
                  ],
                  "default": "us-east-1"
                }
              },
              "description": "The FIS multi-region endpoint"
            },
            {
              "url": "https://fis.{region}.amazonaws.com",
              "variables": {
                "region": {
                  "description": "The AWS region",
                  "enum": [
                    "us-east-1",
                    "us-east-2",
                    "us-west-1",
                    "us-west-2",
                    "us-gov-west-1",
                    "us-gov-east-1",
                    "ca-central-1",
                    "eu-north-1",
                    "eu-west-1",
                    "eu-west-2",
                    "eu-west-3",
                    "eu-central-1",
                    "eu-south-1",
                    "af-south-1",
                    "ap-northeast-1",
                    "ap-northeast-2",
                    "ap-northeast-3",
                    "ap-southeast-1",
                    "ap-southeast-2",
                    "ap-east-1",
                    "ap-south-1",
                    "sa-east-1",
                    "me-south-1"
                  ],
                  "default": "us-east-1"
                }
              },
              "description": "The FIS multi-region endpoint"
            },
            {
              "url": "http://fis.{region}.amazonaws.com.cn",
              "variables": {
                "region": {
                  "description": "The AWS region",
                  "enum": [
                    "cn-north-1",
                    "cn-northwest-1"
                  ],
                  "default": "cn-north-1"
                }
              },
              "description": "The FIS endpoint for China (Beijing) and China (Ningxia)"
            },
            {
              "url": "https://fis.{region}.amazonaws.com.cn",
              "variables": {
                "region": {
                  "description": "The AWS region",
                  "enum": [
                    "cn-north-1",
                    "cn-northwest-1"
                  ],
                  "default": "cn-north-1"
                }
              },
              "description": "The FIS endpoint for China (Beijing) and China (Ningxia)"
            }
          ],
          "paths": {
            "/experimentTemplates": {
              "post": {
                "operationId": "CreateExperimentTemplate",
                "description": "<p>Creates an experiment template. </p> <p>An experiment template includes the following components:</p> <ul> <li> <p> <b>Targets</b>: A target can be a specific resource in your Amazon Web Services environment, or one or more resources that match criteria that you specify, for example, resources that have specific tags.</p> </li> <li> <p> <b>Actions</b>: The actions to carry out on the target. You can specify multiple actions, the duration of each action, and when to start each action during an experiment.</p> </li> <li> <p> <b>Stop conditions</b>: If a stop condition is triggered while an experiment is running, the experiment is automatically stopped. You can define a stop condition as a CloudWatch alarm.</p> </li> </ul> <p>For more information, see <a href=\"https://docs.aws.amazon.com/fis/latest/userguide/experiment-templates.html\">Experiment templates</a> in the <i>Fault Injection Simulator User Guide</i>.</p>",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/CreateExperimentTemplateResponse"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "ValidationException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ValidationException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "ConflictException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ConflictException"
                        }
                      }
                    }
                  },
                  "482": {
                    "description": "ResourceNotFoundException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ResourceNotFoundException"
                        }
                      }
                    }
                  },
                  "483": {
                    "description": "ServiceQuotaExceededException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ServiceQuotaExceededException"
                        }
                      }
                    }
                  }
                },
                "parameters": [],
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "required": [
                          "clientToken",
                          "description",
                          "stopConditions",
                          "actions",
                          "roleArn"
                        ],
                        "properties": {
                          "clientToken": {
                            "description": "Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.",
                            "type": "string",
                            "pattern": "[\\S]+",
                            "minLength": 1,
                            "maxLength": 1024
                          },
                          "description": {
                            "description": "A description for the experiment template.",
                            "type": "string",
                            "pattern": "[\\s\\S]+",
                            "maxLength": 512
                          },
                          "stopConditions": {
                            "description": "The stop conditions.",
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/CreateExperimentTemplateStopConditionInput"
                            }
                          },
                          "targets": {
                            "description": "The targets for the experiment.",
                            "type": "object",
                            "additionalProperties": {
                              "$ref": "#/components/schemas/CreateExperimentTemplateTargetInput"
                            }
                          },
                          "actions": {
                            "description": "The actions for the experiment.",
                            "type": "object",
                            "additionalProperties": {
                              "$ref": "#/components/schemas/CreateExperimentTemplateActionInput"
                            }
                          },
                          "roleArn": {
                            "description": "The Amazon Resource Name (ARN) of an IAM role that grants the FIS service permission to perform service actions on your behalf.",
                            "type": "string",
                            "pattern": "[\\S]+",
                            "minLength": 20,
                            "maxLength": 2048
                          },
                          "tags": {
                            "description": "The tags to apply to the experiment template.",
                            "type": "object",
                            "maxProperties": 50,
                            "additionalProperties": {
                              "$ref": "#/components/schemas/TagValue"
                            }
                          },
                          "logConfiguration": {
                            "description": "Specifies the configuration for experiment logging.",
                            "type": "object",
                            "properties": {
                              "cloudWatchLogsConfiguration": {
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/ExperimentTemplateCloudWatchLogsLogConfigurationInput"
                                  },
                                  {
                                    "description": "The configuration for experiment logging to Amazon CloudWatch Logs."
                                  }
                                ]
                              },
                              "s3Configuration": {
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/ExperimentTemplateS3LogConfigurationInput"
                                  },
                                  {
                                    "description": "The configuration for experiment logging to Amazon S3."
                                  }
                                ]
                              },
                              "logSchemaVersion": {
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/LogSchemaVersion"
                                  },
                                  {
                                    "description": "The schema version."
                                  }
                                ]
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "parameters": [
                {
                  "$ref": "#/components/parameters/X-Amz-Content-Sha256"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Date"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Algorithm"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Credential"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Security-Token"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Signature"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-SignedHeaders"
                }
              ],
              "get": {
                "operationId": "ListExperimentTemplates",
                "description": "Lists your experiment templates.",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ListExperimentTemplatesResponse"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "ValidationException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ValidationException"
                        }
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "maxResults",
                    "in": "query",
                    "required": false,
                    "description": "The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.",
                    "schema": {
                      "type": "integer",
                      "minimum": 1,
                      "maximum": 100
                    }
                  },
                  {
                    "name": "nextToken",
                    "in": "query",
                    "required": false,
                    "description": "The token for the next page of results.",
                    "schema": {
                      "type": "string",
                      "pattern": "[\\S]+",
                      "minLength": 1,
                      "maxLength": 1024
                    }
                  }
                ]
              }
            },
            "/experimentTemplates/{id}": {
              "delete": {
                "operationId": "DeleteExperimentTemplate",
                "description": "Deletes the specified experiment template.",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/DeleteExperimentTemplateResponse"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "ValidationException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ValidationException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "ResourceNotFoundException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ResourceNotFoundException"
                        }
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "description": "The ID of the experiment template.",
                    "schema": {
                      "type": "string",
                      "pattern": "[\\S]+",
                      "maxLength": 64
                    }
                  }
                ]
              },
              "parameters": [
                {
                  "$ref": "#/components/parameters/X-Amz-Content-Sha256"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Date"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Algorithm"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Credential"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Security-Token"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Signature"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-SignedHeaders"
                }
              ],
              "get": {
                "operationId": "GetExperimentTemplate",
                "description": "Gets information about the specified experiment template.",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/GetExperimentTemplateResponse"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "ValidationException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ValidationException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "ResourceNotFoundException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ResourceNotFoundException"
                        }
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "description": "The ID of the experiment template.",
                    "schema": {
                      "type": "string",
                      "pattern": "[\\S]+",
                      "maxLength": 64
                    }
                  }
                ]
              },
              "patch": {
                "operationId": "UpdateExperimentTemplate",
                "description": "Updates the specified experiment template.",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/UpdateExperimentTemplateResponse"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "ValidationException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ValidationException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "ResourceNotFoundException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ResourceNotFoundException"
                        }
                      }
                    }
                  },
                  "482": {
                    "description": "ServiceQuotaExceededException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ServiceQuotaExceededException"
                        }
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "description": "The ID of the experiment template.",
                    "schema": {
                      "type": "string",
                      "pattern": "[\\S]+",
                      "maxLength": 64
                    }
                  }
                ],
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "description": {
                            "description": "A description for the template.",
                            "type": "string",
                            "pattern": "[\\s\\S]+",
                            "maxLength": 512
                          },
                          "stopConditions": {
                            "description": "The stop conditions for the experiment.",
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/UpdateExperimentTemplateStopConditionInput"
                            }
                          },
                          "targets": {
                            "description": "The targets for the experiment.",
                            "type": "object",
                            "additionalProperties": {
                              "$ref": "#/components/schemas/UpdateExperimentTemplateTargetInput"
                            }
                          },
                          "actions": {
                            "description": "The actions for the experiment.",
                            "type": "object",
                            "additionalProperties": {
                              "$ref": "#/components/schemas/UpdateExperimentTemplateActionInputItem"
                            }
                          },
                          "roleArn": {
                            "description": "The Amazon Resource Name (ARN) of an IAM role that grants the FIS service permission to perform service actions on your behalf.",
                            "type": "string",
                            "pattern": "[\\S]+",
                            "minLength": 20,
                            "maxLength": 2048
                          },
                          "logConfiguration": {
                            "description": "Specifies the configuration for experiment logging.",
                            "type": "object",
                            "properties": {
                              "cloudWatchLogsConfiguration": {
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/ExperimentTemplateCloudWatchLogsLogConfigurationInput"
                                  },
                                  {
                                    "description": "The configuration for experiment logging to Amazon CloudWatch Logs."
                                  }
                                ]
                              },
                              "s3Configuration": {
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/ExperimentTemplateS3LogConfigurationInput"
                                  },
                                  {
                                    "description": "The configuration for experiment logging to Amazon S3."
                                  }
                                ]
                              },
                              "logSchemaVersion": {
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/LogSchemaVersion"
                                  },
                                  {
                                    "description": "The schema version."
                                  }
                                ]
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "/actions/{id}": {
              "get": {
                "operationId": "GetAction",
                "description": "Gets information about the specified FIS action.",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/GetActionResponse"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "ValidationException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ValidationException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "ResourceNotFoundException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ResourceNotFoundException"
                        }
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "description": "The ID of the action.",
                    "schema": {
                      "type": "string",
                      "pattern": "[\\S]+",
                      "maxLength": 128
                    }
                  }
                ]
              },
              "parameters": [
                {
                  "$ref": "#/components/parameters/X-Amz-Content-Sha256"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Date"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Algorithm"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Credential"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Security-Token"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Signature"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-SignedHeaders"
                }
              ]
            },
            "/experiments/{id}": {
              "get": {
                "operationId": "GetExperiment",
                "description": "Gets information about the specified experiment.",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/GetExperimentResponse"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "ValidationException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ValidationException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "ResourceNotFoundException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ResourceNotFoundException"
                        }
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "description": "The ID of the experiment.",
                    "schema": {
                      "type": "string",
                      "pattern": "[\\S]+",
                      "maxLength": 64
                    }
                  }
                ]
              },
              "parameters": [
                {
                  "$ref": "#/components/parameters/X-Amz-Content-Sha256"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Date"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Algorithm"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Credential"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Security-Token"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Signature"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-SignedHeaders"
                }
              ],
              "delete": {
                "operationId": "StopExperiment",
                "description": "Stops the specified experiment.",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/StopExperimentResponse"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "ValidationException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ValidationException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "ResourceNotFoundException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ResourceNotFoundException"
                        }
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "description": "The ID of the experiment.",
                    "schema": {
                      "type": "string",
                      "pattern": "[\\S]+",
                      "maxLength": 64
                    }
                  }
                ]
              }
            },
            "/targetResourceTypes/{resourceType}": {
              "get": {
                "operationId": "GetTargetResourceType",
                "description": "Gets information about the specified resource type.",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/GetTargetResourceTypeResponse"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "ValidationException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ValidationException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "ResourceNotFoundException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ResourceNotFoundException"
                        }
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "resourceType",
                    "in": "path",
                    "required": true,
                    "description": "The resource type.",
                    "schema": {
                      "type": "string",
                      "pattern": "[\\S]+",
                      "maxLength": 128
                    }
                  }
                ]
              },
              "parameters": [
                {
                  "$ref": "#/components/parameters/X-Amz-Content-Sha256"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Date"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Algorithm"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Credential"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Security-Token"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Signature"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-SignedHeaders"
                }
              ]
            },
            "/actions": {
              "get": {
                "operationId": "ListActions",
                "description": "Lists the available FIS actions.",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ListActionsResponse"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "ValidationException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ValidationException"
                        }
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "maxResults",
                    "in": "query",
                    "required": false,
                    "description": "The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.",
                    "schema": {
                      "type": "integer",
                      "minimum": 1,
                      "maximum": 100
                    }
                  },
                  {
                    "name": "nextToken",
                    "in": "query",
                    "required": false,
                    "description": "The token for the next page of results.",
                    "schema": {
                      "type": "string",
                      "pattern": "[\\S]+",
                      "minLength": 1,
                      "maxLength": 1024
                    }
                  }
                ]
              },
              "parameters": [
                {
                  "$ref": "#/components/parameters/X-Amz-Content-Sha256"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Date"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Algorithm"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Credential"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Security-Token"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Signature"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-SignedHeaders"
                }
              ]
            },
            "/experiments": {
              "get": {
                "operationId": "ListExperiments",
                "description": "Lists your experiments.",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ListExperimentsResponse"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "ValidationException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ValidationException"
                        }
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "maxResults",
                    "in": "query",
                    "required": false,
                    "description": "The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.",
                    "schema": {
                      "type": "integer",
                      "minimum": 1,
                      "maximum": 100
                    }
                  },
                  {
                    "name": "nextToken",
                    "in": "query",
                    "required": false,
                    "description": "The token for the next page of results.",
                    "schema": {
                      "type": "string",
                      "pattern": "[\\S]+",
                      "minLength": 1,
                      "maxLength": 1024
                    }
                  }
                ]
              },
              "parameters": [
                {
                  "$ref": "#/components/parameters/X-Amz-Content-Sha256"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Date"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Algorithm"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Credential"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Security-Token"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Signature"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-SignedHeaders"
                }
              ],
              "post": {
                "operationId": "StartExperiment",
                "description": "Starts running an experiment from the specified experiment template.",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/StartExperimentResponse"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "ValidationException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ValidationException"
                        }
                      }
                    }
                  },
                  "481": {
                    "description": "ConflictException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ConflictException"
                        }
                      }
                    }
                  },
                  "482": {
                    "description": "ResourceNotFoundException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ResourceNotFoundException"
                        }
                      }
                    }
                  },
                  "483": {
                    "description": "ServiceQuotaExceededException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ServiceQuotaExceededException"
                        }
                      }
                    }
                  }
                },
                "parameters": [],
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "required": [
                          "clientToken",
                          "experimentTemplateId"
                        ],
                        "properties": {
                          "clientToken": {
                            "description": "Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.",
                            "type": "string",
                            "pattern": "[\\S]+",
                            "minLength": 1,
                            "maxLength": 1024
                          },
                          "experimentTemplateId": {
                            "description": "The ID of the experiment template.",
                            "type": "string",
                            "pattern": "[\\S]+",
                            "maxLength": 64
                          },
                          "tags": {
                            "description": "The tags to apply to the experiment.",
                            "type": "object",
                            "maxProperties": 50,
                            "additionalProperties": {
                              "$ref": "#/components/schemas/TagValue"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "/tags/{resourceArn}": {
              "get": {
                "operationId": "ListTagsForResource",
                "description": "Lists the tags for the specified resource.",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ListTagsForResourceResponse"
                        }
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "resourceArn",
                    "in": "path",
                    "required": true,
                    "description": "The Amazon Resource Name (ARN) of the resource.",
                    "schema": {
                      "type": "string",
                      "pattern": "[\\S]+",
                      "minLength": 20,
                      "maxLength": 2048
                    }
                  }
                ]
              },
              "parameters": [
                {
                  "$ref": "#/components/parameters/X-Amz-Content-Sha256"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Date"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Algorithm"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Credential"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Security-Token"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Signature"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-SignedHeaders"
                }
              ],
              "post": {
                "operationId": "TagResource",
                "description": "Applies the specified tags to the specified resource.",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/TagResourceResponse"
                        }
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "resourceArn",
                    "in": "path",
                    "required": true,
                    "description": "The Amazon Resource Name (ARN) of the resource.",
                    "schema": {
                      "type": "string",
                      "pattern": "[\\S]+",
                      "minLength": 20,
                      "maxLength": 2048
                    }
                  }
                ],
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "required": [
                          "tags"
                        ],
                        "properties": {
                          "tags": {
                            "description": "The tags for the resource.",
                            "type": "object",
                            "maxProperties": 50,
                            "additionalProperties": {
                              "$ref": "#/components/schemas/TagValue"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "delete": {
                "operationId": "UntagResource",
                "description": "Removes the specified tags from the specified resource.",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/UntagResourceResponse"
                        }
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "resourceArn",
                    "in": "path",
                    "required": true,
                    "description": "The Amazon Resource Name (ARN) of the resource.",
                    "schema": {
                      "type": "string",
                      "pattern": "[\\S]+",
                      "minLength": 20,
                      "maxLength": 2048
                    }
                  },
                  {
                    "name": "tagKeys",
                    "in": "query",
                    "required": false,
                    "description": "The tag keys to remove.",
                    "schema": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/TagKey"
                      }
                    }
                  }
                ]
              }
            },
            "/targetResourceTypes": {
              "get": {
                "operationId": "ListTargetResourceTypes",
                "description": "Lists the target resource types.",
                "responses": {
                  "200": {
                    "description": "Success",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ListTargetResourceTypesResponse"
                        }
                      }
                    }
                  },
                  "480": {
                    "description": "ValidationException",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/ValidationException"
                        }
                      }
                    }
                  }
                },
                "parameters": [
                  {
                    "name": "maxResults",
                    "in": "query",
                    "required": false,
                    "description": "The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.",
                    "schema": {
                      "type": "integer",
                      "minimum": 1,
                      "maximum": 100
                    }
                  },
                  {
                    "name": "nextToken",
                    "in": "query",
                    "required": false,
                    "description": "The token for the next page of results.",
                    "schema": {
                      "type": "string",
                      "pattern": "[\\S]+",
                      "minLength": 1,
                      "maxLength": 1024
                    }
                  }
                ]
              },
              "parameters": [
                {
                  "$ref": "#/components/parameters/X-Amz-Content-Sha256"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Date"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Algorithm"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Credential"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Security-Token"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-Signature"
                },
                {
                  "$ref": "#/components/parameters/X-Amz-SignedHeaders"
                }
              ]
            }
          },
          "components": {
            "parameters": {
              "X-Amz-Content-Sha256": {
                "name": "X-Amz-Content-Sha256",
                "in": "header",
                "schema": {
                  "type": "string"
                },
                "required": false
              },
              "X-Amz-Date": {
                "name": "X-Amz-Date",
                "in": "header",
                "schema": {
                  "type": "string"
                },
                "required": false
              },
              "X-Amz-Algorithm": {
                "name": "X-Amz-Algorithm",
                "in": "header",
                "schema": {
                  "type": "string"
                },
                "required": false
              },
              "X-Amz-Credential": {
                "name": "X-Amz-Credential",
                "in": "header",
                "schema": {
                  "type": "string"
                },
                "required": false
              },
              "X-Amz-Security-Token": {
                "name": "X-Amz-Security-Token",
                "in": "header",
                "schema": {
                  "type": "string"
                },
                "required": false
              },
              "X-Amz-Signature": {
                "name": "X-Amz-Signature",
                "in": "header",
                "schema": {
                  "type": "string"
                },
                "required": false
              },
              "X-Amz-SignedHeaders": {
                "name": "X-Amz-SignedHeaders",
                "in": "header",
                "schema": {
                  "type": "string"
                },
                "required": false
              }
            },
            "securitySchemes": {
              "hmac": {
                "type": "apiKey",
                "name": "Authorization",
                "in": "header",
                "description": "Amazon Signature authorization v4",
                "x-amazon-apigateway-authtype": "awsSigv4"
              }
            },
            "schemas": {
              "CreateExperimentTemplateResponse": {
                "type": "object",
                "properties": {
                  "experimentTemplate": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ExperimentTemplate"
                      },
                      {
                        "description": "Information about the experiment template."
                      }
                    ]
                  }
                }
              },
              "CreateExperimentTemplateStopConditionInput": {
                "type": "object",
                "required": [
                  "source"
                ],
                "properties": {
                  "source": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/StopConditionSource"
                      },
                      {
                        "description": "The source for the stop condition. Specify <code>aws:cloudwatch:alarm</code> if the stop condition is defined by a CloudWatch alarm. Specify <code>none</code> if there is no stop condition."
                      }
                    ]
                  },
                  "value": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/StopConditionValue"
                      },
                      {
                        "description": "The Amazon Resource Name (ARN) of the CloudWatch alarm. This is required if the source is a CloudWatch alarm."
                      }
                    ]
                  }
                },
                "description": "Specifies a stop condition for an experiment template."
              },
              "CreateExperimentTemplateTargetInput": {
                "type": "object",
                "required": [
                  "resourceType",
                  "selectionMode"
                ],
                "properties": {
                  "resourceType": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/TargetResourceTypeId"
                      },
                      {
                        "description": "The resource type. The resource type must be supported for the specified action."
                      }
                    ]
                  },
                  "resourceArns": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ResourceArnList"
                      },
                      {
                        "description": "The Amazon Resource Names (ARNs) of the resources."
                      }
                    ]
                  },
                  "resourceTags": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/TagMap"
                      },
                      {
                        "description": "The tags for the target resources."
                      }
                    ]
                  },
                  "filters": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ExperimentTemplateTargetFilterInputList"
                      },
                      {
                        "description": "The filters to apply to identify target resources using specific attributes."
                      }
                    ]
                  },
                  "selectionMode": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ExperimentTemplateTargetSelectionMode"
                      },
                      {
                        "description": "<p>Scopes the identified resources to a specific count of the resources at random, or a percentage of the resources. All identified resources are included in the target.</p> <ul> <li> <p>ALL - Run the action on all identified targets. This is the default.</p> </li> <li> <p>COUNT(n) - Run the action on the specified number of targets, chosen from the identified targets at random. For example, COUNT(1) selects one of the targets.</p> </li> <li> <p>PERCENT(n) - Run the action on the specified percentage of targets, chosen from the identified targets at random. For example, PERCENT(25) selects 25% of the targets.</p> </li> </ul>"
                      }
                    ]
                  },
                  "parameters": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ExperimentTemplateTargetParameterMap"
                      },
                      {
                        "description": "The resource type parameters."
                      }
                    ]
                  }
                },
                "description": "<p>Specifies a target for an experiment. You must specify at least one Amazon Resource Name (ARN) or at least one resource tag. You cannot specify both ARNs and tags.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/fis/latest/userguide/targets.html\">Targets</a> in the <i>Fault Injection Simulator User Guide</i>.</p>"
              },
              "CreateExperimentTemplateActionInput": {
                "type": "object",
                "required": [
                  "actionId"
                ],
                "properties": {
                  "actionId": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ActionId"
                      },
                      {
                        "description": "The ID of the action. The format of the action ID is: aws:<i>service-name</i>:<i>action-type</i>."
                      }
                    ]
                  },
                  "description": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ExperimentTemplateActionDescription"
                      },
                      {
                        "description": "A description for the action."
                      }
                    ]
                  },
                  "parameters": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ExperimentTemplateActionParameterMap"
                      },
                      {
                        "description": "The parameters for the action, if applicable."
                      }
                    ]
                  },
                  "targets": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ExperimentTemplateActionTargetMap"
                      },
                      {
                        "description": "The targets for the action."
                      }
                    ]
                  },
                  "startAfter": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ExperimentTemplateActionStartAfterList"
                      },
                      {
                        "description": "The name of the action that must be completed before the current action starts. Omit this parameter to run the action at the start of the experiment."
                      }
                    ]
                  }
                },
                "description": "<p>Specifies an action for an experiment template.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/fis/latest/userguide/actions.html\">Actions</a> in the <i>Fault Injection Simulator User Guide</i>.</p>"
              },
              "TagValue": {
                "type": "string",
                "pattern": "[\\s\\S]*",
                "maxLength": 256
              },
              "ExperimentTemplateCloudWatchLogsLogConfigurationInput": {
                "type": "object",
                "required": [
                  "logGroupArn"
                ],
                "properties": {
                  "logGroupArn": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/CloudWatchLogGroupArn"
                      },
                      {
                        "description": "The Amazon Resource Name (ARN) of the destination Amazon CloudWatch Logs log group."
                      }
                    ]
                  }
                },
                "description": "Specifies the configuration for experiment logging to Amazon CloudWatch Logs."
              },
              "ExperimentTemplateS3LogConfigurationInput": {
                "type": "object",
                "required": [
                  "bucketName"
                ],
                "properties": {
                  "bucketName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/S3BucketName"
                      },
                      {
                        "description": "The name of the destination bucket."
                      }
                    ]
                  },
                  "prefix": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/S3ObjectKey"
                      },
                      {
                        "description": "The bucket prefix."
                      }
                    ]
                  }
                },
                "description": "Specifies the configuration for experiment logging to Amazon S3."
              },
              "LogSchemaVersion": {
                "type": "integer"
              },
              "ValidationException": {},
              "ConflictException": {},
              "ResourceNotFoundException": {},
              "ServiceQuotaExceededException": {},
              "DeleteExperimentTemplateResponse": {
                "type": "object",
                "properties": {
                  "experimentTemplate": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ExperimentTemplate"
                      },
                      {
                        "description": "Information about the experiment template."
                      }
                    ]
                  }
                }
              },
              "GetActionResponse": {
                "type": "object",
                "properties": {
                  "action": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Action"
                      },
                      {
                        "description": "Information about the action."
                      }
                    ]
                  }
                }
              },
              "GetExperimentResponse": {
                "type": "object",
                "properties": {
                  "experiment": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Experiment"
                      },
                      {
                        "description": "Information about the experiment."
                      }
                    ]
                  }
                }
              },
              "GetExperimentTemplateResponse": {
                "type": "object",
                "properties": {
                  "experimentTemplate": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ExperimentTemplate"
                      },
                      {
                        "description": "Information about the experiment template."
                      }
                    ]
                  }
                }
              },
              "GetTargetResourceTypeResponse": {
                "type": "object",
                "properties": {
                  "targetResourceType": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/TargetResourceType"
                      },
                      {
                        "description": "Information about the resource type."
                      }
                    ]
                  }
                }
              },
              "ListActionsResponse": {
                "type": "object",
                "properties": {
                  "actions": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ActionSummaryList"
                      },
                      {
                        "description": "The actions."
                      }
                    ]
                  },
                  "nextToken": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/NextToken"
                      },
                      {
                        "description": "The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return."
                      }
                    ]
                  }
                }
              },
              "ListExperimentTemplatesResponse": {
                "type": "object",
                "properties": {
                  "experimentTemplates": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ExperimentTemplateSummaryList"
                      },
                      {
                        "description": "The experiment templates."
                      }
                    ]
                  },
                  "nextToken": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/NextToken"
                      },
                      {
                        "description": "The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return."
                      }
                    ]
                  }
                }
              },
              "ListExperimentsResponse": {
                "type": "object",
                "properties": {
                  "experiments": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ExperimentSummaryList"
                      },
                      {
                        "description": "The experiments."
                      }
                    ]
                  },
                  "nextToken": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/NextToken"
                      },
                      {
                        "description": "The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return."
                      }
                    ]
                  }
                }
              },
              "ListTagsForResourceResponse": {
                "type": "object",
                "properties": {
                  "tags": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/TagMap"
                      },
                      {
                        "description": "The tags for the resource."
                      }
                    ]
                  }
                }
              },
              "ListTargetResourceTypesResponse": {
                "type": "object",
                "properties": {
                  "targetResourceTypes": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/TargetResourceTypeSummaryList"
                      },
                      {
                        "description": "The target resource types."
                      }
                    ]
                  },
                  "nextToken": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/NextToken"
                      },
                      {
                        "description": "The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return."
                      }
                    ]
                  }
                }
              },
              "StartExperimentResponse": {
                "type": "object",
                "properties": {
                  "experiment": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Experiment"
                      },
                      {
                        "description": "Information about the experiment."
                      }
                    ]
                  }
                }
              },
              "StopExperimentResponse": {
                "type": "object",
                "properties": {
                  "experiment": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Experiment"
                      },
                      {
                        "description": "Information about the experiment."
                      }
                    ]
                  }
                }
              },
              "TagResourceResponse": {
                "type": "object",
                "properties": {}
              },
              "UntagResourceResponse": {
                "type": "object",
                "properties": {}
              },
              "TagKey": {
                "type": "string",
                "pattern": "[\\s\\S]+",
                "maxLength": 128
              },
              "UpdateExperimentTemplateResponse": {
                "type": "object",
                "properties": {
                  "experimentTemplate": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ExperimentTemplate"
                      },
                      {
                        "description": "Information about the experiment template."
                      }
                    ]
                  }
                }
              },
              "UpdateExperimentTemplateStopConditionInput": {
                "type": "object",
                "required": [
                  "source"
                ],
                "properties": {
                  "source": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/StopConditionSource"
                      },
                      {
                        "description": "The source for the stop condition. Specify <code>aws:cloudwatch:alarm</code> if the stop condition is defined by a CloudWatch alarm. Specify <code>none</code> if there is no stop condition."
                      }
                    ]
                  },
                  "value": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/StopConditionValue"
                      },
                      {
                        "description": "The Amazon Resource Name (ARN) of the CloudWatch alarm."
                      }
                    ]
                  }
                },
                "description": "Specifies a stop condition for an experiment. You can define a stop condition as a CloudWatch alarm."
              },
              "UpdateExperimentTemplateTargetInput": {
                "type": "object",
                "required": [
                  "resourceType",
                  "selectionMode"
                ],
                "properties": {
                  "resourceType": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/TargetResourceTypeId"
                      },
                      {
                        "description": "The resource type. The resource type must be supported for the specified action."
                      }
                    ]
                  },
                  "resourceArns": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ResourceArnList"
                      },
                      {
                        "description": "The Amazon Resource Names (ARNs) of the targets."
                      }
                    ]
                  },
                  "resourceTags": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/TagMap"
                      },
                      {
                        "description": "The tags for the target resources."
                      }
                    ]
                  },
                  "filters": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ExperimentTemplateTargetFilterInputList"
                      },
                      {
                        "description": "The filters to apply to identify target resources using specific attributes."
                      }
                    ]
                  },
                  "selectionMode": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ExperimentTemplateTargetSelectionMode"
                      },
                      {
                        "description": "Scopes the identified resources to a specific count or percentage."
                      }
                    ]
                  },
                  "parameters": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ExperimentTemplateTargetParameterMap"
                      },
                      {
                        "description": "The resource type parameters."
                      }
                    ]
                  }
                },
                "description": "Specifies a target for an experiment. You must specify at least one Amazon Resource Name (ARN) or at least one resource tag. You cannot specify both."
              },
              "UpdateExperimentTemplateActionInputItem": {
                "type": "object",
                "properties": {
                  "actionId": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ActionId"
                      },
                      {
                        "description": "The ID of the action."
                      }
                    ]
                  },
                  "description": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ExperimentTemplateActionDescription"
                      },
                      {
                        "description": "A description for the action."
                      }
                    ]
                  },
                  "parameters": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ExperimentTemplateActionParameterMap"
                      },
                      {
                        "description": "The parameters for the action, if applicable."
                      }
                    ]
                  },
                  "targets": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ExperimentTemplateActionTargetMap"
                      },
                      {
                        "description": "The targets for the action."
                      }
                    ]
                  },
                  "startAfter": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ExperimentTemplateActionStartAfterList"
                      },
                      {
                        "description": "The name of the action that must be completed before the current action starts. Omit this parameter to run the action at the start of the experiment."
                      }
                    ]
                  }
                },
                "description": "Specifies an action for an experiment template."
              },
              "ActionId": {
                "type": "string",
                "pattern": "[\\S]+",
                "maxLength": 128
              },
              "ActionDescription": {
                "type": "string",
                "pattern": "[\\s\\S]+",
                "maxLength": 512
              },
              "ActionParameterMap": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/ActionParameter"
                }
              },
              "ActionTargetMap": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/ActionTarget"
                }
              },
              "TagMap": {
                "type": "object",
                "maxProperties": 50,
                "additionalProperties": {
                  "$ref": "#/components/schemas/TagValue"
                }
              },
              "Action": {
                "type": "object",
                "properties": {
                  "id": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ActionId"
                      },
                      {
                        "description": "The ID of the action."
                      }
                    ]
                  },
                  "description": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ActionDescription"
                      },
                      {
                        "description": "The description for the action."
                      }
                    ]
                  },
                  "parameters": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ActionParameterMap"
                      },
                      {
                        "description": "The action parameters, if applicable."
                      }
                    ]
                  },
                  "targets": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ActionTargetMap"
                      },
                      {
                        "description": "The supported targets for the action."
                      }
                    ]
                  },
                  "tags": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/TagMap"
                      },
                      {
                        "description": "The tags for the action."
                      }
                    ]
                  }
                },
                "description": "Describes an action. For more information, see <a href=\"https://docs.aws.amazon.com/fis/latest/userguide/fis-actions-reference.html\">FIS actions</a> in the <i>Fault Injection Simulator User Guide</i>."
              },
              "ActionParameterDescription": {
                "type": "string",
                "pattern": "[\\s\\S]+",
                "maxLength": 512
              },
              "ActionParameterRequired": {
                "type": "boolean"
              },
              "ActionParameter": {
                "type": "object",
                "properties": {
                  "description": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ActionParameterDescription"
                      },
                      {
                        "description": "The parameter description."
                      }
                    ]
                  },
                  "required": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ActionParameterRequired"
                      },
                      {
                        "description": "Indicates whether the parameter is required."
                      }
                    ]
                  }
                },
                "description": "Describes a parameter for an action."
              },
              "ActionParameterName": {
                "type": "string",
                "pattern": "[\\S]+",
                "maxLength": 64
              },
              "ActionSummary": {
                "type": "object",
                "properties": {
                  "id": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ActionId"
                      },
                      {
                        "description": "The ID of the action."
                      }
                    ]
                  },
                  "description": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ActionDescription"
                      },
                      {
                        "description": "The description for the action."
                      }
                    ]
                  },
                  "targets": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ActionTargetMap"
                      },
                      {
                        "description": "The targets for the action."
                      }
                    ]
                  },
                  "tags": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/TagMap"
                      },
                      {
                        "description": "The tags for the action."
                      }
                    ]
                  }
                },
                "description": "Provides a summary of an action."
              },
              "ActionSummaryList": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ActionSummary"
                }
              },
              "TargetResourceTypeId": {
                "type": "string",
                "pattern": "[\\S]+",
                "maxLength": 128
              },
              "ActionTarget": {
                "type": "object",
                "properties": {
                  "resourceType": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/TargetResourceTypeId"
                      },
                      {
                        "description": "The resource type of the target."
                      }
                    ]
                  }
                },
                "description": "Describes a target for an action."
              },
              "ActionTargetName": {
                "type": "string",
                "pattern": "[\\S]+",
                "maxLength": 64
              },
              "ClientToken": {
                "type": "string",
                "pattern": "[\\S]+",
                "minLength": 1,
                "maxLength": 1024
              },
              "CloudWatchLogGroupArn": {
                "type": "string",
                "pattern": "[\\S]+",
                "minLength": 20,
                "maxLength": 2048
              },
              "ExperimentTemplateActionDescription": {
                "type": "string",
                "pattern": "[\\s\\S]+",
                "maxLength": 512
              },
              "ExperimentTemplateActionParameterMap": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/ExperimentTemplateActionParameter"
                }
              },
              "ExperimentTemplateActionTargetMap": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/ExperimentTemplateTargetName"
                }
              },
              "ExperimentTemplateActionStartAfterList": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ExperimentTemplateActionStartAfter"
                }
              },
              "CreateExperimentTemplateActionInputMap": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/CreateExperimentTemplateActionInput"
                }
              },
              "CreateExperimentTemplateLogConfigurationInput": {
                "type": "object",
                "required": [
                  "logSchemaVersion"
                ],
                "properties": {
                  "cloudWatchLogsConfiguration": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ExperimentTemplateCloudWatchLogsLogConfigurationInput"
                      },
                      {
                        "description": "The configuration for experiment logging to Amazon CloudWatch Logs."
                      }
                    ]
                  },
                  "s3Configuration": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ExperimentTemplateS3LogConfigurationInput"
                      },
                      {
                        "description": "The configuration for experiment logging to Amazon S3."
                      }
                    ]
                  },
                  "logSchemaVersion": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/LogSchemaVersion"
                      },
                      {
                        "description": "The schema version."
                      }
                    ]
                  }
                },
                "description": "Specifies the configuration for experiment logging."
              },
              "ExperimentTemplateDescription": {
                "type": "string",
                "pattern": "[\\s\\S]+",
                "maxLength": 512
              },
              "CreateExperimentTemplateStopConditionInputList": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CreateExperimentTemplateStopConditionInput"
                }
              },
              "CreateExperimentTemplateTargetInputMap": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/CreateExperimentTemplateTargetInput"
                }
              },
              "RoleArn": {
                "type": "string",
                "pattern": "[\\S]+",
                "minLength": 20,
                "maxLength": 2048
              },
              "CreateExperimentTemplateRequest": {
                "type": "object",
                "required": [
                  "clientToken",
                  "description",
                  "stopConditions",
                  "actions",
                  "roleArn"
                ],
                "title": "CreateExperimentTemplateRequest",
                "properties": {
                  "clientToken": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ClientToken"
                      },
                      {
                        "description": "Unique, case-sensitive identifier that you provide to ensure the idempotency of the request."
                      }
                    ]
                  },
                  "description": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ExperimentTemplateDescription"
                      },
                      {
                        "description": "A description for the experiment template."
                      }
                    ]
                  },
                  "stopConditions": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/CreateExperimentTemplateStopConditionInputList"
                      },
                      {
                        "description": "The stop conditions."
                      }
                    ]
                  },
                  "targets": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/CreateExperimentTemplateTargetInputMap"
                      },
                      {
                        "description": "The targets for the experiment."
                      }
                    ]
                  },
                  "actions": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/CreateExperimentTemplateActionInputMap"
                      },
                      {
                        "description": "The actions for the experiment."
                      }
                    ]
                  },
                  "roleArn": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/RoleArn"
                      },
                      {
                        "description": "The Amazon Resource Name (ARN) of an IAM role that grants the FIS service permission to perform service actions on your behalf."
                      }
                    ]
                  },
                  "tags": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/TagMap"
                      },
                      {
                        "description": "The tags to apply to the experiment template."
                      }
                    ]
                  },
                  "logConfiguration": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/CreateExperimentTemplateLogConfigurationInput"
                      },
                      {
                        "description": "The configuration for experiment logging."
                      }
                    ]
                  }
                }
              },
              "ExperimentTemplate": {
                "type": "object",
                "properties": {
                  "id": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ExperimentTemplateId"
                      },
                      {
                        "description": "The ID of the experiment template."
                      }
                    ]
                  },
                  "description": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ExperimentTemplateDescription"
                      },
                      {
                        "description": "The description for the experiment template."
                      }
                    ]
                  },
                  "targets": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ExperimentTemplateTargetMap"
                      },
                      {
                        "description": "The targets for the experiment."
                      }
                    ]
                  },
                  "actions": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ExperimentTemplateActionMap"
                      },
                      {
                        "description": "The actions for the experiment."
                      }
                    ]
                  },
                  "stopConditions": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ExperimentTemplateStopConditionList"
                      },
                      {
                        "description": "The stop conditions for the experiment."
                      }
                    ]
                  },
                  "creationTime": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/CreationTime"
                      },
                      {
                        "description": "The time the experiment template was created."
                      }
                    ]
                  },
                  "lastUpdateTime": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/LastUpdateTime"
                      },
                      {
                        "description": "The time the experiment template was last updated."
                      }
                    ]
                  },
                  "roleArn": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/RoleArn"
                      },
                      {
                        "description": "The Amazon Resource Name (ARN) of an IAM role."
                      }
                    ]
                  },
                  "tags": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/TagMap"
                      },
                      {
                        "description": "The tags for the experiment template."
                      }
                    ]
                  },
                  "logConfiguration": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ExperimentTemplateLogConfiguration"
                      },
                      {
                        "description": "The configuration for experiment logging."
                      }
                    ]
                  }
                },
                "description": "Describes an experiment template."
              },
              "StopConditionSource": {
                "type": "string",
                "pattern": "[\\S]+",
                "maxLength": 64
              },
              "StopConditionValue": {
                "type": "string",
                "pattern": "[\\s\\S]+",
                "minLength": 20,
                "maxLength": 2048
              },
              "ResourceArnList": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ResourceArn"
                },
                "maxItems": 5
              },
              "ExperimentTemplateTargetFilterInputList": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ExperimentTemplateTargetInputFilter"
                }
              },
              "ExperimentTemplateTargetSelectionMode": {
                "type": "string",
                "pattern": "[\\S]+",
                "maxLength": 64
              },
              "ExperimentTemplateTargetParameterMap": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/ExperimentTemplateTargetParameterValue"
                }
              },
              "CreationTime": {
                "type": "string",
                "format": "date-time"
              },
              "ExperimentTemplateId": {
                "type": "string",
                "pattern": "[\\S]+",
                "maxLength": 64
              },
              "DeleteExperimentTemplateRequest": {
                "type": "object",
                "title": "DeleteExperimentTemplateRequest",
                "properties": {}
              },
              "ExperimentId": {
                "type": "string",
                "pattern": "[\\S]+",
                "maxLength": 64
              },
              "ExperimentState": {
                "type": "object",
                "properties": {
                  "status": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ExperimentStatus"
                      },
                      {
                        "description": "The state of the experiment."
                      }
                    ]
                  },
                  "reason": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ExperimentStatusReason"
                      },
                      {
                        "description": "The reason for the state."
                      }
                    ]
                  }
                },
                "description": "Describes the state of an experiment."
              },
              "ExperimentTargetMap": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/ExperimentTarget"
                }
              },
              "ExperimentActionMap": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/ExperimentAction"
                }
              },
              "ExperimentStopConditionList": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ExperimentStopCondition"
                }
              },
              "ExperimentStartTime": {
                "type": "string",
                "format": "date-time"
              },
              "ExperimentEndTime": {
                "type": "string",
                "format": "date-time"
              },
              "ExperimentLogConfiguration": {
                "type": "object",
                "properties": {
                  "cloudWatchLogsConfiguration": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ExperimentCloudWatchLogsLogConfiguration"
                      },
                      {
                        "description": "The configuration for experiment logging to Amazon CloudWatch Logs."
                      }
                    ]
                  },
                  "s3Configuration": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ExperimentS3LogConfiguration"
                      },
                      {
                        "description": "The configuration for experiment logging to Amazon S3."
                      }
                    ]
                  },
                  "logSchemaVersion": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/LogSchemaVersion"
                      },
                      {
                        "description": "The schema version."
                      }
                    ]
                  }
                },
                "description": "Describes the configuration for experiment logging."
              },
              "Experiment": {
                "type": "object",
                "properties": {
                  "id": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ExperimentId"
                      },
                      {
                        "description": "The ID of the experiment."
                      }
                    ]
                  },
                  "experimentTemplateId": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ExperimentTemplateId"
                      },
                      {
                        "description": "The ID of the experiment template."
                      }
                    ]
                  },
                  "roleArn": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/RoleArn"
                      },
                      {
                        "description": "The Amazon Resource Name (ARN) of an IAM role that grants the FIS service permission to perform service actions on your behalf."
                      }
                    ]
                  },
                  "state": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ExperimentState"
                      },
                      {
                        "description": "The state of the experiment."
                      }
                    ]
                  },
                  "targets": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ExperimentTargetMap"
                      },
                      {
                        "description": "The targets for the experiment."
                      }
                    ]
                  },
                  "actions": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ExperimentActionMap"
                      },
                      {
                        "description": "The actions for the experiment."
                      }
                    ]
                  },
                  "stopConditions": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ExperimentStopConditionList"
                      },
                      {
                        "description": "The stop conditions for the experiment."
                      }
                    ]
                  },
                  "creationTime": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/CreationTime"
                      },
                      {
                        "description": "The time that the experiment was created."
                      }
                    ]
                  },
                  "startTime": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ExperimentStartTime"
                      },
                      {
                        "description": "The time that the experiment started."
                      }
                    ]
                  },
                  "endTime": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ExperimentEndTime"
                      },
                      {
                        "description": "The time that the experiment ended."
                      }
                    ]
                  },
                  "tags": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/TagMap"
                      },
                      {
                        "description": "The tags for the experiment."
                      }
                    ]
                  },
                  "logConfiguration": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ExperimentLogConfiguration"
                      },
                      {
                        "description": "The configuration for experiment logging."
                      }
                    ]
                  }
                },
                "description": "Describes an experiment."
              },
              "ExperimentActionDescription": {
                "type": "string",
                "pattern": "[\\s\\S]+",
                "maxLength": 512
              },
              "ExperimentActionParameterMap": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/ExperimentActionParameter"
                }
              },
              "ExperimentActionTargetMap": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/ExperimentTargetName"
                }
              },
              "ExperimentActionStartAfterList": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ExperimentActionStartAfter"
                }
              },
              "ExperimentActionState": {
                "type": "object",
                "properties": {
                  "status": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ExperimentActionStatus"
                      },
                      {
                        "description": "The state of the action."
                      }
                    ]
                  },
                  "reason": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ExperimentActionStatusReason"
                      },
                      {
                        "description": "The reason for the state."
                      }
                    ]
                  }
                },
                "description": "Describes the state of an action."
              },
              "ExperimentActionStartTime": {
                "type": "string",
                "format": "date-time"
              },
              "ExperimentActionEndTime": {
                "type": "string",
                "format": "date-time"
              },
              "ExperimentAction": {
                "type": "object",
                "properties": {
                  "actionId": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ActionId"
                      },
                      {
                        "description": "The ID of the action."
                      }
                    ]
                  },
                  "description": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ExperimentActionDescription"
                      },
                      {
                        "description": "The description for the action."
                      }
                    ]
                  },
                  "parameters": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ExperimentActionParameterMap"
                      },
                      {
                        "description": "The parameters for the action."
                      }
                    ]
                  },
                  "targets": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ExperimentActionTargetMap"
                      },
                      {
                        "description": "The targets for the action."
                      }
                    ]
                  },
                  "startAfter": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ExperimentActionStartAfterList"
                      },
                      {
                        "description": "The name of the action that must be completed before this action starts."
                      }
                    ]
                  },
                  "state": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ExperimentActionState"
                      },
                      {
                        "description": "The state of the action."
                      }
                    ]
                  },
                  "startTime": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ExperimentActionStartTime"
                      },
                      {
                        "description": "The time that the action started."
                      }
                    ]
                  },
                  "endTime": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ExperimentActionEndTime"
                      },
                      {
                        "description": "The time that the action ended."
                      }
                    ]
                  }
                },
                "description": "Describes the action for an experiment."
              },
              "ExperimentActionName": {
                "type": "string",
                "pattern": "[\\S]+",
                "maxLength": 64
              },
              "ExperimentActionParameter": {
                "type": "string",
                "pattern": "[\\S]+",
                "maxLength": 1024
              },
              "ExperimentActionParameterName": {
                "type": "string",
                "pattern": "[\\S]+",
                "maxLength": 64
              },
              "ExperimentActionStartAfter": {
                "type": "string",
                "pattern": "[\\S]+",
                "maxLength": 64
              },
              "ExperimentActionStatus": {
                "type": "string",
                "enum": [
                  "pending",
                  "initiating",
                  "running",
                  "completed",
                  "cancelled",
                  "stopping",
                  "stopped",
                  "failed"
                ]
              },
              "ExperimentActionStatusReason": {
                "type": "string",
                "pattern": "[\\s\\S]+",
                "maxLength": 512
              },
              "ExperimentTargetName": {
                "type": "string",
                "pattern": "[\\S]+",
                "maxLength": 64
              },
              "ExperimentActionTargetName": {
                "type": "string",
                "pattern": "[\\S]+",
                "maxLength": 64
              },
              "ExperimentCloudWatchLogsLogConfiguration": {
                "type": "object",
                "properties": {
                  "logGroupArn": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/CloudWatchLogGroupArn"
                      },
                      {
                        "description": "The Amazon Resource Name (ARN) of the destination Amazon CloudWatch Logs log group."
                      }
                    ]
                  }
                },
                "description": "Describes the configuration for experiment logging to Amazon CloudWatch Logs."
              },
              "ExperimentS3LogConfiguration": {
                "type": "object",
                "properties": {
                  "bucketName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/S3BucketName"
                      },
                      {
                        "description": "The name of the destination bucket."
                      }
                    ]
                  },
                  "prefix": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/S3ObjectKey"
                      },
                      {
                        "description": "The bucket prefix."
                      }
                    ]
                  }
                },
                "description": "Describes the configuration for experiment logging to Amazon S3."
              },
              "S3BucketName": {
                "type": "string",
                "pattern": "[\\S]+",
                "minLength": 3,
                "maxLength": 63
              },
              "S3ObjectKey": {
                "type": "string",
                "pattern": "[\\s\\S]+",
                "minLength": 1,
                "maxLength": 1024
              },
              "ExperimentStatus": {
                "type": "string",
                "enum": [
                  "pending",
                  "initiating",
                  "running",
                  "completed",
                  "stopping",
                  "stopped",
                  "failed"
                ]
              },
              "ExperimentStatusReason": {
                "type": "string",
                "pattern": "[\\s\\S]+",
                "maxLength": 512
              },
              "ExperimentStopCondition": {
                "type": "object",
                "properties": {
                  "source": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/StopConditionSource"
                      },
                      {
                        "description": "The source for the stop condition."
                      }
                    ]
                  },
                  "value": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/StopConditionValue"
                      },
                      {
                        "description": "The Amazon Resource Name (ARN) of the CloudWatch alarm, if applicable."
                      }
                    ]
                  }
                },
                "description": "Describes the stop condition for an experiment."
              },
              "ExperimentSummary": {
                "type": "object",
                "properties": {
                  "id": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ExperimentId"
                      },
                      {
                        "description": "The ID of the experiment."
                      }
                    ]
                  },
                  "experimentTemplateId": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ExperimentTemplateId"
                      },
                      {
                        "description": "The ID of the experiment template."
                      }
                    ]
                  },
                  "state": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ExperimentState"
                      },
                      {
                        "description": "The state of the experiment."
                      }
                    ]
                  },
                  "creationTime": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/CreationTime"
                      },
                      {
                        "description": "The time that the experiment was created."
                      }
                    ]
                  },
                  "tags": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/TagMap"
                      },
                      {
                        "description": "The tags for the experiment."
                      }
                    ]
                  }
                },
                "description": "Provides a summary of an experiment."
              },
              "ExperimentSummaryList": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ExperimentSummary"
                }
              },
              "ExperimentTargetFilterList": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ExperimentTargetFilter"
                }
              },
              "ExperimentTargetSelectionMode": {
                "type": "string",
                "pattern": "[\\S]+",
                "maxLength": 64
              },
              "ExperimentTargetParameterMap": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/ExperimentTargetParameterValue"
                }
              },
              "ExperimentTarget": {
                "type": "object",
                "properties": {
                  "resourceType": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/TargetResourceTypeId"
                      },
                      {
                        "description": "The resource type."
                      }
                    ]
                  },
                  "resourceArns": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ResourceArnList"
                      },
                      {
                        "description": "The Amazon Resource Names (ARNs) of the resources."
                      }
                    ]
                  },
                  "resourceTags": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/TagMap"
                      },
                      {
                        "description": "The tags for the target resources."
                      }
                    ]
                  },
                  "filters": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ExperimentTargetFilterList"
                      },
                      {
                        "description": "The filters to apply to identify target resources using specific attributes."
                      }
                    ]
                  },
                  "selectionMode": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ExperimentTargetSelectionMode"
                      },
                      {
                        "description": "Scopes the identified resources to a specific count or percentage."
                      }
                    ]
                  },
                  "parameters": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ExperimentTargetParameterMap"
                      },
                      {
                        "description": "The resource type parameters."
                      }
                    ]
                  }
                },
                "description": "Describes a target for an experiment."
              },
              "ExperimentTargetFilterPath": {
                "type": "string",
                "pattern": "[\\S]+",
                "maxLength": 256
              },
              "ExperimentTargetFilterValues": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ExperimentTargetFilterValue"
                }
              },
              "ExperimentTargetFilter": {
                "type": "object",
                "properties": {
                  "path": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ExperimentTargetFilterPath"
                      },
                      {
                        "description": "The attribute path for the filter."
                      }
                    ]
                  },
                  "values": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ExperimentTargetFilterValues"
                      },
                      {
                        "description": "The attribute values for the filter."
                      }
                    ]
                  }
                },
                "description": "Describes a filter used for the target resources in an experiment."
              },
              "ExperimentTargetFilterValue": {
                "type": "string",
                "pattern": "[\\S]+",
                "maxLength": 128
              },
              "ExperimentTargetParameterValue": {
                "type": "string",
                "minLength": 1,
                "maxLength": 1024
              },
              "ExperimentTargetParameterName": {
                "type": "string",
                "pattern": "[\\S]+",
                "maxLength": 64
              },
              "ExperimentTemplateTargetMap": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/ExperimentTemplateTarget"
                }
              },
              "ExperimentTemplateActionMap": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/ExperimentTemplateAction"
                }
              },
              "ExperimentTemplateStopConditionList": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ExperimentTemplateStopCondition"
                }
              },
              "LastUpdateTime": {
                "type": "string",
                "format": "date-time"
              },
              "ExperimentTemplateLogConfiguration": {
                "type": "object",
                "properties": {
                  "cloudWatchLogsConfiguration": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ExperimentTemplateCloudWatchLogsLogConfiguration"
                      },
                      {
                        "description": "The configuration for experiment logging to Amazon CloudWatch Logs."
                      }
                    ]
                  },
                  "s3Configuration": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ExperimentTemplateS3LogConfiguration"
                      },
                      {
                        "description": "The configuration for experiment logging to Amazon S3."
                      }
                    ]
                  },
                  "logSchemaVersion": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/LogSchemaVersion"
                      },
                      {
                        "description": "The schema version."
                      }
                    ]
                  }
                },
                "description": "Describes the configuration for experiment logging."
              },
              "ExperimentTemplateAction": {
                "type": "object",
                "properties": {
                  "actionId": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ActionId"
                      },
                      {
                        "description": "The ID of the action."
                      }
                    ]
                  },
                  "description": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ExperimentTemplateActionDescription"
                      },
                      {
                        "description": "A description for the action."
                      }
                    ]
                  },
                  "parameters": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ExperimentTemplateActionParameterMap"
                      },
                      {
                        "description": "The parameters for the action."
                      }
                    ]
                  },
                  "targets": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ExperimentTemplateActionTargetMap"
                      },
                      {
                        "description": "The targets for the action."
                      }
                    ]
                  },
                  "startAfter": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ExperimentTemplateActionStartAfterList"
                      },
                      {
                        "description": "The name of the action that must be completed before the current action starts."
                      }
                    ]
                  }
                },
                "description": "Describes an action for an experiment template."
              },
              "ExperimentTemplateActionName": {
                "type": "string",
                "pattern": "[\\S]+",
                "maxLength": 64
              },
              "ExperimentTemplateActionParameter": {
                "type": "string",
                "pattern": "[\\S]+",
                "maxLength": 1024
              },
              "ExperimentTemplateActionParameterName": {
                "type": "string",
                "pattern": "[\\S]+",
                "maxLength": 64
              },
              "ExperimentTemplateActionStartAfter": {
                "type": "string",
                "pattern": "[\\S]+",
                "maxLength": 64
              },
              "ExperimentTemplateTargetName": {
                "type": "string",
                "pattern": "[\\S]+",
                "maxLength": 64
              },
              "ExperimentTemplateActionTargetName": {
                "type": "string",
                "pattern": "[\\S]+",
                "maxLength": 64
              },
              "ExperimentTemplateCloudWatchLogsLogConfiguration": {
                "type": "object",
                "properties": {
                  "logGroupArn": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/CloudWatchLogGroupArn"
                      },
                      {
                        "description": "The Amazon Resource Name (ARN) of the destination Amazon CloudWatch Logs log group."
                      }
                    ]
                  }
                },
                "description": "Describes the configuration for experiment logging to Amazon CloudWatch Logs."
              },
              "ExperimentTemplateS3LogConfiguration": {
                "type": "object",
                "properties": {
                  "bucketName": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/S3BucketName"
                      },
                      {
                        "description": "The name of the destination bucket."
                      }
                    ]
                  },
                  "prefix": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/S3ObjectKey"
                      },
                      {
                        "description": "The bucket prefix."
                      }
                    ]
                  }
                },
                "description": "Describes the configuration for experiment logging to Amazon S3."
              },
              "ExperimentTemplateStopCondition": {
                "type": "object",
                "properties": {
                  "source": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/StopConditionSource"
                      },
                      {
                        "description": "The source for the stop condition."
                      }
                    ]
                  },
                  "value": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/StopConditionValue"
                      },
                      {
                        "description": "The Amazon Resource Name (ARN) of the CloudWatch alarm, if applicable."
                      }
                    ]
                  }
                },
                "description": "Describes a stop condition for an experiment template."
              },
              "ExperimentTemplateSummary": {
                "type": "object",
                "properties": {
                  "id": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ExperimentTemplateId"
                      },
                      {
                        "description": "The ID of the experiment template."
                      }
                    ]
                  },
                  "description": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ExperimentTemplateDescription"
                      },
                      {
                        "description": "The description of the experiment template."
                      }
                    ]
                  },
                  "creationTime": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/CreationTime"
                      },
                      {
                        "description": "The time that the experiment template was created."
                      }
                    ]
                  },
                  "lastUpdateTime": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/LastUpdateTime"
                      },
                      {
                        "description": "The time that the experiment template was last updated."
                      }
                    ]
                  },
                  "tags": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/TagMap"
                      },
                      {
                        "description": "The tags for the experiment template."
                      }
                    ]
                  }
                },
                "description": "Provides a summary of an experiment template."
              },
              "ExperimentTemplateSummaryList": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ExperimentTemplateSummary"
                }
              },
              "ExperimentTemplateTargetFilterList": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ExperimentTemplateTargetFilter"
                }
              },
              "ExperimentTemplateTarget": {
                "type": "object",
                "properties": {
                  "resourceType": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/TargetResourceTypeId"
                      },
                      {
                        "description": "The resource type."
                      }
                    ]
                  },
                  "resourceArns": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ResourceArnList"
                      },
                      {
                        "description": "The Amazon Resource Names (ARNs) of the targets."
                      }
                    ]
                  },
                  "resourceTags": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/TagMap"
                      },
                      {
                        "description": "The tags for the target resources."
                      }
                    ]
                  },
                  "filters": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ExperimentTemplateTargetFilterList"
                      },
                      {
                        "description": "The filters to apply to identify target resources using specific attributes."
                      }
                    ]
                  },
                  "selectionMode": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ExperimentTemplateTargetSelectionMode"
                      },
                      {
                        "description": "Scopes the identified resources to a specific count or percentage."
                      }
                    ]
                  },
                  "parameters": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ExperimentTemplateTargetParameterMap"
                      },
                      {
                        "description": "The resource type parameters."
                      }
                    ]
                  }
                },
                "description": "Describes a target for an experiment template."
              },
              "ExperimentTemplateTargetFilterPath": {
                "type": "string",
                "pattern": "[\\S]+",
                "maxLength": 256
              },
              "ExperimentTemplateTargetFilterValues": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ExperimentTemplateTargetFilterValue"
                }
              },
              "ExperimentTemplateTargetFilter": {
                "type": "object",
                "properties": {
                  "path": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ExperimentTemplateTargetFilterPath"
                      },
                      {
                        "description": "The attribute path for the filter."
                      }
                    ]
                  },
                  "values": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ExperimentTemplateTargetFilterValues"
                      },
                      {
                        "description": "The attribute values for the filter."
                      }
                    ]
                  }
                },
                "description": "Describes a filter used for the target resources in an experiment template."
              },
              "ExperimentTemplateTargetInputFilter": {
                "type": "object",
                "required": [
                  "path",
                  "values"
                ],
                "properties": {
                  "path": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ExperimentTemplateTargetFilterPath"
                      },
                      {
                        "description": "The attribute path for the filter."
                      }
                    ]
                  },
                  "values": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ExperimentTemplateTargetFilterValues"
                      },
                      {
                        "description": "The attribute values for the filter."
                      }
                    ]
                  }
                },
                "description": "<p>Specifies a filter used for the target resource input in an experiment template.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/fis/latest/userguide/targets.html#target-filters\">Resource filters</a> in the <i>Fault Injection Simulator User Guide</i>.</p>"
              },
              "ExperimentTemplateTargetFilterValue": {
                "type": "string",
                "pattern": "[\\S]+",
                "maxLength": 128
              },
              "ExperimentTemplateTargetParameterValue": {
                "type": "string",
                "pattern": "^[\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]+$",
                "minLength": 1,
                "maxLength": 1024
              },
              "ExperimentTemplateTargetParameterName": {
                "type": "string",
                "pattern": "[\\S]+",
                "maxLength": 64
              },
              "GetActionRequest": {
                "type": "object",
                "title": "GetActionRequest",
                "properties": {}
              },
              "GetExperimentRequest": {
                "type": "object",
                "title": "GetExperimentRequest",
                "properties": {}
              },
              "GetExperimentTemplateRequest": {
                "type": "object",
                "title": "GetExperimentTemplateRequest",
                "properties": {}
              },
              "GetTargetResourceTypeRequest": {
                "type": "object",
                "title": "GetTargetResourceTypeRequest",
                "properties": {}
              },
              "TargetResourceType": {
                "type": "object",
                "properties": {
                  "resourceType": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/TargetResourceTypeId"
                      },
                      {
                        "description": "The resource type."
                      }
                    ]
                  },
                  "description": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/TargetResourceTypeDescription"
                      },
                      {
                        "description": "A description of the resource type."
                      }
                    ]
                  },
                  "parameters": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/TargetResourceTypeParameterMap"
                      },
                      {
                        "description": "The parameters for the resource type."
                      }
                    ]
                  }
                },
                "description": "Describes a resource type."
              },
              "ListActionsMaxResults": {
                "type": "integer",
                "minimum": 1,
                "maximum": 100
              },
              "NextToken": {
                "type": "string",
                "pattern": "[\\S]+",
                "minLength": 1,
                "maxLength": 1024
              },
              "ListActionsRequest": {
                "type": "object",
                "title": "ListActionsRequest",
                "properties": {}
              },
              "ListExperimentTemplatesMaxResults": {
                "type": "integer",
                "minimum": 1,
                "maximum": 100
              },
              "ListExperimentTemplatesRequest": {
                "type": "object",
                "title": "ListExperimentTemplatesRequest",
                "properties": {}
              },
              "ListExperimentsMaxResults": {
                "type": "integer",
                "minimum": 1,
                "maximum": 100
              },
              "ListExperimentsRequest": {
                "type": "object",
                "title": "ListExperimentsRequest",
                "properties": {}
              },
              "ResourceArn": {
                "type": "string",
                "pattern": "[\\S]+",
                "minLength": 20,
                "maxLength": 2048
              },
              "ListTagsForResourceRequest": {
                "type": "object",
                "title": "ListTagsForResourceRequest",
                "properties": {}
              },
              "ListTargetResourceTypesMaxResults": {
                "type": "integer",
                "minimum": 1,
                "maximum": 100
              },
              "ListTargetResourceTypesRequest": {
                "type": "object",
                "title": "ListTargetResourceTypesRequest",
                "properties": {}
              },
              "TargetResourceTypeSummaryList": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/TargetResourceTypeSummary"
                }
              },
              "StartExperimentRequest": {
                "type": "object",
                "required": [
                  "clientToken",
                  "experimentTemplateId"
                ],
                "title": "StartExperimentRequest",
                "properties": {
                  "clientToken": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ClientToken"
                      },
                      {
                        "description": "Unique, case-sensitive identifier that you provide to ensure the idempotency of the request."
                      }
                    ]
                  },
                  "experimentTemplateId": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ExperimentTemplateId"
                      },
                      {
                        "description": "The ID of the experiment template."
                      }
                    ]
                  },
                  "tags": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/TagMap"
                      },
                      {
                        "description": "The tags to apply to the experiment."
                      }
                    ]
                  }
                }
              },
              "StopExperimentRequest": {
                "type": "object",
                "title": "StopExperimentRequest",
                "properties": {}
              },
              "TagKeyList": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/TagKey"
                }
              },
              "TagResourceRequest": {
                "type": "object",
                "required": [
                  "tags"
                ],
                "title": "TagResourceRequest",
                "properties": {
                  "tags": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/TagMap"
                      },
                      {
                        "description": "The tags for the resource."
                      }
                    ]
                  }
                }
              },
              "TargetResourceTypeDescription": {
                "type": "string",
                "pattern": "[\\s\\S]+",
                "maxLength": 512
              },
              "TargetResourceTypeParameterMap": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/TargetResourceTypeParameter"
                }
              },
              "TargetResourceTypeParameterDescription": {
                "type": "string",
                "pattern": "[\\s\\S]+",
                "maxLength": 512
              },
              "TargetResourceTypeParameterRequired": {
                "type": "boolean"
              },
              "TargetResourceTypeParameter": {
                "type": "object",
                "properties": {
                  "description": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/TargetResourceTypeParameterDescription"
                      },
                      {
                        "description": "A description of the parameter."
                      }
                    ]
                  },
                  "required": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/TargetResourceTypeParameterRequired"
                      },
                      {
                        "description": "Indicates whether the parameter is required."
                      }
                    ]
                  }
                },
                "description": "Describes the parameters for a resource type. Use parameters to determine which tasks are identified during target resolution."
              },
              "TargetResourceTypeParameterName": {
                "type": "string",
                "pattern": "[\\S]+",
                "maxLength": 64
              },
              "TargetResourceTypeSummary": {
                "type": "object",
                "properties": {
                  "resourceType": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/TargetResourceTypeId"
                      },
                      {
                        "description": "The resource type."
                      }
                    ]
                  },
                  "description": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/TargetResourceTypeDescription"
                      },
                      {
                        "description": "A description of the resource type."
                      }
                    ]
                  }
                },
                "description": "Describes a resource type."
              },
              "UntagResourceRequest": {
                "type": "object",
                "title": "UntagResourceRequest",
                "properties": {}
              },
              "UpdateExperimentTemplateActionInputMap": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/UpdateExperimentTemplateActionInputItem"
                }
              },
              "UpdateExperimentTemplateLogConfigurationInput": {
                "type": "object",
                "properties": {
                  "cloudWatchLogsConfiguration": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ExperimentTemplateCloudWatchLogsLogConfigurationInput"
                      },
                      {
                        "description": "The configuration for experiment logging to Amazon CloudWatch Logs."
                      }
                    ]
                  },
                  "s3Configuration": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ExperimentTemplateS3LogConfigurationInput"
                      },
                      {
                        "description": "The configuration for experiment logging to Amazon S3."
                      }
                    ]
                  },
                  "logSchemaVersion": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/LogSchemaVersion"
                      },
                      {
                        "description": "The schema version."
                      }
                    ]
                  }
                },
                "description": "Specifies the configuration for experiment logging."
              },
              "UpdateExperimentTemplateStopConditionInputList": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/UpdateExperimentTemplateStopConditionInput"
                }
              },
              "UpdateExperimentTemplateTargetInputMap": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/UpdateExperimentTemplateTargetInput"
                }
              },
              "UpdateExperimentTemplateRequest": {
                "type": "object",
                "title": "UpdateExperimentTemplateRequest",
                "properties": {
                  "description": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ExperimentTemplateDescription"
                      },
                      {
                        "description": "A description for the template."
                      }
                    ]
                  },
                  "stopConditions": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/UpdateExperimentTemplateStopConditionInputList"
                      },
                      {
                        "description": "The stop conditions for the experiment."
                      }
                    ]
                  },
                  "targets": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/UpdateExperimentTemplateTargetInputMap"
                      },
                      {
                        "description": "The targets for the experiment."
                      }
                    ]
                  },
                  "actions": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/UpdateExperimentTemplateActionInputMap"
                      },
                      {
                        "description": "The actions for the experiment."
                      }
                    ]
                  },
                  "roleArn": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/RoleArn"
                      },
                      {
                        "description": "The Amazon Resource Name (ARN) of an IAM role that grants the FIS service permission to perform service actions on your behalf."
                      }
                    ]
                  },
                  "logConfiguration": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/UpdateExperimentTemplateLogConfigurationInput"
                      },
                      {
                        "description": "The configuration for experiment logging."
                      }
                    ]
                  }
                }
              }
            }
          },
          "security": [
            {
              "hmac": []
            }
          ]
        }
        // Exercise and evaluate
        assert.ok(typeof schema === 'object')
    })
})

